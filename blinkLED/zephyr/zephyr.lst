
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	48 1a 00 20 75 18 00 00 01 5f 00 00 2d 18 00 00     H.. u...._..-...
  10:	2d 18 00 00 2d 18 00 00 2d 18 00 00 2d 18 00 00     -...-...-...-...
	...
  2c:	f1 14 00 00 2d 18 00 00 00 00 00 00 95 14 00 00     ....-...........
  3c:	2d 18 00 00                                         -...

00000040 <_irq_vector_table>:
  40:	81 15 00 00 81 15 00 00 81 15 00 00 81 15 00 00     ................
  50:	81 15 00 00 81 15 00 00 81 15 00 00 81 15 00 00     ................
  60:	81 15 00 00 81 15 00 00 81 15 00 00 81 15 00 00     ................
  70:	81 15 00 00 81 15 00 00 81 15 00 00 81 15 00 00     ................
  80:	81 15 00 00 81 15 00 00 81 15 00 00 81 15 00 00     ................
  90:	81 15 00 00 81 15 00 00 81 15 00 00 81 15 00 00     ................
  a0:	81 15 00 00 81 15 00 00 81 15 00 00 81 15 00 00     ................
  b0:	81 15 00 00 81 15 00 00 81 15 00 00 81 15 00 00     ................
  c0:	81 15 00 00 81 15 00 00 81 15 00 00 81 15 00 00     ................
  d0:	81 15 00 00 81 15 00 00 81 15 00 00 81 15 00 00     ................
  e0:	81 15 00 00 81 15 00 00 81 15 00 00 81 15 00 00     ................
  f0:	81 15 00 00 81 15 00 00 81 15 00 00 81 15 00 00     ................
 100:	81 15 00 00 81 15 00 00 81 15 00 00 81 15 00 00     ................
 110:	81 15 00 00 81 15 00 00 81 15 00 00 81 15 00 00     ................
 120:	81 15 00 00 81 15 00 00 81 15 00 00 81 15 00 00     ................
 130:	81 15 00 00 81 15 00 00 81 15 00 00 81 15 00 00     ................
 140:	81 15 00 00 81 15 00 00 81 15 00 00 81 15 00 00     ................
 150:	81 15 00 00                                         ....

Disassembly of section text:

00000154 <__aeabi_uldivmod>:
     154:	b953      	cbnz	r3, 16c <__aeabi_uldivmod+0x18>
     156:	b94a      	cbnz	r2, 16c <__aeabi_uldivmod+0x18>
     158:	2900      	cmp	r1, #0
     15a:	bf08      	it	eq
     15c:	2800      	cmpeq	r0, #0
     15e:	bf1c      	itt	ne
     160:	f04f 31ff 	movne.w	r1, #4294967295
     164:	f04f 30ff 	movne.w	r0, #4294967295
     168:	f000 b80c 	b.w	184 <__aeabi_idiv0>
     16c:	f1ad 0c08 	sub.w	ip, sp, #8
     170:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     174:	f000 f808 	bl	188 <__udivmoddi4>
     178:	f8dd e004 	ldr.w	lr, [sp, #4]
     17c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     180:	b004      	add	sp, #16
     182:	4770      	bx	lr

00000184 <__aeabi_idiv0>:
     184:	4770      	bx	lr
     186:	bf00      	nop

00000188 <__udivmoddi4>:
     188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     18c:	4686      	mov	lr, r0
     18e:	468c      	mov	ip, r1
     190:	4608      	mov	r0, r1
     192:	9e08      	ldr	r6, [sp, #32]
     194:	4615      	mov	r5, r2
     196:	4674      	mov	r4, lr
     198:	4619      	mov	r1, r3
     19a:	2b00      	cmp	r3, #0
     19c:	f040 80c1 	bne.w	322 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa2>
     1a0:	4285      	cmp	r5, r0
     1a2:	fab2 f282 	clz	r2, r2
     1a6:	d945      	bls.n	234 <__data_size+0x50>
     1a8:	b14a      	cbz	r2, 1be <__udivmoddi4+0x36>
     1aa:	f1c2 0320 	rsb	r3, r2, #32
     1ae:	fa00 fc02 	lsl.w	ip, r0, r2
     1b2:	4095      	lsls	r5, r2
     1b4:	4094      	lsls	r4, r2
     1b6:	fa2e f303 	lsr.w	r3, lr, r3
     1ba:	ea43 0c0c 	orr.w	ip, r3, ip
     1be:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1c2:	b2a8      	uxth	r0, r5
     1c4:	0c23      	lsrs	r3, r4, #16
     1c6:	fbbc f8fe 	udiv	r8, ip, lr
     1ca:	fb0e cc18 	mls	ip, lr, r8, ip
     1ce:	fb08 f900 	mul.w	r9, r8, r0
     1d2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     1d6:	4599      	cmp	r9, r3
     1d8:	d928      	bls.n	22c <__data_size+0x48>
     1da:	18eb      	adds	r3, r5, r3
     1dc:	f108 37ff 	add.w	r7, r8, #4294967295
     1e0:	d204      	bcs.n	1ec <__data_size+0x8>
     1e2:	4599      	cmp	r9, r3
     1e4:	d902      	bls.n	1ec <__data_size+0x8>
     1e6:	f1a8 0702 	sub.w	r7, r8, #2
     1ea:	442b      	add	r3, r5
     1ec:	eba3 0309 	sub.w	r3, r3, r9
     1f0:	b2a4      	uxth	r4, r4
     1f2:	fbb3 fcfe 	udiv	ip, r3, lr
     1f6:	fb0e 331c 	mls	r3, lr, ip, r3
     1fa:	fb0c f000 	mul.w	r0, ip, r0
     1fe:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     202:	42a0      	cmp	r0, r4
     204:	d914      	bls.n	230 <__data_size+0x4c>
     206:	192c      	adds	r4, r5, r4
     208:	f10c 33ff 	add.w	r3, ip, #4294967295
     20c:	d204      	bcs.n	218 <__data_size+0x34>
     20e:	42a0      	cmp	r0, r4
     210:	d902      	bls.n	218 <__data_size+0x34>
     212:	f1ac 0302 	sub.w	r3, ip, #2
     216:	442c      	add	r4, r5
     218:	1a24      	subs	r4, r4, r0
     21a:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
     21e:	b11e      	cbz	r6, 228 <__data_size+0x44>
     220:	40d4      	lsrs	r4, r2
     222:	2300      	movs	r3, #0
     224:	6034      	str	r4, [r6, #0]
     226:	6073      	str	r3, [r6, #4]
     228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     22c:	4647      	mov	r7, r8
     22e:	e7dd      	b.n	1ec <__data_size+0x8>
     230:	4663      	mov	r3, ip
     232:	e7f1      	b.n	218 <__data_size+0x34>
     234:	bb92      	cbnz	r2, 29c <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1c>
     236:	1b43      	subs	r3, r0, r5
     238:	2101      	movs	r1, #1
     23a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     23e:	b2af      	uxth	r7, r5
     240:	0c20      	lsrs	r0, r4, #16
     242:	fbb3 fcfe 	udiv	ip, r3, lr
     246:	fb0e 331c 	mls	r3, lr, ip, r3
     24a:	fb0c f807 	mul.w	r8, ip, r7
     24e:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     252:	4598      	cmp	r8, r3
     254:	d961      	bls.n	31a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x9a>
     256:	18eb      	adds	r3, r5, r3
     258:	f10c 30ff 	add.w	r0, ip, #4294967295
     25c:	d204      	bcs.n	268 <__data_size+0x84>
     25e:	4598      	cmp	r8, r3
     260:	d902      	bls.n	268 <__data_size+0x84>
     262:	f1ac 0002 	sub.w	r0, ip, #2
     266:	442b      	add	r3, r5
     268:	eba3 0308 	sub.w	r3, r3, r8
     26c:	b2a4      	uxth	r4, r4
     26e:	fbb3 fcfe 	udiv	ip, r3, lr
     272:	fb0e 331c 	mls	r3, lr, ip, r3
     276:	fb0c f707 	mul.w	r7, ip, r7
     27a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     27e:	42a7      	cmp	r7, r4
     280:	d94d      	bls.n	31e <CONFIG_PM_PARTITION_SIZE_PROVISION+0x9e>
     282:	192c      	adds	r4, r5, r4
     284:	f10c 33ff 	add.w	r3, ip, #4294967295
     288:	d204      	bcs.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
     28a:	42a7      	cmp	r7, r4
     28c:	d902      	bls.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
     28e:	f1ac 0302 	sub.w	r3, ip, #2
     292:	442c      	add	r4, r5
     294:	1be4      	subs	r4, r4, r7
     296:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     29a:	e7c0      	b.n	21e <__data_size+0x3a>
     29c:	f1c2 0320 	rsb	r3, r2, #32
     2a0:	4095      	lsls	r5, r2
     2a2:	4094      	lsls	r4, r2
     2a4:	fa20 f103 	lsr.w	r1, r0, r3
     2a8:	fa2e f303 	lsr.w	r3, lr, r3
     2ac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     2b0:	4090      	lsls	r0, r2
     2b2:	b2af      	uxth	r7, r5
     2b4:	4303      	orrs	r3, r0
     2b6:	fbb1 fcfe 	udiv	ip, r1, lr
     2ba:	fb0e 101c 	mls	r0, lr, ip, r1
     2be:	0c19      	lsrs	r1, r3, #16
     2c0:	fb0c f807 	mul.w	r8, ip, r7
     2c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     2c8:	4588      	cmp	r8, r1
     2ca:	d922      	bls.n	312 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x92>
     2cc:	1869      	adds	r1, r5, r1
     2ce:	f10c 30ff 	add.w	r0, ip, #4294967295
     2d2:	d204      	bcs.n	2de <CONFIG_PM_PARTITION_SIZE_PROVISION+0x5e>
     2d4:	4588      	cmp	r8, r1
     2d6:	d902      	bls.n	2de <CONFIG_PM_PARTITION_SIZE_PROVISION+0x5e>
     2d8:	f1ac 0002 	sub.w	r0, ip, #2
     2dc:	4429      	add	r1, r5
     2de:	eba1 0108 	sub.w	r1, r1, r8
     2e2:	b29b      	uxth	r3, r3
     2e4:	fbb1 fcfe 	udiv	ip, r1, lr
     2e8:	fb0e 111c 	mls	r1, lr, ip, r1
     2ec:	fb0c f707 	mul.w	r7, ip, r7
     2f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     2f4:	429f      	cmp	r7, r3
     2f6:	d90e      	bls.n	316 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x96>
     2f8:	18eb      	adds	r3, r5, r3
     2fa:	f10c 31ff 	add.w	r1, ip, #4294967295
     2fe:	d204      	bcs.n	30a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8a>
     300:	429f      	cmp	r7, r3
     302:	d902      	bls.n	30a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8a>
     304:	f1ac 0102 	sub.w	r1, ip, #2
     308:	442b      	add	r3, r5
     30a:	1bdb      	subs	r3, r3, r7
     30c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     310:	e793      	b.n	23a <__data_size+0x56>
     312:	4660      	mov	r0, ip
     314:	e7e3      	b.n	2de <CONFIG_PM_PARTITION_SIZE_PROVISION+0x5e>
     316:	4661      	mov	r1, ip
     318:	e7f7      	b.n	30a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8a>
     31a:	4660      	mov	r0, ip
     31c:	e7a4      	b.n	268 <__data_size+0x84>
     31e:	4663      	mov	r3, ip
     320:	e7b8      	b.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
     322:	4283      	cmp	r3, r0
     324:	d906      	bls.n	334 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xb4>
     326:	b916      	cbnz	r6, 32e <CONFIG_PM_PARTITION_SIZE_PROVISION+0xae>
     328:	2100      	movs	r1, #0
     32a:	4608      	mov	r0, r1
     32c:	e77c      	b.n	228 <__data_size+0x44>
     32e:	e9c6 e000 	strd	lr, r0, [r6]
     332:	e7f9      	b.n	328 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa8>
     334:	fab3 f783 	clz	r7, r3
     338:	b98f      	cbnz	r7, 35e <CONFIG_PM_PARTITION_SIZE_PROVISION+0xde>
     33a:	4283      	cmp	r3, r0
     33c:	d301      	bcc.n	342 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xc2>
     33e:	4572      	cmp	r2, lr
     340:	d808      	bhi.n	354 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd4>
     342:	ebbe 0402 	subs.w	r4, lr, r2
     346:	eb60 0303 	sbc.w	r3, r0, r3
     34a:	2001      	movs	r0, #1
     34c:	469c      	mov	ip, r3
     34e:	b91e      	cbnz	r6, 358 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd8>
     350:	2100      	movs	r1, #0
     352:	e769      	b.n	228 <__data_size+0x44>
     354:	4638      	mov	r0, r7
     356:	e7fa      	b.n	34e <CONFIG_PM_PARTITION_SIZE_PROVISION+0xce>
     358:	e9c6 4c00 	strd	r4, ip, [r6]
     35c:	e7f8      	b.n	350 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd0>
     35e:	f1c7 0c20 	rsb	ip, r7, #32
     362:	40bb      	lsls	r3, r7
     364:	fa0e f507 	lsl.w	r5, lr, r7
     368:	fa22 f40c 	lsr.w	r4, r2, ip
     36c:	fa2e f10c 	lsr.w	r1, lr, ip
     370:	40ba      	lsls	r2, r7
     372:	431c      	orrs	r4, r3
     374:	fa20 f30c 	lsr.w	r3, r0, ip
     378:	40b8      	lsls	r0, r7
     37a:	ea4f 4914 	mov.w	r9, r4, lsr #16
     37e:	4301      	orrs	r1, r0
     380:	fa1f fe84 	uxth.w	lr, r4
     384:	fbb3 f8f9 	udiv	r8, r3, r9
     388:	fb09 3018 	mls	r0, r9, r8, r3
     38c:	0c0b      	lsrs	r3, r1, #16
     38e:	fb08 fa0e 	mul.w	sl, r8, lr
     392:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     396:	459a      	cmp	sl, r3
     398:	d940      	bls.n	41c <CONFIG_FLASH_SIZE+0x1c>
     39a:	18e3      	adds	r3, r4, r3
     39c:	f108 30ff 	add.w	r0, r8, #4294967295
     3a0:	d204      	bcs.n	3ac <CONFIG_PM_PARTITION_SIZE_PROVISION+0x12c>
     3a2:	459a      	cmp	sl, r3
     3a4:	d902      	bls.n	3ac <CONFIG_PM_PARTITION_SIZE_PROVISION+0x12c>
     3a6:	f1a8 0002 	sub.w	r0, r8, #2
     3aa:	4423      	add	r3, r4
     3ac:	eba3 030a 	sub.w	r3, r3, sl
     3b0:	b289      	uxth	r1, r1
     3b2:	fbb3 f8f9 	udiv	r8, r3, r9
     3b6:	fb09 3318 	mls	r3, r9, r8, r3
     3ba:	fb08 fe0e 	mul.w	lr, r8, lr
     3be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     3c2:	458e      	cmp	lr, r1
     3c4:	d92c      	bls.n	420 <CONFIG_FLASH_SIZE+0x20>
     3c6:	1861      	adds	r1, r4, r1
     3c8:	f108 33ff 	add.w	r3, r8, #4294967295
     3cc:	d204      	bcs.n	3d8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x158>
     3ce:	458e      	cmp	lr, r1
     3d0:	d902      	bls.n	3d8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x158>
     3d2:	f1a8 0302 	sub.w	r3, r8, #2
     3d6:	4421      	add	r1, r4
     3d8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     3dc:	eba1 010e 	sub.w	r1, r1, lr
     3e0:	fba0 9802 	umull	r9, r8, r0, r2
     3e4:	4541      	cmp	r1, r8
     3e6:	46ce      	mov	lr, r9
     3e8:	4643      	mov	r3, r8
     3ea:	d302      	bcc.n	3f2 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x172>
     3ec:	d106      	bne.n	3fc <CONFIG_PM_PARTITION_SIZE_PROVISION+0x17c>
     3ee:	454d      	cmp	r5, r9
     3f0:	d204      	bcs.n	3fc <CONFIG_PM_PARTITION_SIZE_PROVISION+0x17c>
     3f2:	3801      	subs	r0, #1
     3f4:	ebb9 0e02 	subs.w	lr, r9, r2
     3f8:	eb68 0304 	sbc.w	r3, r8, r4
     3fc:	2e00      	cmp	r6, #0
     3fe:	d0a7      	beq.n	350 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd0>
     400:	ebb5 020e 	subs.w	r2, r5, lr
     404:	eb61 0103 	sbc.w	r1, r1, r3
     408:	fa01 fc0c 	lsl.w	ip, r1, ip
     40c:	fa22 f307 	lsr.w	r3, r2, r7
     410:	40f9      	lsrs	r1, r7
     412:	ea4c 0303 	orr.w	r3, ip, r3
     416:	e9c6 3100 	strd	r3, r1, [r6]
     41a:	e799      	b.n	350 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd0>
     41c:	4640      	mov	r0, r8
     41e:	e7c5      	b.n	3ac <CONFIG_PM_PARTITION_SIZE_PROVISION+0x12c>
     420:	4643      	mov	r3, r8
     422:	e7d9      	b.n	3d8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x158>

00000424 <main>:
	DT_FOREACH_PROP_ELEM(DT_PATH(zephyr_user), io_channels,
			     DT_SPEC_AND_COMMA)
};

void main(void)
{
     424:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     428:	b089      	sub	sp, #36	; 0x24
	int ret;

	int err;
	uint32_t count = 0;
	uint16_t buf;
	struct adc_sequence sequence = {
     42a:	2400      	movs	r4, #0
     42c:	9402      	str	r4, [sp, #8]
     42e:	9403      	str	r4, [sp, #12]
     430:	9404      	str	r4, [sp, #16]
     432:	9405      	str	r4, [sp, #20]
     434:	9406      	str	r4, [sp, #24]
     436:	f10d 031e 	add.w	r3, sp, #30
     43a:	9304      	str	r3, [sp, #16]
     43c:	2302      	movs	r3, #2
     43e:	9305      	str	r3, [sp, #20]
		/* buffer size in bytes, not number of samples */
		.buffer_size = sizeof(buf),
	};

	/* Configure channels individually prior to sampling. */
	for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
     440:	2c02      	cmp	r4, #2
     442:	d822      	bhi.n	48a <main+0x66>
		if (!device_is_ready(adc_channels[i].dev)) {
     444:	eb04 0384 	add.w	r3, r4, r4, lsl #2
     448:	4a5b      	ldr	r2, [pc, #364]	; (5b8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xd0>)
     44a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
     44e:	f006 fe6c 	bl	712a <z_device_is_ready>
     452:	b150      	cbz	r0, 46a <main+0x46>
			printk("ADC controller device %s not ready\n", adc_channels[i].dev->name);
			return 0;
		}

		err = adc_channel_setup_dt(&adc_channels[i]);
     454:	eb04 0084 	add.w	r0, r4, r4, lsl #2
     458:	4b57      	ldr	r3, [pc, #348]	; (5b8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xd0>)
     45a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     45e:	f005 f8c4 	bl	55ea <adc_channel_setup_dt>
		if (err < 0) {
     462:	2800      	cmp	r0, #0
     464:	db0b      	blt.n	47e <main+0x5a>
	for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
     466:	3401      	adds	r4, #1
     468:	e7ea      	b.n	440 <main+0x1c>
			printk("ADC controller device %s not ready\n", adc_channels[i].dev->name);
     46a:	2314      	movs	r3, #20
     46c:	fb04 f303 	mul.w	r3, r4, r3
     470:	4a51      	ldr	r2, [pc, #324]	; (5b8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xd0>)
     472:	58d3      	ldr	r3, [r2, r3]
     474:	6819      	ldr	r1, [r3, #0]
     476:	4851      	ldr	r0, [pc, #324]	; (5bc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xd4>)
     478:	f005 f90d 	bl	5696 <printk>
			return 0;
     47c:	e009      	b.n	492 <main+0x6e>
			printk("Could not setup channel #%d (%d)\n", i, err);
     47e:	4602      	mov	r2, r0
     480:	4621      	mov	r1, r4
     482:	484f      	ldr	r0, [pc, #316]	; (5c0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xd8>)
     484:	f005 f907 	bl	5696 <printk>
			return 0;
     488:	e003      	b.n	492 <main+0x6e>
     48a:	484e      	ldr	r0, [pc, #312]	; (5c4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xdc>)
     48c:	f006 fe4d 	bl	712a <z_device_is_ready>
		}
	}

	if (!device_is_ready(led.port)) {
     490:	b910      	cbnz	r0, 498 <main+0x74>
				return;
			}
		}
		k_msleep(SLEEP_TIME_MS);
	}
}
     492:	b009      	add	sp, #36	; 0x24
     494:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     498:	484a      	ldr	r0, [pc, #296]	; (5c4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xdc>)
     49a:	f006 fe46 	bl	712a <z_device_is_ready>
	if(!device_is_ready(led_1.port)){
     49e:	2800      	cmp	r0, #0
     4a0:	d0f7      	beq.n	492 <main+0x6e>
     4a2:	4848      	ldr	r0, [pc, #288]	; (5c4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xdc>)
     4a4:	f006 fe41 	bl	712a <z_device_is_ready>
	if(!device_is_ready(button.port)){
     4a8:	2800      	cmp	r0, #0
     4aa:	d0f2      	beq.n	492 <main+0x6e>
	ret = gpio_pin_configure_dt(&led, GPIO_OUTPUT_ACTIVE);
     4ac:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
     4b0:	4845      	ldr	r0, [pc, #276]	; (5c8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe0>)
     4b2:	f005 f869 	bl	5588 <gpio_pin_configure_dt>
	if (ret < 0) {
     4b6:	2800      	cmp	r0, #0
     4b8:	dbeb      	blt.n	492 <main+0x6e>
	ret = gpio_pin_configure_dt(&led_1, GPIO_OUTPUT_ACTIVE);
     4ba:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
     4be:	4843      	ldr	r0, [pc, #268]	; (5cc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe4>)
     4c0:	f005 f862 	bl	5588 <gpio_pin_configure_dt>
	if(ret < 0){
     4c4:	2800      	cmp	r0, #0
     4c6:	dbe4      	blt.n	492 <main+0x6e>
	ret = gpio_pin_configure_dt(&button, GPIO_INPUT);
     4c8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     4cc:	4840      	ldr	r0, [pc, #256]	; (5d0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe8>)
     4ce:	f005 f85b 	bl	5588 <gpio_pin_configure_dt>
	if(ret < 0){
     4d2:	2800      	cmp	r0, #0
     4d4:	dbdd      	blt.n	492 <main+0x6e>
	uint32_t count = 0;
     4d6:	2400      	movs	r4, #0
     4d8:	e061      	b.n	59e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb6>
				printk("Could not read (%d)\n", err);
     4da:	483e      	ldr	r0, [pc, #248]	; (5d4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xec>)
     4dc:	f005 f8db 	bl	5696 <printk>
				continue;
     4e0:	e014      	b.n	50c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x24>
				val_mv = (int32_t)buf;
     4e2:	f8bd 301e 	ldrh.w	r3, [sp, #30]
     4e6:	9301      	str	r3, [sp, #4]
			printk("%"PRId32, val_mv);
     4e8:	9901      	ldr	r1, [sp, #4]
     4ea:	483b      	ldr	r0, [pc, #236]	; (5d8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xf0>)
     4ec:	f005 f8d3 	bl	5696 <printk>
			err = adc_raw_to_millivolts_dt(&adc_channels[i],
     4f0:	eb04 0084 	add.w	r0, r4, r4, lsl #2
     4f4:	a901      	add	r1, sp, #4
     4f6:	4b30      	ldr	r3, [pc, #192]	; (5b8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xd0>)
     4f8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     4fc:	f005 f895 	bl	562a <adc_raw_to_millivolts_dt>
			if (err < 0) {
     500:	2800      	cmp	r0, #0
     502:	db37      	blt.n	574 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8c>
				printk(" = %"PRId32" mV\n", val_mv);
     504:	9901      	ldr	r1, [sp, #4]
     506:	4835      	ldr	r0, [pc, #212]	; (5dc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xf4>)
     508:	f005 f8c5 	bl	5696 <printk>
		for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
     50c:	3401      	adds	r4, #1
     50e:	2c02      	cmp	r4, #2
     510:	d834      	bhi.n	57c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x94>
			       adc_channels[i].dev->name,
     512:	4b29      	ldr	r3, [pc, #164]	; (5b8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xd0>)
     514:	eb04 0284 	add.w	r2, r4, r4, lsl #2
     518:	eb03 0882 	add.w	r8, r3, r2, lsl #2
     51c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
			       adc_channels[i].channel_id);
     520:	f898 9004 	ldrb.w	r9, [r8, #4]
			printk("- %s, channel %d: ",
     524:	464a      	mov	r2, r9
     526:	6829      	ldr	r1, [r5, #0]
     528:	482d      	ldr	r0, [pc, #180]	; (5e0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xf8>)
     52a:	f005 f8b4 	bl	5696 <printk>
 * @retval -ENOTSUP If @p spec does not have valid channel configuration
 */
static inline int adc_sequence_init_dt(const struct adc_dt_spec *spec,
				       struct adc_sequence *seq)
{
	if (!spec->channel_cfg_dt_node_exists) {
     52e:	f898 3005 	ldrb.w	r3, [r8, #5]
     532:	b15b      	cbz	r3, 54c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x64>
		return -ENOTSUP;
	}

	seq->channels = BIT(spec->channel_id);
     534:	2201      	movs	r2, #1
     536:	fa02 f209 	lsl.w	r2, r2, r9
     53a:	9203      	str	r2, [sp, #12]
	seq->resolution = spec->resolution;
     53c:	f898 2010 	ldrb.w	r2, [r8, #16]
     540:	f88d 2018 	strb.w	r2, [sp, #24]
	seq->oversampling = spec->oversampling;
     544:	f898 3011 	ldrb.w	r3, [r8, #17]
     548:	f88d 3019 	strb.w	r3, [sp, #25]
	const struct adc_driver_api *api =
     54c:	68ab      	ldr	r3, [r5, #8]
	return api->read(dev, sequence);
     54e:	685b      	ldr	r3, [r3, #4]
     550:	a902      	add	r1, sp, #8
     552:	4628      	mov	r0, r5
     554:	4798      	blx	r3
			if (err < 0) {
     556:	1e01      	subs	r1, r0, #0
     558:	dbbf      	blt.n	4da <main+0xb6>
			if (adc_channels[i].channel_cfg.differential) {
     55a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
     55e:	4b16      	ldr	r3, [pc, #88]	; (5b8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xd0>)
     560:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     564:	7a9b      	ldrb	r3, [r3, #10]
     566:	f013 0f20 	tst.w	r3, #32
     56a:	d0ba      	beq.n	4e2 <main+0xbe>
				val_mv = (int32_t)((int16_t)buf);
     56c:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
     570:	9301      	str	r3, [sp, #4]
     572:	e7b9      	b.n	4e8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE>
				printk(" (value in mV not available)\n");
     574:	481b      	ldr	r0, [pc, #108]	; (5e4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xfc>)
     576:	f005 f88e 	bl	5696 <printk>
     57a:	e7c7      	b.n	50c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x24>
		ret = gpio_pin_toggle_dt(&led);
     57c:	4812      	ldr	r0, [pc, #72]	; (5c8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe0>)
     57e:	f005 f82a 	bl	55d6 <gpio_pin_toggle_dt>
		if (ret < 0) {
     582:	2800      	cmp	r0, #0
     584:	db85      	blt.n	492 <main+0x6e>
		if(val){
     586:	b12e      	cbz	r6, 594 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xac>
			ret = gpio_pin_toggle_dt(&led_1);
     588:	4810      	ldr	r0, [pc, #64]	; (5cc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe4>)
     58a:	f005 f824 	bl	55d6 <gpio_pin_toggle_dt>
			if(ret < 0){
     58e:	2800      	cmp	r0, #0
     590:	f6ff af7f 	blt.w	492 <main+0x6e>
		k_msleep(SLEEP_TIME_MS);
     594:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     598:	f005 f865 	bl	5666 <k_msleep>
		printk("ADC reading[%u]:\n", count++);
     59c:	463c      	mov	r4, r7
 * @param spec GPIO specification from devicetree
 * @return a value from gpio_pin_get()
 */
static inline int gpio_pin_get_dt(const struct gpio_dt_spec *spec)
{
	return gpio_pin_get(spec->port, spec->pin);
     59e:	2117      	movs	r1, #23
     5a0:	4808      	ldr	r0, [pc, #32]	; (5c4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xdc>)
     5a2:	f005 f808 	bl	55b6 <gpio_pin_get>
     5a6:	4606      	mov	r6, r0
     5a8:	1c67      	adds	r7, r4, #1
     5aa:	4621      	mov	r1, r4
     5ac:	480e      	ldr	r0, [pc, #56]	; (5e8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x100>)
     5ae:	f005 f872 	bl	5696 <printk>
		for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
     5b2:	2400      	movs	r4, #0
     5b4:	e7ab      	b.n	50e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x26>
     5b6:	bf00      	nop
     5b8:	00007d50 	.word	0x00007d50
     5bc:	00007c98 	.word	0x00007c98
     5c0:	00007cbc 	.word	0x00007cbc
     5c4:	000079a4 	.word	0x000079a4
     5c8:	00007d9c 	.word	0x00007d9c
     5cc:	00007d94 	.word	0x00007d94
     5d0:	00007d8c 	.word	0x00007d8c
     5d4:	00007d08 	.word	0x00007d08
     5d8:	00007d20 	.word	0x00007d20
     5dc:	00007d44 	.word	0x00007d44
     5e0:	00007cf4 	.word	0x00007cf4
     5e4:	00007d24 	.word	0x00007d24
     5e8:	00007ce0 	.word	0x00007ce0

000005ec <char_out>:

	return c;
}

static int char_out(int c, void *ctx_p)
{
     5ec:	b508      	push	{r3, lr}
	(void) ctx_p;
	return _char_out(c);
     5ee:	4b02      	ldr	r3, [pc, #8]	; (5f8 <char_out+0xc>)
     5f0:	681b      	ldr	r3, [r3, #0]
     5f2:	4798      	blx	r3
}
     5f4:	bd08      	pop	{r3, pc}
     5f6:	bf00      	nop
     5f8:	200000b0 	.word	0x200000b0

000005fc <__printk_hook_install>:
	_char_out = fn;
     5fc:	4b01      	ldr	r3, [pc, #4]	; (604 <__printk_hook_install+0x8>)
     5fe:	6018      	str	r0, [r3, #0]
}
     600:	4770      	bx	lr
     602:	bf00      	nop
     604:	200000b0 	.word	0x200000b0

00000608 <vprintk>:

void vprintk(const char *fmt, va_list ap)
{
     608:	b500      	push	{lr}
     60a:	b083      	sub	sp, #12
     60c:	4602      	mov	r2, r0
     60e:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
     610:	2100      	movs	r1, #0
     612:	9100      	str	r1, [sp, #0]
     614:	4802      	ldr	r0, [pc, #8]	; (620 <vprintk+0x18>)
     616:	f000 f91d 	bl	854 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
     61a:	b003      	add	sp, #12
     61c:	f85d fb04 	ldr.w	pc, [sp], #4
     620:	000005ed 	.word	0x000005ed

00000624 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     624:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     628:	b083      	sub	sp, #12
     62a:	4604      	mov	r4, r0
     62c:	4608      	mov	r0, r1
     62e:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     630:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     632:	f013 0f08 	tst.w	r3, #8
     636:	d105      	bne.n	644 <process_event+0x20>
     638:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
     63c:	2300      	movs	r3, #0
     63e:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
     640:	9301      	str	r3, [sp, #4]
}
     642:	e055      	b.n	6f0 <process_event+0xcc>
		if (evt == EVT_COMPLETE) {
     644:	2901      	cmp	r1, #1
     646:	d009      	beq.n	65c <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     648:	f043 0320 	orr.w	r3, r3, #32
     64c:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     64e:	f385 8811 	msr	BASEPRI, r5
     652:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     656:	b003      	add	sp, #12
     658:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     65c:	f043 0310 	orr.w	r3, r3, #16
     660:	8323      	strh	r3, [r4, #24]
     662:	e7f4      	b.n	64e <process_event+0x2a>
			evt = process_recheck(mgr);
     664:	4620      	mov	r0, r4
     666:	f005 f858 	bl	571a <process_recheck>
     66a:	e043      	b.n	6f4 <process_event+0xd0>
			res = mgr->last_res;
     66c:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
     670:	464a      	mov	r2, r9
     672:	4669      	mov	r1, sp
     674:	4620      	mov	r0, r4
     676:	f005 f869 	bl	574c <process_complete>
		onoff_transition_fn transit = NULL;
     67a:	f04f 0800 	mov.w	r8, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     67e:	8b23      	ldrh	r3, [r4, #24]
     680:	f003 0707 	and.w	r7, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     684:	42b7      	cmp	r7, r6
     686:	d069      	beq.n	75c <process_event+0x138>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     688:	68a2      	ldr	r2, [r4, #8]
     68a:	2a00      	cmp	r2, #0
     68c:	d066      	beq.n	75c <process_event+0x138>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     68e:	2201      	movs	r2, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     690:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
     694:	8323      	strh	r3, [r4, #24]
     696:	f385 8811 	msr	BASEPRI, r5
     69a:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     69e:	2a00      	cmp	r2, #0
     6a0:	d164      	bne.n	76c <process_event+0x148>
     6a2:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
     6a4:	b12b      	cbz	r3, 6b2 <process_event+0x8e>
				notify_all(mgr, &clients, state, res);
     6a6:	464b      	mov	r3, r9
     6a8:	463a      	mov	r2, r7
     6aa:	4669      	mov	r1, sp
     6ac:	4620      	mov	r0, r4
     6ae:	f005 f8c6 	bl	583e <notify_all>
			if (transit != NULL) {
     6b2:	f1b8 0f00 	cmp.w	r8, #0
     6b6:	d002      	beq.n	6be <process_event+0x9a>
				transit(mgr, transition_complete);
     6b8:	4934      	ldr	r1, [pc, #208]	; (78c <process_event+0x168>)
     6ba:	4620      	mov	r0, r4
     6bc:	47c0      	blx	r8
	__asm__ volatile(
     6be:	f04f 0320 	mov.w	r3, #32
     6c2:	f3ef 8511 	mrs	r5, BASEPRI
     6c6:	f383 8812 	msr	BASEPRI_MAX, r3
     6ca:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     6ce:	8b23      	ldrh	r3, [r4, #24]
     6d0:	f023 0308 	bic.w	r3, r3, #8
     6d4:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     6d6:	8b23      	ldrh	r3, [r4, #24]
     6d8:	f013 0f10 	tst.w	r3, #16
     6dc:	d04c      	beq.n	778 <process_event+0x154>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     6de:	f023 0310 	bic.w	r3, r3, #16
     6e2:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
     6e4:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     6e6:	8b26      	ldrh	r6, [r4, #24]
     6e8:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
     6ec:	2800      	cmp	r0, #0
     6ee:	d0ae      	beq.n	64e <process_event+0x2a>
		if (evt == EVT_RECHECK) {
     6f0:	2802      	cmp	r0, #2
     6f2:	d0b7      	beq.n	664 <process_event+0x40>
		if (evt == EVT_NOP) {
     6f4:	2800      	cmp	r0, #0
     6f6:	d0aa      	beq.n	64e <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
     6f8:	3801      	subs	r0, #1
     6fa:	2804      	cmp	r0, #4
     6fc:	d82a      	bhi.n	754 <process_event+0x130>
     6fe:	a301      	add	r3, pc, #4	; (adr r3, 704 <process_event+0xe0>)
     700:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
     704:	0000066d 	.word	0x0000066d
     708:	00000755 	.word	0x00000755
     70c:	00000719 	.word	0x00000719
     710:	0000072d 	.word	0x0000072d
     714:	00000741 	.word	0x00000741
			transit = mgr->transitions->start;
     718:	6923      	ldr	r3, [r4, #16]
     71a:	f8d3 8000 	ldr.w	r8, [r3]
			set_state(mgr, ONOFF_STATE_TO_ON);
     71e:	2106      	movs	r1, #6
     720:	4620      	mov	r0, r4
     722:	f004 ffd0 	bl	56c6 <set_state>
		res = 0;
     726:	f04f 0900 	mov.w	r9, #0
     72a:	e7a8      	b.n	67e <process_event+0x5a>
			transit = mgr->transitions->stop;
     72c:	6923      	ldr	r3, [r4, #16]
     72e:	f8d3 8004 	ldr.w	r8, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
     732:	2104      	movs	r1, #4
     734:	4620      	mov	r0, r4
     736:	f004 ffc6 	bl	56c6 <set_state>
		res = 0;
     73a:	f04f 0900 	mov.w	r9, #0
     73e:	e79e      	b.n	67e <process_event+0x5a>
			transit = mgr->transitions->reset;
     740:	6923      	ldr	r3, [r4, #16]
     742:	f8d3 8008 	ldr.w	r8, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
     746:	2105      	movs	r1, #5
     748:	4620      	mov	r0, r4
     74a:	f004 ffbc 	bl	56c6 <set_state>
		res = 0;
     74e:	f04f 0900 	mov.w	r9, #0
     752:	e794      	b.n	67e <process_event+0x5a>
		if (evt == EVT_NOP) {
     754:	f04f 0800 	mov.w	r8, #0
     758:	46c1      	mov	r9, r8
     75a:	e790      	b.n	67e <process_event+0x5a>
     75c:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
     75e:	b10a      	cbz	r2, 764 <process_event+0x140>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     760:	2200      	movs	r2, #0
     762:	e795      	b.n	690 <process_event+0x6c>
		    || (transit != NULL)) {
     764:	f1b8 0f00 	cmp.w	r8, #0
     768:	d192      	bne.n	690 <process_event+0x6c>
     76a:	e7b4      	b.n	6d6 <process_event+0xb2>
				notify_monitors(mgr, state, res);
     76c:	464a      	mov	r2, r9
     76e:	4639      	mov	r1, r7
     770:	4620      	mov	r0, r4
     772:	f004 ffb0 	bl	56d6 <notify_monitors>
     776:	e794      	b.n	6a2 <process_event+0x7e>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     778:	f013 0f20 	tst.w	r3, #32
     77c:	d004      	beq.n	788 <process_event+0x164>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     77e:	f023 0320 	bic.w	r3, r3, #32
     782:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
     784:	2002      	movs	r0, #2
     786:	e7ae      	b.n	6e6 <process_event+0xc2>
		evt = EVT_NOP;
     788:	2000      	movs	r0, #0
     78a:	e7ac      	b.n	6e6 <process_event+0xc2>
     78c:	0000586d 	.word	0x0000586d

00000790 <extract_flags>:
 *
 * @return a pointer the first character that follows the flags.
 */
static inline const char *extract_flags(struct conversion *conv,
					const char *sp)
{
     790:	4684      	mov	ip, r0
     792:	4608      	mov	r0, r1
	bool loop = true;
     794:	2201      	movs	r2, #1
     796:	e026      	b.n	7e6 <extract_flags+0x56>

	do {
		switch (*sp) {
		case '-':
			conv->flag_dash = true;
     798:	f89c 3000 	ldrb.w	r3, [ip]
     79c:	f043 0304 	orr.w	r3, r3, #4
     7a0:	f88c 3000 	strb.w	r3, [ip]
			conv->flag_zero = true;
			break;
		default:
			loop = false;
		}
		if (loop) {
     7a4:	b1f2      	cbz	r2, 7e4 <extract_flags+0x54>
			++sp;
     7a6:	3001      	adds	r0, #1
     7a8:	e01c      	b.n	7e4 <extract_flags+0x54>
			conv->flag_plus = true;
     7aa:	f89c 3000 	ldrb.w	r3, [ip]
     7ae:	f043 0308 	orr.w	r3, r3, #8
     7b2:	f88c 3000 	strb.w	r3, [ip]
			break;
     7b6:	e7f5      	b.n	7a4 <extract_flags+0x14>
			conv->flag_space = true;
     7b8:	f89c 3000 	ldrb.w	r3, [ip]
     7bc:	f043 0310 	orr.w	r3, r3, #16
     7c0:	f88c 3000 	strb.w	r3, [ip]
			break;
     7c4:	e7ee      	b.n	7a4 <extract_flags+0x14>
			conv->flag_hash = true;
     7c6:	f89c 3000 	ldrb.w	r3, [ip]
     7ca:	f043 0320 	orr.w	r3, r3, #32
     7ce:	f88c 3000 	strb.w	r3, [ip]
			break;
     7d2:	e7e7      	b.n	7a4 <extract_flags+0x14>
			conv->flag_zero = true;
     7d4:	f89c 3000 	ldrb.w	r3, [ip]
     7d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     7dc:	f88c 3000 	strb.w	r3, [ip]
			break;
     7e0:	e7e0      	b.n	7a4 <extract_flags+0x14>
		switch (*sp) {
     7e2:	2200      	movs	r2, #0
		}
	} while (loop);
     7e4:	b342      	cbz	r2, 838 <CONFIG_ISR_STACK_SIZE+0x38>
		switch (*sp) {
     7e6:	7803      	ldrb	r3, [r0, #0]
     7e8:	3b20      	subs	r3, #32
     7ea:	2b10      	cmp	r3, #16
     7ec:	d8f9      	bhi.n	7e2 <extract_flags+0x52>
     7ee:	a101      	add	r1, pc, #4	; (adr r1, 7f4 <extract_flags+0x64>)
     7f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
     7f4:	000007b9 	.word	0x000007b9
     7f8:	000007e3 	.word	0x000007e3
     7fc:	000007e3 	.word	0x000007e3
     800:	000007c7 	.word	0x000007c7
     804:	000007e3 	.word	0x000007e3
     808:	000007e3 	.word	0x000007e3
     80c:	000007e3 	.word	0x000007e3
     810:	000007e3 	.word	0x000007e3
     814:	000007e3 	.word	0x000007e3
     818:	000007e3 	.word	0x000007e3
     81c:	000007e3 	.word	0x000007e3
     820:	000007ab 	.word	0x000007ab
     824:	000007e3 	.word	0x000007e3
     828:	00000799 	.word	0x00000799
     82c:	000007e3 	.word	0x000007e3
     830:	000007e3 	.word	0x000007e3
     834:	000007d5 	.word	0x000007d5

	/* zero && dash => !zero */
	if (conv->flag_zero && conv->flag_dash) {
     838:	f89c 3000 	ldrb.w	r3, [ip]
     83c:	f003 0344 	and.w	r3, r3, #68	; 0x44
     840:	2b44      	cmp	r3, #68	; 0x44
     842:	d000      	beq.n	846 <CONFIG_ISR_STACK_SIZE+0x46>
	}

	/* space && plus => !plus, handled in emitter code */

	return sp;
}
     844:	4770      	bx	lr
		conv->flag_zero = false;
     846:	f89c 3000 	ldrb.w	r3, [ip]
     84a:	f36f 1386 	bfc	r3, #6, #1
     84e:	f88c 3000 	strb.w	r3, [ip]
     852:	e7f7      	b.n	844 <CONFIG_ISR_STACK_SIZE+0x44>

00000854 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
     854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     858:	b091      	sub	sp, #68	; 0x44
     85a:	4606      	mov	r6, r0
     85c:	460d      	mov	r5, r1
     85e:	4691      	mov	r9, r2
     860:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     862:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     864:	f899 0000 	ldrb.w	r0, [r9]
     868:	2800      	cmp	r0, #0
     86a:	f000 82b9 	beq.w	de0 <z_cbvprintf_impl+0x58c>
		if (*fp != '%') {
     86e:	2825      	cmp	r0, #37	; 0x25
     870:	d008      	beq.n	884 <z_cbvprintf_impl+0x30>
			OUTC(*fp++);
     872:	f109 0901 	add.w	r9, r9, #1
     876:	4629      	mov	r1, r5
     878:	47b0      	blx	r6
     87a:	2800      	cmp	r0, #0
     87c:	f2c0 82b1 	blt.w	de2 <z_cbvprintf_impl+0x58e>
     880:	3401      	adds	r4, #1
			continue;
     882:	e7ef      	b.n	864 <z_cbvprintf_impl+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
     884:	2300      	movs	r3, #0
     886:	9304      	str	r3, [sp, #16]
     888:	9305      	str	r3, [sp, #20]
     88a:	9306      	str	r3, [sp, #24]
     88c:	9307      	str	r3, [sp, #28]
     88e:	9308      	str	r3, [sp, #32]
     890:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
     892:	4649      	mov	r1, r9
     894:	a806      	add	r0, sp, #24
     896:	f005 fa19 	bl	5ccc <extract_conversion>
     89a:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
     89c:	f89d 3019 	ldrb.w	r3, [sp, #25]
     8a0:	f013 0f01 	tst.w	r3, #1
     8a4:	f000 8097 	beq.w	9d6 <z_cbvprintf_impl+0x182>
			width = va_arg(ap, int);
     8a8:	9b03      	ldr	r3, [sp, #12]
     8aa:	1d1a      	adds	r2, r3, #4
     8ac:	9203      	str	r2, [sp, #12]
     8ae:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
     8b0:	2f00      	cmp	r7, #0
     8b2:	f2c0 8088 	blt.w	9c6 <z_cbvprintf_impl+0x172>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
     8b6:	f89d 3019 	ldrb.w	r3, [sp, #25]
     8ba:	f013 0f04 	tst.w	r3, #4
     8be:	f000 809c 	beq.w	9fa <z_cbvprintf_impl+0x1a6>
			int arg = va_arg(ap, int);
     8c2:	9b03      	ldr	r3, [sp, #12]
     8c4:	1d1a      	adds	r2, r3, #4
     8c6:	9203      	str	r2, [sp, #12]
     8c8:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
     8cc:	f1ba 0f00 	cmp.w	sl, #0
     8d0:	f2c0 808a 	blt.w	9e8 <z_cbvprintf_impl+0x194>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
     8d4:	2300      	movs	r3, #0
     8d6:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
     8d8:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
     8da:	f89d 301a 	ldrb.w	r3, [sp, #26]
     8de:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
     8e2:	f89d 1019 	ldrb.w	r1, [sp, #25]
     8e6:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
     8ea:	2b01      	cmp	r3, #1
     8ec:	f000 808e 	beq.w	a0c <z_cbvprintf_impl+0x1b8>
			if (length_mod == LENGTH_HH) {
				value->sint = (signed char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
     8f0:	2b02      	cmp	r3, #2
     8f2:	f000 80d3 	beq.w	a9c <z_cbvprintf_impl+0x248>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
     8f6:	2b04      	cmp	r3, #4
     8f8:	f000 8124 	beq.w	b44 <z_cbvprintf_impl+0x2f0>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
     8fc:	2b03      	cmp	r3, #3
     8fe:	f000 813b 	beq.w	b78 <z_cbvprintf_impl+0x324>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
     902:	f89d 8018 	ldrb.w	r8, [sp, #24]
     906:	f018 0b03 	ands.w	fp, r8, #3
     90a:	f040 813b 	bne.w	b84 <z_cbvprintf_impl+0x330>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
     90e:	f89d 301b 	ldrb.w	r3, [sp, #27]
     912:	3b25      	subs	r3, #37	; 0x25
     914:	2b53      	cmp	r3, #83	; 0x53
     916:	f200 81ca 	bhi.w	cae <z_cbvprintf_impl+0x45a>
     91a:	e8df f013 	tbh	[pc, r3, lsl #1]
     91e:	0140      	.short	0x0140
     920:	01c801c8 	.word	0x01c801c8
     924:	01c801c8 	.word	0x01c801c8
     928:	01c801c8 	.word	0x01c801c8
     92c:	01c801c8 	.word	0x01c801c8
     930:	01c801c8 	.word	0x01c801c8
     934:	01c801c8 	.word	0x01c801c8
     938:	01c801c8 	.word	0x01c801c8
     93c:	01c801c8 	.word	0x01c801c8
     940:	01c801c8 	.word	0x01c801c8
     944:	01c801c8 	.word	0x01c801c8
     948:	01c801c8 	.word	0x01c801c8
     94c:	01c801c8 	.word	0x01c801c8
     950:	01c801c8 	.word	0x01c801c8
     954:	01c801c8 	.word	0x01c801c8
     958:	01c801c8 	.word	0x01c801c8
     95c:	01c801c8 	.word	0x01c801c8
     960:	01c801c8 	.word	0x01c801c8
     964:	01c801c8 	.word	0x01c801c8
     968:	01c801c8 	.word	0x01c801c8
     96c:	01c801c8 	.word	0x01c801c8
     970:	01c801c8 	.word	0x01c801c8
     974:	01c801c8 	.word	0x01c801c8
     978:	01c801c8 	.word	0x01c801c8
     97c:	01c801c8 	.word	0x01c801c8
     980:	01c801c8 	.word	0x01c801c8
     984:	01c80181 	.word	0x01c80181
     988:	01c801c8 	.word	0x01c801c8
     98c:	01c801c8 	.word	0x01c801c8
     990:	01c801c8 	.word	0x01c801c8
     994:	01c801c8 	.word	0x01c801c8
     998:	015e01c8 	.word	0x015e01c8
     99c:	01c80167 	.word	0x01c80167
     9a0:	01c801c8 	.word	0x01c801c8
     9a4:	016701c8 	.word	0x016701c8
     9a8:	01c801c8 	.word	0x01c801c8
     9ac:	01c801c8 	.word	0x01c801c8
     9b0:	018101bd 	.word	0x018101bd
     9b4:	01c801a1 	.word	0x01c801a1
     9b8:	014d01c8 	.word	0x014d01c8
     9bc:	018101c8 	.word	0x018101c8
     9c0:	01c801c8 	.word	0x01c801c8
     9c4:	0181      	.short	0x0181
				conv->flag_dash = true;
     9c6:	f89d 3018 	ldrb.w	r3, [sp, #24]
     9ca:	f043 0304 	orr.w	r3, r3, #4
     9ce:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
     9d2:	427f      	negs	r7, r7
     9d4:	e76f      	b.n	8b6 <z_cbvprintf_impl+0x62>
		} else if (conv->width_present) {
     9d6:	f99d 3018 	ldrsb.w	r3, [sp, #24]
     9da:	2b00      	cmp	r3, #0
     9dc:	db02      	blt.n	9e4 <z_cbvprintf_impl+0x190>
		int width = -1;
     9de:	f04f 37ff 	mov.w	r7, #4294967295
     9e2:	e768      	b.n	8b6 <z_cbvprintf_impl+0x62>
			width = conv->width_value;
     9e4:	9f07      	ldr	r7, [sp, #28]
     9e6:	e766      	b.n	8b6 <z_cbvprintf_impl+0x62>
				conv->prec_present = false;
     9e8:	f89d 3019 	ldrb.w	r3, [sp, #25]
     9ec:	f36f 0341 	bfc	r3, #1, #1
     9f0:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
     9f4:	f04f 3aff 	mov.w	sl, #4294967295
     9f8:	e76c      	b.n	8d4 <z_cbvprintf_impl+0x80>
		} else if (conv->prec_present) {
     9fa:	f013 0f02 	tst.w	r3, #2
     9fe:	d002      	beq.n	a06 <z_cbvprintf_impl+0x1b2>
			precision = conv->prec_value;
     a00:	f8dd a020 	ldr.w	sl, [sp, #32]
     a04:	e766      	b.n	8d4 <z_cbvprintf_impl+0x80>
		int precision = -1;
     a06:	f04f 3aff 	mov.w	sl, #4294967295
     a0a:	e763      	b.n	8d4 <z_cbvprintf_impl+0x80>
			switch (length_mod) {
     a0c:	1ecb      	subs	r3, r1, #3
     a0e:	2b04      	cmp	r3, #4
     a10:	d804      	bhi.n	a1c <z_cbvprintf_impl+0x1c8>
     a12:	e8df f003 	tbb	[pc, r3]
     a16:	1d0b      	.short	0x1d0b
     a18:	3529      	.short	0x3529
     a1a:	35          	.byte	0x35
     a1b:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
     a1c:	9b03      	ldr	r3, [sp, #12]
     a1e:	1d1a      	adds	r2, r3, #4
     a20:	9203      	str	r2, [sp, #12]
     a22:	681b      	ldr	r3, [r3, #0]
     a24:	17da      	asrs	r2, r3, #31
     a26:	9304      	str	r3, [sp, #16]
     a28:	9205      	str	r2, [sp, #20]
				break;
     a2a:	e006      	b.n	a3a <z_cbvprintf_impl+0x1e6>
					value->sint = va_arg(ap, long);
     a2c:	9b03      	ldr	r3, [sp, #12]
     a2e:	1d1a      	adds	r2, r3, #4
     a30:	9203      	str	r2, [sp, #12]
     a32:	681b      	ldr	r3, [r3, #0]
     a34:	17da      	asrs	r2, r3, #31
     a36:	9304      	str	r3, [sp, #16]
     a38:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
     a3a:	2901      	cmp	r1, #1
     a3c:	d028      	beq.n	a90 <z_cbvprintf_impl+0x23c>
			} else if (length_mod == LENGTH_H) {
     a3e:	2902      	cmp	r1, #2
     a40:	f47f af5f 	bne.w	902 <z_cbvprintf_impl+0xae>
				value->sint = (short)value->sint;
     a44:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
     a48:	17da      	asrs	r2, r3, #31
     a4a:	9304      	str	r3, [sp, #16]
     a4c:	9205      	str	r2, [sp, #20]
     a4e:	e758      	b.n	902 <z_cbvprintf_impl+0xae>
					(sint_value_type)va_arg(ap, long long);
     a50:	9b03      	ldr	r3, [sp, #12]
     a52:	3307      	adds	r3, #7
     a54:	f023 0307 	bic.w	r3, r3, #7
     a58:	f103 0208 	add.w	r2, r3, #8
     a5c:	9203      	str	r2, [sp, #12]
     a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
     a62:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
     a66:	e7e8      	b.n	a3a <z_cbvprintf_impl+0x1e6>
					(sint_value_type)va_arg(ap, intmax_t);
     a68:	9b03      	ldr	r3, [sp, #12]
     a6a:	3307      	adds	r3, #7
     a6c:	f023 0307 	bic.w	r3, r3, #7
     a70:	f103 0208 	add.w	r2, r3, #8
     a74:	9203      	str	r2, [sp, #12]
     a76:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
     a7a:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
     a7e:	e7dc      	b.n	a3a <z_cbvprintf_impl+0x1e6>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     a80:	9b03      	ldr	r3, [sp, #12]
     a82:	1d1a      	adds	r2, r3, #4
     a84:	9203      	str	r2, [sp, #12]
     a86:	681b      	ldr	r3, [r3, #0]
     a88:	17da      	asrs	r2, r3, #31
				value->sint =
     a8a:	9304      	str	r3, [sp, #16]
     a8c:	9205      	str	r2, [sp, #20]
				break;
     a8e:	e7d4      	b.n	a3a <z_cbvprintf_impl+0x1e6>
				value->sint = (signed char)value->sint;
     a90:	f99d 3010 	ldrsb.w	r3, [sp, #16]
     a94:	17da      	asrs	r2, r3, #31
     a96:	9304      	str	r3, [sp, #16]
     a98:	9205      	str	r2, [sp, #20]
     a9a:	e732      	b.n	902 <z_cbvprintf_impl+0xae>
			switch (length_mod) {
     a9c:	1ecb      	subs	r3, r1, #3
     a9e:	2b04      	cmp	r3, #4
     aa0:	d804      	bhi.n	aac <z_cbvprintf_impl+0x258>
     aa2:	e8df f003 	tbb	[pc, r3]
     aa6:	1f0b      	.short	0x1f0b
     aa8:	4135      	.short	0x4135
     aaa:	41          	.byte	0x41
     aab:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
     aac:	9b03      	ldr	r3, [sp, #12]
     aae:	1d1a      	adds	r2, r3, #4
     ab0:	9203      	str	r2, [sp, #12]
     ab2:	681b      	ldr	r3, [r3, #0]
     ab4:	9304      	str	r3, [sp, #16]
     ab6:	2300      	movs	r3, #0
     ab8:	9305      	str	r3, [sp, #20]
				break;
     aba:	e01e      	b.n	afa <z_cbvprintf_impl+0x2a6>
				    && (conv->specifier == 'c')) {
     abc:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
     ac0:	2b63      	cmp	r3, #99	; 0x63
     ac2:	d007      	beq.n	ad4 <z_cbvprintf_impl+0x280>
					value->uint = va_arg(ap, unsigned long);
     ac4:	9b03      	ldr	r3, [sp, #12]
     ac6:	1d1a      	adds	r2, r3, #4
     ac8:	9203      	str	r2, [sp, #12]
     aca:	681b      	ldr	r3, [r3, #0]
     acc:	9304      	str	r3, [sp, #16]
     ace:	2300      	movs	r3, #0
     ad0:	9305      	str	r3, [sp, #20]
     ad2:	e012      	b.n	afa <z_cbvprintf_impl+0x2a6>
					value->uint = (wchar_t)va_arg(ap,
     ad4:	9b03      	ldr	r3, [sp, #12]
     ad6:	1d1a      	adds	r2, r3, #4
     ad8:	9203      	str	r2, [sp, #12]
     ada:	681b      	ldr	r3, [r3, #0]
     adc:	9304      	str	r3, [sp, #16]
     ade:	2300      	movs	r3, #0
     ae0:	9305      	str	r3, [sp, #20]
     ae2:	e00a      	b.n	afa <z_cbvprintf_impl+0x2a6>
					(uint_value_type)va_arg(ap,
     ae4:	9b03      	ldr	r3, [sp, #12]
     ae6:	3307      	adds	r3, #7
     ae8:	f023 0307 	bic.w	r3, r3, #7
     aec:	f103 0208 	add.w	r2, r3, #8
     af0:	9203      	str	r2, [sp, #12]
     af2:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
     af6:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
     afa:	2901      	cmp	r1, #1
     afc:	d01c      	beq.n	b38 <z_cbvprintf_impl+0x2e4>
			} else if (length_mod == LENGTH_H) {
     afe:	2902      	cmp	r1, #2
     b00:	f47f aeff 	bne.w	902 <z_cbvprintf_impl+0xae>
				value->uint = (unsigned short)value->uint;
     b04:	f8bd 3010 	ldrh.w	r3, [sp, #16]
     b08:	9304      	str	r3, [sp, #16]
     b0a:	2300      	movs	r3, #0
     b0c:	9305      	str	r3, [sp, #20]
     b0e:	e6f8      	b.n	902 <z_cbvprintf_impl+0xae>
					(uint_value_type)va_arg(ap,
     b10:	9b03      	ldr	r3, [sp, #12]
     b12:	3307      	adds	r3, #7
     b14:	f023 0307 	bic.w	r3, r3, #7
     b18:	f103 0208 	add.w	r2, r3, #8
     b1c:	9203      	str	r2, [sp, #12]
     b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
     b22:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
     b26:	e7e8      	b.n	afa <z_cbvprintf_impl+0x2a6>
					(uint_value_type)va_arg(ap, size_t);
     b28:	9b03      	ldr	r3, [sp, #12]
     b2a:	1d1a      	adds	r2, r3, #4
     b2c:	9203      	str	r2, [sp, #12]
     b2e:	681b      	ldr	r3, [r3, #0]
				value->uint =
     b30:	9304      	str	r3, [sp, #16]
     b32:	2300      	movs	r3, #0
     b34:	9305      	str	r3, [sp, #20]
				break;
     b36:	e7e0      	b.n	afa <z_cbvprintf_impl+0x2a6>
				value->uint = (unsigned char)value->uint;
     b38:	f89d 3010 	ldrb.w	r3, [sp, #16]
     b3c:	9304      	str	r3, [sp, #16]
     b3e:	2300      	movs	r3, #0
     b40:	9305      	str	r3, [sp, #20]
     b42:	e6de      	b.n	902 <z_cbvprintf_impl+0xae>
			if (length_mod == LENGTH_UPPER_L) {
     b44:	2908      	cmp	r1, #8
     b46:	d00b      	beq.n	b60 <z_cbvprintf_impl+0x30c>
				value->dbl = va_arg(ap, double);
     b48:	9b03      	ldr	r3, [sp, #12]
     b4a:	3307      	adds	r3, #7
     b4c:	f023 0307 	bic.w	r3, r3, #7
     b50:	f103 0208 	add.w	r2, r3, #8
     b54:	9203      	str	r2, [sp, #12]
     b56:	e9d3 2300 	ldrd	r2, r3, [r3]
     b5a:	e9cd 2304 	strd	r2, r3, [sp, #16]
     b5e:	e6d0      	b.n	902 <z_cbvprintf_impl+0xae>
				value->ldbl = va_arg(ap, long double);
     b60:	9b03      	ldr	r3, [sp, #12]
     b62:	3307      	adds	r3, #7
     b64:	f023 0307 	bic.w	r3, r3, #7
     b68:	f103 0208 	add.w	r2, r3, #8
     b6c:	9203      	str	r2, [sp, #12]
     b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
     b72:	e9cd 2304 	strd	r2, r3, [sp, #16]
     b76:	e6c4      	b.n	902 <z_cbvprintf_impl+0xae>
			value->ptr = va_arg(ap, void *);
     b78:	9b03      	ldr	r3, [sp, #12]
     b7a:	1d1a      	adds	r2, r3, #4
     b7c:	9203      	str	r2, [sp, #12]
     b7e:	681b      	ldr	r3, [r3, #0]
     b80:	9304      	str	r3, [sp, #16]
     b82:	e6be      	b.n	902 <z_cbvprintf_impl+0xae>
			OUTS(sp, fp);
     b84:	9f02      	ldr	r7, [sp, #8]
     b86:	463b      	mov	r3, r7
     b88:	464a      	mov	r2, r9
     b8a:	4629      	mov	r1, r5
     b8c:	4630      	mov	r0, r6
     b8e:	f005 f943 	bl	5e18 <outs>
     b92:	2800      	cmp	r0, #0
     b94:	f2c0 8125 	blt.w	de2 <z_cbvprintf_impl+0x58e>
     b98:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
     b9a:	46b9      	mov	r9, r7
			continue;
     b9c:	e662      	b.n	864 <z_cbvprintf_impl+0x10>
		case '%':
			OUTC('%');
     b9e:	4629      	mov	r1, r5
     ba0:	2025      	movs	r0, #37	; 0x25
     ba2:	47b0      	blx	r6
     ba4:	2800      	cmp	r0, #0
     ba6:	f2c0 811c 	blt.w	de2 <z_cbvprintf_impl+0x58e>
     baa:	3401      	adds	r4, #1
		char sign = 0;
     bac:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
     bae:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
     bb2:	f04f 0900 	mov.w	r9, #0
			break;
     bb6:	e07f      	b.n	cb8 <z_cbvprintf_impl+0x464>
		case 's': {
			bps = (const char *)value->ptr;
     bb8:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
     bbc:	f1ba 0f00 	cmp.w	sl, #0
     bc0:	db07      	blt.n	bd2 <z_cbvprintf_impl+0x37e>
				len = strnlen(bps, precision);
     bc2:	4651      	mov	r1, sl
     bc4:	4648      	mov	r0, r9
     bc6:	f005 fa67 	bl	6098 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
     bca:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
     bce:	46d8      	mov	r8, fp
			precision = -1;

			break;
     bd0:	e072      	b.n	cb8 <z_cbvprintf_impl+0x464>
				len = strlen(bps);
     bd2:	4648      	mov	r0, r9
     bd4:	f005 fa57 	bl	6086 <strlen>
     bd8:	e7f7      	b.n	bca <z_cbvprintf_impl+0x376>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     bda:	9b04      	ldr	r3, [sp, #16]
     bdc:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
     be0:	46d8      	mov	r8, fp
			bpe = buf + 1;
     be2:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
     be6:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
     bea:	e065      	b.n	cb8 <z_cbvprintf_impl+0x464>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
     bec:	f018 0f08 	tst.w	r8, #8
     bf0:	d105      	bne.n	bfe <z_cbvprintf_impl+0x3aa>
				sign = '+';
			} else if (conv->flag_space) {
     bf2:	f018 0810 	ands.w	r8, r8, #16
     bf6:	d004      	beq.n	c02 <z_cbvprintf_impl+0x3ae>
				sign = ' ';
     bf8:	f04f 0820 	mov.w	r8, #32
     bfc:	e001      	b.n	c02 <z_cbvprintf_impl+0x3ae>
				sign = '+';
     bfe:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
     c02:	9a04      	ldr	r2, [sp, #16]
     c04:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
     c06:	2b00      	cmp	r3, #0
     c08:	db02      	blt.n	c10 <z_cbvprintf_impl+0x3bc>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
     c0a:	9204      	str	r2, [sp, #16]
     c0c:	9305      	str	r3, [sp, #20]
     c0e:	e008      	b.n	c22 <z_cbvprintf_impl+0x3ce>
				value->uint = (uint_value_type)-sint;
     c10:	4252      	negs	r2, r2
     c12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     c16:	9204      	str	r2, [sp, #16]
     c18:	9305      	str	r3, [sp, #20]
				sign = '-';
     c1a:	f04f 082d 	mov.w	r8, #45	; 0x2d
     c1e:	e000      	b.n	c22 <z_cbvprintf_impl+0x3ce>
		switch (conv->specifier) {
     c20:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
     c22:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
     c26:	9300      	str	r3, [sp, #0]
     c28:	ab0a      	add	r3, sp, #40	; 0x28
     c2a:	aa06      	add	r2, sp, #24
     c2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
     c30:	f005 f883 	bl	5d3a <encode_uint>
     c34:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
     c36:	f1ba 0f00 	cmp.w	sl, #0
     c3a:	db6c      	blt.n	d16 <z_cbvprintf_impl+0x4c2>
				size_t len = bpe - bps;
     c3c:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
     c40:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
     c44:	f89d 2018 	ldrb.w	r2, [sp, #24]
     c48:	f36f 1286 	bfc	r2, #6, #1
     c4c:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
     c50:	459a      	cmp	sl, r3
     c52:	d963      	bls.n	d1c <z_cbvprintf_impl+0x4c8>
					conv->pad0_value = precision - (int)len;
     c54:	ebaa 0303 	sub.w	r3, sl, r3
     c58:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
     c5a:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
     c5e:	e02b      	b.n	cb8 <z_cbvprintf_impl+0x464>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
     c60:	9804      	ldr	r0, [sp, #16]
     c62:	b928      	cbnz	r0, c70 <z_cbvprintf_impl+0x41c>
		char sign = 0;
     c64:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
     c66:	f8df a180 	ldr.w	sl, [pc, #384]	; de8 <z_cbvprintf_impl+0x594>
			bps = "(nil)";
     c6a:	f1aa 0905 	sub.w	r9, sl, #5
     c6e:	e023      	b.n	cb8 <z_cbvprintf_impl+0x464>
				bps = encode_uint((uintptr_t)value->ptr, conv,
     c70:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
     c74:	9300      	str	r3, [sp, #0]
     c76:	ab0a      	add	r3, sp, #40	; 0x28
     c78:	aa06      	add	r2, sp, #24
     c7a:	2100      	movs	r1, #0
     c7c:	f005 f85d 	bl	5d3a <encode_uint>
     c80:	4681      	mov	r9, r0
				conv->altform_0c = true;
     c82:	f89d 301a 	ldrb.w	r3, [sp, #26]
     c86:	f043 0310 	orr.w	r3, r3, #16
     c8a:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
     c8e:	2378      	movs	r3, #120	; 0x78
     c90:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
     c94:	46d8      	mov	r8, fp
				goto prec_int_pad0;
     c96:	e7ce      	b.n	c36 <z_cbvprintf_impl+0x3e2>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
     c98:	4622      	mov	r2, r4
     c9a:	9904      	ldr	r1, [sp, #16]
     c9c:	a806      	add	r0, sp, #24
     c9e:	f005 f89c 	bl	5dda <store_count>
		char sign = 0;
     ca2:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
     ca4:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
     ca8:	f04f 0900 	mov.w	r9, #0
			}

			break;
     cac:	e004      	b.n	cb8 <z_cbvprintf_impl+0x464>
		switch (conv->specifier) {
     cae:	46d8      	mov	r8, fp
     cb0:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
     cb4:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
     cb8:	f1b9 0f00 	cmp.w	r9, #0
     cbc:	f000 808d 	beq.w	dda <z_cbvprintf_impl+0x586>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
     cc0:	ebaa 0309 	sub.w	r3, sl, r9
		int pad_len = 0;

		if (sign != 0) {
     cc4:	f1b8 0f00 	cmp.w	r8, #0
     cc8:	d000      	beq.n	ccc <z_cbvprintf_impl+0x478>
			nj_len += 1U;
     cca:	3301      	adds	r3, #1
		}

		if (conv->altform_0c) {
     ccc:	f89d 201a 	ldrb.w	r2, [sp, #26]
     cd0:	f012 0f10 	tst.w	r2, #16
     cd4:	d025      	beq.n	d22 <z_cbvprintf_impl+0x4ce>
			nj_len += 2U;
     cd6:	3302      	adds	r3, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
     cd8:	9907      	ldr	r1, [sp, #28]
     cda:	440b      	add	r3, r1
		if (conv->pad_fp) {
     cdc:	f012 0f40 	tst.w	r2, #64	; 0x40
     ce0:	d001      	beq.n	ce6 <z_cbvprintf_impl+0x492>
			nj_len += conv->pad0_pre_exp;
     ce2:	9a08      	ldr	r2, [sp, #32]
     ce4:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
     ce6:	2f00      	cmp	r7, #0
     ce8:	dd31      	ble.n	d4e <z_cbvprintf_impl+0x4fa>
			width -= (int)nj_len;
     cea:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
     cec:	f89d 3018 	ldrb.w	r3, [sp, #24]
     cf0:	f013 0f04 	tst.w	r3, #4
     cf4:	d12b      	bne.n	d4e <z_cbvprintf_impl+0x4fa>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
     cf6:	f013 0f40 	tst.w	r3, #64	; 0x40
     cfa:	d017      	beq.n	d2c <z_cbvprintf_impl+0x4d8>
					if (sign != 0) {
     cfc:	f1b8 0f00 	cmp.w	r8, #0
     d00:	d017      	beq.n	d32 <z_cbvprintf_impl+0x4de>
						OUTC(sign);
     d02:	4629      	mov	r1, r5
     d04:	4640      	mov	r0, r8
     d06:	47b0      	blx	r6
     d08:	2800      	cmp	r0, #0
     d0a:	db6a      	blt.n	de2 <z_cbvprintf_impl+0x58e>
     d0c:	3401      	adds	r4, #1
						sign = 0;
     d0e:	46d8      	mov	r8, fp
					}
					pad = '0';
     d10:	f04f 0b30 	mov.w	fp, #48	; 0x30
     d14:	e00f      	b.n	d36 <z_cbvprintf_impl+0x4e2>
		const char *bpe = buf + sizeof(buf);
     d16:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
     d1a:	e7cd      	b.n	cb8 <z_cbvprintf_impl+0x464>
     d1c:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
     d20:	e7ca      	b.n	cb8 <z_cbvprintf_impl+0x464>
		} else if (conv->altform_0) {
     d22:	f012 0f08 	tst.w	r2, #8
     d26:	d0d7      	beq.n	cd8 <z_cbvprintf_impl+0x484>
			nj_len += 1U;
     d28:	3301      	adds	r3, #1
     d2a:	e7d5      	b.n	cd8 <z_cbvprintf_impl+0x484>
				char pad = ' ';
     d2c:	f04f 0b20 	mov.w	fp, #32
     d30:	e001      	b.n	d36 <z_cbvprintf_impl+0x4e2>
					pad = '0';
     d32:	f04f 0b30 	mov.w	fp, #48	; 0x30
     d36:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
     d38:	1e5f      	subs	r7, r3, #1
     d3a:	2b00      	cmp	r3, #0
     d3c:	dd07      	ble.n	d4e <z_cbvprintf_impl+0x4fa>
					OUTC(pad);
     d3e:	4629      	mov	r1, r5
     d40:	4658      	mov	r0, fp
     d42:	47b0      	blx	r6
     d44:	2800      	cmp	r0, #0
     d46:	db4c      	blt.n	de2 <z_cbvprintf_impl+0x58e>
     d48:	3401      	adds	r4, #1
				while (width-- > 0) {
     d4a:	463b      	mov	r3, r7
     d4c:	e7f4      	b.n	d38 <z_cbvprintf_impl+0x4e4>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
     d4e:	f1b8 0f00 	cmp.w	r8, #0
     d52:	d005      	beq.n	d60 <z_cbvprintf_impl+0x50c>
			OUTC(sign);
     d54:	4629      	mov	r1, r5
     d56:	4640      	mov	r0, r8
     d58:	47b0      	blx	r6
     d5a:	2800      	cmp	r0, #0
     d5c:	db41      	blt.n	de2 <z_cbvprintf_impl+0x58e>
     d5e:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
     d60:	f89d 301a 	ldrb.w	r3, [sp, #26]
     d64:	f3c3 1200 	ubfx	r2, r3, #4, #1
     d68:	f3c3 03c0 	ubfx	r3, r3, #3, #1
     d6c:	431a      	orrs	r2, r3
     d6e:	d005      	beq.n	d7c <z_cbvprintf_impl+0x528>
				OUTC('0');
     d70:	4629      	mov	r1, r5
     d72:	2030      	movs	r0, #48	; 0x30
     d74:	47b0      	blx	r6
     d76:	2800      	cmp	r0, #0
     d78:	db33      	blt.n	de2 <z_cbvprintf_impl+0x58e>
     d7a:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
     d7c:	f89d 301a 	ldrb.w	r3, [sp, #26]
     d80:	f013 0f10 	tst.w	r3, #16
     d84:	d006      	beq.n	d94 <z_cbvprintf_impl+0x540>
				OUTC(conv->specifier);
     d86:	4629      	mov	r1, r5
     d88:	f89d 001b 	ldrb.w	r0, [sp, #27]
     d8c:	47b0      	blx	r6
     d8e:	2800      	cmp	r0, #0
     d90:	db27      	blt.n	de2 <z_cbvprintf_impl+0x58e>
     d92:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
     d94:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
     d96:	f103 38ff 	add.w	r8, r3, #4294967295
     d9a:	2b00      	cmp	r3, #0
     d9c:	dd07      	ble.n	dae <z_cbvprintf_impl+0x55a>
				OUTC('0');
     d9e:	4629      	mov	r1, r5
     da0:	2030      	movs	r0, #48	; 0x30
     da2:	47b0      	blx	r6
     da4:	2800      	cmp	r0, #0
     da6:	db1c      	blt.n	de2 <z_cbvprintf_impl+0x58e>
     da8:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
     daa:	4643      	mov	r3, r8
     dac:	e7f3      	b.n	d96 <z_cbvprintf_impl+0x542>
			}

			OUTS(bps, bpe);
     dae:	4653      	mov	r3, sl
     db0:	464a      	mov	r2, r9
     db2:	4629      	mov	r1, r5
     db4:	4630      	mov	r0, r6
     db6:	f005 f82f 	bl	5e18 <outs>
     dba:	2800      	cmp	r0, #0
     dbc:	db11      	blt.n	de2 <z_cbvprintf_impl+0x58e>
     dbe:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
     dc0:	2f00      	cmp	r7, #0
     dc2:	dd07      	ble.n	dd4 <z_cbvprintf_impl+0x580>
			OUTC(' ');
     dc4:	4629      	mov	r1, r5
     dc6:	2020      	movs	r0, #32
     dc8:	47b0      	blx	r6
     dca:	2800      	cmp	r0, #0
     dcc:	db09      	blt.n	de2 <z_cbvprintf_impl+0x58e>
     dce:	3401      	adds	r4, #1
			--width;
     dd0:	3f01      	subs	r7, #1
     dd2:	e7f5      	b.n	dc0 <z_cbvprintf_impl+0x56c>
		fp = extract_conversion(conv, sp);
     dd4:	f8dd 9008 	ldr.w	r9, [sp, #8]
     dd8:	e544      	b.n	864 <z_cbvprintf_impl+0x10>
     dda:	f8dd 9008 	ldr.w	r9, [sp, #8]
     dde:	e541      	b.n	864 <z_cbvprintf_impl+0x10>
		}
	}

	return count;
     de0:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
     de2:	b011      	add	sp, #68	; 0x44
     de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     de8:	00007da9 	.word	0x00007da9

00000dec <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
     dec:	b508      	push	{r3, lr}
     dee:	f04f 0220 	mov.w	r2, #32
     df2:	f3ef 8311 	mrs	r3, BASEPRI
     df6:	f382 8812 	msr	BASEPRI_MAX, r2
     dfa:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
     dfe:	f005 f8b2 	bl	5f66 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
     e02:	4803      	ldr	r0, [pc, #12]	; (e10 <sys_reboot+0x24>)
     e04:	f004 fc47 	bl	5696 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
     e08:	f000 fac0 	bl	138c <arch_cpu_idle>
     e0c:	e7fc      	b.n	e08 <sys_reboot+0x1c>
     e0e:	bf00      	nop
     e10:	00007dac 	.word	0x00007dac

00000e14 <nrfx_coredep_delay_us>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
     e14:	b168      	cbz	r0, e32 <nrfx_coredep_delay_us+0x1e>
{
     e16:	b508      	push	{r3, lr}
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
     e18:	4a06      	ldr	r2, [pc, #24]	; (e34 <nrfx_coredep_delay_us+0x20>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
     e1a:	4b07      	ldr	r3, [pc, #28]	; (e38 <nrfx_coredep_delay_us+0x24>)
     e1c:	681b      	ldr	r3, [r3, #0]
     e1e:	4907      	ldr	r1, [pc, #28]	; (e3c <nrfx_coredep_delay_us+0x28>)
     e20:	fba1 1303 	umull	r1, r3, r1, r3
     e24:	0c9b      	lsrs	r3, r3, #18
    delay_cycles(cycles);
     e26:	fb00 f003 	mul.w	r0, r0, r3
     e2a:	f042 0301 	orr.w	r3, r2, #1
     e2e:	4798      	blx	r3
}
     e30:	bd08      	pop	{r3, pc}
     e32:	4770      	bx	lr
     e34:	00007c90 	.word	0x00007c90
     e38:	200000f8 	.word	0x200000f8
     e3c:	431bde83 	.word	0x431bde83

00000e40 <nordicsemi_nrf53_init>:
     e40:	f04f 0320 	mov.w	r3, #32
     e44:	f3ef 8c11 	mrs	ip, BASEPRI
     e48:	f383 8812 	msr	BASEPRI_MAX, r3
     e4c:	f3bf 8f6f 	isb	sy

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_cache_enable(NRF_CACHE_Type * p_reg)
{
    p_reg->ENABLE = CACHE_ENABLE_ENABLE_Enabled;
     e50:	2101      	movs	r1, #1
     e52:	4b12      	ldr	r3, [pc, #72]	; (e9c <nordicsemi_nrf53_init+0x5c>)
     e54:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
     e58:	4a11      	ldr	r2, [pc, #68]	; (ea0 <nordicsemi_nrf53_init+0x60>)
     e5a:	2302      	movs	r3, #2
     e5c:	f8c2 36d0 	str.w	r3, [r2, #1744]	; 0x6d0

#if NRF_GPIO_HAS_SEL
NRF_STATIC_INLINE void nrf_gpio_pin_control_select(uint32_t pin_number, nrf_gpio_pin_sel_t ctrl)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
     e60:	4810      	ldr	r0, [pc, #64]	; (ea4 <nordicsemi_nrf53_init+0x64>)
     e62:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
     e66:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (ctrl << GPIO_PIN_CNF_MCUSEL_Pos);
     e6a:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
     e6e:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
     e72:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
     e76:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (ctrl << GPIO_PIN_CNF_MCUSEL_Pos);
     e7a:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
     e7e:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
     e82:	f8c2 1704 	str.w	r1, [r2, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
     e86:	f8c2 1904 	str.w	r1, [r2, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
     e8a:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
	__asm__ volatile(
     e8e:	f38c 8811 	msr	BASEPRI, ip
     e92:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     e96:	2000      	movs	r0, #0
     e98:	4770      	bx	lr
     e9a:	bf00      	nop
     e9c:	50001000 	.word	0x50001000
     ea0:	50004000 	.word	0x50004000
     ea4:	50842500 	.word	0x50842500

00000ea8 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
     ea8:	2806      	cmp	r0, #6
     eaa:	d000      	beq.n	eae <pm_state_set+0x6>
     eac:	4770      	bx	lr
{
     eae:	b508      	push	{r3, lr}
	case PM_STATE_SOFT_OFF:
		nrf_regulators_system_off(NRF_REGULATORS);
     eb0:	4801      	ldr	r0, [pc, #4]	; (eb8 <pm_state_set+0x10>)
     eb2:	f004 ffd0 	bl	5e56 <nrf_regulators_system_off>
     eb6:	bf00      	nop
     eb8:	50004000 	.word	0x50004000

00000ebc <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
     ebc:	f002 b89c 	b.w	2ff8 <SystemInit>

00000ec0 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
     ec0:	b570      	push	{r4, r5, r6, lr}
     ec2:	4605      	mov	r5, r0
	__asm__ volatile(
     ec4:	f04f 0320 	mov.w	r3, #32
     ec8:	f3ef 8611 	mrs	r6, BASEPRI
     ecc:	f383 8812 	msr	BASEPRI_MAX, r3
     ed0:	f3bf 8f6f 	isb	sy
     ed4:	4b0e      	ldr	r3, [pc, #56]	; (f10 <pm_state_notify+0x50>)
     ed6:	681c      	ldr	r4, [r3, #0]
     ed8:	e00d      	b.n	ef6 <pm_state_notify+0x36>
	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
		if (entering_state) {
			callback = notifier->state_entry;
		} else {
			callback = notifier->state_exit;
     eda:	68a2      	ldr	r2, [r4, #8]
		}

		if (callback) {
     edc:	b13a      	cbz	r2, eee <pm_state_notify+0x2e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
     ede:	4b0d      	ldr	r3, [pc, #52]	; (f14 <pm_state_notify+0x54>)
     ee0:	7d1b      	ldrb	r3, [r3, #20]
     ee2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     ee6:	490c      	ldr	r1, [pc, #48]	; (f18 <pm_state_notify+0x58>)
     ee8:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
     eec:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
     eee:	4623      	mov	r3, r4
	return node->next;
     ef0:	6824      	ldr	r4, [r4, #0]
     ef2:	b104      	cbz	r4, ef6 <pm_state_notify+0x36>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
     ef4:	b123      	cbz	r3, f00 <pm_state_notify+0x40>
     ef6:	b12c      	cbz	r4, f04 <pm_state_notify+0x44>
		if (entering_state) {
     ef8:	2d00      	cmp	r5, #0
     efa:	d0ee      	beq.n	eda <pm_state_notify+0x1a>
			callback = notifier->state_entry;
     efc:	6862      	ldr	r2, [r4, #4]
     efe:	e7ed      	b.n	edc <pm_state_notify+0x1c>
     f00:	461c      	mov	r4, r3
     f02:	e7f8      	b.n	ef6 <pm_state_notify+0x36>
	__asm__ volatile(
     f04:	f386 8811 	msr	BASEPRI, r6
     f08:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
     f0c:	bd70      	pop	{r4, r5, r6, pc}
     f0e:	bf00      	nop
     f10:	200004c8 	.word	0x200004c8
     f14:	20000ae8 	.word	0x20000ae8
     f18:	200004bc 	.word	0x200004bc

00000f1c <pm_exit_pos_ops>:
{
     f1c:	b508      	push	{r3, lr}
	if (pm_state_exit_post_ops != NULL) {
     f1e:	4b06      	ldr	r3, [pc, #24]	; (f38 <pm_exit_pos_ops+0x1c>)
     f20:	b123      	cbz	r3, f2c <pm_exit_pos_ops+0x10>
		pm_state_exit_post_ops(info->state, info->substate_id);
     f22:	7841      	ldrb	r1, [r0, #1]
     f24:	7800      	ldrb	r0, [r0, #0]
     f26:	f004 ff9d 	bl	5e64 <pm_state_exit_post_ops>
}
     f2a:	bd08      	pop	{r3, pc}
     f2c:	2300      	movs	r3, #0
     f2e:	f383 8811 	msr	BASEPRI, r3
     f32:	f3bf 8f6f 	isb	sy
     f36:	e7f8      	b.n	f2a <pm_exit_pos_ops+0xe>
     f38:	00005e65 	.word	0x00005e65

00000f3c <pm_system_resume>:

void pm_system_resume(void)
{
     f3c:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
     f3e:	4b0e      	ldr	r3, [pc, #56]	; (f78 <pm_system_resume+0x3c>)
     f40:	7d1c      	ldrb	r4, [r3, #20]
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
     f42:	4621      	mov	r1, r4
     f44:	480d      	ldr	r0, [pc, #52]	; (f7c <pm_system_resume+0x40>)
     f46:	f004 ff93 	bl	5e70 <atomic_test_and_clear_bit>
     f4a:	b900      	cbnz	r0, f4e <pm_system_resume+0x12>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
			0, 0};
	}
}
     f4c:	bd70      	pop	{r4, r5, r6, pc}
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
     f4e:	0065      	lsls	r5, r4, #1
     f50:	eb04 0044 	add.w	r0, r4, r4, lsl #1
     f54:	4e0a      	ldr	r6, [pc, #40]	; (f80 <pm_system_resume+0x44>)
     f56:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     f5a:	f7ff ffdf 	bl	f1c <pm_exit_pos_ops>
		pm_state_notify(false);
     f5e:	2000      	movs	r0, #0
     f60:	f7ff ffae 	bl	ec0 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
     f64:	192b      	adds	r3, r5, r4
     f66:	0099      	lsls	r1, r3, #2
     f68:	eb06 0383 	add.w	r3, r6, r3, lsl #2
     f6c:	2200      	movs	r2, #0
     f6e:	5072      	str	r2, [r6, r1]
     f70:	605a      	str	r2, [r3, #4]
     f72:	609a      	str	r2, [r3, #8]
}
     f74:	e7ea      	b.n	f4c <pm_system_resume+0x10>
     f76:	bf00      	nop
     f78:	20000ae8 	.word	0x20000ae8
     f7c:	200004d0 	.word	0x200004d0
     f80:	200004bc 	.word	0x200004bc

00000f84 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
     f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     f86:	4605      	mov	r5, r0
	uint8_t id = CURRENT_CPU;
     f88:	4b38      	ldr	r3, [pc, #224]	; (106c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x6c>)
     f8a:	7d1c      	ldrb	r4, [r3, #20]
	__asm__ volatile(
     f8c:	f04f 0320 	mov.w	r3, #32
     f90:	f3ef 8611 	mrs	r6, BASEPRI
     f94:	f383 8812 	msr	BASEPRI_MAX, r3
     f98:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
     f9c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
     fa0:	4b33      	ldr	r3, [pc, #204]	; (1070 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x70>)
     fa2:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
     fa6:	2b00      	cmp	r3, #0
     fa8:	d039      	beq.n	101e <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x1e>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
     faa:	4b32      	ldr	r3, [pc, #200]	; (1074 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x74>)
     fac:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
     fb0:	4f2f      	ldr	r7, [pc, #188]	; (1070 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x70>)
     fb2:	ea4f 0e82 	mov.w	lr, r2, lsl #2
     fb6:	eb07 0382 	add.w	r3, r7, r2, lsl #2
     fba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
     fbe:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
     fc2:	2300      	movs	r3, #0
     fc4:	f807 300e 	strb.w	r3, [r7, lr]
	__asm__ volatile(
     fc8:	f386 8811 	msr	BASEPRI, r6
     fcc:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
     fd0:	eb04 0344 	add.w	r3, r4, r4, lsl #1
     fd4:	4a27      	ldr	r2, [pc, #156]	; (1074 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x74>)
     fd6:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
     fda:	2b00      	cmp	r3, #0
     fdc:	d044      	beq.n	1068 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x68>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
     fde:	f1b5 3fff 	cmp.w	r5, #4294967295
     fe2:	d12b      	bne.n	103c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x3c>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
     fe4:	f003 fa04 	bl	43f0 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
     fe8:	2001      	movs	r0, #1
     fea:	f7ff ff69 	bl	ec0 <pm_state_notify>
	atomic_set_bit(z_post_ops_required, id);
     fee:	4621      	mov	r1, r4
     ff0:	4821      	ldr	r0, [pc, #132]	; (1078 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x78>)
     ff2:	f004 ff55 	bl	5ea0 <atomic_set_bit>
	if (pm_state_set != NULL) {
     ff6:	4b21      	ldr	r3, [pc, #132]	; (107c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x7c>)
     ff8:	b15b      	cbz	r3, 1012 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x12>
		pm_state_set(info->state, info->substate_id);
     ffa:	4a1e      	ldr	r2, [pc, #120]	; (1074 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x74>)
     ffc:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    1000:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1004:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    1008:	7859      	ldrb	r1, [r3, #1]
    100a:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
    100e:	f7ff ff4b 	bl	ea8 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    1012:	f7ff ff93 	bl	f3c <pm_system_resume>
	k_sched_unlock();
    1016:	f003 fbed 	bl	47f4 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    101a:	2001      	movs	r0, #1
}
    101c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		info = pm_policy_next_state(id, ticks);
    101e:	4601      	mov	r1, r0
    1020:	4620      	mov	r0, r4
    1022:	f000 f831 	bl	1088 <pm_policy_next_state>
		if (info != NULL) {
    1026:	2800      	cmp	r0, #0
    1028:	d0ce      	beq.n	fc8 <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
    102a:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    102e:	4b11      	ldr	r3, [pc, #68]	; (1074 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x74>)
    1030:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    1034:	c807      	ldmia	r0, {r0, r1, r2}
    1036:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    103a:	e7c5      	b.n	fc8 <pm_system_suspend+0x44>
		     k_us_to_ticks_ceil32(
    103c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    1040:	4b0c      	ldr	r3, [pc, #48]	; (1074 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x74>)
    1042:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1046:	6898      	ldr	r0, [r3, #8]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    1048:	0c41      	lsrs	r1, r0, #17
    104a:	03c0      	lsls	r0, r0, #15
    104c:	4b0c      	ldr	r3, [pc, #48]	; (1080 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x80>)
    104e:	18c0      	adds	r0, r0, r3
    1050:	4a0c      	ldr	r2, [pc, #48]	; (1084 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x84>)
    1052:	f04f 0300 	mov.w	r3, #0
    1056:	f141 0100 	adc.w	r1, r1, #0
    105a:	f7ff f87b 	bl	154 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    105e:	2101      	movs	r1, #1
    1060:	1a28      	subs	r0, r5, r0
    1062:	f006 fb1a 	bl	769a <z_set_timeout_expiry>
    1066:	e7bd      	b.n	fe4 <pm_system_suspend+0x60>
		return false;
    1068:	2000      	movs	r0, #0
    106a:	e7d7      	b.n	101c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x1c>
    106c:	20000ae8 	.word	0x20000ae8
    1070:	200004b0 	.word	0x200004b0
    1074:	200004bc 	.word	0x200004bc
    1078:	200004d0 	.word	0x200004d0
    107c:	00000ea9 	.word	0x00000ea9
    1080:	000f423f 	.word	0x000f423f
    1084:	000f4240 	.word	0x000f4240

00001088 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    1088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    108c:	b082      	sub	sp, #8
    108e:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    1090:	a901      	add	r1, sp, #4
    1092:	f000 f845 	bl	1120 <pm_state_cpu_get_all>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    1096:	1e44      	subs	r4, r0, #1
    1098:	b224      	sxth	r4, r4
    109a:	e007      	b.n	10ac <pm_policy_next_state+0x24>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
		    (exit_latency >= max_latency_ticks)) {
			continue;
		}

		if ((ticks == K_TICKS_FOREVER) ||
    109c:	f1b6 3fff 	cmp.w	r6, #4294967295
    10a0:	d033      	beq.n	110a <pm_policy_next_state+0x82>
		    (ticks >= (min_residency + exit_latency))) {
    10a2:	4480      	add	r8, r0
		if ((ticks == K_TICKS_FOREVER) ||
    10a4:	45b0      	cmp	r8, r6
    10a6:	d930      	bls.n	110a <pm_policy_next_state+0x82>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    10a8:	3c01      	subs	r4, #1
    10aa:	b224      	sxth	r4, r4
    10ac:	2c00      	cmp	r4, #0
    10ae:	db2b      	blt.n	1108 <pm_policy_next_state+0x80>
		const struct pm_state_info *state = &cpu_states[i];
    10b0:	9b01      	ldr	r3, [sp, #4]
    10b2:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    10b6:	eb03 0582 	add.w	r5, r3, r2, lsl #2
		if (pm_policy_state_lock_is_active(state->state, state->substate_id)) {
    10ba:	7869      	ldrb	r1, [r5, #1]
    10bc:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
    10c0:	f004 fefd 	bl	5ebe <pm_policy_state_lock_is_active>
    10c4:	2800      	cmp	r0, #0
    10c6:	d1ef      	bne.n	10a8 <pm_policy_next_state+0x20>
		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
    10c8:	6868      	ldr	r0, [r5, #4]
    10ca:	0c41      	lsrs	r1, r0, #17
    10cc:	03c0      	lsls	r0, r0, #15
    10ce:	4f11      	ldr	r7, [pc, #68]	; (1114 <pm_policy_next_state+0x8c>)
    10d0:	19c0      	adds	r0, r0, r7
    10d2:	4a11      	ldr	r2, [pc, #68]	; (1118 <pm_policy_next_state+0x90>)
    10d4:	f04f 0300 	mov.w	r3, #0
    10d8:	f141 0100 	adc.w	r1, r1, #0
    10dc:	f7ff f83a 	bl	154 <__aeabi_uldivmod>
    10e0:	4680      	mov	r8, r0
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);
    10e2:	68ab      	ldr	r3, [r5, #8]
    10e4:	0c59      	lsrs	r1, r3, #17
    10e6:	03db      	lsls	r3, r3, #15
    10e8:	19d8      	adds	r0, r3, r7
    10ea:	4a0b      	ldr	r2, [pc, #44]	; (1118 <pm_policy_next_state+0x90>)
    10ec:	f04f 0300 	mov.w	r3, #0
    10f0:	f141 0100 	adc.w	r1, r1, #0
    10f4:	f7ff f82e 	bl	154 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    10f8:	4b08      	ldr	r3, [pc, #32]	; (111c <pm_policy_next_state+0x94>)
    10fa:	681b      	ldr	r3, [r3, #0]
    10fc:	f1b3 3fff 	cmp.w	r3, #4294967295
    1100:	d0cc      	beq.n	109c <pm_policy_next_state+0x14>
    1102:	4283      	cmp	r3, r0
    1104:	d8ca      	bhi.n	109c <pm_policy_next_state+0x14>
    1106:	e7cf      	b.n	10a8 <pm_policy_next_state+0x20>
			return state;
		}
	}

	return NULL;
    1108:	2500      	movs	r5, #0
}
    110a:	4628      	mov	r0, r5
    110c:	b002      	add	sp, #8
    110e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1112:	bf00      	nop
    1114:	000f423f 	.word	0x000f423f
    1118:	000f4240 	.word	0x000f4240
    111c:	200000b4 	.word	0x200000b4

00001120 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    1120:	b908      	cbnz	r0, 1126 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    1122:	4b02      	ldr	r3, [pc, #8]	; (112c <pm_state_cpu_get_all+0xc>)
    1124:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    1126:	2000      	movs	r0, #0
    1128:	4770      	bx	lr
    112a:	bf00      	nop
    112c:	00007dd8 	.word	0x00007dd8

00001130 <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
    1130:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
    1132:	4802      	ldr	r0, [pc, #8]	; (113c <nrf_cc3xx_platform_abort_init+0xc>)
    1134:	f004 f8be 	bl	52b4 <nrf_cc3xx_platform_set_abort>
}
    1138:	bd08      	pop	{r3, pc}
    113a:	bf00      	nop
    113c:	00007dd8 	.word	0x00007dd8

00001140 <mutex_flags_unknown>:
                    NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_HW_MUTEX :
                    NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID
};

static bool mutex_flags_unknown(uint32_t flags){
    switch(flags){
    1140:	f5b0 0f68 	cmp.w	r0, #15204352	; 0xe80000
    1144:	d017      	beq.n	1176 <mutex_flags_unknown+0x36>
    1146:	d80c      	bhi.n	1162 <mutex_flags_unknown+0x22>
    1148:	f640 63ba 	movw	r3, #3770	; 0xeba
    114c:	4298      	cmp	r0, r3
    114e:	d014      	beq.n	117a <mutex_flags_unknown+0x3a>
    1150:	f5b0 3f68 	cmp.w	r0, #237568	; 0x3a000
    1154:	d013      	beq.n	117e <mutex_flags_unknown+0x3e>
    1156:	283a      	cmp	r0, #58	; 0x3a
    1158:	d001      	beq.n	115e <mutex_flags_unknown+0x1e>
        case NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID:
        case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_HW_MUTEX:
        case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
            return false;
        default:
            return true;
    115a:	2001      	movs	r0, #1
    115c:	4770      	bx	lr
    switch(flags){
    115e:	2000      	movs	r0, #0
    1160:	4770      	bx	lr
    1162:	4b09      	ldr	r3, [pc, #36]	; (1188 <mutex_flags_unknown+0x48>)
    1164:	4298      	cmp	r0, r3
    1166:	d00c      	beq.n	1182 <mutex_flags_unknown+0x42>
    1168:	4b08      	ldr	r3, [pc, #32]	; (118c <mutex_flags_unknown+0x4c>)
    116a:	4298      	cmp	r0, r3
    116c:	d001      	beq.n	1172 <mutex_flags_unknown+0x32>
            return true;
    116e:	2001      	movs	r0, #1
    }
}
    1170:	4770      	bx	lr
    switch(flags){
    1172:	2000      	movs	r0, #0
    1174:	4770      	bx	lr
    1176:	2000      	movs	r0, #0
    1178:	4770      	bx	lr
    117a:	2000      	movs	r0, #0
    117c:	4770      	bx	lr
    117e:	2000      	movs	r0, #0
    1180:	4770      	bx	lr
    1182:	2000      	movs	r0, #0
    1184:	4770      	bx	lr
    1186:	bf00      	nop
    1188:	3a00003a 	.word	0x3a00003a
    118c:	a95c5f2c 	.word	0xa95c5f2c

00001190 <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    1190:	b328      	cbz	r0, 11de <mutex_unlock_platform+0x4e>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1192:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    1194:	6843      	ldr	r3, [r0, #4]
    1196:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    119a:	d00a      	beq.n	11b2 <mutex_unlock_platform+0x22>
    119c:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    11a0:	d014      	beq.n	11cc <mutex_unlock_platform+0x3c>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    11a2:	4912      	ldr	r1, [pc, #72]	; (11ec <mutex_unlock_platform+0x5c>)
    11a4:	428b      	cmp	r3, r1
    11a6:	d01f      	beq.n	11e8 <mutex_unlock_platform+0x58>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    11a8:	6800      	ldr	r0, [r0, #0]
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    11aa:	f003 f801 	bl	41b0 <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    11ae:	2000      	movs	r0, #0
    11b0:	e014      	b.n	11dc <mutex_unlock_platform+0x4c>
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
    11b2:	6803      	ldr	r3, [r0, #0]
 * @return true if @a new_value is written, false otherwise.
 */
static inline bool atomic_cas(atomic_t *target, atomic_val_t old_value,
			  atomic_val_t new_value)
{
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    11b4:	2200      	movs	r2, #0
    11b6:	e8d3 1fef 	ldaex	r1, [r3]
    11ba:	2901      	cmp	r1, #1
    11bc:	d103      	bne.n	11c6 <mutex_unlock_platform+0x36>
    11be:	e8c3 2fe0 	stlex	r0, r2, [r3]
    11c2:	2800      	cmp	r0, #0
    11c4:	d1f7      	bne.n	11b6 <mutex_unlock_platform+0x26>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    11c6:	d10d      	bne.n	11e4 <mutex_unlock_platform+0x54>
    11c8:	4610      	mov	r0, r2
    11ca:	e007      	b.n	11dc <mutex_unlock_platform+0x4c>
        nrf_mutex_unlock(NRF_MUTEX, *((uint8_t *)mutex->mutex));
    11cc:	6803      	ldr	r3, [r0, #0]
    11ce:	781b      	ldrb	r3, [r3, #0]
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
}

NRF_STATIC_INLINE void nrf_mutex_unlock(NRF_MUTEX_Type * p_reg, uint8_t mutex)
{
    p_reg->MUTEX[mutex] = MUTEX_MUTEX_MUTEX_Unlocked;
    11d0:	f503 7380 	add.w	r3, r3, #256	; 0x100
    11d4:	2000      	movs	r0, #0
    11d6:	4a06      	ldr	r2, [pc, #24]	; (11f0 <mutex_unlock_platform+0x60>)
    11d8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    }
}
    11dc:	bd08      	pop	{r3, pc}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    11de:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    11e2:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
    11e4:	4803      	ldr	r0, [pc, #12]	; (11f4 <mutex_unlock_platform+0x64>)
    11e6:	e7f9      	b.n	11dc <mutex_unlock_platform+0x4c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    11e8:	4803      	ldr	r0, [pc, #12]	; (11f8 <mutex_unlock_platform+0x68>)
    11ea:	e7f7      	b.n	11dc <mutex_unlock_platform+0x4c>
    11ec:	a95c5f2c 	.word	0xa95c5f2c
    11f0:	50030000 	.word	0x50030000
    11f4:	ffff8fe9 	.word	0xffff8fe9
    11f8:	ffff8fea 	.word	0xffff8fea

000011fc <mutex_lock_platform>:
    if(mutex == NULL) {
    11fc:	b388      	cbz	r0, 1262 <mutex_lock_platform+0x66>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    11fe:	b508      	push	{r3, lr}
    switch (mutex->flags) {
    1200:	6843      	ldr	r3, [r0, #4]
    1202:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    1206:	d00f      	beq.n	1228 <mutex_lock_platform+0x2c>
    1208:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    120c:	d019      	beq.n	1242 <mutex_lock_platform+0x46>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    120e:	4916      	ldr	r1, [pc, #88]	; (1268 <mutex_lock_platform+0x6c>)
    1210:	428b      	cmp	r3, r1
    1212:	d024      	beq.n	125e <mutex_lock_platform+0x62>
        p_mutex = (struct k_mutex *)mutex->mutex;
    1214:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    1216:	f04f 32ff 	mov.w	r2, #4294967295
    121a:	f04f 33ff 	mov.w	r3, #4294967295
    121e:	f002 ff43 	bl	40a8 <z_impl_k_mutex_lock>
        if (ret == 0) {
    1222:	b168      	cbz	r0, 1240 <mutex_lock_platform+0x44>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
    1224:	4811      	ldr	r0, [pc, #68]	; (126c <mutex_lock_platform+0x70>)
    1226:	e00b      	b.n	1240 <mutex_lock_platform+0x44>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
    1228:	6803      	ldr	r3, [r0, #0]
    122a:	2201      	movs	r2, #1
    122c:	e8d3 1fef 	ldaex	r1, [r3]
    1230:	2900      	cmp	r1, #0
    1232:	d103      	bne.n	123c <mutex_lock_platform+0x40>
    1234:	e8c3 2fe0 	stlex	r0, r2, [r3]
    1238:	2800      	cmp	r0, #0
    123a:	d1f7      	bne.n	122c <mutex_lock_platform+0x30>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    123c:	d10b      	bne.n	1256 <mutex_lock_platform+0x5a>
    123e:	2000      	movs	r0, #0
}
    1240:	bd08      	pop	{r3, pc}
        return nrf_mutex_lock(NRF_MUTEX, *((uint8_t *)mutex->mutex)) ?
    1242:	6803      	ldr	r3, [r0, #0]
    1244:	781b      	ldrb	r3, [r3, #0]
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
    1246:	f503 7380 	add.w	r3, r3, #256	; 0x100
    124a:	4a09      	ldr	r2, [pc, #36]	; (1270 <mutex_lock_platform+0x74>)
    124c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1250:	b91b      	cbnz	r3, 125a <mutex_lock_platform+0x5e>
    1252:	2000      	movs	r0, #0
    1254:	e7f4      	b.n	1240 <mutex_lock_platform+0x44>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1256:	4805      	ldr	r0, [pc, #20]	; (126c <mutex_lock_platform+0x70>)
    1258:	e7f2      	b.n	1240 <mutex_lock_platform+0x44>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    125a:	4804      	ldr	r0, [pc, #16]	; (126c <mutex_lock_platform+0x70>)
    125c:	e7f0      	b.n	1240 <mutex_lock_platform+0x44>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    125e:	4805      	ldr	r0, [pc, #20]	; (1274 <mutex_lock_platform+0x78>)
    1260:	e7ee      	b.n	1240 <mutex_lock_platform+0x44>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1262:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    1266:	4770      	bx	lr
    1268:	a95c5f2c 	.word	0xa95c5f2c
    126c:	ffff8fe9 	.word	0xffff8fe9
    1270:	50030000 	.word	0x50030000
    1274:	ffff8fea 	.word	0xffff8fea

00001278 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1278:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    127a:	4604      	mov	r4, r0
    127c:	b1a8      	cbz	r0, 12aa <mutex_free_platform+0x32>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    127e:	6863      	ldr	r3, [r4, #4]
    1280:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    1284:	d010      	beq.n	12a8 <mutex_free_platform+0x30>
    1286:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    128a:	d00d      	beq.n	12a8 <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    128c:	4a0c      	ldr	r2, [pc, #48]	; (12c0 <mutex_free_platform+0x48>)
    128e:	4293      	cmp	r3, r2
    1290:	d00a      	beq.n	12a8 <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    1292:	f413 6f68 	tst.w	r3, #3712	; 0xe80
    1296:	d00d      	beq.n	12b4 <mutex_free_platform+0x3c>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    1298:	4621      	mov	r1, r4
    129a:	480a      	ldr	r0, [pc, #40]	; (12c4 <mutex_free_platform+0x4c>)
    129c:	f005 ff9c 	bl	71d8 <k_mem_slab_free>
        mutex->mutex = NULL;
    12a0:	2300      	movs	r3, #0
    12a2:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    12a4:	4b06      	ldr	r3, [pc, #24]	; (12c0 <mutex_free_platform+0x48>)
    12a6:	6063      	str	r3, [r4, #4]
}
    12a8:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    12aa:	4b07      	ldr	r3, [pc, #28]	; (12c8 <mutex_free_platform+0x50>)
    12ac:	685b      	ldr	r3, [r3, #4]
    12ae:	4807      	ldr	r0, [pc, #28]	; (12cc <mutex_free_platform+0x54>)
    12b0:	4798      	blx	r3
    12b2:	e7e4      	b.n	127e <mutex_free_platform+0x6>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    12b4:	2214      	movs	r2, #20
    12b6:	2100      	movs	r1, #0
    12b8:	6820      	ldr	r0, [r4, #0]
    12ba:	f004 ff26 	bl	610a <memset>
    12be:	e7f1      	b.n	12a4 <mutex_free_platform+0x2c>
    12c0:	a95c5f2c 	.word	0xa95c5f2c
    12c4:	200009d4 	.word	0x200009d4
    12c8:	20000184 	.word	0x20000184
    12cc:	00007de0 	.word	0x00007de0

000012d0 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    12d0:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    12d2:	4604      	mov	r4, r0
    12d4:	b368      	cbz	r0, 1332 <mutex_init_platform+0x62>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    12d6:	6860      	ldr	r0, [r4, #4]
    12d8:	f5b0 3f68 	cmp.w	r0, #237568	; 0x3a000
    12dc:	d028      	beq.n	1330 <mutex_init_platform+0x60>
    12de:	f5b0 0f68 	cmp.w	r0, #15204352	; 0xe80000
    12e2:	d025      	beq.n	1330 <mutex_init_platform+0x60>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
    12e4:	4b17      	ldr	r3, [pc, #92]	; (1344 <mutex_init_platform+0x74>)
    12e6:	4298      	cmp	r0, r3
    12e8:	d028      	beq.n	133c <mutex_init_platform+0x6c>
        mutex_flags_unknown(mutex->flags)) {
    12ea:	f7ff ff29 	bl	1140 <mutex_flags_unknown>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
    12ee:	b1c0      	cbz	r0, 1322 <mutex_init_platform+0x52>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    12f0:	f04f 32ff 	mov.w	r2, #4294967295
    12f4:	f04f 33ff 	mov.w	r3, #4294967295
    12f8:	4621      	mov	r1, r4
    12fa:	4813      	ldr	r0, [pc, #76]	; (1348 <mutex_init_platform+0x78>)
    12fc:	f002 fd94 	bl	3e28 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    1300:	b908      	cbnz	r0, 1306 <mutex_init_platform+0x36>
    1302:	6823      	ldr	r3, [r4, #0]
    1304:	b91b      	cbnz	r3, 130e <mutex_init_platform+0x3e>
            platform_abort_apis.abort_fn(
    1306:	4b11      	ldr	r3, [pc, #68]	; (134c <mutex_init_platform+0x7c>)
    1308:	685b      	ldr	r3, [r3, #4]
    130a:	4811      	ldr	r0, [pc, #68]	; (1350 <mutex_init_platform+0x80>)
    130c:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    130e:	2214      	movs	r2, #20
    1310:	2100      	movs	r1, #0
    1312:	6820      	ldr	r0, [r4, #0]
    1314:	f004 fef9 	bl	610a <memset>
        mutex->flags = 0;
    1318:	2300      	movs	r3, #0
    131a:	6063      	str	r3, [r4, #4]
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    131c:	f44f 6368 	mov.w	r3, #3712	; 0xe80
    1320:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    1322:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    1324:	f005 ffe6 	bl	72f4 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    1328:	6863      	ldr	r3, [r4, #4]
    132a:	f043 033a 	orr.w	r3, r3, #58	; 0x3a
    132e:	6063      	str	r3, [r4, #4]
}
    1330:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    1332:	4b06      	ldr	r3, [pc, #24]	; (134c <mutex_init_platform+0x7c>)
    1334:	685b      	ldr	r3, [r3, #4]
    1336:	4807      	ldr	r0, [pc, #28]	; (1354 <mutex_init_platform+0x84>)
    1338:	4798      	blx	r3
    133a:	e7cc      	b.n	12d6 <mutex_init_platform+0x6>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
    133c:	6823      	ldr	r3, [r4, #0]
    133e:	2b00      	cmp	r3, #0
    1340:	d1d3      	bne.n	12ea <mutex_init_platform+0x1a>
    1342:	e7d5      	b.n	12f0 <mutex_init_platform+0x20>
    1344:	a95c5f2c 	.word	0xa95c5f2c
    1348:	200009d4 	.word	0x200009d4
    134c:	20000184 	.word	0x20000184
    1350:	00007e08 	.word	0x00007e08
    1354:	00007de0 	.word	0x00007de0

00001358 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    1358:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    135a:	2340      	movs	r3, #64	; 0x40
    135c:	2214      	movs	r2, #20
    135e:	4904      	ldr	r1, [pc, #16]	; (1370 <nrf_cc3xx_platform_mutex_init+0x18>)
    1360:	4804      	ldr	r0, [pc, #16]	; (1374 <nrf_cc3xx_platform_mutex_init+0x1c>)
    1362:	f005 ff2b 	bl	71bc <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    1366:	4904      	ldr	r1, [pc, #16]	; (1378 <nrf_cc3xx_platform_mutex_init+0x20>)
    1368:	4804      	ldr	r0, [pc, #16]	; (137c <nrf_cc3xx_platform_mutex_init+0x24>)
    136a:	f004 f815 	bl	5398 <nrf_cc3xx_platform_set_mutexes>
}
    136e:	bd08      	pop	{r3, pc}
    1370:	200004d4 	.word	0x200004d4
    1374:	200009d4 	.word	0x200009d4
    1378:	00007e38 	.word	0x00007e38
    137c:	00007e4c 	.word	0x00007e4c

00001380 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    1380:	4901      	ldr	r1, [pc, #4]	; (1388 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    1382:	2210      	movs	r2, #16
	str	r2, [r1]
    1384:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    1386:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    1388:	e000ed10 	.word	0xe000ed10

0000138c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    138c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    138e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    1390:	f380 8811 	msr	BASEPRI, r0
	isb
    1394:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    1398:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    139c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    139e:	b662      	cpsie	i
	isb
    13a0:	f3bf 8f6f 	isb	sy

	bx	lr
    13a4:	4770      	bx	lr
    13a6:	bf00      	nop

000013a8 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    13a8:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    13aa:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    13ac:	f381 8811 	msr	BASEPRI, r1

	wfe
    13b0:	bf20      	wfe

	msr	BASEPRI, r0
    13b2:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    13b6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    13b8:	4770      	bx	lr
    13ba:	bf00      	nop

000013bc <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    13bc:	2800      	cmp	r0, #0
    13be:	db07      	blt.n	13d0 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    13c0:	f000 021f 	and.w	r2, r0, #31
    13c4:	0940      	lsrs	r0, r0, #5
    13c6:	2301      	movs	r3, #1
    13c8:	4093      	lsls	r3, r2
    13ca:	4a02      	ldr	r2, [pc, #8]	; (13d4 <__NVIC_EnableIRQ+0x18>)
    13cc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
    13d0:	4770      	bx	lr
    13d2:	bf00      	nop
    13d4:	e000e100 	.word	0xe000e100

000013d8 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    13d8:	2800      	cmp	r0, #0
    13da:	db08      	blt.n	13ee <__NVIC_SetPriority+0x16>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    13dc:	0149      	lsls	r1, r1, #5
    13de:	b2c9      	uxtb	r1, r1
    13e0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
    13e4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
    13e8:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
    13ec:	4770      	bx	lr
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    13ee:	f000 000f 	and.w	r0, r0, #15
    13f2:	0149      	lsls	r1, r1, #5
    13f4:	b2c9      	uxtb	r1, r1
    13f6:	4b01      	ldr	r3, [pc, #4]	; (13fc <__NVIC_SetPriority+0x24>)
    13f8:	5419      	strb	r1, [r3, r0]
  }
}
    13fa:	4770      	bx	lr
    13fc:	e000ed14 	.word	0xe000ed14

00001400 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    1400:	0942      	lsrs	r2, r0, #5
    1402:	4b05      	ldr	r3, [pc, #20]	; (1418 <arch_irq_is_enabled+0x18>)
    1404:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1408:	f000 001f 	and.w	r0, r0, #31
    140c:	2301      	movs	r3, #1
    140e:	fa03 f000 	lsl.w	r0, r3, r0
}
    1412:	4010      	ands	r0, r2
    1414:	4770      	bx	lr
    1416:	bf00      	nop
    1418:	e000e100 	.word	0xe000e100

0000141c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    141c:	bf30      	wfi
    b z_SysNmiOnReset
    141e:	f7ff bffd 	b.w	141c <z_SysNmiOnReset>
    1422:	bf00      	nop

00001424 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    1424:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1426:	4b0b      	ldr	r3, [pc, #44]	; (1454 <z_arm_prep_c+0x30>)
    1428:	4a0b      	ldr	r2, [pc, #44]	; (1458 <z_arm_prep_c+0x34>)
    142a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    142e:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1430:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1434:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    1438:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    143c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    1440:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    1444:	f002 fc3c 	bl	3cc0 <z_bss_zero>
	z_data_copy();
    1448:	f003 fb40 	bl	4acc <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    144c:	f000 f9f8 	bl	1840 <z_arm_interrupt_init>
	z_cstart();
    1450:	f002 fc92 	bl	3d78 <z_cstart>
    1454:	e000ed00 	.word	0xe000ed00
    1458:	00000000 	.word	0x00000000

0000145c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    145c:	4a0a      	ldr	r2, [pc, #40]	; (1488 <arch_swap+0x2c>)
    145e:	6893      	ldr	r3, [r2, #8]
    1460:	f8c3 00ac 	str.w	r0, [r3, #172]	; 0xac
	_current->arch.swap_return_value = _k_neg_eagain;
    1464:	4909      	ldr	r1, [pc, #36]	; (148c <arch_swap+0x30>)
    1466:	6809      	ldr	r1, [r1, #0]
    1468:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    146c:	4908      	ldr	r1, [pc, #32]	; (1490 <arch_swap+0x34>)
    146e:	684b      	ldr	r3, [r1, #4]
    1470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1474:	604b      	str	r3, [r1, #4]
    1476:	2300      	movs	r3, #0
    1478:	f383 8811 	msr	BASEPRI, r3
    147c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1480:	6893      	ldr	r3, [r2, #8]
}
    1482:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
    1486:	4770      	bx	lr
    1488:	20000ae8 	.word	0x20000ae8
    148c:	00007fe8 	.word	0x00007fe8
    1490:	e000ed00 	.word	0xe000ed00

00001494 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1494:	4914      	ldr	r1, [pc, #80]	; (14e8 <z_arm_pendsv+0x54>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1496:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1498:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    149c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    149e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    14a2:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    14a6:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    14a8:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    14ac:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    14b0:	4f0e      	ldr	r7, [pc, #56]	; (14ec <z_arm_pendsv+0x58>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    14b2:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    14b6:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    14b8:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    14ba:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    14bc:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    movs r3, #0
    14c0:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    14c2:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    14c6:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    14ca:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    14ce:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    14d2:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    14d6:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    14da:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    14dc:	f004 fd16 	bl	5f0c <configure_builtin_stack_guard>
    pop {r2, lr}
    14e0:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    14e4:	4770      	bx	lr
    14e6:	0000      	.short	0x0000
    ldr r1, =_kernel
    14e8:	20000ae8 	.word	0x20000ae8
    ldr v4, =_SCS_ICSR
    14ec:	e000ed04 	.word	0xe000ed04

000014f0 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    14f0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    14f4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    14f6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    14fa:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    14fe:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    1500:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1504:	2902      	cmp	r1, #2
    beq _oops
    1506:	d0ff      	beq.n	1508 <_oops>

00001508 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1508:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    150a:	f004 fce2 	bl	5ed2 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    150e:	bd01      	pop	{r0, pc}

00001510 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    1510:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    1512:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    1516:	490e      	ldr	r1, [pc, #56]	; (1550 <arch_new_thread+0x40>)
    1518:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    151c:	f021 0101 	bic.w	r1, r1, #1
    1520:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    1524:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    1528:	9b01      	ldr	r3, [sp, #4]
    152a:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    152e:	9b02      	ldr	r3, [sp, #8]
    1530:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    1534:	9b03      	ldr	r3, [sp, #12]
    1536:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    153a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    153e:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe = (struct __basic_sf *)
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
    1542:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    1544:	2300      	movs	r3, #0
    1546:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    154a:	bc10      	pop	{r4}
    154c:	4770      	bx	lr
    154e:	bf00      	nop
    1550:	000056b3 	.word	0x000056b3

00001554 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    1554:	4b09      	ldr	r3, [pc, #36]	; (157c <arch_switch_to_main_thread+0x28>)
    1556:	6098      	str	r0, [r3, #8]
#endif

#if defined(CONFIG_BUILTIN_STACK_GUARD)
	/* Set PSPLIM register for built-in stack guarding of main thread. */
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
	__set_PSPLIM(main_thread->stack_info.start);
    1558:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    155c:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    1560:	4610      	mov	r0, r2
    1562:	f381 8809 	msr	PSP, r1
    1566:	2100      	movs	r1, #0
    1568:	b663      	cpsie	if
    156a:	f381 8811 	msr	BASEPRI, r1
    156e:	f3bf 8f6f 	isb	sy
    1572:	2200      	movs	r2, #0
    1574:	2300      	movs	r3, #0
    1576:	f004 f89c 	bl	56b2 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    157a:	bf00      	nop
    157c:	20000ae8 	.word	0x20000ae8

00001580 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1580:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    1582:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1584:	4a0b      	ldr	r2, [pc, #44]	; (15b4 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1586:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    1588:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    158a:	bf1e      	ittt	ne
	movne	r1, #0
    158c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    158e:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    1590:	f005 fe94 	blne	72bc <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1594:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    1596:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    159a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    159e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    15a2:	4905      	ldr	r1, [pc, #20]	; (15b8 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    15a4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    15a6:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    15a8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    15aa:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    15ae:	4903      	ldr	r1, [pc, #12]	; (15bc <_isr_wrapper+0x3c>)
	bx r1
    15b0:	4708      	bx	r1
    15b2:	0000      	.short	0x0000
	ldr r2, =_kernel
    15b4:	20000ae8 	.word	0x20000ae8
	ldr r1, =_sw_isr_table
    15b8:	000079ec 	.word	0x000079ec
	ldr r1, =z_arm_int_exit
    15bc:	000015c1 	.word	0x000015c1

000015c0 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    15c0:	4b04      	ldr	r3, [pc, #16]	; (15d4 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    15c2:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    15c4:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    15c6:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    15c8:	d003      	beq.n	15d2 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    15ca:	4903      	ldr	r1, [pc, #12]	; (15d8 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    15cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    15d0:	600a      	str	r2, [r1, #0]

000015d2 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    15d2:	4770      	bx	lr
	ldr r3, =_kernel
    15d4:	20000ae8 	.word	0x20000ae8
	ldr r1, =_SCS_ICSR
    15d8:	e000ed04 	.word	0xe000ed04

000015dc <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    15dc:	b510      	push	{r4, lr}
    15de:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    15e0:	4b18      	ldr	r3, [pc, #96]	; (1644 <mem_manage_fault+0x68>)
    15e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    15e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    15e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    15e8:	f013 0f02 	tst.w	r3, #2
    15ec:	d00b      	beq.n	1606 <mem_manage_fault+0x2a>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    15ee:	4b15      	ldr	r3, [pc, #84]	; (1644 <mem_manage_fault+0x68>)
    15f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    15f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    15f4:	f013 0f80 	tst.w	r3, #128	; 0x80
    15f8:	d005      	beq.n	1606 <mem_manage_fault+0x2a>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    15fa:	b121      	cbz	r1, 1606 <mem_manage_fault+0x2a>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    15fc:	4a11      	ldr	r2, [pc, #68]	; (1644 <mem_manage_fault+0x68>)
    15fe:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1600:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    1604:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    1606:	4b0f      	ldr	r3, [pc, #60]	; (1644 <mem_manage_fault+0x68>)
    1608:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    160a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    160c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    160e:	f013 0f10 	tst.w	r3, #16
    1612:	d101      	bne.n	1618 <mem_manage_fault+0x3c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    1614:	4b0b      	ldr	r3, [pc, #44]	; (1644 <mem_manage_fault+0x68>)
    1616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1618:	4b0a      	ldr	r3, [pc, #40]	; (1644 <mem_manage_fault+0x68>)
    161a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    161c:	f013 0f20 	tst.w	r3, #32
    1620:	d004      	beq.n	162c <mem_manage_fault+0x50>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    1622:	4a08      	ldr	r2, [pc, #32]	; (1644 <mem_manage_fault+0x68>)
    1624:	6a53      	ldr	r3, [r2, #36]	; 0x24
    1626:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    162a:	6253      	str	r3, [r2, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    162c:	4a05      	ldr	r2, [pc, #20]	; (1644 <mem_manage_fault+0x68>)
    162e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1630:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    1634:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    1636:	2101      	movs	r1, #1
    1638:	f004 fc6d 	bl	5f16 <memory_fault_recoverable>
    163c:	7020      	strb	r0, [r4, #0]

	return reason;
}
    163e:	2000      	movs	r0, #0
    1640:	bd10      	pop	{r4, pc}
    1642:	bf00      	nop
    1644:	e000ed00 	.word	0xe000ed00

00001648 <bus_fault>:
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
    1648:	b510      	push	{r4, lr}
    164a:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    164c:	4b12      	ldr	r3, [pc, #72]	; (1698 <bus_fault+0x50>)
    164e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1650:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1654:	f413 7f00 	tst.w	r3, #512	; 0x200
    1658:	d00b      	beq.n	1672 <bus_fault+0x2a>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    165a:	4b0f      	ldr	r3, [pc, #60]	; (1698 <bus_fault+0x50>)
    165c:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    165e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1660:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1664:	d005      	beq.n	1672 <bus_fault+0x2a>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    1666:	b121      	cbz	r1, 1672 <bus_fault+0x2a>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1668:	4a0b      	ldr	r2, [pc, #44]	; (1698 <bus_fault+0x50>)
    166a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    166c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    1670:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1672:	4b09      	ldr	r3, [pc, #36]	; (1698 <bus_fault+0x50>)
    1674:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1678:	f413 7f80 	tst.w	r3, #256	; 0x100
    167c:	d101      	bne.n	1682 <bus_fault+0x3a>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    167e:	4b06      	ldr	r3, [pc, #24]	; (1698 <bus_fault+0x50>)
    1680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1682:	4a05      	ldr	r2, [pc, #20]	; (1698 <bus_fault+0x50>)
    1684:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1686:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    168a:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    168c:	2101      	movs	r1, #1
    168e:	f004 fc42 	bl	5f16 <memory_fault_recoverable>
    1692:	7020      	strb	r0, [r4, #0]

	return reason;
}
    1694:	2000      	movs	r0, #0
    1696:	bd10      	pop	{r4, pc}
    1698:	e000ed00 	.word	0xe000ed00

0000169c <usage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    169c:	4b0a      	ldr	r3, [pc, #40]	; (16c8 <usage_fault+0x2c>)
    169e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    16a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    16a2:	6a98      	ldr	r0, [r3, #40]	; 0x28
    16a4:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
    16a8:	d10b      	bne.n	16c2 <usage_fault+0x26>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    16aa:	4b07      	ldr	r3, [pc, #28]	; (16c8 <usage_fault+0x2c>)
    16ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    16ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    16b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    16b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    16b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    16b6:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    16ba:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    16be:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    16c0:	4770      	bx	lr
		reason = K_ERR_STACK_CHK_FAIL;
    16c2:	2002      	movs	r0, #2
    16c4:	e7f1      	b.n	16aa <usage_fault+0xe>
    16c6:	bf00      	nop
    16c8:	e000ed00 	.word	0xe000ed00

000016cc <z_arm_is_synchronous_svc>:
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

static inline bool z_arm_is_synchronous_svc(z_arch_esf_t *esf)
{
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    16cc:	6981      	ldr	r1, [r0, #24]
	/* Note: ARMv6-M does not support CCR.BFHFNMIGN so this access
	 * could generate a fault if the pc was invalid.
	 */
	uint16_t fault_insn = *(ret_addr - 1);
#else
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    16ce:	4b0d      	ldr	r3, [pc, #52]	; (1704 <z_arm_is_synchronous_svc+0x38>)
    16d0:	695a      	ldr	r2, [r3, #20]
    16d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    16d6:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    16d8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    16dc:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();

	uint16_t fault_insn = *(ret_addr - 1);
    16e0:	f831 1c02 	ldrh.w	r1, [r1, #-2]

	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    16e4:	695a      	ldr	r2, [r3, #20]
    16e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    16ea:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    16ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    16f0:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
#endif /* ARMV6_M_ARMV8_M_BASELINE && !ARMV8_M_BASELINE */

	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    16f4:	f64d 7302 	movw	r3, #57090	; 0xdf02
    16f8:	4299      	cmp	r1, r3
    16fa:	d001      	beq.n	1700 <z_arm_is_synchronous_svc+0x34>
		((fault_insn & 0x00ff) == _SVC_CALL_RUNTIME_EXCEPT)) {
		return true;
	}
#undef _SVC_OPCODE
	return false;
    16fc:	2000      	movs	r0, #0
    16fe:	4770      	bx	lr
		return true;
    1700:	2001      	movs	r0, #1
}
    1702:	4770      	bx	lr
    1704:	e000ed00 	.word	0xe000ed00

00001708 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
    1708:	b538      	push	{r3, r4, r5, lr}
    170a:	4605      	mov	r5, r0
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
    170c:	2300      	movs	r3, #0
    170e:	700b      	strb	r3, [r1, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1710:	4b1a      	ldr	r3, [pc, #104]	; (177c <hard_fault+0x74>)
    1712:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    1714:	f010 0002 	ands.w	r0, r0, #2
    1718:	d12d      	bne.n	1776 <hard_fault+0x6e>
    171a:	460c      	mov	r4, r1
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    171c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    171e:	2b00      	cmp	r3, #0
    1720:	db2a      	blt.n	1778 <hard_fault+0x70>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    1722:	4b16      	ldr	r3, [pc, #88]	; (177c <hard_fault+0x74>)
    1724:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    1726:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
    172a:	d025      	beq.n	1778 <hard_fault+0x70>
		PR_EXC("  Fault escalation (see below)");
		if (z_arm_is_synchronous_svc(esf)) {
    172c:	4628      	mov	r0, r5
    172e:	f7ff ffcd 	bl	16cc <z_arm_is_synchronous_svc>
    1732:	b108      	cbz	r0, 1738 <hard_fault+0x30>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
			reason = esf->basic.r0;
    1734:	6828      	ldr	r0, [r5, #0]
    1736:	e01f      	b.n	1778 <hard_fault+0x70>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    1738:	4b10      	ldr	r3, [pc, #64]	; (177c <hard_fault+0x74>)
    173a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    173c:	f013 0fff 	tst.w	r3, #255	; 0xff
    1740:	d10d      	bne.n	175e <hard_fault+0x56>
			reason = mem_manage_fault(esf, 1, recoverable);
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    1742:	4b0e      	ldr	r3, [pc, #56]	; (177c <hard_fault+0x74>)
    1744:	6a98      	ldr	r0, [r3, #40]	; 0x28
    1746:	f410 407f 	ands.w	r0, r0, #65280	; 0xff00
    174a:	d10e      	bne.n	176a <hard_fault+0x62>
			reason = bus_fault(esf, 1, recoverable);
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    174c:	4b0b      	ldr	r3, [pc, #44]	; (177c <hard_fault+0x74>)
    174e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    1754:	d310      	bcc.n	1778 <hard_fault+0x70>
			reason = usage_fault(esf);
    1756:	4628      	mov	r0, r5
    1758:	f7ff ffa0 	bl	169c <usage_fault>
    175c:	e00c      	b.n	1778 <hard_fault+0x70>
			reason = mem_manage_fault(esf, 1, recoverable);
    175e:	4622      	mov	r2, r4
    1760:	2101      	movs	r1, #1
    1762:	4628      	mov	r0, r5
    1764:	f7ff ff3a 	bl	15dc <mem_manage_fault>
    1768:	e006      	b.n	1778 <hard_fault+0x70>
			reason = bus_fault(esf, 1, recoverable);
    176a:	4622      	mov	r2, r4
    176c:	2101      	movs	r1, #1
    176e:	4628      	mov	r0, r5
    1770:	f7ff ff6a 	bl	1648 <bus_fault>
    1774:	e000      	b.n	1778 <hard_fault+0x70>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1776:	2000      	movs	r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
    1778:	bd38      	pop	{r3, r4, r5, pc}
    177a:	bf00      	nop
    177c:	e000ed00 	.word	0xe000ed00

00001780 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    1780:	b570      	push	{r4, r5, r6, lr}
    1782:	b08a      	sub	sp, #40	; 0x28
    1784:	460c      	mov	r4, r1
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1786:	4b22      	ldr	r3, [pc, #136]	; (1810 <z_arm_fault+0x90>)
    1788:	6859      	ldr	r1, [r3, #4]
    178a:	f3c1 0108 	ubfx	r1, r1, #0, #9
    178e:	2300      	movs	r3, #0
    1790:	f383 8811 	msr	BASEPRI, r3
    1794:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    1798:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    179c:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    17a0:	d115      	bne.n	17ce <z_arm_fault+0x4e>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    17a2:	f002 030c 	and.w	r3, r2, #12
    17a6:	2b08      	cmp	r3, #8
    17a8:	d014      	beq.n	17d4 <z_arm_fault+0x54>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    17aa:	f012 0f08 	tst.w	r2, #8
    17ae:	d00b      	beq.n	17c8 <z_arm_fault+0x48>
	*nested_exc = false;
    17b0:	2600      	movs	r6, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    17b2:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    17b6:	4620      	mov	r0, r4
    17b8:	f004 fbb2 	bl	5f20 <fault_handle>
    17bc:	4605      	mov	r5, r0
	if (recoverable) {
    17be:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    17c2:	b153      	cbz	r3, 17da <z_arm_fault+0x5a>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    17c4:	b00a      	add	sp, #40	; 0x28
    17c6:	bd70      	pop	{r4, r5, r6, pc}
			ptr_esf = (z_arch_esf_t *)msp;
    17c8:	4604      	mov	r4, r0
			*nested_exc = true;
    17ca:	2601      	movs	r6, #1
    17cc:	e7f1      	b.n	17b2 <z_arm_fault+0x32>
	*nested_exc = false;
    17ce:	2600      	movs	r6, #0
		return NULL;
    17d0:	4634      	mov	r4, r6
    17d2:	e7ee      	b.n	17b2 <z_arm_fault+0x32>
	*nested_exc = false;
    17d4:	2600      	movs	r6, #0
		return NULL;
    17d6:	4634      	mov	r4, r6
    17d8:	e7eb      	b.n	17b2 <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    17da:	2220      	movs	r2, #32
    17dc:	4621      	mov	r1, r4
    17de:	a801      	add	r0, sp, #4
    17e0:	f004 fc64 	bl	60ac <memcpy>
	if (nested_exc) {
    17e4:	b14e      	cbz	r6, 17fa <z_arm_fault+0x7a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    17e6:	9b08      	ldr	r3, [sp, #32]
    17e8:	f3c3 0208 	ubfx	r2, r3, #0, #9
    17ec:	b95a      	cbnz	r2, 1806 <z_arm_fault+0x86>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    17ee:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    17f2:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    17f6:	9308      	str	r3, [sp, #32]
    17f8:	e005      	b.n	1806 <z_arm_fault+0x86>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    17fa:	9b08      	ldr	r3, [sp, #32]
    17fc:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    1800:	f023 0301 	bic.w	r3, r3, #1
    1804:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
    1806:	a901      	add	r1, sp, #4
    1808:	4628      	mov	r0, r5
    180a:	f004 fb5e 	bl	5eca <z_arm_fatal_error>
    180e:	e7d9      	b.n	17c4 <z_arm_fault+0x44>
    1810:	e000ed00 	.word	0xe000ed00

00001814 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1814:	4b04      	ldr	r3, [pc, #16]	; (1828 <z_arm_fault_init+0x14>)
    1816:	695a      	ldr	r2, [r3, #20]
    1818:	f042 0210 	orr.w	r2, r2, #16
    181c:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    181e:	695a      	ldr	r2, [r3, #20]
    1820:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    1824:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    1826:	4770      	bx	lr
    1828:	e000ed00 	.word	0xe000ed00

0000182c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    182c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    1830:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    1834:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    1836:	4672      	mov	r2, lr
	bl z_arm_fault
    1838:	f7ff ffa2 	bl	1780 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    183c:	bd01      	pop	{r0, pc}
    183e:	bf00      	nop

00001840 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    1840:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1842:	e007      	b.n	1854 <z_arm_interrupt_init+0x14>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1844:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    1848:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    184c:	2120      	movs	r1, #32
    184e:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    1852:	3201      	adds	r2, #1
    1854:	2a44      	cmp	r2, #68	; 0x44
    1856:	dc09      	bgt.n	186c <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    1858:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    185a:	2b00      	cmp	r3, #0
    185c:	daf2      	bge.n	1844 <z_arm_interrupt_init+0x4>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    185e:	f003 030f 	and.w	r3, r3, #15
    1862:	4903      	ldr	r1, [pc, #12]	; (1870 <z_arm_interrupt_init+0x30>)
    1864:	4419      	add	r1, r3
    1866:	2320      	movs	r3, #32
    1868:	760b      	strb	r3, [r1, #24]
    186a:	e7f2      	b.n	1852 <z_arm_interrupt_init+0x12>
	}
}
    186c:	4770      	bx	lr
    186e:	bf00      	nop
    1870:	e000ecfc 	.word	0xe000ecfc

00001874 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_DEBUG_THREAD_INFO)
    /* Clear z_sys_post_kernel flag for RTOS aware debuggers */
    movs.n r0, #0
    1874:	2000      	movs	r0, #0
    ldr r1, =z_sys_post_kernel
    1876:	4915      	ldr	r1, [pc, #84]	; (18cc <__start+0x58>)
    strb r0, [r1]
    1878:	7008      	strb	r0, [r1, #0]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    187a:	2000      	movs	r0, #0
    msr CONTROL, r0
    187c:	f380 8814 	msr	CONTROL, r0
    isb
    1880:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    1884:	2000      	movs	r0, #0
    msr MSPLIM, r0
    1886:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    188a:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    188e:	f7ff fb15 	bl	ebc <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    1892:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    1894:	490e      	ldr	r1, [pc, #56]	; (18d0 <__start+0x5c>)
    str r0, [r1]
    1896:	6008      	str	r0, [r1, #0]
    dsb
    1898:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    189c:	480d      	ldr	r0, [pc, #52]	; (18d4 <__start+0x60>)
    msr msp, r0
    189e:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    18a2:	f000 f841 	bl	1928 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    18a6:	2020      	movs	r0, #32
    msr BASEPRI, r0
    18a8:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    18ac:	480a      	ldr	r0, [pc, #40]	; (18d8 <__start+0x64>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    18ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    18b2:	1840      	adds	r0, r0, r1
    msr PSP, r0
    18b4:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    18b8:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    18bc:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    18be:	4308      	orrs	r0, r1
    msr CONTROL, r0
    18c0:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    18c4:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    18c8:	f7ff fdac 	bl	1424 <z_arm_prep_c>
    ldr r1, =z_sys_post_kernel
    18cc:	20000d07 	.word	0x20000d07
    ldr r1, =_SCS_MPU_CTRL
    18d0:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    18d4:	20001a48 	.word	0x20001a48
    ldr r0, =z_interrupt_stacks
    18d8:	20000d08 	.word	0x20000d08

000018dc <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
    18dc:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    18e0:	4905      	ldr	r1, [pc, #20]	; (18f8 <__NVIC_SystemReset+0x1c>)
    18e2:	68ca      	ldr	r2, [r1, #12]
    18e4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    18e8:	4b04      	ldr	r3, [pc, #16]	; (18fc <__NVIC_SystemReset+0x20>)
    18ea:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    18ec:	60cb      	str	r3, [r1, #12]
    18ee:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    18f2:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    18f4:	e7fd      	b.n	18f2 <__NVIC_SystemReset+0x16>
    18f6:	bf00      	nop
    18f8:	e000ed00 	.word	0xe000ed00
    18fc:	05fa0004 	.word	0x05fa0004

00001900 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    1900:	4b08      	ldr	r3, [pc, #32]	; (1924 <z_arm_clear_arm_mpu_config+0x24>)
    1902:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
	int num_regions =
    1906:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    190a:	2300      	movs	r3, #0
    190c:	e006      	b.n	191c <z_arm_clear_arm_mpu_config+0x1c>
* \param mpu Pointer to MPU to be used.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
    190e:	4a05      	ldr	r2, [pc, #20]	; (1924 <z_arm_clear_arm_mpu_config+0x24>)
    1910:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  mpu->RLAR = 0U;
    1914:	2100      	movs	r1, #0
    1916:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    191a:	3301      	adds	r3, #1
    191c:	4283      	cmp	r3, r0
    191e:	dbf6      	blt.n	190e <z_arm_clear_arm_mpu_config+0xe>
		ARM_MPU_ClrRegion(i);
	}
}
    1920:	4770      	bx	lr
    1922:	bf00      	nop
    1924:	e000ed00 	.word	0xe000ed00

00001928 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    1928:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    192a:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    192c:	2400      	movs	r4, #0
    192e:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    1932:	f7ff ffe5 	bl	1900 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    1936:	4623      	mov	r3, r4
    1938:	e008      	b.n	194c <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    193a:	f103 0120 	add.w	r1, r3, #32
    193e:	4a0e      	ldr	r2, [pc, #56]	; (1978 <z_arm_init_arch_hw_at_boot+0x50>)
    1940:	f04f 30ff 	mov.w	r0, #4294967295
    1944:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    1948:	3301      	adds	r3, #1
    194a:	b2db      	uxtb	r3, r3
    194c:	2b0f      	cmp	r3, #15
    194e:	d9f4      	bls.n	193a <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    1950:	2300      	movs	r3, #0
    1952:	e008      	b.n	1966 <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    1954:	f103 0160 	add.w	r1, r3, #96	; 0x60
    1958:	4a07      	ldr	r2, [pc, #28]	; (1978 <z_arm_init_arch_hw_at_boot+0x50>)
    195a:	f04f 30ff 	mov.w	r0, #4294967295
    195e:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    1962:	3301      	adds	r3, #1
    1964:	b2db      	uxtb	r3, r3
    1966:	2b0f      	cmp	r3, #15
    1968:	d9f4      	bls.n	1954 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    196a:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    196c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1970:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    1974:	bd10      	pop	{r4, pc}
    1976:	bf00      	nop
    1978:	e000e100 	.word	0xe000e100

0000197c <z_impl_k_thread_abort>:
#include <kswap.h>
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    197c:	b508      	push	{r3, lr}
	if (_current == thread) {
    197e:	4b0a      	ldr	r3, [pc, #40]	; (19a8 <z_impl_k_thread_abort+0x2c>)
    1980:	689b      	ldr	r3, [r3, #8]
    1982:	4283      	cmp	r3, r0
    1984:	d002      	beq.n	198c <z_impl_k_thread_abort+0x10>
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
		}
	}

	z_thread_abort(thread);
    1986:	f003 f855 	bl	4a34 <z_thread_abort>
}
    198a:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    198c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    1990:	2b00      	cmp	r3, #0
    1992:	d0f8      	beq.n	1986 <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1994:	4b05      	ldr	r3, [pc, #20]	; (19ac <z_impl_k_thread_abort+0x30>)
    1996:	685a      	ldr	r2, [r3, #4]
    1998:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    199c:	605a      	str	r2, [r3, #4]
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    199e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    19a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    19a4:	625a      	str	r2, [r3, #36]	; 0x24
    19a6:	e7ee      	b.n	1986 <z_impl_k_thread_abort+0xa>
    19a8:	20000ae8 	.word	0x20000ae8
    19ac:	e000ed00 	.word	0xe000ed00

000019b0 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    19b0:	b510      	push	{r4, lr}
    19b2:	b084      	sub	sp, #16
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    19b4:	4c0a      	ldr	r4, [pc, #40]	; (19e0 <z_arm_configure_static_mpu_regions+0x30>)
    19b6:	4623      	mov	r3, r4
    19b8:	4a0a      	ldr	r2, [pc, #40]	; (19e4 <z_arm_configure_static_mpu_regions+0x34>)
    19ba:	2101      	movs	r1, #1
    19bc:	480a      	ldr	r0, [pc, #40]	; (19e8 <z_arm_configure_static_mpu_regions+0x38>)
    19be:	f004 fb40 	bl	6042 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    19c2:	2300      	movs	r3, #0
    19c4:	9301      	str	r3, [sp, #4]
    19c6:	9302      	str	r3, [sp, #8]
    19c8:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    19ca:	4b08      	ldr	r3, [pc, #32]	; (19ec <z_arm_configure_static_mpu_regions+0x3c>)
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    19cc:	9301      	str	r3, [sp, #4]
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    19ce:	1ae4      	subs	r4, r4, r3
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    19d0:	9402      	str	r4, [sp, #8]
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    19d2:	2101      	movs	r1, #1
    19d4:	a801      	add	r0, sp, #4
    19d6:	f004 fb38 	bl	604a <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    19da:	b004      	add	sp, #16
    19dc:	bd10      	pop	{r4, pc}
    19de:	bf00      	nop
    19e0:	20070000 	.word	0x20070000
    19e4:	20000000 	.word	0x20000000
    19e8:	00007e5c 	.word	0x00007e5c
    19ec:	20000240 	.word	0x20000240

000019f0 <mpu_init>:
static struct dynamic_region_info dyn_reg_info[MPU_DYNAMIC_REGION_AREAS_NUM];
#if defined(CONFIG_CPU_CORTEX_M23) || defined(CONFIG_CPU_CORTEX_M33) || \
	defined(CONFIG_CPU_CORTEX_M55)
static inline void mpu_set_mair0(uint32_t mair0)
{
	MPU->MAIR0 = mair0;
    19f0:	4b02      	ldr	r3, [pc, #8]	; (19fc <mpu_init+0xc>)
    19f2:	4a03      	ldr	r2, [pc, #12]	; (1a00 <mpu_init+0x10>)
    19f4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
{
	/* Configure the cache-ability attributes for all the
	 * different types of memory regions.
	 */
	mpu_set_mair0(MPU_MAIR_ATTRS);
}
    19f8:	4770      	bx	lr
    19fa:	bf00      	nop
    19fc:	e000ed00 	.word	0xe000ed00
    1a00:	0044ffaa 	.word	0x0044ffaa

00001a04 <mpu_set_region>:
	MPU->RNR = rnr;
    1a04:	4b03      	ldr	r3, [pc, #12]	; (1a14 <mpu_set_region+0x10>)
    1a06:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	MPU->RBAR = rbar;
    1a0a:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
	MPU->RLAR = rlar;
    1a0e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
static void mpu_set_region(uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
	mpu_set_rnr(rnr);
	mpu_set_rbar(rbar);
	mpu_set_rlar(rlar);
}
    1a12:	4770      	bx	lr
    1a14:	e000ed00 	.word	0xe000ed00

00001a18 <mpu_region_get_conf>:
	MPU->RNR = rnr;
    1a18:	4b0e      	ldr	r3, [pc, #56]	; (1a54 <mpu_region_get_conf+0x3c>)
    1a1a:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
    1a1e:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	return MPU->RBAR;
    1a22:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
static inline void mpu_region_get_access_attr(const uint32_t index,
	arm_mpu_region_attr_t *attr)
{
	mpu_set_rnr(index);

	attr->rbar = mpu_get_rbar() &
    1a26:	7a0a      	ldrb	r2, [r1, #8]
    1a28:	f360 0204 	bfi	r2, r0, #0, #5
    1a2c:	720a      	strb	r2, [r1, #8]
	return MPU->RLAR;
    1a2e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    1a32:	f3c2 0242 	ubfx	r2, r2, #1, #3
    1a36:	7a08      	ldrb	r0, [r1, #8]
    1a38:	f362 1047 	bfi	r0, r2, #5, #3
    1a3c:	7208      	strb	r0, [r1, #8]
	return MPU->RBAR;
    1a3e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
	 * - Access Permissions
	 */
	mpu_region_get_access_attr(index, &region_conf->attr);

	/* Region base address */
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    1a42:	f022 021f 	bic.w	r2, r2, #31
    1a46:	600a      	str	r2, [r1, #0]
	return MPU->RLAR;
    1a48:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0

	/* Region limit address */
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
    1a4c:	f023 031f 	bic.w	r3, r3, #31
    1a50:	60cb      	str	r3, [r1, #12]
}
    1a52:	4770      	bx	lr
    1a54:	e000ed00 	.word	0xe000ed00

00001a58 <mpu_configure_regions_and_partition>:
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    1a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1a5c:	b087      	sub	sp, #28
    1a5e:	4681      	mov	r9, r0
    1a60:	9100      	str	r1, [sp, #0]
    1a62:	9301      	str	r3, [sp, #4]
	int i;
	int reg_index = start_reg_index;
    1a64:	4614      	mov	r4, r2

	for (i = 0; i < regions_num; i++) {
    1a66:	2700      	movs	r7, #0
    1a68:	e034      	b.n	1ad4 <mpu_configure_regions_and_partition+0x7c>
		 */
		uint32_t u_reg_base = mpu_region_get_base(u_reg_index);
		uint32_t u_reg_last = mpu_region_get_last_addr(u_reg_index);
		uint32_t reg_last = regions[i].start + regions[i].size - 1;

		if ((regions[i].start == u_reg_base) &&
    1a6a:	45d8      	cmp	r8, fp
    1a6c:	d165      	bne.n	1b3a <mpu_configure_regions_and_partition+0xe2>
			 * underlying region. In this case we simply
			 * update the partition attributes of the
			 * underlying region with those of the new
			 * region.
			 */
			mpu_configure_region(u_reg_index, &regions[i]);
    1a6e:	4629      	mov	r1, r5
    1a70:	b2c0      	uxtb	r0, r0
    1a72:	f004 fab6 	bl	5fe2 <mpu_configure_region>
    1a76:	e02c      	b.n	1ad2 <mpu_configure_regions_and_partition+0x7a>
	MPU->RNR = rnr;
    1a78:	4a58      	ldr	r2, [pc, #352]	; (1bdc <mpu_configure_regions_and_partition+0x184>)
    1a7a:	f8c2 6098 	str.w	r6, [r2, #152]	; 0x98
	return MPU->RBAR;
    1a7e:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
    1a82:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
    1a86:	f021 011f 	bic.w	r1, r1, #31
    1a8a:	430b      	orrs	r3, r1
	MPU->RBAR = rbar;
    1a8c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
			 */
			mpu_region_set_base(u_reg_index,
				regions[i].start + regions[i].size);

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    1a90:	4629      	mov	r1, r5
    1a92:	b2e0      	uxtb	r0, r4
    1a94:	f004 faa5 	bl	5fe2 <mpu_configure_region>
    1a98:	4604      	mov	r4, r0

			if (reg_index == -EINVAL) {
    1a9a:	f110 0f16 	cmn.w	r0, #22
    1a9e:	f000 8096 	beq.w	1bce <mpu_configure_regions_and_partition+0x176>
				return reg_index;
			}

			reg_index++;
    1aa2:	3401      	adds	r4, #1
    1aa4:	e015      	b.n	1ad2 <mpu_configure_regions_and_partition+0x7a>
			 * underlying region; the end of the underlying
			 * region needs to be set to the start of the
			 * new region.
			 */
			mpu_region_set_limit(u_reg_index,
				regions[i].start - 1);
    1aa6:	3b01      	subs	r3, #1
	MPU->RNR = rnr;
    1aa8:	494c      	ldr	r1, [pc, #304]	; (1bdc <mpu_configure_regions_and_partition+0x184>)
    1aaa:	f8c1 6098 	str.w	r6, [r1, #152]	; 0x98
	return MPU->RLAR;
    1aae:	f8d1 20a0 	ldr.w	r2, [r1, #160]	; 0xa0
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    1ab2:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    1ab6:	f023 031f 	bic.w	r3, r3, #31
    1aba:	4313      	orrs	r3, r2
	MPU->RLAR = rlar;
    1abc:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    1ac0:	4629      	mov	r1, r5
    1ac2:	b2e0      	uxtb	r0, r4
    1ac4:	f004 fa8d 	bl	5fe2 <mpu_configure_region>
    1ac8:	4604      	mov	r4, r0

			if (reg_index == -EINVAL) {
    1aca:	f110 0f16 	cmn.w	r0, #22
    1ace:	d07e      	beq.n	1bce <mpu_configure_regions_and_partition+0x176>
				return reg_index;
			}

			reg_index++;
    1ad0:	3401      	adds	r4, #1
	for (i = 0; i < regions_num; i++) {
    1ad2:	3701      	adds	r7, #1
    1ad4:	9b00      	ldr	r3, [sp, #0]
    1ad6:	429f      	cmp	r7, r3
    1ad8:	da79      	bge.n	1bce <mpu_configure_regions_and_partition+0x176>
		if (regions[i].size == 0U) {
    1ada:	eb07 0547 	add.w	r5, r7, r7, lsl #1
    1ade:	ea4f 0a85 	mov.w	sl, r5, lsl #2
    1ae2:	eb09 0585 	add.w	r5, r9, r5, lsl #2
    1ae6:	686e      	ldr	r6, [r5, #4]
    1ae8:	2e00      	cmp	r6, #0
    1aea:	d0f2      	beq.n	1ad2 <mpu_configure_regions_and_partition+0x7a>
		if (do_sanity_check &&
    1aec:	9b01      	ldr	r3, [sp, #4]
    1aee:	b123      	cbz	r3, 1afa <mpu_configure_regions_and_partition+0xa2>
			(!mpu_partition_is_valid(&regions[i]))) {
    1af0:	4628      	mov	r0, r5
    1af2:	f004 fa59 	bl	5fa8 <mpu_partition_is_valid>
		if (do_sanity_check &&
    1af6:	2800      	cmp	r0, #0
    1af8:	d065      	beq.n	1bc6 <mpu_configure_regions_and_partition+0x16e>
			get_region_index(regions[i].start, regions[i].size);
    1afa:	4631      	mov	r1, r6
    1afc:	f859 000a 	ldr.w	r0, [r9, sl]
    1b00:	f004 fa8e 	bl	6020 <get_region_index>
    1b04:	4606      	mov	r6, r0
		if ((u_reg_index == -EINVAL) ||
    1b06:	f110 0f16 	cmn.w	r0, #22
    1b0a:	d05f      	beq.n	1bcc <mpu_configure_regions_and_partition+0x174>
    1b0c:	42a0      	cmp	r0, r4
    1b0e:	da62      	bge.n	1bd6 <mpu_configure_regions_and_partition+0x17e>
	MPU->RNR = rnr;
    1b10:	4b32      	ldr	r3, [pc, #200]	; (1bdc <mpu_configure_regions_and_partition+0x184>)
    1b12:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	return MPU->RBAR;
    1b16:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    1b1a:	f022 021f 	bic.w	r2, r2, #31
	MPU->RNR = rnr;
    1b1e:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	return MPU->RLAR;
    1b22:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    1b26:	f043 081f 	orr.w	r8, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    1b2a:	f859 300a 	ldr.w	r3, [r9, sl]
    1b2e:	6869      	ldr	r1, [r5, #4]
    1b30:	4419      	add	r1, r3
    1b32:	f101 3bff 	add.w	fp, r1, #4294967295
		if ((regions[i].start == u_reg_base) &&
    1b36:	429a      	cmp	r2, r3
    1b38:	d097      	beq.n	1a6a <mpu_configure_regions_and_partition+0x12>
		} else if (regions[i].start == u_reg_base) {
    1b3a:	429a      	cmp	r2, r3
    1b3c:	d09c      	beq.n	1a78 <mpu_configure_regions_and_partition+0x20>
		} else if (reg_last == u_reg_last) {
    1b3e:	45d8      	cmp	r8, fp
    1b40:	d0b1      	beq.n	1aa6 <mpu_configure_regions_and_partition+0x4e>
			/* The new regions lies strictly inside the
			 * underlying region, which needs to split
			 * into two regions.
			 */
			mpu_region_set_limit(u_reg_index,
				regions[i].start - 1);
    1b42:	3b01      	subs	r3, #1
	MPU->RNR = rnr;
    1b44:	4925      	ldr	r1, [pc, #148]	; (1bdc <mpu_configure_regions_and_partition+0x184>)
    1b46:	f8c1 6098 	str.w	r6, [r1, #152]	; 0x98
	return MPU->RLAR;
    1b4a:	f8d1 20a0 	ldr.w	r2, [r1, #160]	; 0xa0
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    1b4e:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    1b52:	f023 031f 	bic.w	r3, r3, #31
    1b56:	4313      	orrs	r3, r2
	MPU->RLAR = rlar;
    1b58:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    1b5c:	4629      	mov	r1, r5
    1b5e:	b2e0      	uxtb	r0, r4
    1b60:	f004 fa3f 	bl	5fe2 <mpu_configure_region>
    1b64:	4604      	mov	r4, r0

			if (reg_index == -EINVAL) {
    1b66:	f110 0f16 	cmn.w	r0, #22
    1b6a:	d030      	beq.n	1bce <mpu_configure_regions_and_partition+0x176>
				return reg_index;
			}
			reg_index++;
    1b6c:	3001      	adds	r0, #1
	MPU->RNR = rnr;
    1b6e:	4b1b      	ldr	r3, [pc, #108]	; (1bdc <mpu_configure_regions_and_partition+0x184>)
    1b70:	f8c3 6098 	str.w	r6, [r3, #152]	; 0x98
	return MPU->RBAR;
    1b74:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    1b78:	f89d 2010 	ldrb.w	r2, [sp, #16]
    1b7c:	f361 0204 	bfi	r2, r1, #0, #5
    1b80:	f88d 2010 	strb.w	r2, [sp, #16]
	return MPU->RLAR;
    1b84:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    1b88:	f3c3 0342 	ubfx	r3, r3, #1, #3
    1b8c:	b2d2      	uxtb	r2, r2
    1b8e:	f363 1247 	bfi	r2, r3, #5, #3
    1b92:	f88d 2010 	strb.w	r2, [sp, #16]
			 */
			struct arm_mpu_region fill_region;

			mpu_region_get_access_attr(u_reg_index,
				&fill_region.attr);
			fill_region.base = regions[i].start +
    1b96:	f859 300a 	ldr.w	r3, [r9, sl]
				regions[i].size;
    1b9a:	686a      	ldr	r2, [r5, #4]
			fill_region.base = regions[i].start +
    1b9c:	4413      	add	r3, r2
    1b9e:	9302      	str	r3, [sp, #8]
			fill_region.attr.r_limit =
			REGION_LIMIT_ADDR((regions[i].start +
    1ba0:	f023 031f 	bic.w	r3, r3, #31
    1ba4:	eba8 080b 	sub.w	r8, r8, fp
    1ba8:	4443      	add	r3, r8
    1baa:	3b01      	subs	r3, #1
    1bac:	f023 031f 	bic.w	r3, r3, #31
			fill_region.attr.r_limit =
    1bb0:	9305      	str	r3, [sp, #20]
				regions[i].size), (u_reg_last - reg_last));

			reg_index =
				region_allocate_and_init(reg_index,
    1bb2:	a902      	add	r1, sp, #8
    1bb4:	b2c0      	uxtb	r0, r0
    1bb6:	f004 fa09 	bl	5fcc <region_allocate_and_init>
    1bba:	4604      	mov	r4, r0
					(const struct arm_mpu_region *)
						&fill_region);

			if (reg_index == -EINVAL) {
    1bbc:	f110 0f16 	cmn.w	r0, #22
    1bc0:	d005      	beq.n	1bce <mpu_configure_regions_and_partition+0x176>
				return reg_index;
			}

			reg_index++;
    1bc2:	3401      	adds	r4, #1
    1bc4:	e785      	b.n	1ad2 <mpu_configure_regions_and_partition+0x7a>
			return -EINVAL;
    1bc6:	f06f 0415 	mvn.w	r4, #21
    1bca:	e000      	b.n	1bce <mpu_configure_regions_and_partition+0x176>
			return -EINVAL;
    1bcc:	4604      	mov	r4, r0
		}
	}

	return reg_index;
}
    1bce:	4620      	mov	r0, r4
    1bd0:	b007      	add	sp, #28
    1bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
    1bd6:	f06f 0415 	mvn.w	r4, #21
    1bda:	e7f8      	b.n	1bce <mpu_configure_regions_and_partition+0x176>
    1bdc:	e000ed00 	.word	0xe000ed00

00001be0 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    1be0:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    1be2:	4c03      	ldr	r4, [pc, #12]	; (1bf0 <mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    1be4:	2301      	movs	r3, #1
    1be6:	7822      	ldrb	r2, [r4, #0]
    1be8:	f7ff ff36 	bl	1a58 <mpu_configure_regions_and_partition>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    1bec:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    1bee:	bd10      	pop	{r4, pc}
    1bf0:	20000d04 	.word	0x20000d04

00001bf4 <mpu_mark_areas_for_dynamic_regions>:
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
		const struct z_arm_mpu_partition dyn_region_areas[],
		const uint8_t dyn_region_areas_num)
{
    1bf4:	b570      	push	{r4, r5, r6, lr}
    1bf6:	4605      	mov	r5, r0
    1bf8:	460e      	mov	r6, r1
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    1bfa:	2400      	movs	r4, #0
    1bfc:	e000      	b.n	1c00 <mpu_mark_areas_for_dynamic_regions+0xc>
    1bfe:	3401      	adds	r4, #1
    1c00:	42a6      	cmp	r6, r4
    1c02:	dd1e      	ble.n	1c42 <mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    1c04:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    1c08:	009a      	lsls	r2, r3, #2
    1c0a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    1c0e:	6859      	ldr	r1, [r3, #4]
    1c10:	2900      	cmp	r1, #0
    1c12:	d0f4      	beq.n	1bfe <mpu_mark_areas_for_dynamic_regions+0xa>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    1c14:	58a8      	ldr	r0, [r5, r2]
    1c16:	f004 fa03 	bl	6020 <get_region_index>
		dyn_reg_info[i].index =
    1c1a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    1c1e:	4a0b      	ldr	r2, [pc, #44]	; (1c4c <mpu_mark_areas_for_dynamic_regions+0x58>)
    1c20:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    1c24:	f110 0f16 	cmn.w	r0, #22
    1c28:	d00c      	beq.n	1c44 <mpu_mark_areas_for_dynamic_regions+0x50>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    1c2a:	4b09      	ldr	r3, [pc, #36]	; (1c50 <mpu_mark_areas_for_dynamic_regions+0x5c>)
    1c2c:	781b      	ldrb	r3, [r3, #0]
    1c2e:	4298      	cmp	r0, r3
    1c30:	da09      	bge.n	1c46 <mpu_mark_areas_for_dynamic_regions+0x52>

			return -EINVAL;
		}

		/* Store default configuration */
		mpu_region_get_conf(dyn_reg_info[i].index,
    1c32:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    1c36:	eb02 0183 	add.w	r1, r2, r3, lsl #2
    1c3a:	3104      	adds	r1, #4
    1c3c:	f7ff feec 	bl	1a18 <mpu_region_get_conf>
    1c40:	e7dd      	b.n	1bfe <mpu_mark_areas_for_dynamic_regions+0xa>
			&dyn_reg_info[i].region_conf);
	}

	return 0;
    1c42:	2000      	movs	r0, #0
}
    1c44:	bd70      	pop	{r4, r5, r6, pc}
			return -EINVAL;
    1c46:	f06f 0015 	mvn.w	r0, #21
    1c4a:	e7fb      	b.n	1c44 <mpu_mark_areas_for_dynamic_regions+0x50>
    1c4c:	200009f0 	.word	0x200009f0
    1c50:	20000d04 	.word	0x20000d04

00001c54 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    1c54:	4b04      	ldr	r3, [pc, #16]	; (1c68 <arm_core_mpu_enable+0x14>)
    1c56:	2205      	movs	r2, #5
    1c58:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    1c5c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1c60:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    1c64:	4770      	bx	lr
    1c66:	bf00      	nop
    1c68:	e000ed00 	.word	0xe000ed00

00001c6c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    1c6c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    1c70:	4b02      	ldr	r3, [pc, #8]	; (1c7c <arm_core_mpu_disable+0x10>)
    1c72:	2200      	movs	r2, #0
    1c74:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    1c78:	4770      	bx	lr
    1c7a:	bf00      	nop
    1c7c:	e000ed00 	.word	0xe000ed00

00001c80 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    1c80:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    1c82:	4b0e      	ldr	r3, [pc, #56]	; (1cbc <z_arm_mpu_init+0x3c>)
    1c84:	681d      	ldr	r5, [r3, #0]
    1c86:	2d08      	cmp	r5, #8
    1c88:	d815      	bhi.n	1cb6 <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    1c8a:	f7ff ffef 	bl	1c6c <arm_core_mpu_disable>
	}
#endif
#endif /* CONFIG_NOCACHE_MEMORY */

	/* Architecture-specific configuration */
	mpu_init();
    1c8e:	f7ff feaf 	bl	19f0 <mpu_init>

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1c92:	2400      	movs	r4, #0
    1c94:	e007      	b.n	1ca6 <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    1c96:	4b09      	ldr	r3, [pc, #36]	; (1cbc <z_arm_mpu_init+0x3c>)
    1c98:	6859      	ldr	r1, [r3, #4]
    1c9a:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    1c9e:	4620      	mov	r0, r4
    1ca0:	f004 f96e 	bl	5f80 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1ca4:	3401      	adds	r4, #1
    1ca6:	42a5      	cmp	r5, r4
    1ca8:	d8f5      	bhi.n	1c96 <z_arm_mpu_init+0x16>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    1caa:	4b05      	ldr	r3, [pc, #20]	; (1cc0 <z_arm_mpu_init+0x40>)
    1cac:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    1cae:	f7ff ffd1 	bl	1c54 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    1cb2:	2000      	movs	r0, #0
}
    1cb4:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    1cb6:	f04f 30ff 	mov.w	r0, #4294967295
    1cba:	e7fb      	b.n	1cb4 <z_arm_mpu_init+0x34>
    1cbc:	00007e68 	.word	0x00007e68
    1cc0:	20000d04 	.word	0x20000d04

00001cc4 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    1cc4:	4b01      	ldr	r3, [pc, #4]	; (1ccc <__stdout_hook_install+0x8>)
    1cc6:	6018      	str	r0, [r3, #0]
}
    1cc8:	4770      	bx	lr
    1cca:	bf00      	nop
    1ccc:	200000d8 	.word	0x200000d8

00001cd0 <adc_gain_invert>:
		[ADC_GAIN_64] = {.mul = 1, .div = 64},
		[ADC_GAIN_128] = {.mul = 1, .div = 128},
	};
	int rv = -EINVAL;

	if ((uint8_t)gain < ARRAY_SIZE(gains)) {
    1cd0:	2813      	cmp	r0, #19
    1cd2:	d810      	bhi.n	1cf6 <adc_gain_invert+0x26>
		const struct gain_desc *gdp = &gains[gain];

		if ((gdp->mul != 0) && (gdp->div != 0)) {
    1cd4:	4b0c      	ldr	r3, [pc, #48]	; (1d08 <adc_gain_invert+0x38>)
    1cd6:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
    1cda:	b17b      	cbz	r3, 1cfc <adc_gain_invert+0x2c>
    1cdc:	4a0a      	ldr	r2, [pc, #40]	; (1d08 <adc_gain_invert+0x38>)
    1cde:	eb02 0240 	add.w	r2, r2, r0, lsl #1
    1ce2:	7852      	ldrb	r2, [r2, #1]
    1ce4:	b16a      	cbz	r2, 1d02 <adc_gain_invert+0x32>
			*value = (gdp->mul * *value) / gdp->div;
    1ce6:	6808      	ldr	r0, [r1, #0]
    1ce8:	fb00 f303 	mul.w	r3, r0, r3
    1cec:	fb93 f3f2 	sdiv	r3, r3, r2
    1cf0:	600b      	str	r3, [r1, #0]
			rv = 0;
    1cf2:	2000      	movs	r0, #0
    1cf4:	4770      	bx	lr
	int rv = -EINVAL;
    1cf6:	f06f 0015 	mvn.w	r0, #21
    1cfa:	4770      	bx	lr
    1cfc:	f06f 0015 	mvn.w	r0, #21
    1d00:	4770      	bx	lr
    1d02:	f06f 0015 	mvn.w	r0, #21
		}
	}

	return rv;
}
    1d06:	4770      	bx	lr
    1d08:	00007ea0 	.word	0x00007ea0

00001d0c <adc_nrfx_channel_setup>:


/* Implementation of the ADC driver API function: adc_channel_setup. */
static int adc_nrfx_channel_setup(const struct device *dev,
				  const struct adc_channel_cfg *channel_cfg)
{
    1d0c:	b570      	push	{r4, r5, r6, lr}
    1d0e:	b082      	sub	sp, #8
	nrf_saadc_channel_config_t config = {
    1d10:	2300      	movs	r3, #0
    1d12:	9300      	str	r3, [sp, #0]
    1d14:	f8cd 3003 	str.w	r3, [sp, #3]
		.resistor_p = NRF_SAADC_RESISTOR_DISABLED,
		.resistor_n = NRF_SAADC_RESISTOR_DISABLED,
		.burst      = NRF_SAADC_BURST_DISABLED,
	};
	uint8_t channel_id = channel_cfg->channel_id;
    1d18:	790d      	ldrb	r5, [r1, #4]
    1d1a:	f005 051f 	and.w	r5, r5, #31

	if (channel_id >= SAADC_CH_NUM) {
    1d1e:	2d07      	cmp	r5, #7
    1d20:	f200 8086 	bhi.w	1e30 <adc_nrfx_channel_setup+0x124>
    1d24:	460c      	mov	r4, r1
		return -EINVAL;
	}

	switch (channel_cfg->gain) {
    1d26:	780b      	ldrb	r3, [r1, #0]
    1d28:	2b0b      	cmp	r3, #11
    1d2a:	f200 8084 	bhi.w	1e36 <adc_nrfx_channel_setup+0x12a>
    1d2e:	e8df f003 	tbb	[pc, r3]
    1d32:	0609      	.short	0x0609
    1d34:	19821511 	.word	0x19821511
    1d38:	211d8282 	.word	0x211d8282
    1d3c:	2582      	.short	0x2582
	case ADC_GAIN_1_6:
		config.gain = NRF_SAADC_GAIN1_6;
		break;
	case ADC_GAIN_1_5:
		config.gain = NRF_SAADC_GAIN1_5;
    1d3e:	2301      	movs	r3, #1
    1d40:	f88d 3002 	strb.w	r3, [sp, #2]
	default:
		LOG_ERR("Selected ADC gain is not valid");
		return -EINVAL;
	}

	switch (channel_cfg->reference) {
    1d44:	7863      	ldrb	r3, [r4, #1]
    1d46:	2b03      	cmp	r3, #3
    1d48:	d01c      	beq.n	1d84 <adc_nrfx_channel_setup+0x78>
    1d4a:	2b04      	cmp	r3, #4
    1d4c:	d01d      	beq.n	1d8a <adc_nrfx_channel_setup+0x7e>
    1d4e:	f06f 0015 	mvn.w	r0, #21
    1d52:	e05b      	b.n	1e0c <adc_nrfx_channel_setup+0x100>
		config.gain = NRF_SAADC_GAIN1_4;
    1d54:	2302      	movs	r3, #2
    1d56:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
    1d5a:	e7f3      	b.n	1d44 <adc_nrfx_channel_setup+0x38>
		config.gain = NRF_SAADC_GAIN1_3;
    1d5c:	2303      	movs	r3, #3
    1d5e:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
    1d62:	e7ef      	b.n	1d44 <adc_nrfx_channel_setup+0x38>
		config.gain = NRF_SAADC_GAIN1_2;
    1d64:	2304      	movs	r3, #4
    1d66:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
    1d6a:	e7eb      	b.n	1d44 <adc_nrfx_channel_setup+0x38>
		config.gain = NRF_SAADC_GAIN1;
    1d6c:	2305      	movs	r3, #5
    1d6e:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
    1d72:	e7e7      	b.n	1d44 <adc_nrfx_channel_setup+0x38>
		config.gain = NRF_SAADC_GAIN2;
    1d74:	2306      	movs	r3, #6
    1d76:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
    1d7a:	e7e3      	b.n	1d44 <adc_nrfx_channel_setup+0x38>
		config.gain = NRF_SAADC_GAIN4;
    1d7c:	2307      	movs	r3, #7
    1d7e:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
    1d82:	e7df      	b.n	1d44 <adc_nrfx_channel_setup+0x38>
	case ADC_REF_INTERNAL:
		config.reference = NRF_SAADC_REFERENCE_INTERNAL;
		break;
	case ADC_REF_VDD_1_4:
		config.reference = NRF_SAADC_REFERENCE_VDD4;
    1d84:	2301      	movs	r3, #1
    1d86:	f88d 3003 	strb.w	r3, [sp, #3]
	default:
		LOG_ERR("Selected ADC reference is not valid");
		return -EINVAL;
	}

	switch (channel_cfg->acquisition_time) {
    1d8a:	8863      	ldrh	r3, [r4, #2]
    1d8c:	2b00      	cmp	r3, #0
    1d8e:	d03f      	beq.n	1e10 <adc_nrfx_channel_setup+0x104>
    1d90:	f244 0228 	movw	r2, #16424	; 0x4028
    1d94:	4293      	cmp	r3, r2
    1d96:	d851      	bhi.n	1e3c <adc_nrfx_channel_setup+0x130>
    1d98:	f244 0203 	movw	r2, #16387	; 0x4003
    1d9c:	4293      	cmp	r3, r2
    1d9e:	d350      	bcc.n	1e42 <adc_nrfx_channel_setup+0x136>
    1da0:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    1da4:	3b03      	subs	r3, #3
    1da6:	2b25      	cmp	r3, #37	; 0x25
    1da8:	d84e      	bhi.n	1e48 <adc_nrfx_channel_setup+0x13c>
    1daa:	e8df f003 	tbb	[pc, r3]
    1dae:	4d16      	.short	0x4d16
    1db0:	4d4d4d13 	.word	0x4d4d4d13
    1db4:	4d4d314d 	.word	0x4d4d314d
    1db8:	4d354d4d 	.word	0x4d354d4d
    1dbc:	394d4d4d 	.word	0x394d4d4d
    1dc0:	4d4d4d4d 	.word	0x4d4d4d4d
    1dc4:	4d4d4d4d 	.word	0x4d4d4d4d
    1dc8:	4d4d4d4d 	.word	0x4d4d4d4d
    1dcc:	4d4d4d4d 	.word	0x4d4d4d4d
    1dd0:	3d4d4d4d 	.word	0x3d4d4d4d
	case ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 3):
		config.acq_time = NRF_SAADC_ACQTIME_3US;
		break;
	case ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 5):
		config.acq_time = NRF_SAADC_ACQTIME_5US;
    1dd4:	2301      	movs	r3, #1
    1dd6:	f88d 3004 	strb.w	r3, [sp, #4]
	default:
		LOG_ERR("Selected ADC acquisition time is not valid");
		return -EINVAL;
	}

	config.mode = (channel_cfg->differential ?
    1dda:	7923      	ldrb	r3, [r4, #4]
		NRF_SAADC_MODE_DIFFERENTIAL : NRF_SAADC_MODE_SINGLE_ENDED);
    1ddc:	f3c3 1340 	ubfx	r3, r3, #5, #1
	config.mode = (channel_cfg->differential ?
    1de0:	f88d 3005 	strb.w	r3, [sp, #5]
	/* Keep the channel disabled in hardware (set positive input to
	 * NRF_SAADC_INPUT_DISABLED) until it is selected to be included
	 * in a sampling sequence.
	 */

	nrf_saadc_channel_init(NRF_SAADC, channel_id, &config);
    1de4:	4e1a      	ldr	r6, [pc, #104]	; (1e50 <adc_nrfx_channel_setup+0x144>)
    1de6:	466a      	mov	r2, sp
    1de8:	4629      	mov	r1, r5
    1dea:	4630      	mov	r0, r6
    1dec:	f004 f9ae 	bl	614c <nrf_saadc_channel_init>
	nrf_saadc_channel_input_set(NRF_SAADC,
				    channel_id,
				    NRF_SAADC_INPUT_DISABLED,
				    channel_cfg->input_negative);
    1df0:	79a1      	ldrb	r1, [r4, #6]
NRF_STATIC_INLINE void nrf_saadc_channel_input_set(NRF_SAADC_Type *  p_reg,
                                                   uint8_t           channel,
                                                   nrf_saadc_input_t pselp,
                                                   nrf_saadc_input_t pseln)
{
    p_reg->CH[channel].PSELN = pseln;
    1df2:	f105 0351 	add.w	r3, r5, #81	; 0x51
    1df6:	011a      	lsls	r2, r3, #4
    1df8:	eb06 1303 	add.w	r3, r6, r3, lsl #4
    1dfc:	6059      	str	r1, [r3, #4]
    p_reg->CH[channel].PSELP = pselp;
    1dfe:	2000      	movs	r0, #0
    1e00:	50b0      	str	r0, [r6, r2]

	/* Store the positive input selection in a dedicated array,
	 * to get it later when the channel is selected for a sampling
	 * and to mark the channel as configured (ready to be selected).
	 */
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
    1e02:	7962      	ldrb	r2, [r4, #5]
    1e04:	4b13      	ldr	r3, [pc, #76]	; (1e54 <adc_nrfx_channel_setup+0x148>)
    1e06:	442b      	add	r3, r5
    1e08:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8

	return 0;
}
    1e0c:	b002      	add	sp, #8
    1e0e:	bd70      	pop	{r4, r5, r6, pc}
		config.acq_time = NRF_SAADC_ACQTIME_10US;
    1e10:	2302      	movs	r3, #2
    1e12:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
    1e16:	e7e0      	b.n	1dda <adc_nrfx_channel_setup+0xce>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
    1e18:	2303      	movs	r3, #3
    1e1a:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
    1e1e:	e7dc      	b.n	1dda <adc_nrfx_channel_setup+0xce>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
    1e20:	2304      	movs	r3, #4
    1e22:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
    1e26:	e7d8      	b.n	1dda <adc_nrfx_channel_setup+0xce>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
    1e28:	2305      	movs	r3, #5
    1e2a:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
    1e2e:	e7d4      	b.n	1dda <adc_nrfx_channel_setup+0xce>
		return -EINVAL;
    1e30:	f06f 0015 	mvn.w	r0, #21
    1e34:	e7ea      	b.n	1e0c <adc_nrfx_channel_setup+0x100>
	switch (channel_cfg->gain) {
    1e36:	f06f 0015 	mvn.w	r0, #21
    1e3a:	e7e7      	b.n	1e0c <adc_nrfx_channel_setup+0x100>
	switch (channel_cfg->acquisition_time) {
    1e3c:	f06f 0015 	mvn.w	r0, #21
    1e40:	e7e4      	b.n	1e0c <adc_nrfx_channel_setup+0x100>
    1e42:	f06f 0015 	mvn.w	r0, #21
    1e46:	e7e1      	b.n	1e0c <adc_nrfx_channel_setup+0x100>
    1e48:	f06f 0015 	mvn.w	r0, #21
    1e4c:	e7de      	b.n	1e0c <adc_nrfx_channel_setup+0x100>
    1e4e:	bf00      	nop
    1e50:	5000e000 	.word	0x5000e000
    1e54:	20000000 	.word	0x20000000

00001e58 <adc_context_start_sampling>:
    return (p_reg->STATUS == (SAADC_STATUS_STATUS_Busy << SAADC_STATUS_STATUS_Pos));
}

NRF_STATIC_INLINE void nrf_saadc_enable(NRF_SAADC_Type * p_reg)
{
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
    1e58:	4b07      	ldr	r3, [pc, #28]	; (1e78 <adc_context_start_sampling+0x20>)
    1e5a:	2201      	movs	r2, #1
    1e5c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
    1e60:	f890 308e 	ldrb.w	r3, [r0, #142]	; 0x8e
    1e64:	b113      	cbz	r3, 1e6c <adc_context_start_sampling+0x14>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1e66:	4b04      	ldr	r3, [pc, #16]	; (1e78 <adc_context_start_sampling+0x20>)
    1e68:	60da      	str	r2, [r3, #12]
}
    1e6a:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1e6c:	4b02      	ldr	r3, [pc, #8]	; (1e78 <adc_context_start_sampling+0x20>)
    1e6e:	2201      	movs	r2, #1
    1e70:	601a      	str	r2, [r3, #0]
    1e72:	605a      	str	r2, [r3, #4]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
    1e74:	4770      	bx	lr
    1e76:	bf00      	nop
    1e78:	5000e000 	.word	0x5000e000

00001e7c <adc_context_update_buffer_pointer>:
static void adc_context_update_buffer_pointer(struct adc_context *ctx,
					      bool repeat)
{
	ARG_UNUSED(ctx);

	if (!repeat) {
    1e7c:	b949      	cbnz	r1, 1e92 <adc_context_update_buffer_pointer+0x16>
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
}

NRF_STATIC_INLINE nrf_saadc_value_t * nrf_saadc_buffer_pointer_get(NRF_SAADC_Type const * p_reg)
{
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
    1e7e:	4b05      	ldr	r3, [pc, #20]	; (1e94 <adc_context_update_buffer_pointer+0x18>)
    1e80:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
}

NRF_STATIC_INLINE uint16_t nrf_saadc_amount_get(NRF_SAADC_Type const * p_reg)
{
    return p_reg->RESULT.AMOUNT;
    1e84:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
		nrf_saadc_buffer_pointer_set(
			NRF_SAADC,
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
    1e88:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
    1e8a:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    1e8e:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			nrf_saadc_amount_get(NRF_SAADC));
	}
}
    1e92:	4770      	bx	lr
    1e94:	5000e000 	.word	0x5000e000

00001e98 <set_resolution>:

static int set_resolution(const struct adc_sequence *sequence)
{
	nrf_saadc_resolution_t nrf_resolution;

	switch (sequence->resolution) {
    1e98:	7c03      	ldrb	r3, [r0, #16]
    1e9a:	3b08      	subs	r3, #8
    1e9c:	2b06      	cmp	r3, #6
    1e9e:	d811      	bhi.n	1ec4 <set_resolution+0x2c>
    1ea0:	e8df f003 	tbb	[pc, r3]
    1ea4:	100e1004 	.word	0x100e1004
    1ea8:	1006      	.short	0x1006
    1eaa:	0c          	.byte	0x0c
    1eab:	00          	.byte	0x00
    1eac:	2200      	movs	r2, #0
    1eae:	e000      	b.n	1eb2 <set_resolution+0x1a>
		break;
	case 10:
		nrf_resolution = NRF_SAADC_RESOLUTION_10BIT;
		break;
	case 12:
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
    1eb0:	2202      	movs	r2, #2
}

NRF_STATIC_INLINE void nrf_saadc_resolution_set(NRF_SAADC_Type *       p_reg,
                                                nrf_saadc_resolution_t resolution)
{
    p_reg->RESOLUTION = resolution;
    1eb2:	4b06      	ldr	r3, [pc, #24]	; (1ecc <set_resolution+0x34>)
    1eb4:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
			    sequence->resolution);
		return -EINVAL;
	}

	nrf_saadc_resolution_set(NRF_SAADC, nrf_resolution);
	return 0;
    1eb8:	2000      	movs	r0, #0
    1eba:	4770      	bx	lr
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
    1ebc:	2203      	movs	r2, #3
		break;
    1ebe:	e7f8      	b.n	1eb2 <set_resolution+0x1a>
		nrf_resolution = NRF_SAADC_RESOLUTION_10BIT;
    1ec0:	2201      	movs	r2, #1
    1ec2:	e7f6      	b.n	1eb2 <set_resolution+0x1a>
	switch (sequence->resolution) {
    1ec4:	f06f 0015 	mvn.w	r0, #21
}
    1ec8:	4770      	bx	lr
    1eca:	bf00      	nop
    1ecc:	5000e000 	.word	0x5000e000

00001ed0 <set_oversampling>:
static int set_oversampling(const struct adc_sequence *sequence,
			    uint8_t active_channels)
{
	nrf_saadc_oversample_t nrf_oversampling;

	if ((active_channels > 1) && (sequence->oversampling > 0)) {
    1ed0:	2901      	cmp	r1, #1
    1ed2:	d901      	bls.n	1ed8 <set_oversampling+0x8>
    1ed4:	7c43      	ldrb	r3, [r0, #17]
    1ed6:	b973      	cbnz	r3, 1ef6 <set_oversampling+0x26>
		LOG_ERR(
			"Oversampling is supported for single channel only");
		return -EINVAL;
	}

	switch (sequence->oversampling) {
    1ed8:	7c43      	ldrb	r3, [r0, #17]
    1eda:	2b08      	cmp	r3, #8
    1edc:	d80e      	bhi.n	1efc <set_oversampling+0x2c>
    1ede:	e8df f003 	tbb	[pc, r3]
    1ee2:	0505      	.short	0x0505
    1ee4:	05050505 	.word	0x05050505
    1ee8:	0505      	.short	0x0505
    1eea:	05          	.byte	0x05
    1eeb:	00          	.byte	0x00
}

NRF_STATIC_INLINE void nrf_saadc_oversample_set(NRF_SAADC_Type *       p_reg,
                                                nrf_saadc_oversample_t oversample)
{
    p_reg->OVERSAMPLE = oversample;
    1eec:	4a05      	ldr	r2, [pc, #20]	; (1f04 <set_oversampling+0x34>)
    1eee:	f8c2 35f4 	str.w	r3, [r2, #1524]	; 0x5f4
			    sequence->oversampling);
		return -EINVAL;
	}

	nrf_saadc_oversample_set(NRF_SAADC, nrf_oversampling);
	return 0;
    1ef2:	2000      	movs	r0, #0
    1ef4:	4770      	bx	lr
		return -EINVAL;
    1ef6:	f06f 0015 	mvn.w	r0, #21
    1efa:	4770      	bx	lr
	switch (sequence->oversampling) {
    1efc:	f06f 0015 	mvn.w	r0, #21
}
    1f00:	4770      	bx	lr
    1f02:	bf00      	nop
    1f04:	5000e000 	.word	0x5000e000

00001f08 <adc_context_enable_timer>:
	}
}

#ifdef ADC_CONTEXT_USES_KERNEL_TIMER
static inline void adc_context_enable_timer(struct adc_context *ctx)
{
    1f08:	b510      	push	{r4, lr}
    1f0a:	b082      	sub	sp, #8
	k_timer_start(&ctx->timer, K_NO_WAIT, K_USEC(ctx->options.interval_us));
    1f0c:	f100 0408 	add.w	r4, r0, #8
    1f10:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    1f14:	0c41      	lsrs	r1, r0, #17
    1f16:	03c0      	lsls	r0, r0, #15
    1f18:	4b08      	ldr	r3, [pc, #32]	; (1f3c <adc_context_enable_timer+0x34>)
    1f1a:	18c0      	adds	r0, r0, r3
    1f1c:	4a08      	ldr	r2, [pc, #32]	; (1f40 <adc_context_enable_timer+0x38>)
    1f1e:	f04f 0300 	mov.w	r3, #0
    1f22:	f141 0100 	adc.w	r1, r1, #0
    1f26:	f7fe f915 	bl	154 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
    1f2a:	9000      	str	r0, [sp, #0]
    1f2c:	9101      	str	r1, [sp, #4]
    1f2e:	2200      	movs	r2, #0
    1f30:	2300      	movs	r3, #0
    1f32:	4620      	mov	r0, r4
    1f34:	f002 ffa6 	bl	4e84 <z_impl_k_timer_start>
}
    1f38:	b002      	add	sp, #8
    1f3a:	bd10      	pop	{r4, pc}
    1f3c:	000f423f 	.word	0x000f423f
    1f40:	000f4240 	.word	0x000f4240

00001f44 <start_read>:
	return 0;
}

static int start_read(const struct device *dev,
		      const struct adc_sequence *sequence)
{
    1f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int error;
	uint32_t selected_channels = sequence->channels;
    1f46:	684e      	ldr	r6, [r1, #4]
	uint8_t channel_id;

	/* Signal an error if channel selection is invalid (no channels or
	 * a non-existing one is selected).
	 */
	if (!selected_channels ||
    1f48:	1e73      	subs	r3, r6, #1
    1f4a:	2bfe      	cmp	r3, #254	; 0xfe
    1f4c:	d855      	bhi.n	1ffa <start_read+0xb6>
    1f4e:	460d      	mov	r5, r1
	active_channels = 0U;

	/* Enable only the channels selected for the pointed sequence.
	 * Disable all the rest.
	 */
	channel_id = 0U;
    1f50:	2300      	movs	r3, #0
	active_channels = 0U;
    1f52:	461c      	mov	r4, r3
    1f54:	e009      	b.n	1f6a <start_read+0x26>
    p_reg->CH[channel].PSELP = pselp;
    1f56:	f103 0251 	add.w	r2, r3, #81	; 0x51
    1f5a:	0112      	lsls	r2, r2, #4
    1f5c:	492a      	ldr	r1, [pc, #168]	; (2008 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x8>)
    1f5e:	2000      	movs	r0, #0
    1f60:	5088      	str	r0, [r1, r2]
			nrf_saadc_channel_pos_input_set(
				NRF_SAADC,
				channel_id,
				NRF_SAADC_INPUT_DISABLED);
		}
	} while (++channel_id < SAADC_CH_NUM);
    1f62:	3301      	adds	r3, #1
    1f64:	b2db      	uxtb	r3, r3
    1f66:	2b07      	cmp	r3, #7
    1f68:	d822      	bhi.n	1fb0 <start_read+0x6c>
		if (selected_channels & BIT(channel_id)) {
    1f6a:	461a      	mov	r2, r3
    1f6c:	fa26 f103 	lsr.w	r1, r6, r3
    1f70:	f011 0f01 	tst.w	r1, #1
    1f74:	d0ef      	beq.n	1f56 <start_read+0x12>
			if (m_data.positive_inputs[channel_id] == 0U) {
    1f76:	4925      	ldr	r1, [pc, #148]	; (200c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xc>)
    1f78:	4419      	add	r1, r3
    1f7a:	f891 70a8 	ldrb.w	r7, [r1, #168]	; 0xa8
    1f7e:	2f00      	cmp	r7, #0
    1f80:	d03e      	beq.n	2000 <CONFIG_NRF_SPU_RAM_REGION_SIZE>
				(sequence->oversampling != 0U ?
    1f82:	7c69      	ldrb	r1, [r5, #17]
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
    1f84:	3900      	subs	r1, #0
    1f86:	bf18      	it	ne
    1f88:	2101      	movne	r1, #1

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
    1f8a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 2008 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x8>
    1f8e:	eb0c 1e03 	add.w	lr, ip, r3, lsl #4
    1f92:	f8de 0518 	ldr.w	r0, [lr, #1304]	; 0x518
    1f96:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
    1f9a:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
    1f9e:	f8ce 0518 	str.w	r0, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
    1fa2:	3251      	adds	r2, #81	; 0x51
    1fa4:	0112      	lsls	r2, r2, #4
    1fa6:	f84c 7002 	str.w	r7, [ip, r2]
			++active_channels;
    1faa:	3401      	adds	r4, #1
    1fac:	b2e4      	uxtb	r4, r4
    1fae:	e7d8      	b.n	1f62 <start_read+0x1e>

	error = set_resolution(sequence);
    1fb0:	4628      	mov	r0, r5
    1fb2:	f7ff ff71 	bl	1e98 <set_resolution>
	if (error) {
    1fb6:	4603      	mov	r3, r0
    1fb8:	b108      	cbz	r0, 1fbe <start_read+0x7a>

	adc_context_start_read(&m_data.ctx, sequence);

	error = adc_context_wait_for_completion(&m_data.ctx);
	return error;
}
    1fba:	4618      	mov	r0, r3
    1fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	error = set_oversampling(sequence, active_channels);
    1fbe:	4621      	mov	r1, r4
    1fc0:	4628      	mov	r0, r5
    1fc2:	f7ff ff85 	bl	1ed0 <set_oversampling>
	if (error) {
    1fc6:	4603      	mov	r3, r0
    1fc8:	2800      	cmp	r0, #0
    1fca:	d1f6      	bne.n	1fba <start_read+0x76>
	error = check_buffer_size(sequence, active_channels);
    1fcc:	4621      	mov	r1, r4
    1fce:	4628      	mov	r0, r5
    1fd0:	f004 f8f1 	bl	61b6 <check_buffer_size>
	if (error) {
    1fd4:	4603      	mov	r3, r0
    1fd6:	2800      	cmp	r0, #0
    1fd8:	d1ef      	bne.n	1fba <start_read+0x76>
			      (nrf_saadc_value_t *)sequence->buffer,
    1fda:	68aa      	ldr	r2, [r5, #8]
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    1fdc:	4b0a      	ldr	r3, [pc, #40]	; (2008 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x8>)
    1fde:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
    p_reg->RESULT.MAXCNT = size;
    1fe2:	f8c3 4630 	str.w	r4, [r3, #1584]	; 0x630
	adc_context_start_read(&m_data.ctx, sequence);
    1fe6:	4c09      	ldr	r4, [pc, #36]	; (200c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xc>)
    1fe8:	4629      	mov	r1, r5
    1fea:	4620      	mov	r0, r4
    1fec:	f004 f925 	bl	623a <adc_context_start_read>
	error = adc_context_wait_for_completion(&m_data.ctx);
    1ff0:	4620      	mov	r0, r4
    1ff2:	f004 f912 	bl	621a <adc_context_wait_for_completion>
    1ff6:	4603      	mov	r3, r0
	return error;
    1ff8:	e7df      	b.n	1fba <start_read+0x76>
		return -EINVAL;
    1ffa:	f06f 0315 	mvn.w	r3, #21
    1ffe:	e7dc      	b.n	1fba <start_read+0x76>
				return -EINVAL;
    2000:	f06f 0315 	mvn.w	r3, #21
    2004:	e7d9      	b.n	1fba <start_read+0x76>
    2006:	bf00      	nop
    2008:	5000e000 	.word	0x5000e000
    200c:	20000000 	.word	0x20000000

00002010 <adc_nrfx_read_async>:
#ifdef CONFIG_ADC_ASYNC
/* Implementation of the ADC driver API function: adc_read_async. */
static int adc_nrfx_read_async(const struct device *dev,
			       const struct adc_sequence *sequence,
			       struct k_poll_signal *async)
{
    2010:	b570      	push	{r4, r5, r6, lr}
    2012:	4604      	mov	r4, r0
    2014:	460d      	mov	r5, r1
	int error;

	adc_context_lock(&m_data.ctx, true, async);
    2016:	4e08      	ldr	r6, [pc, #32]	; (2038 <adc_nrfx_read_async+0x28>)
    2018:	2101      	movs	r1, #1
    201a:	4630      	mov	r0, r6
    201c:	f004 f8ee 	bl	61fc <adc_context_lock>
	error = start_read(dev, sequence);
    2020:	4629      	mov	r1, r5
    2022:	4620      	mov	r0, r4
    2024:	f7ff ff8e 	bl	1f44 <start_read>
    2028:	4604      	mov	r4, r0
	adc_context_release(&m_data.ctx, error);
    202a:	4601      	mov	r1, r0
    202c:	4630      	mov	r0, r6
    202e:	f004 f92f 	bl	6290 <adc_context_release>

	return error;
}
    2032:	4620      	mov	r0, r4
    2034:	bd70      	pop	{r4, r5, r6, pc}
    2036:	bf00      	nop
    2038:	20000000 	.word	0x20000000

0000203c <adc_nrfx_read>:
{
    203c:	b570      	push	{r4, r5, r6, lr}
    203e:	4604      	mov	r4, r0
    2040:	460d      	mov	r5, r1
	adc_context_lock(&m_data.ctx, false, NULL);
    2042:	4e08      	ldr	r6, [pc, #32]	; (2064 <adc_nrfx_read+0x28>)
    2044:	2200      	movs	r2, #0
    2046:	4611      	mov	r1, r2
    2048:	4630      	mov	r0, r6
    204a:	f004 f8d7 	bl	61fc <adc_context_lock>
	error = start_read(dev, sequence);
    204e:	4629      	mov	r1, r5
    2050:	4620      	mov	r0, r4
    2052:	f7ff ff77 	bl	1f44 <start_read>
    2056:	4604      	mov	r4, r0
	adc_context_release(&m_data.ctx, error);
    2058:	4601      	mov	r1, r0
    205a:	4630      	mov	r0, r6
    205c:	f004 f918 	bl	6290 <adc_context_release>
}
    2060:	4620      	mov	r0, r4
    2062:	bd70      	pop	{r4, r5, r6, pc}
    2064:	20000000 	.word	0x20000000

00002068 <init_saadc>:
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
    2068:	b510      	push	{r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    206a:	4b0d      	ldr	r3, [pc, #52]	; (20a0 <init_saadc+0x38>)
    206c:	2400      	movs	r4, #0
    206e:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    2072:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    2076:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
    207a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    p_reg->INTENSET = mask;
    207e:	2212      	movs	r2, #18
    2080:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
    2084:	200e      	movs	r0, #14
    2086:	f003 ff2a 	bl	5ede <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    208a:	4622      	mov	r2, r4
    208c:	2101      	movs	r1, #1
    208e:	200e      	movs	r0, #14
    2090:	f003 ff2a 	bl	5ee8 <z_arm_irq_priority_set>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);
    2094:	4803      	ldr	r0, [pc, #12]	; (20a4 <init_saadc+0x3c>)
    2096:	f004 f904 	bl	62a2 <adc_context_unlock_unconditionally>

	return 0;
}
    209a:	4620      	mov	r0, r4
    209c:	bd10      	pop	{r4, pc}
    209e:	bf00      	nop
    20a0:	5000e000 	.word	0x5000e000
    20a4:	20000000 	.word	0x20000000

000020a8 <saadc_irq_handler>:
{
    20a8:	b508      	push	{r3, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    20aa:	4b11      	ldr	r3, [pc, #68]	; (20f0 <saadc_irq_handler+0x48>)
    20ac:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
    20b0:	b973      	cbnz	r3, 20d0 <saadc_irq_handler+0x28>
    20b2:	4b0f      	ldr	r3, [pc, #60]	; (20f0 <saadc_irq_handler+0x48>)
    20b4:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	} else if (nrf_saadc_event_check(NRF_SAADC,
    20b8:	b14b      	cbz	r3, 20ce <saadc_irq_handler+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    20ba:	4b0d      	ldr	r3, [pc, #52]	; (20f0 <saadc_irq_handler+0x48>)
    20bc:	2200      	movs	r2, #0
    20be:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    20c2:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    20c6:	2201      	movs	r2, #1
    20c8:	609a      	str	r2, [r3, #8]
    20ca:	601a      	str	r2, [r3, #0]
    20cc:	605a      	str	r2, [r3, #4]
}
    20ce:	bd08      	pop	{r3, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    20d0:	4b07      	ldr	r3, [pc, #28]	; (20f0 <saadc_irq_handler+0x48>)
    20d2:	2200      	movs	r2, #0
    20d4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    20d8:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    20dc:	2101      	movs	r1, #1
    20de:	6099      	str	r1, [r3, #8]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
    20e0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		adc_context_on_sampling_done(&m_data.ctx, dev);
    20e4:	4601      	mov	r1, r0
    20e6:	4803      	ldr	r0, [pc, #12]	; (20f4 <saadc_irq_handler+0x4c>)
    20e8:	f004 f8f8 	bl	62dc <adc_context_on_sampling_done>
    20ec:	e7ef      	b.n	20ce <saadc_irq_handler+0x26>
    20ee:	bf00      	nop
    20f0:	5000e000 	.word	0x5000e000
    20f4:	20000000 	.word	0x20000000

000020f8 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    20f8:	4800      	ldr	r0, [pc, #0]	; (20fc <get_hf_flags+0x4>)
    20fa:	4770      	bx	lr
    20fc:	20000a90 	.word	0x20000a90

00002100 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    2100:	4b03      	ldr	r3, [pc, #12]	; (2110 <get_subsys+0x10>)
    2102:	1ac0      	subs	r0, r0, r3
    2104:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
    2106:	4b03      	ldr	r3, [pc, #12]	; (2114 <get_subsys+0x14>)
    2108:	fb03 f000 	mul.w	r0, r3, r0
    210c:	4770      	bx	lr
    210e:	bf00      	nop
    2110:	20000a18 	.word	0x20000a18
    2114:	b6db6db7 	.word	0xb6db6db7

00002118 <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    2118:	b538      	push	{r3, r4, r5, lr}
    211a:	4605      	mov	r5, r0
    211c:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    211e:	f7ff ffef 	bl	2100 <get_subsys>
    2122:	4601      	mov	r1, r0
    2124:	2240      	movs	r2, #64	; 0x40
    2126:	4803      	ldr	r0, [pc, #12]	; (2134 <onoff_stop+0x1c>)
    2128:	f004 f9d1 	bl	64ce <stop>
    212c:	4601      	mov	r1, r0
	notify(mgr, res);
    212e:	4628      	mov	r0, r5
    2130:	47a0      	blx	r4
}
    2132:	bd38      	pop	{r3, r4, r5, pc}
    2134:	00007974 	.word	0x00007974

00002138 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    2138:	b530      	push	{r4, r5, lr}
    213a:	b083      	sub	sp, #12
    213c:	4605      	mov	r5, r0
    213e:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2140:	f7ff ffde 	bl	2100 <get_subsys>
    2144:	4601      	mov	r1, r0
    2146:	2340      	movs	r3, #64	; 0x40
    2148:	9300      	str	r3, [sp, #0]
    214a:	4623      	mov	r3, r4
    214c:	4a05      	ldr	r2, [pc, #20]	; (2164 <onoff_start+0x2c>)
    214e:	4806      	ldr	r0, [pc, #24]	; (2168 <onoff_start+0x30>)
    2150:	f004 f9d7 	bl	6502 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    2154:	1e01      	subs	r1, r0, #0
    2156:	db01      	blt.n	215c <onoff_start+0x24>
		notify(mgr, err);
	}
}
    2158:	b003      	add	sp, #12
    215a:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    215c:	4628      	mov	r0, r5
    215e:	47a0      	blx	r4
}
    2160:	e7fa      	b.n	2158 <onoff_start+0x20>
    2162:	bf00      	nop
    2164:	0000654b 	.word	0x0000654b
    2168:	00007974 	.word	0x00007974

0000216c <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    216c:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    216e:	2805      	cmp	r0, #5
    2170:	d815      	bhi.n	219e <clock_event_handler+0x32>
    2172:	e8df f000 	tbb	[pc, r0]
    2176:	1a03      	.short	0x1a03
    2178:	10151414 	.word	0x10151414
	case NRFX_CLOCK_EVT_HFCLK_STARTED:
	{
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    217c:	2100      	movs	r1, #0
    217e:	480d      	ldr	r0, [pc, #52]	; (21b4 <clock_event_handler+0x48>)
    2180:	f004 f930 	bl	63e4 <get_sub_data>

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    2184:	6883      	ldr	r3, [r0, #8]
    2186:	f013 0f07 	tst.w	r3, #7
    218a:	d108      	bne.n	219e <clock_event_handler+0x32>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    218c:	2100      	movs	r1, #0
    218e:	4809      	ldr	r0, [pc, #36]	; (21b4 <clock_event_handler+0x48>)
    2190:	f004 f98b 	bl	64aa <clkstarted_handle>
    2194:	e003      	b.n	219e <clock_event_handler+0x32>

		break;
	}
#if NRF_CLOCK_HAS_HFCLK192M
	case NRFX_CLOCK_EVT_HFCLK192M_STARTED:
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
    2196:	2102      	movs	r1, #2
    2198:	4806      	ldr	r0, [pc, #24]	; (21b4 <clock_event_handler+0x48>)
    219a:	f004 f986 	bl	64aa <clkstarted_handle>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
    219e:	bd08      	pop	{r3, pc}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
    21a0:	2103      	movs	r1, #3
    21a2:	4804      	ldr	r0, [pc, #16]	; (21b4 <clock_event_handler+0x48>)
    21a4:	f004 f981 	bl	64aa <clkstarted_handle>
		break;
    21a8:	e7f9      	b.n	219e <clock_event_handler+0x32>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    21aa:	2101      	movs	r1, #1
    21ac:	4801      	ldr	r0, [pc, #4]	; (21b4 <clock_event_handler+0x48>)
    21ae:	f004 f97c 	bl	64aa <clkstarted_handle>
}
    21b2:	e7f4      	b.n	219e <clock_event_handler+0x32>
    21b4:	00007974 	.word	0x00007974

000021b8 <generic_hfclk_start>:
{
    21b8:	b510      	push	{r4, lr}
    21ba:	b082      	sub	sp, #8
	__asm__ volatile(
    21bc:	f04f 0320 	mov.w	r3, #32
    21c0:	f3ef 8411 	mrs	r4, BASEPRI
    21c4:	f383 8812 	msr	BASEPRI_MAX, r3
    21c8:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    21cc:	4a14      	ldr	r2, [pc, #80]	; (2220 <generic_hfclk_start+0x68>)
    21ce:	6813      	ldr	r3, [r2, #0]
    21d0:	f043 0102 	orr.w	r1, r3, #2
    21d4:	6011      	str	r1, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    21d6:	f013 0f01 	tst.w	r3, #1
    21da:	d109      	bne.n	21f0 <generic_hfclk_start+0x38>
	bool already_started = false;
    21dc:	2300      	movs	r3, #0
	__asm__ volatile(
    21de:	f384 8811 	msr	BASEPRI, r4
    21e2:	f3bf 8f6f 	isb	sy
	if (already_started) {
    21e6:	b9b3      	cbnz	r3, 2216 <generic_hfclk_start+0x5e>
	hfclk_start();
    21e8:	f004 f9b7 	bl	655a <hfclk_start>
}
    21ec:	b002      	add	sp, #8
    21ee:	bd10      	pop	{r4, pc}
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
    21f0:	f10d 0207 	add.w	r2, sp, #7
    21f4:	2101      	movs	r1, #1
    21f6:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
    21fa:	f004 f8b9 	bl	6370 <nrf_clock_is_running>
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    21fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
    2202:	2b01      	cmp	r3, #1
    2204:	d001      	beq.n	220a <generic_hfclk_start+0x52>
	bool already_started = false;
    2206:	2300      	movs	r3, #0
    2208:	e7e9      	b.n	21de <generic_hfclk_start+0x26>
			set_on_state(get_hf_flags());
    220a:	f7ff ff75 	bl	20f8 <get_hf_flags>
    220e:	f004 f939 	bl	6484 <set_on_state>
			already_started = true;
    2212:	2301      	movs	r3, #1
    2214:	e7e3      	b.n	21de <generic_hfclk_start+0x26>
		clkstarted_handle(CLOCK_DEVICE,
    2216:	2100      	movs	r1, #0
    2218:	4802      	ldr	r0, [pc, #8]	; (2224 <generic_hfclk_start+0x6c>)
    221a:	f004 f946 	bl	64aa <clkstarted_handle>
		return;
    221e:	e7e5      	b.n	21ec <generic_hfclk_start+0x34>
    2220:	20000ab8 	.word	0x20000ab8
    2224:	00007974 	.word	0x00007974

00002228 <generic_hfclk_stop>:
{
    2228:	b508      	push	{r3, lr}
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    222a:	4b08      	ldr	r3, [pc, #32]	; (224c <generic_hfclk_stop+0x24>)
    222c:	e8d3 2fef 	ldaex	r2, [r3]
    2230:	f022 0102 	bic.w	r1, r2, #2
    2234:	e8c3 1fe0 	stlex	r0, r1, [r3]
    2238:	2800      	cmp	r0, #0
    223a:	d1f7      	bne.n	222c <generic_hfclk_stop+0x4>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    223c:	f012 0f01 	tst.w	r2, #1
    2240:	d000      	beq.n	2244 <generic_hfclk_stop+0x1c>
}
    2242:	bd08      	pop	{r3, pc}
	hfclk_stop();
    2244:	f004 f99d 	bl	6582 <hfclk_stop>
    2248:	e7fb      	b.n	2242 <generic_hfclk_stop+0x1a>
    224a:	bf00      	nop
    224c:	20000ab8 	.word	0x20000ab8

00002250 <lfclk_spinwait>:
{
    2250:	b570      	push	{r4, r5, r6, lr}
    2252:	b082      	sub	sp, #8
    2254:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    2256:	2801      	cmp	r0, #1
    2258:	d107      	bne.n	226a <lfclk_spinwait+0x1a>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    225a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    225e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    2262:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    2266:	2b02      	cmp	r3, #2
    2268:	d037      	beq.n	22da <lfclk_spinwait+0x8a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    226a:	f004 fff0 	bl	724e <k_is_in_isr>
    226e:	4604      	mov	r4, r0
    2270:	b910      	cbnz	r0, 2278 <lfclk_spinwait+0x28>
	return !z_sys_post_kernel;
    2272:	4b2b      	ldr	r3, [pc, #172]	; (2320 <lfclk_spinwait+0xd0>)
    2274:	781b      	ldrb	r3, [r3, #0]
    2276:	b97b      	cbnz	r3, 2298 <lfclk_spinwait+0x48>
	__asm__ volatile(
    2278:	f04f 0320 	mov.w	r3, #32
    227c:	f3ef 8611 	mrs	r6, BASEPRI
    2280:	f383 8812 	msr	BASEPRI_MAX, r3
    2284:	f3bf 8f6f 	isb	sy
    2288:	2401      	movs	r4, #1
	if (!isr_mode) {
    228a:	b994      	cbnz	r4, 22b2 <lfclk_spinwait+0x62>
    p_reg->INTENCLR = mask;
    228c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2290:	2202      	movs	r2, #2
    2292:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    2296:	e00c      	b.n	22b2 <lfclk_spinwait+0x62>
	int key = isr_mode ? irq_lock() : 0;
    2298:	2600      	movs	r6, #0
    229a:	e7f6      	b.n	228a <lfclk_spinwait+0x3a>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    229c:	b1fc      	cbz	r4, 22de <lfclk_spinwait+0x8e>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    229e:	4630      	mov	r0, r6
    22a0:	f7ff f882 	bl	13a8 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    22a4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    22a8:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    22ac:	b2db      	uxtb	r3, r3
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    22ae:	2b01      	cmp	r3, #1
    22b0:	d019      	beq.n	22e6 <lfclk_spinwait+0x96>
    22b2:	f10d 0207 	add.w	r2, sp, #7
    22b6:	2100      	movs	r1, #0
    22b8:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
    22bc:	f004 f858 	bl	6370 <nrf_clock_is_running>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    22c0:	2800      	cmp	r0, #0
    22c2:	d0eb      	beq.n	229c <lfclk_spinwait+0x4c>
		 && ((type == target_type)
    22c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
	while (!(nrfx_clock_is_running(d, (void *)&type)
    22c8:	2b02      	cmp	r3, #2
    22ca:	d001      	beq.n	22d0 <lfclk_spinwait+0x80>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    22cc:	2d01      	cmp	r5, #1
    22ce:	d1e5      	bne.n	229c <lfclk_spinwait+0x4c>
	if (isr_mode) {
    22d0:	b304      	cbz	r4, 2314 <lfclk_spinwait+0xc4>
	__asm__ volatile(
    22d2:	f386 8811 	msr	BASEPRI, r6
    22d6:	f3bf 8f6f 	isb	sy
}
    22da:	b002      	add	sp, #8
    22dc:	bd70      	pop	{r4, r5, r6, pc}
				k_msleep(1);
    22de:	2001      	movs	r0, #1
    22e0:	f004 f963 	bl	65aa <k_msleep>
    22e4:	e7de      	b.n	22a4 <lfclk_spinwait+0x54>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    22e6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    22ea:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    22ee:	2b00      	cmp	r3, #0
    22f0:	d0df      	beq.n	22b2 <lfclk_spinwait+0x62>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    22f2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    22f6:	2200      	movs	r2, #0
    22f8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    22fc:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    2300:	2202      	movs	r2, #2
    2302:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2306:	4a07      	ldr	r2, [pc, #28]	; (2324 <lfclk_spinwait+0xd4>)
    2308:	2120      	movs	r1, #32
    230a:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    230e:	2201      	movs	r2, #1
    2310:	609a      	str	r2, [r3, #8]
}
    2312:	e7ce      	b.n	22b2 <lfclk_spinwait+0x62>
    p_reg->INTENSET = mask;
    2314:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2318:	2202      	movs	r2, #2
    231a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    231e:	e7dc      	b.n	22da <lfclk_spinwait+0x8a>
    2320:	20000d07 	.word	0x20000d07
    2324:	e000e100 	.word	0xe000e100

00002328 <api_blocking_start>:
{
    2328:	b500      	push	{lr}
    232a:	b087      	sub	sp, #28
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    232c:	f8cd d000 	str.w	sp, [sp]
    2330:	f8cd d004 	str.w	sp, [sp, #4]
    2334:	2300      	movs	r3, #0
    2336:	9302      	str	r3, [sp, #8]
    2338:	2301      	movs	r3, #1
    233a:	9303      	str	r3, [sp, #12]
    233c:	ab04      	add	r3, sp, #16
    233e:	9304      	str	r3, [sp, #16]
    2340:	9305      	str	r3, [sp, #20]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2342:	466b      	mov	r3, sp
    2344:	4a06      	ldr	r2, [pc, #24]	; (2360 <api_blocking_start+0x38>)
    2346:	f004 f8f8 	bl	653a <api_start>
	if (err < 0) {
    234a:	2800      	cmp	r0, #0
    234c:	db05      	blt.n	235a <api_blocking_start+0x32>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    234e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2352:	2300      	movs	r3, #0
    2354:	4668      	mov	r0, sp
    2356:	f001 ff91 	bl	427c <z_impl_k_sem_take>
}
    235a:	b007      	add	sp, #28
    235c:	f85d fb04 	ldr.w	pc, [sp], #4
    2360:	000065d7 	.word	0x000065d7

00002364 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    2364:	b570      	push	{r4, r5, r6, lr}
    2366:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2368:	2200      	movs	r2, #0
    236a:	2101      	movs	r1, #1
    236c:	2005      	movs	r0, #5
    236e:	f003 fdbb 	bl	5ee8 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    2372:	4811      	ldr	r0, [pc, #68]	; (23b8 <clk_init+0x54>)
    2374:	f000 ff32 	bl	31dc <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    2378:	4b10      	ldr	r3, [pc, #64]	; (23bc <clk_init+0x58>)
    237a:	4298      	cmp	r0, r3
    237c:	d119      	bne.n	23b2 <clk_init+0x4e>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    237e:	f004 fdd4 	bl	6f2a <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    2382:	2400      	movs	r4, #0
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    2384:	2c03      	cmp	r4, #3
    2386:	d812      	bhi.n	23ae <clk_init+0x4a>
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    2388:	4621      	mov	r1, r4
    238a:	4630      	mov	r0, r6
    238c:	f004 f82a 	bl	63e4 <get_sub_data>
    2390:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
    2392:	4621      	mov	r1, r4
    2394:	4630      	mov	r0, r6
    2396:	f004 f830 	bl	63fa <get_onoff_manager>
    239a:	4909      	ldr	r1, [pc, #36]	; (23c0 <clk_init+0x5c>)
    239c:	f003 fa74 	bl	5888 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    23a0:	2800      	cmp	r0, #0
    23a2:	db05      	blt.n	23b0 <clk_init+0x4c>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    23a4:	2301      	movs	r3, #1
    23a6:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    23a8:	441c      	add	r4, r3
    23aa:	b2e4      	uxtb	r4, r4
    23ac:	e7ea      	b.n	2384 <clk_init+0x20>
	}

	return 0;
    23ae:	2000      	movs	r0, #0
}
    23b0:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    23b2:	f06f 0004 	mvn.w	r0, #4
    23b6:	e7fb      	b.n	23b0 <clk_init+0x4c>
    23b8:	0000216d 	.word	0x0000216d
    23bc:	0bad0000 	.word	0x0bad0000
    23c0:	00007ee4 	.word	0x00007ee4

000023c4 <z_nrf_clock_control_lf_on>:
{
    23c4:	b510      	push	{r4, lr}
    23c6:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    23c8:	4b0e      	ldr	r3, [pc, #56]	; (2404 <z_nrf_clock_control_lf_on+0x40>)
    23ca:	2101      	movs	r1, #1
    23cc:	e8d3 2fef 	ldaex	r2, [r3]
    23d0:	e8c3 1fe0 	stlex	r0, r1, [r3]
    23d4:	2800      	cmp	r0, #0
    23d6:	d1f9      	bne.n	23cc <z_nrf_clock_control_lf_on+0x8>
	if (atomic_set(&on, 1) == 0) {
    23d8:	b11a      	cbz	r2, 23e2 <z_nrf_clock_control_lf_on+0x1e>
	switch (start_mode) {
    23da:	1e63      	subs	r3, r4, #1
    23dc:	2b01      	cmp	r3, #1
    23de:	d90d      	bls.n	23fc <z_nrf_clock_control_lf_on+0x38>
}
    23e0:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
    23e2:	4809      	ldr	r0, [pc, #36]	; (2408 <z_nrf_clock_control_lf_on+0x44>)
    23e4:	f004 f809 	bl	63fa <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    23e8:	4908      	ldr	r1, [pc, #32]	; (240c <z_nrf_clock_control_lf_on+0x48>)
    23ea:	2300      	movs	r3, #0
    23ec:	604b      	str	r3, [r1, #4]
    23ee:	608b      	str	r3, [r1, #8]
    23f0:	60cb      	str	r3, [r1, #12]
    23f2:	2301      	movs	r3, #1
    23f4:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    23f6:	f003 fa64 	bl	58c2 <onoff_request>
    23fa:	e7ee      	b.n	23da <z_nrf_clock_control_lf_on+0x16>
		lfclk_spinwait(start_mode);
    23fc:	4620      	mov	r0, r4
    23fe:	f7ff ff27 	bl	2250 <lfclk_spinwait>
		break;
    2402:	e7ed      	b.n	23e0 <z_nrf_clock_control_lf_on+0x1c>
    2404:	20000a14 	.word	0x20000a14
    2408:	00007974 	.word	0x00007974
    240c:	20000a04 	.word	0x20000a04

00002410 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    2410:	b510      	push	{r4, lr}
    2412:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    2414:	280a      	cmp	r0, #10
    2416:	d006      	beq.n	2426 <console_out+0x16>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    2418:	b2e1      	uxtb	r1, r4
			     unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
					unsigned char out_char)
{
	const struct uart_driver_api *api =
    241a:	4806      	ldr	r0, [pc, #24]	; (2434 <console_out+0x24>)
    241c:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    241e:	685b      	ldr	r3, [r3, #4]
    2420:	4798      	blx	r3

	return c;
}
    2422:	4620      	mov	r0, r4
    2424:	bd10      	pop	{r4, pc}
	const struct uart_driver_api *api =
    2426:	4803      	ldr	r0, [pc, #12]	; (2434 <console_out+0x24>)
    2428:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    242a:	685b      	ldr	r3, [r3, #4]
    242c:	210d      	movs	r1, #13
    242e:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
    2430:	e7f2      	b.n	2418 <console_out+0x8>
    2432:	bf00      	nop
    2434:	000079bc 	.word	0x000079bc

00002438 <uart_console_hook_install>:
/**
 * @brief Install printk/stdout hook for UART console output
 */

static void uart_console_hook_install(void)
{
    2438:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
    243a:	4c04      	ldr	r4, [pc, #16]	; (244c <uart_console_hook_install+0x14>)
    243c:	4620      	mov	r0, r4
    243e:	f7ff fc41 	bl	1cc4 <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
    2442:	4620      	mov	r0, r4
    2444:	f7fe f8da 	bl	5fc <__printk_hook_install>
#endif
}
    2448:	bd10      	pop	{r4, pc}
    244a:	bf00      	nop
    244c:	00002411 	.word	0x00002411

00002450 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    2450:	b508      	push	{r3, lr}
    2452:	4805      	ldr	r0, [pc, #20]	; (2468 <uart_console_init+0x18>)
    2454:	f004 fe69 	bl	712a <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
    2458:	b118      	cbz	r0, 2462 <uart_console_init+0x12>
		return -ENODEV;
	}

	uart_console_hook_install();
    245a:	f7ff ffed 	bl	2438 <uart_console_hook_install>

	return 0;
    245e:	2000      	movs	r0, #0
}
    2460:	bd08      	pop	{r3, pc}
		return -ENODEV;
    2462:	f06f 0012 	mvn.w	r0, #18
    2466:	e7fb      	b.n	2460 <uart_console_init+0x10>
    2468:	000079bc 	.word	0x000079bc

0000246c <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    246c:	b128      	cbz	r0, 247a <get_dev+0xe>
    246e:	2801      	cmp	r0, #1
    2470:	d101      	bne.n	2476 <get_dev+0xa>
    2472:	4803      	ldr	r0, [pc, #12]	; (2480 <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
    2474:	4770      	bx	lr
	const struct device *dev = NULL;
    2476:	2000      	movs	r0, #0
    2478:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    247a:	4802      	ldr	r0, [pc, #8]	; (2484 <get_dev+0x18>)
    247c:	4770      	bx	lr
    247e:	bf00      	nop
    2480:	0000798c 	.word	0x0000798c
    2484:	000079a4 	.word	0x000079a4

00002488 <gpio_nrfx_pin_interrupt_configure>:
{
    2488:	b5f0      	push	{r4, r5, r6, r7, lr}
    248a:	b085      	sub	sp, #20
    248c:	460e      	mov	r6, r1
    248e:	4619      	mov	r1, r3
	return port->config;
    2490:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2492:	7b1b      	ldrb	r3, [r3, #12]
    2494:	f006 051f 	and.w	r5, r6, #31
    2498:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    249c:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
    24a0:	d022      	beq.n	24e8 <gpio_nrfx_pin_interrupt_configure+0x60>
    24a2:	4607      	mov	r7, r0
    24a4:	4614      	mov	r4, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    24a6:	2300      	movs	r3, #0
    24a8:	9301      	str	r3, [sp, #4]
    24aa:	9302      	str	r3, [sp, #8]
		.trigger = get_trigger(mode, trig),
    24ac:	4610      	mov	r0, r2
    24ae:	f004 f96c 	bl	678a <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
    24b2:	f88d 0004 	strb.w	r0, [sp, #4]
	return port->config;
    24b6:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    24b8:	6899      	ldr	r1, [r3, #8]
    24ba:	40f1      	lsrs	r1, r6
    24bc:	f011 0f01 	tst.w	r1, #1
    24c0:	d102      	bne.n	24c8 <gpio_nrfx_pin_interrupt_configure+0x40>
    24c2:	f1b4 7fa0 	cmp.w	r4, #20971520	; 0x1400000
    24c6:	d014      	beq.n	24f2 <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    24c8:	2300      	movs	r3, #0
    24ca:	aa01      	add	r2, sp, #4
    24cc:	4619      	mov	r1, r3
    24ce:	4628      	mov	r0, r5
    24d0:	f001 f970 	bl	37b4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    24d4:	4b1a      	ldr	r3, [pc, #104]	; (2540 <gpio_nrfx_pin_interrupt_configure+0xb8>)
    24d6:	4298      	cmp	r0, r3
    24d8:	d12f      	bne.n	253a <gpio_nrfx_pin_interrupt_configure+0xb2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    24da:	2101      	movs	r1, #1
    24dc:	4628      	mov	r0, r5
    24de:	f001 facd 	bl	3a7c <nrfx_gpiote_trigger_enable>
	return 0;
    24e2:	2000      	movs	r0, #0
}
    24e4:	b005      	add	sp, #20
    24e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
    24e8:	4628      	mov	r0, r5
    24ea:	f001 faf9 	bl	3ae0 <nrfx_gpiote_trigger_disable>
		return 0;
    24ee:	2000      	movs	r0, #0
    24f0:	e7f8      	b.n	24e4 <gpio_nrfx_pin_interrupt_configure+0x5c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    24f2:	f005 031f 	and.w	r3, r5, #31

    return pin_number >> 5;
    24f6:	096a      	lsrs	r2, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    24f8:	2a01      	cmp	r2, #1
    24fa:	d012      	beq.n	2522 <gpio_nrfx_pin_interrupt_configure+0x9a>
        case 0: return NRF_P0;
    24fc:	4a11      	ldr	r2, [pc, #68]	; (2544 <gpio_nrfx_pin_interrupt_configure+0xbc>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    24fe:	3380      	adds	r3, #128	; 0x80
    2500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    2504:	f013 0f01 	tst.w	r3, #1
    2508:	d1de      	bne.n	24c8 <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    250a:	f10d 010f 	add.w	r1, sp, #15
    250e:	4628      	mov	r0, r5
    2510:	f001 fa58 	bl	39c4 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    2514:	4b0c      	ldr	r3, [pc, #48]	; (2548 <gpio_nrfx_pin_interrupt_configure+0xc0>)
    2516:	4298      	cmp	r0, r3
    2518:	d005      	beq.n	2526 <gpio_nrfx_pin_interrupt_configure+0x9e>
		trigger_config.p_in_channel = &ch;
    251a:	f10d 030f 	add.w	r3, sp, #15
    251e:	9302      	str	r3, [sp, #8]
    2520:	e7d2      	b.n	24c8 <gpio_nrfx_pin_interrupt_configure+0x40>
        case 1: return NRF_P1;
    2522:	4a0a      	ldr	r2, [pc, #40]	; (254c <gpio_nrfx_pin_interrupt_configure+0xc4>)
    2524:	e7eb      	b.n	24fe <gpio_nrfx_pin_interrupt_configure+0x76>
			err = nrfx_gpiote_channel_alloc(&ch);
    2526:	f10d 000f 	add.w	r0, sp, #15
    252a:	f001 fa9f 	bl	3a6c <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    252e:	4b04      	ldr	r3, [pc, #16]	; (2540 <gpio_nrfx_pin_interrupt_configure+0xb8>)
    2530:	4298      	cmp	r0, r3
    2532:	d0f2      	beq.n	251a <gpio_nrfx_pin_interrupt_configure+0x92>
				return -ENOMEM;
    2534:	f06f 000b 	mvn.w	r0, #11
    2538:	e7d4      	b.n	24e4 <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EINVAL;
    253a:	f06f 0015 	mvn.w	r0, #21
    253e:	e7d1      	b.n	24e4 <gpio_nrfx_pin_interrupt_configure+0x5c>
    2540:	0bad0000 	.word	0x0bad0000
    2544:	50842500 	.word	0x50842500
    2548:	0bad0004 	.word	0x0bad0004
    254c:	50842800 	.word	0x50842800

00002550 <gpio_nrfx_pin_configure>:
{
    2550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2554:	b086      	sub	sp, #24
    2556:	460e      	mov	r6, r1
    2558:	4614      	mov	r4, r2
	return port->config;
    255a:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    255e:	f898 300c 	ldrb.w	r3, [r8, #12]
    2562:	f001 051f 	and.w	r5, r1, #31
    2566:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    256a:	f10d 0117 	add.w	r1, sp, #23
    256e:	4628      	mov	r0, r5
    2570:	f001 fa28 	bl	39c4 <nrfx_gpiote_channel_get>
    2574:	4607      	mov	r7, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    2576:	f414 3f40 	tst.w	r4, #196608	; 0x30000
    257a:	d039      	beq.n	25f0 <gpio_nrfx_pin_configure+0xa0>
	nrfx_gpiote_trigger_config_t trigger_config = {
    257c:	2100      	movs	r1, #0
    257e:	9103      	str	r1, [sp, #12]
    2580:	9104      	str	r1, [sp, #16]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2582:	460b      	mov	r3, r1
    2584:	aa03      	add	r2, sp, #12
    2586:	4628      	mov	r0, r5
    2588:	f001 f914 	bl	37b4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    258c:	4b32      	ldr	r3, [pc, #200]	; (2658 <gpio_nrfx_pin_configure+0x108>)
    258e:	4298      	cmp	r0, r3
    2590:	d15f      	bne.n	2652 <gpio_nrfx_pin_configure+0x102>
	if (free_ch) {
    2592:	429f      	cmp	r7, r3
    2594:	d03c      	beq.n	2610 <gpio_nrfx_pin_configure+0xc0>
	if (flags & GPIO_OUTPUT) {
    2596:	f414 3f00 	tst.w	r4, #131072	; 0x20000
    259a:	d047      	beq.n	262c <gpio_nrfx_pin_configure+0xdc>
		int rv = get_drive(flags, &drive);
    259c:	f10d 0103 	add.w	r1, sp, #3
    25a0:	4620      	mov	r0, r4
    25a2:	f004 f87f 	bl	66a4 <get_drive>
		if (rv != 0) {
    25a6:	4607      	mov	r7, r0
    25a8:	bb48      	cbnz	r0, 25fe <gpio_nrfx_pin_configure+0xae>
		nrfx_gpiote_output_config_t output_config = {
    25aa:	f89d 3003 	ldrb.w	r3, [sp, #3]
    25ae:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    25b2:	f414 3f80 	tst.w	r4, #65536	; 0x10000
    25b6:	bf0c      	ite	eq
    25b8:	2301      	moveq	r3, #1
    25ba:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
    25bc:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
    25c0:	4620      	mov	r0, r4
    25c2:	f004 f8b2 	bl	672a <get_pull>
		nrfx_gpiote_output_config_t output_config = {
    25c6:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    25ca:	f414 2f00 	tst.w	r4, #524288	; 0x80000
    25ce:	d024      	beq.n	261a <gpio_nrfx_pin_configure+0xca>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    25d0:	f8d8 2004 	ldr.w	r2, [r8, #4]
    25d4:	2301      	movs	r3, #1
    25d6:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    25d8:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    25da:	2200      	movs	r2, #0
    25dc:	a901      	add	r1, sp, #4
    25de:	4628      	mov	r0, r5
    25e0:	f001 f97e 	bl	38e0 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    25e4:	4b1c      	ldr	r3, [pc, #112]	; (2658 <gpio_nrfx_pin_configure+0x108>)
    25e6:	4298      	cmp	r0, r3
    25e8:	d009      	beq.n	25fe <gpio_nrfx_pin_configure+0xae>
    25ea:	f06f 0715 	mvn.w	r7, #21
    25ee:	e006      	b.n	25fe <gpio_nrfx_pin_configure+0xae>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    25f0:	4628      	mov	r0, r5
    25f2:	f001 fa97 	bl	3b24 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    25f6:	4b18      	ldr	r3, [pc, #96]	; (2658 <gpio_nrfx_pin_configure+0x108>)
    25f8:	429f      	cmp	r7, r3
    25fa:	d004      	beq.n	2606 <gpio_nrfx_pin_configure+0xb6>
		return 0;
    25fc:	2700      	movs	r7, #0
}
    25fe:	4638      	mov	r0, r7
    2600:	b006      	add	sp, #24
    2602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			err = nrfx_gpiote_channel_free(ch);
    2606:	f89d 0017 	ldrb.w	r0, [sp, #23]
    260a:	f001 fa27 	bl	3a5c <nrfx_gpiote_channel_free>
    260e:	e7f5      	b.n	25fc <gpio_nrfx_pin_configure+0xac>
		err = nrfx_gpiote_channel_free(ch);
    2610:	f89d 0017 	ldrb.w	r0, [sp, #23]
    2614:	f001 fa22 	bl	3a5c <nrfx_gpiote_channel_free>
    2618:	e7bd      	b.n	2596 <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    261a:	f414 2f80 	tst.w	r4, #262144	; 0x40000
    261e:	d0dc      	beq.n	25da <gpio_nrfx_pin_configure+0x8a>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    2620:	f8d8 2004 	ldr.w	r2, [r8, #4]
    2624:	2301      	movs	r3, #1
    2626:	40b3      	lsls	r3, r6
    p_reg->OUTCLR = clr_mask;
    2628:	60d3      	str	r3, [r2, #12]
}
    262a:	e7d6      	b.n	25da <gpio_nrfx_pin_configure+0x8a>
		.pull = get_pull(flags)
    262c:	4620      	mov	r0, r4
    262e:	f004 f87c 	bl	672a <get_pull>
	nrfx_gpiote_input_config_t input_config = {
    2632:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2636:	2300      	movs	r3, #0
    2638:	461a      	mov	r2, r3
    263a:	a902      	add	r1, sp, #8
    263c:	4628      	mov	r0, r5
    263e:	f001 f8b9 	bl	37b4 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2642:	4b05      	ldr	r3, [pc, #20]	; (2658 <gpio_nrfx_pin_configure+0x108>)
    2644:	4298      	cmp	r0, r3
    2646:	d101      	bne.n	264c <gpio_nrfx_pin_configure+0xfc>
    2648:	2700      	movs	r7, #0
    264a:	e7d8      	b.n	25fe <gpio_nrfx_pin_configure+0xae>
    264c:	f06f 0715 	mvn.w	r7, #21
    2650:	e7d5      	b.n	25fe <gpio_nrfx_pin_configure+0xae>
		return -EINVAL;
    2652:	f06f 0715 	mvn.w	r7, #21
    2656:	e7d2      	b.n	25fe <gpio_nrfx_pin_configure+0xae>
    2658:	0bad0000 	.word	0x0bad0000

0000265c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    265c:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    265e:	f001 f9f3 	bl	3a48 <nrfx_gpiote_is_init>
    2662:	b108      	cbz	r0, 2668 <gpio_nrfx_init+0xc>
		return 0;
    2664:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    2666:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
    2668:	f001 f9c4 	bl	39f4 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    266c:	4b08      	ldr	r3, [pc, #32]	; (2690 <gpio_nrfx_init+0x34>)
    266e:	4298      	cmp	r0, r3
    2670:	d10a      	bne.n	2688 <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    2672:	2100      	movs	r1, #0
    2674:	4807      	ldr	r0, [pc, #28]	; (2694 <gpio_nrfx_init+0x38>)
    2676:	f001 f99f 	bl	39b8 <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    267a:	2200      	movs	r2, #0
    267c:	2105      	movs	r1, #5
    267e:	200d      	movs	r0, #13
    2680:	f003 fc32 	bl	5ee8 <z_arm_irq_priority_set>
	return 0;
    2684:	2000      	movs	r0, #0
    2686:	e7ee      	b.n	2666 <gpio_nrfx_init+0xa>
		return -EIO;
    2688:	f06f 0004 	mvn.w	r0, #4
    268c:	e7eb      	b.n	2666 <gpio_nrfx_init+0xa>
    268e:	bf00      	nop
    2690:	0bad0000 	.word	0x0bad0000
    2694:	000067c3 	.word	0x000067c3

00002698 <baudrate_set>:
#endif
};

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = dev->config;
    2698:	6843      	ldr	r3, [r0, #4]

	return config->uarte_regs;
    269a:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    269c:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    26a0:	d06f      	beq.n	2782 <baudrate_set+0xea>
    26a2:	d83a      	bhi.n	271a <baudrate_set+0x82>
    26a4:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    26a8:	d06e      	beq.n	2788 <baudrate_set+0xf0>
    26aa:	d90a      	bls.n	26c2 <baudrate_set+0x2a>
    26ac:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    26b0:	d075      	beq.n	279e <baudrate_set+0x106>
    26b2:	d924      	bls.n	26fe <baudrate_set+0x66>
    26b4:	f647 2312 	movw	r3, #31250	; 0x7a12
    26b8:	4299      	cmp	r1, r3
    26ba:	d12b      	bne.n	2714 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    26bc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    26c0:	e013      	b.n	26ea <baudrate_set+0x52>
	switch (baudrate) {
    26c2:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    26c6:	d061      	beq.n	278c <baudrate_set+0xf4>
    26c8:	d907      	bls.n	26da <baudrate_set+0x42>
    26ca:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    26ce:	d063      	beq.n	2798 <baudrate_set+0x100>
    26d0:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    26d4:	d110      	bne.n	26f8 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    26d6:	4b3c      	ldr	r3, [pc, #240]	; (27c8 <baudrate_set+0x130>)
    26d8:	e007      	b.n	26ea <baudrate_set+0x52>
	switch (baudrate) {
    26da:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    26de:	d058      	beq.n	2792 <baudrate_set+0xfa>
    26e0:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    26e4:	d105      	bne.n	26f2 <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
    26e6:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    26ea:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    26ee:	2000      	movs	r0, #0
    26f0:	4770      	bx	lr
	switch (baudrate) {
    26f2:	f06f 0015 	mvn.w	r0, #21
    26f6:	4770      	bx	lr
    26f8:	f06f 0015 	mvn.w	r0, #21
    26fc:	4770      	bx	lr
    26fe:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    2702:	d04e      	beq.n	27a2 <baudrate_set+0x10a>
    2704:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    2708:	d101      	bne.n	270e <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    270a:	4b30      	ldr	r3, [pc, #192]	; (27cc <baudrate_set+0x134>)
    270c:	e7ed      	b.n	26ea <baudrate_set+0x52>
	switch (baudrate) {
    270e:	f06f 0015 	mvn.w	r0, #21
    2712:	4770      	bx	lr
    2714:	f06f 0015 	mvn.w	r0, #21
    2718:	4770      	bx	lr
    271a:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    271e:	d042      	beq.n	27a6 <baudrate_set+0x10e>
    2720:	d909      	bls.n	2736 <baudrate_set+0x9e>
    2722:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    2726:	d046      	beq.n	27b6 <baudrate_set+0x11e>
    2728:	d91f      	bls.n	276a <baudrate_set+0xd2>
    272a:	4b29      	ldr	r3, [pc, #164]	; (27d0 <baudrate_set+0x138>)
    272c:	4299      	cmp	r1, r3
    272e:	d148      	bne.n	27c2 <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    2730:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    2734:	e7d9      	b.n	26ea <baudrate_set+0x52>
	switch (baudrate) {
    2736:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    273a:	d037      	beq.n	27ac <baudrate_set+0x114>
    273c:	d905      	bls.n	274a <baudrate_set+0xb2>
    273e:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    2742:	d10f      	bne.n	2764 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    2744:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    2748:	e7cf      	b.n	26ea <baudrate_set+0x52>
	switch (baudrate) {
    274a:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    274e:	4299      	cmp	r1, r3
    2750:	d02e      	beq.n	27b0 <baudrate_set+0x118>
    2752:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    2756:	d102      	bne.n	275e <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    2758:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    275c:	e7c5      	b.n	26ea <baudrate_set+0x52>
	switch (baudrate) {
    275e:	f06f 0015 	mvn.w	r0, #21
    2762:	4770      	bx	lr
    2764:	f06f 0015 	mvn.w	r0, #21
    2768:	4770      	bx	lr
    276a:	4b1a      	ldr	r3, [pc, #104]	; (27d4 <baudrate_set+0x13c>)
    276c:	4299      	cmp	r1, r3
    276e:	d025      	beq.n	27bc <baudrate_set+0x124>
    2770:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    2774:	d102      	bne.n	277c <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    2776:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    277a:	e7b6      	b.n	26ea <baudrate_set+0x52>
	switch (baudrate) {
    277c:	f06f 0015 	mvn.w	r0, #21
    2780:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    2782:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    2786:	e7b0      	b.n	26ea <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    2788:	4b13      	ldr	r3, [pc, #76]	; (27d8 <baudrate_set+0x140>)
    278a:	e7ae      	b.n	26ea <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    278c:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    2790:	e7ab      	b.n	26ea <baudrate_set+0x52>
	switch (baudrate) {
    2792:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    2796:	e7a8      	b.n	26ea <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    2798:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    279c:	e7a5      	b.n	26ea <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    279e:	4b0f      	ldr	r3, [pc, #60]	; (27dc <baudrate_set+0x144>)
    27a0:	e7a3      	b.n	26ea <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    27a2:	4b0f      	ldr	r3, [pc, #60]	; (27e0 <baudrate_set+0x148>)
    27a4:	e7a1      	b.n	26ea <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    27a6:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    27aa:	e79e      	b.n	26ea <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    27ac:	4b0d      	ldr	r3, [pc, #52]	; (27e4 <baudrate_set+0x14c>)
    27ae:	e79c      	b.n	26ea <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    27b0:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    27b4:	e799      	b.n	26ea <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    27b6:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    27ba:	e796      	b.n	26ea <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    27bc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    27c0:	e793      	b.n	26ea <baudrate_set+0x52>
	switch (baudrate) {
    27c2:	f06f 0015 	mvn.w	r0, #21
}
    27c6:	4770      	bx	lr
    27c8:	0013b000 	.word	0x0013b000
    27cc:	004ea000 	.word	0x004ea000
    27d0:	000f4240 	.word	0x000f4240
    27d4:	0003d090 	.word	0x0003d090
    27d8:	00275000 	.word	0x00275000
    27dc:	0075c000 	.word	0x0075c000
    27e0:	003af000 	.word	0x003af000
    27e4:	013a9000 	.word	0x013a9000

000027e8 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    27e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    27ea:	4605      	mov	r5, r0
    27ec:	460e      	mov	r6, r1
	struct uarte_nrfx_data *data = dev->data;
    27ee:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    27f0:	f004 fd2d 	bl	724e <k_is_in_isr>
    27f4:	b910      	cbnz	r0, 27fc <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    27f6:	4b12      	ldr	r3, [pc, #72]	; (2840 <uarte_nrfx_poll_out+0x58>)
    27f8:	781b      	ldrb	r3, [r3, #0]
    27fa:	b983      	cbnz	r3, 281e <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    27fc:	f04f 0320 	mov.w	r3, #32
    2800:	f3ef 8411 	mrs	r4, BASEPRI
    2804:	f383 8812 	msr	BASEPRI_MAX, r3
    2808:	f3bf 8f6f 	isb	sy
#endif

	if (isr_mode) {
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    280c:	4628      	mov	r0, r5
    280e:	f004 f89b 	bl	6948 <is_tx_ready>
    2812:	b940      	cbnz	r0, 2826 <uarte_nrfx_poll_out+0x3e>
	__asm__ volatile(
    2814:	f384 8811 	msr	BASEPRI, r4
    2818:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    281c:	e7ee      	b.n	27fc <uarte_nrfx_poll_out+0x14>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
    281e:	4628      	mov	r0, r5
    2820:	f004 f8f7 	bl	6a12 <wait_tx_ready>
    2824:	4604      	mov	r4, r0
	}

	*data->char_out = c;
    2826:	693b      	ldr	r3, [r7, #16]
    2828:	701e      	strb	r6, [r3, #0]
	tx_start(dev, data->char_out, 1);
    282a:	2201      	movs	r2, #1
    282c:	6939      	ldr	r1, [r7, #16]
    282e:	4628      	mov	r0, r5
    2830:	f004 f8a4 	bl	697c <tx_start>
	__asm__ volatile(
    2834:	f384 8811 	msr	BASEPRI, r4
    2838:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    283c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    283e:	bf00      	nop
    2840:	20000d07 	.word	0x20000d07

00002844 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    2844:	b538      	push	{r3, r4, r5, lr}
    2846:	4605      	mov	r5, r0
    2848:	460c      	mov	r4, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    284a:	f101 0018 	add.w	r0, r1, #24
    284e:	f000 fd3b 	bl	32c8 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    2852:	4b0a      	ldr	r3, [pc, #40]	; (287c <endtx_stoptx_ppi_init+0x38>)
    2854:	4298      	cmp	r0, r3
    2856:	d10e      	bne.n	2876 <endtx_stoptx_ppi_init+0x32>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    2858:	7e23      	ldrb	r3, [r4, #24]
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    285a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    285e:	f8c5 31a0 	str.w	r3, [r5, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    2862:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    2866:	7e22      	ldrb	r2, [r4, #24]
    2868:	2301      	movs	r3, #1
    286a:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    286c:	4a04      	ldr	r2, [pc, #16]	; (2880 <endtx_stoptx_ppi_init+0x3c>)
    286e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
    2872:	2000      	movs	r0, #0
}
    2874:	bd38      	pop	{r3, r4, r5, pc}
		return -EIO;
    2876:	f06f 0004 	mvn.w	r0, #4
    287a:	e7fb      	b.n	2874 <endtx_stoptx_ppi_init+0x30>
    287c:	0bad0000 	.word	0x0bad0000
    2880:	50017000 	.word	0x50017000

00002884 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    2884:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    2888:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    288c:	4b01      	ldr	r3, [pc, #4]	; (2894 <set_comparator+0x10>)
    288e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    2892:	4770      	bx	lr
    2894:	50015000 	.word	0x50015000

00002898 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    2898:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    289c:	4b01      	ldr	r3, [pc, #4]	; (28a4 <get_comparator+0xc>)
    289e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
    28a2:	4770      	bx	lr
    28a4:	50015000 	.word	0x50015000

000028a8 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    28a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    28ac:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    28ae:	4a02      	ldr	r2, [pc, #8]	; (28b8 <event_enable+0x10>)
    28b0:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    28b4:	4770      	bx	lr
    28b6:	bf00      	nop
    28b8:	50015000 	.word	0x50015000

000028bc <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    28bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    28c0:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    28c2:	4a02      	ldr	r2, [pc, #8]	; (28cc <event_disable+0x10>)
    28c4:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    28c8:	4770      	bx	lr
    28ca:	bf00      	nop
    28cc:	50015000 	.word	0x50015000

000028d0 <counter>:
     return p_reg->COUNTER;
    28d0:	4b01      	ldr	r3, [pc, #4]	; (28d8 <counter+0x8>)
    28d2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    28d6:	4770      	bx	lr
    28d8:	50015000 	.word	0x50015000

000028dc <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    28dc:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    28de:	2301      	movs	r3, #1
    28e0:	4083      	lsls	r3, r0
    28e2:	ea6f 0c03 	mvn.w	ip, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    28e6:	4a0c      	ldr	r2, [pc, #48]	; (2918 <compare_int_lock+0x3c>)
    28e8:	e8d2 1fef 	ldaex	r1, [r2]
    28ec:	ea01 0e0c 	and.w	lr, r1, ip
    28f0:	e8c2 efe4 	stlex	r4, lr, [r2]
    28f4:	2c00      	cmp	r4, #0
    28f6:	d1f7      	bne.n	28e8 <compare_int_lock+0xc>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    28f8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    28fc:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    28fe:	4807      	ldr	r0, [pc, #28]	; (291c <compare_int_lock+0x40>)
    2900:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    2904:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2908:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    290c:	420b      	tst	r3, r1
}
    290e:	bf14      	ite	ne
    2910:	2001      	movne	r0, #1
    2912:	2000      	moveq	r0, #0
    2914:	bd10      	pop	{r4, pc}
    2916:	bf00      	nop
    2918:	20000ad8 	.word	0x20000ad8
    291c:	50015000 	.word	0x50015000

00002920 <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
    2920:	b538      	push	{r3, r4, r5, lr}
    2922:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
    2924:	f004 f920 	bl	6b68 <full_int_lock>
    2928:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    292a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    292e:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
    2930:	4a14      	ldr	r2, [pc, #80]	; (2984 <channel_processing_check_and_clear+0x64>)
    2932:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    2936:	4213      	tst	r3, r2
    2938:	d105      	bne.n	2946 <channel_processing_check_and_clear+0x26>
	bool result = false;
    293a:	2400      	movs	r4, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
    293c:	4628      	mov	r0, r5
    293e:	f004 f91c 	bl	6b7a <full_int_unlock>

	return result;
}
    2942:	4620      	mov	r0, r4
    2944:	bd38      	pop	{r3, r4, r5, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    2946:	2301      	movs	r3, #1
    2948:	40a3      	lsls	r3, r4
    294a:	43db      	mvns	r3, r3
    294c:	4a0e      	ldr	r2, [pc, #56]	; (2988 <channel_processing_check_and_clear+0x68>)
    294e:	e8d2 1fef 	ldaex	r1, [r2]
    2952:	ea01 0003 	and.w	r0, r1, r3
    2956:	e8c2 0fec 	stlex	ip, r0, [r2]
    295a:	f1bc 0f00 	cmp.w	ip, #0
    295e:	d1f6      	bne.n	294e <channel_processing_check_and_clear+0x2e>
    2960:	b949      	cbnz	r1, 2976 <channel_processing_check_and_clear+0x56>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    2962:	f104 0350 	add.w	r3, r4, #80	; 0x50
    2966:	009b      	lsls	r3, r3, #2
    2968:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    296a:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    296e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    2972:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    2974:	b123      	cbz	r3, 2980 <channel_processing_check_and_clear+0x60>
			event_clear(chan);
    2976:	4620      	mov	r0, r4
    2978:	f004 f8e7 	bl	6b4a <event_clear>
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    297c:	2401      	movs	r4, #1
    297e:	e7dd      	b.n	293c <channel_processing_check_and_clear+0x1c>
    2980:	2400      	movs	r4, #0
    2982:	e7db      	b.n	293c <channel_processing_check_and_clear+0x1c>
    2984:	50015000 	.word	0x50015000
    2988:	20000ad4 	.word	0x20000ad4

0000298c <compare_int_unlock>:
	if (key) {
    298c:	b901      	cbnz	r1, 2990 <compare_int_unlock+0x4>
}
    298e:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    2990:	2301      	movs	r3, #1
    2992:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2994:	4a0d      	ldr	r2, [pc, #52]	; (29cc <compare_int_unlock+0x40>)
    2996:	e8d2 cfef 	ldaex	ip, [r2]
    299a:	ea4c 0c03 	orr.w	ip, ip, r3
    299e:	e8c2 cfe1 	stlex	r1, ip, [r2]
    29a2:	2900      	cmp	r1, #0
    29a4:	d1f7      	bne.n	2996 <compare_int_unlock+0xa>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    29a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    29aa:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    29ac:	4a08      	ldr	r2, [pc, #32]	; (29d0 <compare_int_unlock+0x44>)
    29ae:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    29b2:	4b08      	ldr	r3, [pc, #32]	; (29d4 <compare_int_unlock+0x48>)
    29b4:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    29b8:	40c3      	lsrs	r3, r0
    29ba:	f013 0f01 	tst.w	r3, #1
    29be:	d0e6      	beq.n	298e <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    29c0:	4b05      	ldr	r3, [pc, #20]	; (29d8 <compare_int_unlock+0x4c>)
    29c2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    29c6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    29ca:	e7e0      	b.n	298e <compare_int_unlock+0x2>
    29cc:	20000ad8 	.word	0x20000ad8
    29d0:	50015000 	.word	0x50015000
    29d4:	20000ad4 	.word	0x20000ad4
    29d8:	e000e100 	.word	0xe000e100

000029dc <sys_clock_timeout_handler>:
{
    29dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    29e0:	4607      	mov	r7, r0
    29e2:	4614      	mov	r4, r2
    29e4:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    29e6:	4610      	mov	r0, r2
    29e8:	4619      	mov	r1, r3
    29ea:	f004 f8ba 	bl	6b62 <absolute_time_to_cc>
    29ee:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    29f0:	4b15      	ldr	r3, [pc, #84]	; (2a48 <sys_clock_timeout_handler+0x6c>)
    29f2:	681a      	ldr	r2, [r3, #0]
    29f4:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
    29f6:	601c      	str	r4, [r3, #0]
    29f8:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    29fa:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    29fe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    2a02:	d309      	bcc.n	2a18 <sys_clock_timeout_handler+0x3c>
	return false;
    2a04:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    2a06:	f002 f94d 	bl	4ca4 <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
    2a0a:	4638      	mov	r0, r7
    2a0c:	f7ff ff44 	bl	2898 <get_comparator>
    2a10:	42a8      	cmp	r0, r5
    2a12:	d00e      	beq.n	2a32 <sys_clock_timeout_handler+0x56>
}
    2a14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    2a18:	4b0c      	ldr	r3, [pc, #48]	; (2a4c <sys_clock_timeout_handler+0x70>)
    2a1a:	681b      	ldr	r3, [r3, #0]
    2a1c:	0a1a      	lsrs	r2, r3, #8
    2a1e:	061b      	lsls	r3, r3, #24
    2a20:	eb15 0803 	adds.w	r8, r5, r3
    2a24:	f142 0900 	adc.w	r9, r2, #0
    2a28:	4b09      	ldr	r3, [pc, #36]	; (2a50 <sys_clock_timeout_handler+0x74>)
    2a2a:	e9c3 8900 	strd	r8, r9, [r3]
		return true;
    2a2e:	2401      	movs	r4, #1
    2a30:	e7e9      	b.n	2a06 <sys_clock_timeout_handler+0x2a>
		if (!anchor_updated) {
    2a32:	b11c      	cbz	r4, 2a3c <sys_clock_timeout_handler+0x60>
		event_enable(chan);
    2a34:	4638      	mov	r0, r7
    2a36:	f7ff ff37 	bl	28a8 <event_enable>
}
    2a3a:	e7eb      	b.n	2a14 <sys_clock_timeout_handler+0x38>
			set_comparator(chan, COUNTER_HALF_SPAN);
    2a3c:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    2a40:	4638      	mov	r0, r7
    2a42:	f7ff ff1f 	bl	2884 <set_comparator>
    2a46:	e7f5      	b.n	2a34 <sys_clock_timeout_handler+0x58>
    2a48:	20000250 	.word	0x20000250
    2a4c:	20000adc 	.word	0x20000adc
    2a50:	20000258 	.word	0x20000258

00002a54 <z_nrf_rtc_timer_read>:
{
    2a54:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    2a56:	4b0d      	ldr	r3, [pc, #52]	; (2a8c <z_nrf_rtc_timer_read+0x38>)
    2a58:	681c      	ldr	r4, [r3, #0]
    2a5a:	0a25      	lsrs	r5, r4, #8
    2a5c:	0624      	lsls	r4, r4, #24
  __ASM volatile ("dmb 0xF":::"memory");
    2a5e:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    2a62:	f7ff ff35 	bl	28d0 <counter>
    2a66:	4603      	mov	r3, r0
	val += cntr;
    2a68:	1900      	adds	r0, r0, r4
    2a6a:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    2a6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    2a72:	d20a      	bcs.n	2a8a <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    2a74:	4b06      	ldr	r3, [pc, #24]	; (2a90 <z_nrf_rtc_timer_read+0x3c>)
    2a76:	e9d3 2300 	ldrd	r2, r3, [r3]
    2a7a:	4290      	cmp	r0, r2
    2a7c:	eb71 0303 	sbcs.w	r3, r1, r3
    2a80:	d203      	bcs.n	2a8a <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    2a82:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    2a86:	f141 0100 	adc.w	r1, r1, #0
}
    2a8a:	bd38      	pop	{r3, r4, r5, pc}
    2a8c:	20000adc 	.word	0x20000adc
    2a90:	20000258 	.word	0x20000258

00002a94 <compare_set_nolocks>:
{
    2a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a96:	4606      	mov	r6, r0
    2a98:	4614      	mov	r4, r2
    2a9a:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    2a9c:	4610      	mov	r0, r2
    2a9e:	4619      	mov	r1, r3
    2aa0:	f004 f85f 	bl	6b62 <absolute_time_to_cc>
    2aa4:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    2aa6:	f7ff ffd5 	bl	2a54 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    2aaa:	42a0      	cmp	r0, r4
    2aac:	eb71 0305 	sbcs.w	r3, r1, r5
    2ab0:	d21d      	bcs.n	2aee <compare_set_nolocks+0x5a>
		if (target_time - curr_time > COUNTER_SPAN) {
    2ab2:	1a20      	subs	r0, r4, r0
    2ab4:	eb65 0101 	sbc.w	r1, r5, r1
    2ab8:	4b19      	ldr	r3, [pc, #100]	; (2b20 <compare_set_nolocks+0x8c>)
    2aba:	4298      	cmp	r0, r3
    2abc:	f171 0100 	sbcs.w	r1, r1, #0
    2ac0:	d22b      	bcs.n	2b1a <compare_set_nolocks+0x86>
		if (target_time != cc_data[chan].target_time) {
    2ac2:	4b18      	ldr	r3, [pc, #96]	; (2b24 <compare_set_nolocks+0x90>)
    2ac4:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    2ac8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    2acc:	42ab      	cmp	r3, r5
    2ace:	bf08      	it	eq
    2ad0:	42a2      	cmpeq	r2, r4
    2ad2:	d016      	beq.n	2b02 <compare_set_nolocks+0x6e>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
    2ad4:	4639      	mov	r1, r7
    2ad6:	4630      	mov	r0, r6
    2ad8:	f004 f854 	bl	6b84 <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
    2adc:	4639      	mov	r1, r7
    2ade:	f004 f830 	bl	6b42 <counter_sub>
    2ae2:	1900      	adds	r0, r0, r4
    2ae4:	f145 0300 	adc.w	r3, r5, #0
    2ae8:	4604      	mov	r4, r0
    2aea:	461d      	mov	r5, r3
    2aec:	e009      	b.n	2b02 <compare_set_nolocks+0x6e>
		atomic_or(&force_isr_mask, BIT(chan));
    2aee:	2301      	movs	r3, #1
    2af0:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2af2:	4a0d      	ldr	r2, [pc, #52]	; (2b28 <compare_set_nolocks+0x94>)
    2af4:	e8d2 0fef 	ldaex	r0, [r2]
    2af8:	4318      	orrs	r0, r3
    2afa:	e8c2 0fe1 	stlex	r1, r0, [r2]
    2afe:	2900      	cmp	r1, #0
    2b00:	d1f8      	bne.n	2af4 <compare_set_nolocks+0x60>
	cc_data[chan].target_time = target_time;
    2b02:	4b08      	ldr	r3, [pc, #32]	; (2b24 <compare_set_nolocks+0x90>)
    2b04:	0132      	lsls	r2, r6, #4
    2b06:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    2b0a:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    2b0e:	9906      	ldr	r1, [sp, #24]
    2b10:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    2b12:	9b07      	ldr	r3, [sp, #28]
    2b14:	6073      	str	r3, [r6, #4]
	return ret;
    2b16:	2000      	movs	r0, #0
}
    2b18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -EINVAL;
    2b1a:	f06f 0015 	mvn.w	r0, #21
    2b1e:	e7fb      	b.n	2b18 <compare_set_nolocks+0x84>
    2b20:	01000001 	.word	0x01000001
    2b24:	20000240 	.word	0x20000240
    2b28:	20000ad4 	.word	0x20000ad4

00002b2c <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    2b2c:	b530      	push	{r4, r5, lr}
    2b2e:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
    2b30:	2300      	movs	r3, #0
    2b32:	4a1d      	ldr	r2, [pc, #116]	; (2ba8 <sys_clock_driver_init+0x7c>)
    2b34:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    2b38:	2b00      	cmp	r3, #0
    2b3a:	dd24      	ble.n	2b86 <sys_clock_driver_init+0x5a>
    p_reg->INTENSET = mask;
    2b3c:	4c1a      	ldr	r4, [pc, #104]	; (2ba8 <sys_clock_driver_init+0x7c>)
    2b3e:	2502      	movs	r5, #2
    2b40:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2b44:	4b19      	ldr	r3, [pc, #100]	; (2bac <sys_clock_driver_init+0x80>)
    2b46:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    2b4a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    2b4e:	2200      	movs	r2, #0
    2b50:	2101      	movs	r1, #1
    2b52:	2015      	movs	r0, #21
    2b54:	f003 f9c8 	bl	5ee8 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    2b58:	2015      	movs	r0, #21
    2b5a:	f003 f9c0 	bl	5ede <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    2b5e:	2301      	movs	r3, #1
    2b60:	60a3      	str	r3, [r4, #8]
    2b62:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    2b64:	4a12      	ldr	r2, [pc, #72]	; (2bb0 <sys_clock_driver_init+0x84>)
    2b66:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    2b68:	2400      	movs	r4, #0
    2b6a:	9401      	str	r4, [sp, #4]
    2b6c:	4b11      	ldr	r3, [pc, #68]	; (2bb4 <sys_clock_driver_init+0x88>)
    2b6e:	9300      	str	r3, [sp, #0]
    2b70:	4a11      	ldr	r2, [pc, #68]	; (2bb8 <sys_clock_driver_init+0x8c>)
    2b72:	2300      	movs	r3, #0
    2b74:	4620      	mov	r0, r4
    2b76:	f004 f840 	bl	6bfa <compare_set>

	z_nrf_clock_control_lf_on(mode);
    2b7a:	4628      	mov	r0, r5
    2b7c:	f7ff fc22 	bl	23c4 <z_nrf_clock_control_lf_on>

	return 0;
}
    2b80:	4620      	mov	r0, r4
    2b82:	b003      	add	sp, #12
    2b84:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    2b86:	4a0d      	ldr	r2, [pc, #52]	; (2bbc <sys_clock_driver_init+0x90>)
    2b88:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    2b8c:	f04f 30ff 	mov.w	r0, #4294967295
    2b90:	f04f 31ff 	mov.w	r1, #4294967295
    2b94:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2b98:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    2b9c:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    2b9e:	4902      	ldr	r1, [pc, #8]	; (2ba8 <sys_clock_driver_init+0x7c>)
    2ba0:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    2ba4:	3301      	adds	r3, #1
    2ba6:	e7c7      	b.n	2b38 <sys_clock_driver_init+0xc>
    2ba8:	50015000 	.word	0x50015000
    2bac:	e000e100 	.word	0xe000e100
    2bb0:	20000ad8 	.word	0x20000ad8
    2bb4:	000029dd 	.word	0x000029dd
    2bb8:	007fffff 	.word	0x007fffff
    2bbc:	20000240 	.word	0x20000240

00002bc0 <process_channel>:
{
    2bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2bc4:	b082      	sub	sp, #8
    2bc6:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    2bc8:	f7ff feaa 	bl	2920 <channel_processing_check_and_clear>
    2bcc:	b910      	cbnz	r0, 2bd4 <process_channel+0x14>
}
    2bce:	b002      	add	sp, #8
    2bd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    2bd4:	f7ff ff3e 	bl	2a54 <z_nrf_rtc_timer_read>
    2bd8:	4682      	mov	sl, r0
    2bda:	460d      	mov	r5, r1
		mcu_critical_state = full_int_lock();
    2bdc:	f003 ffc4 	bl	6b68 <full_int_lock>
    2be0:	4606      	mov	r6, r0
		expire_time = cc_data[chan].target_time;
    2be2:	4b13      	ldr	r3, [pc, #76]	; (2c30 <process_channel+0x70>)
    2be4:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    2be8:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    2bec:	45c2      	cmp	sl, r8
    2bee:	eb75 0509 	sbcs.w	r5, r5, r9
    2bf2:	d20b      	bcs.n	2c0c <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    2bf4:	2500      	movs	r5, #0
		full_int_unlock(mcu_critical_state);
    2bf6:	4630      	mov	r0, r6
    2bf8:	f003 ffbf 	bl	6b7a <full_int_unlock>
		if (handler) {
    2bfc:	2d00      	cmp	r5, #0
    2bfe:	d0e6      	beq.n	2bce <process_channel+0xe>
			handler(chan, expire_time, user_context);
    2c00:	9700      	str	r7, [sp, #0]
    2c02:	4642      	mov	r2, r8
    2c04:	464b      	mov	r3, r9
    2c06:	4620      	mov	r0, r4
    2c08:	47a8      	blx	r5
}
    2c0a:	e7e0      	b.n	2bce <process_channel+0xe>
			handler = cc_data[chan].callback;
    2c0c:	4a08      	ldr	r2, [pc, #32]	; (2c30 <process_channel+0x70>)
    2c0e:	0123      	lsls	r3, r4, #4
    2c10:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    2c14:	58d5      	ldr	r5, [r2, r3]
			user_context = cc_data[chan].user_context;
    2c16:	684f      	ldr	r7, [r1, #4]
			cc_data[chan].callback = NULL;
    2c18:	2000      	movs	r0, #0
    2c1a:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    2c1c:	f04f 32ff 	mov.w	r2, #4294967295
    2c20:	f04f 33ff 	mov.w	r3, #4294967295
    2c24:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    2c28:	4620      	mov	r0, r4
    2c2a:	f7ff fe47 	bl	28bc <event_disable>
    2c2e:	e7e2      	b.n	2bf6 <process_channel+0x36>
    2c30:	20000240 	.word	0x20000240

00002c34 <rtc_nrf_isr>:
{
    2c34:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    2c36:	4b0e      	ldr	r3, [pc, #56]	; (2c70 <rtc_nrf_isr+0x3c>)
    2c38:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    2c3c:	f013 0f02 	tst.w	r3, #2
    2c40:	d00d      	beq.n	2c5e <rtc_nrf_isr+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2c42:	4b0b      	ldr	r3, [pc, #44]	; (2c70 <rtc_nrf_isr+0x3c>)
    2c44:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    2c48:	b14b      	cbz	r3, 2c5e <rtc_nrf_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2c4a:	4b09      	ldr	r3, [pc, #36]	; (2c70 <rtc_nrf_isr+0x3c>)
    2c4c:	2200      	movs	r2, #0
    2c4e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    2c52:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		overflow_cnt++;
    2c56:	4a07      	ldr	r2, [pc, #28]	; (2c74 <rtc_nrf_isr+0x40>)
    2c58:	6813      	ldr	r3, [r2, #0]
    2c5a:	3301      	adds	r3, #1
    2c5c:	6013      	str	r3, [r2, #0]
{
    2c5e:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    2c60:	2c00      	cmp	r4, #0
    2c62:	dd00      	ble.n	2c66 <rtc_nrf_isr+0x32>
}
    2c64:	bd10      	pop	{r4, pc}
		process_channel(chan);
    2c66:	4620      	mov	r0, r4
    2c68:	f7ff ffaa 	bl	2bc0 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    2c6c:	3401      	adds	r4, #1
    2c6e:	e7f7      	b.n	2c60 <rtc_nrf_isr+0x2c>
    2c70:	50015000 	.word	0x50015000
    2c74:	20000adc 	.word	0x20000adc

00002c78 <sys_clock_set_timeout>:
{
    2c78:	b510      	push	{r4, lr}
    2c7a:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    2c7c:	f1b0 3fff 	cmp.w	r0, #4294967295
    2c80:	d006      	beq.n	2c90 <sys_clock_set_timeout+0x18>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    2c82:	2801      	cmp	r0, #1
    2c84:	dd06      	ble.n	2c94 <sys_clock_set_timeout+0x1c>
    2c86:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2c8a:	da05      	bge.n	2c98 <sys_clock_set_timeout+0x20>
    2c8c:	1e44      	subs	r4, r0, #1
    2c8e:	e004      	b.n	2c9a <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    2c90:	480f      	ldr	r0, [pc, #60]	; (2cd0 <sys_clock_set_timeout+0x58>)
    2c92:	e7f8      	b.n	2c86 <sys_clock_set_timeout+0xe>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    2c94:	2400      	movs	r4, #0
    2c96:	e000      	b.n	2c9a <sys_clock_set_timeout+0x22>
    2c98:	4c0d      	ldr	r4, [pc, #52]	; (2cd0 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    2c9a:	f7ff fedb 	bl	2a54 <z_nrf_rtc_timer_read>
    2c9e:	4b0d      	ldr	r3, [pc, #52]	; (2cd4 <sys_clock_set_timeout+0x5c>)
    2ca0:	681a      	ldr	r2, [r3, #0]
    2ca2:	685b      	ldr	r3, [r3, #4]
    2ca4:	1a80      	subs	r0, r0, r2
	if (unannounced >= COUNTER_HALF_SPAN) {
    2ca6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2caa:	d300      	bcc.n	2cae <sys_clock_set_timeout+0x36>
		ticks = 0;
    2cac:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    2cae:	4420      	add	r0, r4
    2cb0:	1c41      	adds	r1, r0, #1
	if (cyc > MAX_CYCLES) {
    2cb2:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    2cb6:	d300      	bcc.n	2cba <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
    2cb8:	4905      	ldr	r1, [pc, #20]	; (2cd0 <sys_clock_set_timeout+0x58>)
	uint64_t target_time = cyc + last_count;
    2cba:	2000      	movs	r0, #0
    2cbc:	1852      	adds	r2, r2, r1
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    2cbe:	9001      	str	r0, [sp, #4]
    2cc0:	4905      	ldr	r1, [pc, #20]	; (2cd8 <sys_clock_set_timeout+0x60>)
    2cc2:	9100      	str	r1, [sp, #0]
    2cc4:	f143 0300 	adc.w	r3, r3, #0
    2cc8:	f003 ff97 	bl	6bfa <compare_set>
}
    2ccc:	b002      	add	sp, #8
    2cce:	bd10      	pop	{r4, pc}
    2cd0:	007fffff 	.word	0x007fffff
    2cd4:	20000250 	.word	0x20000250
    2cd8:	000029dd 	.word	0x000029dd

00002cdc <sys_clock_elapsed>:
{
    2cdc:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    2cde:	f7ff feb9 	bl	2a54 <z_nrf_rtc_timer_read>
    2ce2:	4b02      	ldr	r3, [pc, #8]	; (2cec <sys_clock_elapsed+0x10>)
    2ce4:	681b      	ldr	r3, [r3, #0]
}
    2ce6:	1ac0      	subs	r0, r0, r3
    2ce8:	bd08      	pop	{r3, pc}
    2cea:	bf00      	nop
    2cec:	20000250 	.word	0x20000250

00002cf0 <nrf_gpio_cfg>:
{
    2cf0:	b430      	push	{r4, r5}
    *p_pin = pin_number & 0x1F;
    2cf2:	f000 0c1f 	and.w	ip, r0, #31
    return pin_number >> 5;
    2cf6:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2cf8:	2801      	cmp	r0, #1
    2cfa:	d018      	beq.n	2d2e <nrf_gpio_cfg+0x3e>
        case 0: return NRF_P0;
    2cfc:	4d0d      	ldr	r5, [pc, #52]	; (2d34 <nrf_gpio_cfg+0x44>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    2cfe:	f10c 0080 	add.w	r0, ip, #128	; 0x80
    2d02:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
    2d06:	f004 4ce0 	and.w	ip, r4, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    2d0a:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
    2d0e:	ea41 0383 	orr.w	r3, r1, r3, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    2d12:	f89d 2008 	ldrb.w	r2, [sp, #8]
    2d16:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    2d1a:	f89d 200c 	ldrb.w	r2, [sp, #12]
    2d1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    2d22:	ea43 030c 	orr.w	r3, r3, ip
    reg->PIN_CNF[pin_number] = cnf;
    2d26:	f845 3020 	str.w	r3, [r5, r0, lsl #2]
}
    2d2a:	bc30      	pop	{r4, r5}
    2d2c:	4770      	bx	lr
        case 1: return NRF_P1;
    2d2e:	4d02      	ldr	r5, [pc, #8]	; (2d38 <nrf_gpio_cfg+0x48>)
    2d30:	e7e5      	b.n	2cfe <nrf_gpio_cfg+0xe>
    2d32:	bf00      	nop
    2d34:	50842500 	.word	0x50842500
    2d38:	50842800 	.word	0x50842800

00002d3c <nrf_gpio_pin_write>:
    if (value == 0)
    2d3c:	b959      	cbnz	r1, 2d56 <nrf_gpio_pin_write+0x1a>
    *p_pin = pin_number & 0x1F;
    2d3e:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    2d42:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2d44:	2801      	cmp	r0, #1
    2d46:	d004      	beq.n	2d52 <nrf_gpio_pin_write+0x16>
        case 0: return NRF_P0;
    2d48:	4a09      	ldr	r2, [pc, #36]	; (2d70 <nrf_gpio_pin_write+0x34>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    2d4a:	2301      	movs	r3, #1
    2d4c:	408b      	lsls	r3, r1
    p_reg->OUTCLR = clr_mask;
    2d4e:	60d3      	str	r3, [r2, #12]
}
    2d50:	4770      	bx	lr
        case 1: return NRF_P1;
    2d52:	4a08      	ldr	r2, [pc, #32]	; (2d74 <nrf_gpio_pin_write+0x38>)
    2d54:	e7f9      	b.n	2d4a <nrf_gpio_pin_write+0xe>
    *p_pin = pin_number & 0x1F;
    2d56:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    2d5a:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2d5c:	2801      	cmp	r0, #1
    2d5e:	d004      	beq.n	2d6a <nrf_gpio_pin_write+0x2e>
        case 0: return NRF_P0;
    2d60:	4a03      	ldr	r2, [pc, #12]	; (2d70 <nrf_gpio_pin_write+0x34>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2d62:	2301      	movs	r3, #1
    2d64:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
    2d66:	6093      	str	r3, [r2, #8]
}
    2d68:	4770      	bx	lr
        case 1: return NRF_P1;
    2d6a:	4a02      	ldr	r2, [pc, #8]	; (2d74 <nrf_gpio_pin_write+0x38>)
    2d6c:	e7f9      	b.n	2d62 <nrf_gpio_pin_write+0x26>
    2d6e:	bf00      	nop
    2d70:	50842500 	.word	0x50842500
    2d74:	50842800 	.word	0x50842800

00002d78 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    2d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2d7c:	b085      	sub	sp, #20
    2d7e:	4607      	mov	r7, r0
    2d80:	468b      	mov	fp, r1
    2d82:	4690      	mov	r8, r2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    2d84:	2400      	movs	r4, #0
    2d86:	e022      	b.n	2dce <pinctrl_configure_pins+0x56>
		uint32_t write = NO_WRITE;
		nrf_gpio_pin_dir_t dir;
		nrf_gpio_pin_input_t input;

		if (pin == NRF_PIN_DISCONNECTED) {
			pin = 0xFFFFFFFFU;
    2d88:	f04f 35ff 	mov.w	r5, #4294967295
    2d8c:	e02c      	b.n	2de8 <pinctrl_configure_pins+0x70>
		}

		switch (NRF_GET_FUN(pins[i])) {
#if defined(NRF_PSEL_UART)
		case NRF_FUN_UART_TX:
			NRF_PSEL_UART(reg, TXD) = pin;
    2d8e:	f8c8 550c 	str.w	r5, [r8, #1292]	; 0x50c
			write = 1U;
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2d92:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    2d94:	9603      	str	r6, [sp, #12]
			write = 1U;
    2d96:	4631      	mov	r1, r6
		default:
			return -ENOTSUP;
		}

		/* configure GPIO properties */
		if (pin != NRF_PIN_DISCONNECTED) {
    2d98:	2d7f      	cmp	r5, #127	; 0x7f
    2d9a:	d016      	beq.n	2dca <pinctrl_configure_pins+0x52>
			if (write != NO_WRITE) {
    2d9c:	f1b1 3fff 	cmp.w	r1, #4294967295
    2da0:	f040 810e 	bne.w	2fc0 <pinctrl_configure_pins+0x248>
				nrf_gpio_pin_write(pin, write);
			}

			/* force input and disconnected buffer for low power */
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    2da4:	f857 300a 	ldr.w	r3, [r7, sl]
    2da8:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    2dac:	d002      	beq.n	2db4 <pinctrl_configure_pins+0x3c>
				dir = NRF_GPIO_PIN_DIR_INPUT;
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2dae:	2601      	movs	r6, #1
				dir = NRF_GPIO_PIN_DIR_INPUT;
    2db0:	2200      	movs	r2, #0
    2db2:	9203      	str	r2, [sp, #12]
			}

			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
    2db4:	2200      	movs	r2, #0
    2db6:	9201      	str	r2, [sp, #4]
    2db8:	f8cd 9000 	str.w	r9, [sp]
    2dbc:	f3c3 13c1 	ubfx	r3, r3, #7, #2
    2dc0:	4632      	mov	r2, r6
    2dc2:	9903      	ldr	r1, [sp, #12]
    2dc4:	4628      	mov	r0, r5
    2dc6:	f7ff ff93 	bl	2cf0 <nrf_gpio_cfg>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    2dca:	3401      	adds	r4, #1
    2dcc:	b2e4      	uxtb	r4, r4
    2dce:	455c      	cmp	r4, fp
    2dd0:	f080 80fa 	bcs.w	2fc8 <pinctrl_configure_pins+0x250>
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    2dd4:	ea4f 0a84 	mov.w	sl, r4, lsl #2
    2dd8:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    2ddc:	f3c3 2943 	ubfx	r9, r3, #9, #4
		uint32_t pin = NRF_GET_PIN(pins[i]);
    2de0:	f003 057f 	and.w	r5, r3, #127	; 0x7f
		if (pin == NRF_PIN_DISCONNECTED) {
    2de4:	2d7f      	cmp	r5, #127	; 0x7f
    2de6:	d0cf      	beq.n	2d88 <pinctrl_configure_pins+0x10>
		switch (NRF_GET_FUN(pins[i])) {
    2de8:	0c1b      	lsrs	r3, r3, #16
    2dea:	2b22      	cmp	r3, #34	; 0x22
    2dec:	f200 80ee 	bhi.w	2fcc <pinctrl_configure_pins+0x254>
    2df0:	a201      	add	r2, pc, #4	; (adr r2, 2df8 <pinctrl_configure_pins+0x80>)
    2df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2df6:	bf00      	nop
    2df8:	00002d8f 	.word	0x00002d8f
    2dfc:	00002e85 	.word	0x00002e85
    2e00:	00002e93 	.word	0x00002e93
    2e04:	00002e9f 	.word	0x00002e9f
    2e08:	00002ead 	.word	0x00002ead
    2e0c:	00002ebb 	.word	0x00002ebb
    2e10:	00002ec7 	.word	0x00002ec7
    2e14:	00002fcd 	.word	0x00002fcd
    2e18:	00002fcd 	.word	0x00002fcd
    2e1c:	00002fcd 	.word	0x00002fcd
    2e20:	00002fcd 	.word	0x00002fcd
    2e24:	00002ed5 	.word	0x00002ed5
    2e28:	00002ee9 	.word	0x00002ee9
    2e2c:	00002fcd 	.word	0x00002fcd
    2e30:	00002fcd 	.word	0x00002fcd
    2e34:	00002fcd 	.word	0x00002fcd
    2e38:	00002fcd 	.word	0x00002fcd
    2e3c:	00002fcd 	.word	0x00002fcd
    2e40:	00002fcd 	.word	0x00002fcd
    2e44:	00002fcd 	.word	0x00002fcd
    2e48:	00002fcd 	.word	0x00002fcd
    2e4c:	00002fcd 	.word	0x00002fcd
    2e50:	00002efd 	.word	0x00002efd
    2e54:	00002f0f 	.word	0x00002f0f
    2e58:	00002f21 	.word	0x00002f21
    2e5c:	00002f33 	.word	0x00002f33
    2e60:	00002fcd 	.word	0x00002fcd
    2e64:	00002fcd 	.word	0x00002fcd
    2e68:	00002fcd 	.word	0x00002fcd
    2e6c:	00002f45 	.word	0x00002f45
    2e70:	00002f55 	.word	0x00002f55
    2e74:	00002f61 	.word	0x00002f61
    2e78:	00002f71 	.word	0x00002f71
    2e7c:	00002f81 	.word	0x00002f81
    2e80:	00002f91 	.word	0x00002f91
			NRF_PSEL_UART(reg, RXD) = pin;
    2e84:	f8c8 5514 	str.w	r5, [r8, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    2e88:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2e8a:	9603      	str	r6, [sp, #12]
		uint32_t write = NO_WRITE;
    2e8c:	f04f 31ff 	mov.w	r1, #4294967295
			break;
    2e90:	e782      	b.n	2d98 <pinctrl_configure_pins+0x20>
			NRF_PSEL_UART(reg, RTS) = pin;
    2e92:	f8c8 5508 	str.w	r5, [r8, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2e96:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    2e98:	9603      	str	r6, [sp, #12]
			write = 1U;
    2e9a:	4631      	mov	r1, r6
			break;
    2e9c:	e77c      	b.n	2d98 <pinctrl_configure_pins+0x20>
			NRF_PSEL_UART(reg, CTS) = pin;
    2e9e:	f8c8 5510 	str.w	r5, [r8, #1296]	; 0x510
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    2ea2:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2ea4:	9603      	str	r6, [sp, #12]
		uint32_t write = NO_WRITE;
    2ea6:	f04f 31ff 	mov.w	r1, #4294967295
			break;
    2eaa:	e775      	b.n	2d98 <pinctrl_configure_pins+0x20>
			NRF_PSEL_SPIM(reg, SCK) = pin;
    2eac:	f8c8 5508 	str.w	r5, [r8, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    2eb0:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    2eb2:	2301      	movs	r3, #1
    2eb4:	9303      	str	r3, [sp, #12]
			write = 0U;
    2eb6:	4631      	mov	r1, r6
			break;
    2eb8:	e76e      	b.n	2d98 <pinctrl_configure_pins+0x20>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
    2eba:	f8c8 550c 	str.w	r5, [r8, #1292]	; 0x50c
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2ebe:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    2ec0:	9603      	str	r6, [sp, #12]
			write = 0U;
    2ec2:	2100      	movs	r1, #0
			break;
    2ec4:	e768      	b.n	2d98 <pinctrl_configure_pins+0x20>
			NRF_PSEL_SPIM(reg, MISO) = pin;
    2ec6:	f8c8 5510 	str.w	r5, [r8, #1296]	; 0x510
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    2eca:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2ecc:	9603      	str	r6, [sp, #12]
		uint32_t write = NO_WRITE;
    2ece:	f04f 31ff 	mov.w	r1, #4294967295
			break;
    2ed2:	e761      	b.n	2d98 <pinctrl_configure_pins+0x20>
			NRF_PSEL_TWIM(reg, SCL) = pin;
    2ed4:	f8c8 5508 	str.w	r5, [r8, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    2ed8:	f1b9 0f00 	cmp.w	r9, #0
    2edc:	d060      	beq.n	2fa0 <pinctrl_configure_pins+0x228>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    2ede:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2ee0:	9603      	str	r6, [sp, #12]
		uint32_t write = NO_WRITE;
    2ee2:	f04f 31ff 	mov.w	r1, #4294967295
    2ee6:	e757      	b.n	2d98 <pinctrl_configure_pins+0x20>
			NRF_PSEL_TWIM(reg, SDA) = pin;
    2ee8:	f8c8 550c 	str.w	r5, [r8, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    2eec:	f1b9 0f00 	cmp.w	r9, #0
    2ef0:	d05e      	beq.n	2fb0 <pinctrl_configure_pins+0x238>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    2ef2:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2ef4:	9603      	str	r6, [sp, #12]
		uint32_t write = NO_WRITE;
    2ef6:	f04f 31ff 	mov.w	r1, #4294967295
    2efa:	e74d      	b.n	2d98 <pinctrl_configure_pins+0x20>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
    2efc:	f8c8 5560 	str.w	r5, [r8, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
    2f00:	f857 100a 	ldr.w	r1, [r7, sl]
    2f04:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2f08:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    2f0a:	9603      	str	r6, [sp, #12]
			break;
    2f0c:	e744      	b.n	2d98 <pinctrl_configure_pins+0x20>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
    2f0e:	f8c8 5564 	str.w	r5, [r8, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
    2f12:	f857 100a 	ldr.w	r1, [r7, sl]
    2f16:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2f1a:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    2f1c:	9603      	str	r6, [sp, #12]
			break;
    2f1e:	e73b      	b.n	2d98 <pinctrl_configure_pins+0x20>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
    2f20:	f8c8 5568 	str.w	r5, [r8, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
    2f24:	f857 100a 	ldr.w	r1, [r7, sl]
    2f28:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2f2c:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    2f2e:	9603      	str	r6, [sp, #12]
			break;
    2f30:	e732      	b.n	2d98 <pinctrl_configure_pins+0x20>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
    2f32:	f8c8 556c 	str.w	r5, [r8, #1388]	; 0x56c
			write = NRF_GET_INVERT(pins[i]);
    2f36:	f857 100a 	ldr.w	r1, [r7, sl]
    2f3a:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2f3e:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    2f40:	9603      	str	r6, [sp, #12]
			break;
    2f42:	e729      	b.n	2d98 <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, SCK) = pin;
    2f44:	f8c8 5524 	str.w	r5, [r8, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2f48:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2f4a:	2300      	movs	r3, #0
    2f4c:	9303      	str	r3, [sp, #12]
		uint32_t write = NO_WRITE;
    2f4e:	f04f 31ff 	mov.w	r1, #4294967295
			break;
    2f52:	e721      	b.n	2d98 <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, CSN) = pin;
    2f54:	f8c8 5528 	str.w	r5, [r8, #1320]	; 0x528
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2f58:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    2f5a:	9603      	str	r6, [sp, #12]
			write = 1U;
    2f5c:	4631      	mov	r1, r6
			break;
    2f5e:	e71b      	b.n	2d98 <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, IO0) = pin;
    2f60:	f8c8 5530 	str.w	r5, [r8, #1328]	; 0x530
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2f64:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2f66:	2300      	movs	r3, #0
    2f68:	9303      	str	r3, [sp, #12]
		uint32_t write = NO_WRITE;
    2f6a:	f04f 31ff 	mov.w	r1, #4294967295
			break;
    2f6e:	e713      	b.n	2d98 <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, IO1) = pin;
    2f70:	f8c8 5534 	str.w	r5, [r8, #1332]	; 0x534
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2f74:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2f76:	2300      	movs	r3, #0
    2f78:	9303      	str	r3, [sp, #12]
		uint32_t write = NO_WRITE;
    2f7a:	f04f 31ff 	mov.w	r1, #4294967295
			break;
    2f7e:	e70b      	b.n	2d98 <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, IO2) = pin;
    2f80:	f8c8 5538 	str.w	r5, [r8, #1336]	; 0x538
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2f84:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2f86:	2300      	movs	r3, #0
    2f88:	9303      	str	r3, [sp, #12]
		uint32_t write = NO_WRITE;
    2f8a:	f04f 31ff 	mov.w	r1, #4294967295
			break;
    2f8e:	e703      	b.n	2d98 <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, IO3) = pin;
    2f90:	f8c8 553c 	str.w	r5, [r8, #1340]	; 0x53c
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2f94:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2f96:	2300      	movs	r3, #0
    2f98:	9303      	str	r3, [sp, #12]
		uint32_t write = NO_WRITE;
    2f9a:	f04f 31ff 	mov.w	r1, #4294967295
			break;
    2f9e:	e6fb      	b.n	2d98 <pinctrl_configure_pins+0x20>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    2fa0:	464e      	mov	r6, r9
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2fa2:	f8cd 900c 	str.w	r9, [sp, #12]
		uint32_t write = NO_WRITE;
    2fa6:	f04f 31ff 	mov.w	r1, #4294967295
				drive = NRF_DRIVE_S0D1;
    2faa:	f04f 0906 	mov.w	r9, #6
    2fae:	e6f3      	b.n	2d98 <pinctrl_configure_pins+0x20>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    2fb0:	464e      	mov	r6, r9
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2fb2:	f8cd 900c 	str.w	r9, [sp, #12]
		uint32_t write = NO_WRITE;
    2fb6:	f04f 31ff 	mov.w	r1, #4294967295
				drive = NRF_DRIVE_S0D1;
    2fba:	f04f 0906 	mov.w	r9, #6
    2fbe:	e6eb      	b.n	2d98 <pinctrl_configure_pins+0x20>
				nrf_gpio_pin_write(pin, write);
    2fc0:	4628      	mov	r0, r5
    2fc2:	f7ff febb 	bl	2d3c <nrf_gpio_pin_write>
    2fc6:	e6ed      	b.n	2da4 <pinctrl_configure_pins+0x2c>
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    2fc8:	2000      	movs	r0, #0
    2fca:	e001      	b.n	2fd0 <pinctrl_configure_pins+0x258>
		switch (NRF_GET_FUN(pins[i])) {
    2fcc:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    2fd0:	b005      	add	sp, #20
    2fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2fd6:	bf00      	nop

00002fd8 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
    2fd8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2fdc:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
    2fe0:	f002 0203 	and.w	r2, r2, #3
    2fe4:	4b02      	ldr	r3, [pc, #8]	; (2ff0 <SystemCoreClockUpdate+0x18>)
    2fe6:	40d3      	lsrs	r3, r2
    2fe8:	4a02      	ldr	r2, [pc, #8]	; (2ff4 <SystemCoreClockUpdate+0x1c>)
    2fea:	6013      	str	r3, [r2, #0]
#endif
}
    2fec:	4770      	bx	lr
    2fee:	bf00      	nop
    2ff0:	07a12000 	.word	0x07a12000
    2ff4:	200000f8 	.word	0x200000f8

00002ff8 <SystemInit>:

void SystemInit(void)
{
    2ff8:	b508      	push	{r3, lr}
            SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
        #endif

        /* Workaround for Errata 97 "ERASEPROTECT, APPROTECT, or startup problems" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_97())
    2ffa:	f003 feb7 	bl	6d6c <nrf53_errata_97>
    2ffe:	b168      	cbz	r0, 301c <SystemInit+0x24>
        {
            if (*((volatile uint32_t *)0x50004A20ul) == 0)
    3000:	4b4e      	ldr	r3, [pc, #312]	; (313c <SystemInit+0x144>)
    3002:	f8d3 3a20 	ldr.w	r3, [r3, #2592]	; 0xa20
    3006:	b94b      	cbnz	r3, 301c <SystemInit+0x24>
            {
                *((volatile uint32_t *)0x50004A20ul) = 0xDul;
    3008:	4b4c      	ldr	r3, [pc, #304]	; (313c <SystemInit+0x144>)
    300a:	220d      	movs	r2, #13
    300c:	f8c3 2a20 	str.w	r2, [r3, #2592]	; 0xa20
                *((volatile uint32_t *)0x5000491Cul) = 0x1ul;
    3010:	2201      	movs	r2, #1
    3012:	f8c3 291c 	str.w	r2, [r3, #2332]	; 0x91c
                *((volatile uint32_t *)0x5000491Cul) = 0x0ul;
    3016:	2200      	movs	r2, #0
    3018:	f8c3 291c 	str.w	r2, [r3, #2332]	; 0x91c
{
    301c:	2200      	movs	r2, #0
    301e:	e00b      	b.n	3038 <SystemInit+0x40>
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
            #if defined ( __ICCARM__ )
                /* IAR will complain about the order of volatile pointer accesses. */
                #pragma diag_suppress=Pa082
            #endif
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    3020:	f102 0360 	add.w	r3, r2, #96	; 0x60
    3024:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    3028:	f851 1033 	ldr.w	r1, [r1, r3, lsl #3]
    302c:	00db      	lsls	r3, r3, #3
    302e:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
    3032:	685b      	ldr	r3, [r3, #4]
    3034:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    3036:	3201      	adds	r2, #1
    3038:	2a1f      	cmp	r2, #31
    303a:	d808      	bhi.n	304e <SystemInit+0x56>
    303c:	f102 0360 	add.w	r3, r2, #96	; 0x60
    3040:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    3044:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
    3048:	f1b3 3fff 	cmp.w	r3, #4294967295
    304c:	d1e8      	bne.n	3020 <SystemInit+0x28>
        }

        /* errata 64 must be before errata 42, as errata 42 is dependant on the changes in errata 64*/
        /* Workaround for Errata 64 "VREGMAIN has invalid configuration when CPU is running at 128 MHz" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_64())
    304e:	f003 fe65 	bl	6d1c <nrf53_errata_64>
    3052:	b130      	cbz	r0, 3062 <SystemInit+0x6a>
        {
            *((volatile uint32_t *)0x5000470Cul) = 0x29ul;
    3054:	4b39      	ldr	r3, [pc, #228]	; (313c <SystemInit+0x144>)
    3056:	2229      	movs	r2, #41	; 0x29
    3058:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
    305c:	2203      	movs	r2, #3
    305e:	f8c3 273c 	str.w	r2, [r3, #1852]	; 0x73c
        }

        /* Workaround for Errata 42 "Reset value of HFCLKCTRL is invalid" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_42())
    3062:	f003 fe0f 	bl	6c84 <nrf53_errata_42>
    3066:	b140      	cbz	r0, 307a <SystemInit+0x82>
        {
            *((volatile uint32_t *)0x50039530ul) = 0xBEEF0044ul;
    3068:	4b35      	ldr	r3, [pc, #212]	; (3140 <SystemInit+0x148>)
    306a:	4a36      	ldr	r2, [pc, #216]	; (3144 <SystemInit+0x14c>)
    306c:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
            NRF_CLOCK_S->HFCLKCTRL = CLOCK_HFCLKCTRL_HCLK_Div2 << CLOCK_HFCLKCTRL_HCLK_Pos;
    3070:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3074:	2201      	movs	r2, #1
    3076:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
        }

        /* Workaround for Errata 46 "Higher power consumption of LFRC" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_46())
    307a:	f003 fe17 	bl	6cac <nrf53_errata_46>
    307e:	b118      	cbz	r0, 3088 <SystemInit+0x90>
        {
            *((volatile uint32_t *)0x5003254Cul) = 0;
    3080:	4b31      	ldr	r3, [pc, #196]	; (3148 <SystemInit+0x150>)
    3082:	2200      	movs	r2, #0
    3084:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
        }

        /* Workaround for Errata 49 "SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_49())
    3088:	f003 fe28 	bl	6cdc <nrf53_errata_49>
    308c:	b168      	cbz	r0, 30aa <SystemInit+0xb2>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk)
    308e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3092:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    3096:	f013 0f01 	tst.w	r3, #1
    309a:	d006      	beq.n	30aa <SystemInit+0xb2>
            {
                NRF_POWER_S->EVENTS_SLEEPENTER = 0;
    309c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    30a0:	2200      	movs	r2, #0
    30a2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
                NRF_POWER_S->EVENTS_SLEEPEXIT = 0;
    30a6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
            }
        }

        /* Workaround for Errata 55 "Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_55())
    30aa:	f003 fe2b 	bl	6d04 <nrf53_errata_55>
    30ae:	b160      	cbz	r0, 30ca <SystemInit+0xd2>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk){
    30b0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    30b4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    30b8:	f013 0f01 	tst.w	r3, #1
    30bc:	d005      	beq.n	30ca <SystemInit+0xd2>
                NRF_RESET_S->RESETREAS = ~RESET_RESETREAS_RESETPIN_Msk;
    30be:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    30c2:	f06f 0201 	mvn.w	r2, #1
    30c6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            }
        }

        /* Workaround for Errata 69 "VREGMAIN configuration is not retained in System OFF" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_69())
    30ca:	f003 fe3b 	bl	6d44 <nrf53_errata_69>
    30ce:	b118      	cbz	r0, 30d8 <SystemInit+0xe0>
        {
            *((volatile uint32_t *)0x5000470Cul) =0x65ul;
    30d0:	4b1a      	ldr	r3, [pc, #104]	; (313c <SystemInit+0x144>)
    30d2:	2265      	movs	r2, #101	; 0x65
    30d4:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
        }

        if (nrf53_errata_140())
    30d8:	f003 fe5c 	bl	6d94 <nrf53_errata_140>
    30dc:	b120      	cbz	r0, 30e8 <SystemInit+0xf0>
        {
            if (*(volatile uint32_t *)0x50032420 & 0x80000000)
    30de:	4b1a      	ldr	r3, [pc, #104]	; (3148 <SystemInit+0x150>)
    30e0:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
    30e4:	2b00      	cmp	r3, #0
    30e6:	db11      	blt.n	310c <SystemInit+0x114>

        #endif

        /* Allow Non-Secure code to run FPU instructions.
         * If only the secure code should control FPU power state these registers should be configured accordingly in the secure application code. */
        SCB->NSACR |= (3UL << 10);
    30e8:	4a18      	ldr	r2, [pc, #96]	; (314c <SystemInit+0x154>)
    30ea:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    30ee:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    30f2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                /* Do nothing, allow user code to handle APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load APPROTECT soft branch from UICR.
               If UICR->APPROTECT is disabled, CTRLAP->APPROTECT will be disabled. */
            NRF_CTRLAP_S->APPROTECT.DISABLE = NRF_UICR_S->APPROTECT;
    30f6:	4a16      	ldr	r2, [pc, #88]	; (3150 <SystemInit+0x158>)
    30f8:	6811      	ldr	r1, [r2, #0]
    30fa:	4b16      	ldr	r3, [pc, #88]	; (3154 <SystemInit+0x15c>)
    30fc:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
                /* Do nothing, allow user code to handle SECURE APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load SECURE APPROTECT soft branch from UICR.
               If UICR->SECUREAPPROTECT is disabled, CTRLAP->SECUREAPPROTECT will be disabled. */
            NRF_CTRLAP_S->SECUREAPPROTECT.DISABLE = NRF_UICR_S->SECUREAPPROTECT;
    3100:	69d2      	ldr	r2, [r2, #28]
    3102:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
    3106:	f7ff ff67 	bl	2fd8 <SystemCoreClockUpdate>
}
    310a:	bd08      	pop	{r3, pc}
                NRF_CLOCK_S->LFCLKSRC = CLOCK_LFCLKSRC_SRC_LFSYNT;
    310c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3110:	2203      	movs	r2, #3
    3112:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
                NRF_CLOCK_S->TASKS_LFCLKSTART = 1;
    3116:	2201      	movs	r2, #1
    3118:	609a      	str	r2, [r3, #8]
                while (NRF_CLOCK_S->EVENTS_LFCLKSTARTED == 0) {}
    311a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    311e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    3122:	2b00      	cmp	r3, #0
    3124:	d0f9      	beq.n	311a <SystemInit+0x122>
                NRF_CLOCK_S->EVENTS_LFCLKSTARTED = 0;
    3126:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    312a:	2200      	movs	r2, #0
    312c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
                NRF_CLOCK_S->TASKS_LFCLKSTOP = 1;
    3130:	2201      	movs	r2, #1
    3132:	60da      	str	r2, [r3, #12]
                NRF_CLOCK_S->LFCLKSRC = CLOCK_LFCLKSRC_SRC_LFRC;
    3134:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    3138:	e7d6      	b.n	30e8 <SystemInit+0xf0>
    313a:	bf00      	nop
    313c:	50004000 	.word	0x50004000
    3140:	50039000 	.word	0x50039000
    3144:	beef0044 	.word	0xbeef0044
    3148:	50032000 	.word	0x50032000
    314c:	e000ed00 	.word	0xe000ed00
    3150:	00ff8000 	.word	0x00ff8000
    3154:	50006000 	.word	0x50006000

00003158 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    3158:	b510      	push	{r4, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
    315a:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    315c:	fab4 f384 	clz	r3, r4
    3160:	f1c3 031f 	rsb	r3, r3, #31
    3164:	fa5f fc83 	uxtb.w	ip, r3
        if (idx < 0) {
    3168:	2b00      	cmp	r3, #0
    316a:	db12      	blt.n	3192 <nrfx_flag32_alloc+0x3a>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    316c:	2201      	movs	r2, #1
    316e:	fa02 f303 	lsl.w	r3, r2, r3
    3172:	ea24 0303 	bic.w	r3, r4, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    3176:	e8d0 2fef 	ldaex	r2, [r0]
    317a:	42a2      	cmp	r2, r4
    317c:	d104      	bne.n	3188 <nrfx_flag32_alloc+0x30>
    317e:	e8c0 3fee 	stlex	lr, r3, [r0]
    3182:	f1be 0f00 	cmp.w	lr, #0
    3186:	d1f6      	bne.n	3176 <nrfx_flag32_alloc+0x1e>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    3188:	d1e7      	bne.n	315a <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
    318a:	f881 c000 	strb.w	ip, [r1]

    return NRFX_SUCCESS;
    318e:	4802      	ldr	r0, [pc, #8]	; (3198 <nrfx_flag32_alloc+0x40>)
}
    3190:	bd10      	pop	{r4, pc}
            return NRFX_ERROR_NO_MEM;
    3192:	4802      	ldr	r0, [pc, #8]	; (319c <nrfx_flag32_alloc+0x44>)
    3194:	e7fc      	b.n	3190 <nrfx_flag32_alloc+0x38>
    3196:	bf00      	nop
    3198:	0bad0000 	.word	0x0bad0000
    319c:	0bad0002 	.word	0x0bad0002

000031a0 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    31a0:	6803      	ldr	r3, [r0, #0]
    31a2:	40cb      	lsrs	r3, r1
    31a4:	f013 0f01 	tst.w	r3, #1
    31a8:	d111      	bne.n	31ce <nrfx_flag32_free+0x2e>
{
    31aa:	b500      	push	{lr}
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
    31ac:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    31ae:	2301      	movs	r3, #1
    31b0:	408b      	lsls	r3, r1
    31b2:	4313      	orrs	r3, r2
    31b4:	e8d0 cfef 	ldaex	ip, [r0]
    31b8:	4594      	cmp	ip, r2
    31ba:	d104      	bne.n	31c6 <nrfx_flag32_free+0x26>
    31bc:	e8c0 3fee 	stlex	lr, r3, [r0]
    31c0:	f1be 0f00 	cmp.w	lr, #0
    31c4:	d1f6      	bne.n	31b4 <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    31c6:	d1f1      	bne.n	31ac <nrfx_flag32_free+0xc>

    return NRFX_SUCCESS;
    31c8:	4802      	ldr	r0, [pc, #8]	; (31d4 <nrfx_flag32_free+0x34>)
}
    31ca:	f85d fb04 	ldr.w	pc, [sp], #4
        return NRFX_ERROR_INVALID_PARAM;
    31ce:	4802      	ldr	r0, [pc, #8]	; (31d8 <nrfx_flag32_free+0x38>)
}
    31d0:	4770      	bx	lr
    31d2:	bf00      	nop
    31d4:	0bad0000 	.word	0x0bad0000
    31d8:	0bad0004 	.word	0x0bad0004

000031dc <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    31dc:	4b05      	ldr	r3, [pc, #20]	; (31f4 <nrfx_clock_init+0x18>)
    31de:	791b      	ldrb	r3, [r3, #4]
    31e0:	b92b      	cbnz	r3, 31ee <nrfx_clock_init+0x12>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    31e2:	4b04      	ldr	r3, [pc, #16]	; (31f4 <nrfx_clock_init+0x18>)
    31e4:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    31e6:	2201      	movs	r2, #1
    31e8:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    31ea:	4803      	ldr	r0, [pc, #12]	; (31f8 <nrfx_clock_init+0x1c>)
    31ec:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    31ee:	4803      	ldr	r0, [pc, #12]	; (31fc <nrfx_clock_init+0x20>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    31f0:	4770      	bx	lr
    31f2:	bf00      	nop
    31f4:	20000ae0 	.word	0x20000ae0
    31f8:	0bad0000 	.word	0x0bad0000
    31fc:	0bad000c 	.word	0x0bad000c

00003200 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    3200:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3202:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3206:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    320a:	b163      	cbz	r3, 3226 <nrfx_power_clock_irq_handler+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    320c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3210:	2000      	movs	r0, #0
    3212:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    3216:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    321a:	2201      	movs	r2, #1
    321c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    3220:	4b28      	ldr	r3, [pc, #160]	; (32c4 <nrfx_power_clock_irq_handler+0xc4>)
    3222:	681b      	ldr	r3, [r3, #0]
    3224:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3226:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    322a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    322e:	b1bb      	cbz	r3, 3260 <nrfx_power_clock_irq_handler+0x60>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3230:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3234:	2200      	movs	r2, #0
    3236:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    323a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    323e:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    3242:	f002 0203 	and.w	r2, r2, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3246:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    324a:	2a01      	cmp	r2, #1
    324c:	d031      	beq.n	32b2 <nrfx_power_clock_irq_handler+0xb2>
    p_reg->INTENCLR = mask;
    324e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3252:	2202      	movs	r2, #2
    3254:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        else
#endif
        {
            // After the LF clock external source start invoke user callback.
            nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_LF_STARTED_MASK);
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    3258:	4b1a      	ldr	r3, [pc, #104]	; (32c4 <nrfx_power_clock_irq_handler+0xc4>)
    325a:	681b      	ldr	r3, [r3, #0]
    325c:	2001      	movs	r0, #1
    325e:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3260:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3264:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
    3268:	b173      	cbz	r3, 3288 <nrfx_power_clock_irq_handler+0x88>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    326a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    326e:	2200      	movs	r2, #0
    3270:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    3274:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
    3278:	f44f 7280 	mov.w	r2, #256	; 0x100
    327c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
    3280:	4b10      	ldr	r3, [pc, #64]	; (32c4 <nrfx_power_clock_irq_handler+0xc4>)
    3282:	681b      	ldr	r3, [r3, #0]
    3284:	2004      	movs	r0, #4
    3286:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3288:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    328c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
    3290:	b173      	cbz	r3, 32b0 <nrfx_power_clock_irq_handler+0xb0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3292:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3296:	2200      	movs	r2, #0
    3298:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    329c:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
    32a0:	f44f 7200 	mov.w	r2, #512	; 0x200
    32a4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLK192MSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    32a8:	4b06      	ldr	r3, [pc, #24]	; (32c4 <nrfx_power_clock_irq_handler+0xc4>)
    32aa:	681b      	ldr	r3, [r3, #0]
    32ac:	2005      	movs	r0, #5
    32ae:	4798      	blx	r3
    }
#endif
}
    32b0:	bd08      	pop	{r3, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
    32b2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    32b6:	2202      	movs	r2, #2
    32b8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    32bc:	2201      	movs	r2, #1
    32be:	609a      	str	r2, [r3, #8]
}
    32c0:	e7ce      	b.n	3260 <nrfx_power_clock_irq_handler+0x60>
    32c2:	bf00      	nop
    32c4:	20000ae0 	.word	0x20000ae0

000032c8 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    32c8:	b508      	push	{r3, lr}
    32ca:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
    32cc:	4801      	ldr	r0, [pc, #4]	; (32d4 <nrfx_dppi_channel_alloc+0xc>)
    32ce:	f7ff ff43 	bl	3158 <nrfx_flag32_alloc>
}
    32d2:	bd08      	pop	{r3, pc}
    32d4:	200000fc 	.word	0x200000fc

000032d8 <nrf_gpio_reconfigure>:
{
    32d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    32da:	461c      	mov	r4, r3
    32dc:	9f05      	ldr	r7, [sp, #20]
    32de:	9e06      	ldr	r6, [sp, #24]
    *p_pin = pin_number & 0x1F;
    32e0:	f000 0c1f 	and.w	ip, r0, #31
    return pin_number >> 5;
    32e4:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    32e6:	2801      	cmp	r0, #1
    32e8:	d034      	beq.n	3354 <nrf_gpio_reconfigure+0x7c>
        case 0: return NRF_P0;
    32ea:	4d27      	ldr	r5, [pc, #156]	; (3388 <nrf_gpio_reconfigure+0xb0>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    32ec:	f10c 0380 	add.w	r3, ip, #128	; 0x80
    32f0:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    32f4:	b381      	cbz	r1, 3358 <nrf_gpio_reconfigure+0x80>
    32f6:	2001      	movs	r0, #1
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    32f8:	b382      	cbz	r2, 335c <nrf_gpio_reconfigure+0x84>
    32fa:	f04f 0e02 	mov.w	lr, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    32fe:	ea40 000e 	orr.w	r0, r0, lr
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    3302:	b374      	cbz	r4, 3362 <nrf_gpio_reconfigure+0x8a>
    3304:	f04f 0e0c 	mov.w	lr, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    3308:	ea40 000e 	orr.w	r0, r0, lr
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    330c:	b367      	cbz	r7, 3368 <nrf_gpio_reconfigure+0x90>
    330e:	f44f 6e70 	mov.w	lr, #3840	; 0xf00
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    3312:	ea40 000e 	orr.w	r0, r0, lr
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    3316:	b356      	cbz	r6, 336e <nrf_gpio_reconfigure+0x96>
    3318:	f44f 3e40 	mov.w	lr, #196608	; 0x30000
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    331c:	ea40 000e 	orr.w	r0, r0, lr
    cnf &= ~to_update;
    3320:	ea23 0000 	bic.w	r0, r3, r0
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    3324:	b331      	cbz	r1, 3374 <nrf_gpio_reconfigure+0x9c>
    3326:	780b      	ldrb	r3, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    3328:	b332      	cbz	r2, 3378 <nrf_gpio_reconfigure+0xa0>
    332a:	7812      	ldrb	r2, [r2, #0]
    332c:	0052      	lsls	r2, r2, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    332e:	4313      	orrs	r3, r2
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    3330:	b324      	cbz	r4, 337c <nrf_gpio_reconfigure+0xa4>
    3332:	7822      	ldrb	r2, [r4, #0]
    3334:	0092      	lsls	r2, r2, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    3336:	4313      	orrs	r3, r2
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    3338:	b317      	cbz	r7, 3380 <nrf_gpio_reconfigure+0xa8>
    333a:	783a      	ldrb	r2, [r7, #0]
    333c:	0212      	lsls	r2, r2, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    333e:	4313      	orrs	r3, r2
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    3340:	b306      	cbz	r6, 3384 <nrf_gpio_reconfigure+0xac>
    3342:	7832      	ldrb	r2, [r6, #0]
    3344:	0412      	lsls	r2, r2, #16
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    3346:	4313      	orrs	r3, r2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    3348:	4303      	orrs	r3, r0
    reg->PIN_CNF[pin_number] = cnf;
    334a:	f10c 0c80 	add.w	ip, ip, #128	; 0x80
    334e:	f845 302c 	str.w	r3, [r5, ip, lsl #2]
}
    3352:	bdf0      	pop	{r4, r5, r6, r7, pc}
        case 1: return NRF_P1;
    3354:	4d0d      	ldr	r5, [pc, #52]	; (338c <nrf_gpio_reconfigure+0xb4>)
    3356:	e7c9      	b.n	32ec <nrf_gpio_reconfigure+0x14>
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    3358:	2000      	movs	r0, #0
    335a:	e7cd      	b.n	32f8 <nrf_gpio_reconfigure+0x20>
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    335c:	f04f 0e00 	mov.w	lr, #0
    3360:	e7cd      	b.n	32fe <nrf_gpio_reconfigure+0x26>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    3362:	f04f 0e00 	mov.w	lr, #0
    3366:	e7cf      	b.n	3308 <nrf_gpio_reconfigure+0x30>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    3368:	f04f 0e00 	mov.w	lr, #0
    336c:	e7d1      	b.n	3312 <nrf_gpio_reconfigure+0x3a>
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    336e:	f04f 0e00 	mov.w	lr, #0
    3372:	e7d3      	b.n	331c <nrf_gpio_reconfigure+0x44>
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    3374:	2300      	movs	r3, #0
    3376:	e7d7      	b.n	3328 <nrf_gpio_reconfigure+0x50>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    3378:	2200      	movs	r2, #0
    337a:	e7d8      	b.n	332e <nrf_gpio_reconfigure+0x56>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    337c:	2200      	movs	r2, #0
    337e:	e7da      	b.n	3336 <nrf_gpio_reconfigure+0x5e>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    3380:	2200      	movs	r2, #0
    3382:	e7dc      	b.n	333e <nrf_gpio_reconfigure+0x66>
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    3384:	2200      	movs	r2, #0
    3386:	e7de      	b.n	3346 <nrf_gpio_reconfigure+0x6e>
    3388:	50842500 	.word	0x50842500
    338c:	50842800 	.word	0x50842800

00003390 <nrf_gpio_cfg_default>:
    *p_pin = pin_number & 0x1F;
    3390:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    3394:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3396:	2801      	cmp	r0, #1
    3398:	d00a      	beq.n	33b0 <nrf_gpio_cfg_default+0x20>
        case 0: return NRF_P0;
    339a:	4906      	ldr	r1, [pc, #24]	; (33b4 <nrf_gpio_cfg_default+0x24>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    339c:	3280      	adds	r2, #128	; 0x80
    339e:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    33a2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    33a6:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
    33aa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    33ae:	4770      	bx	lr
        case 1: return NRF_P1;
    33b0:	4901      	ldr	r1, [pc, #4]	; (33b8 <nrf_gpio_cfg_default+0x28>)
    33b2:	e7f3      	b.n	339c <nrf_gpio_cfg_default+0xc>
    33b4:	50842500 	.word	0x50842500
    33b8:	50842800 	.word	0x50842800

000033bc <nrf_gpio_latches_read_and_clear>:
{
    33bc:	b500      	push	{lr}
    33be:	b083      	sub	sp, #12
    33c0:	4684      	mov	ip, r0
    33c2:	468e      	mov	lr, r1
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    33c4:	4b0c      	ldr	r3, [pc, #48]	; (33f8 <nrf_gpio_latches_read_and_clear+0x3c>)
    33c6:	e893 0003 	ldmia.w	r3, {r0, r1}
    33ca:	ab02      	add	r3, sp, #8
    33cc:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    33d0:	4663      	mov	r3, ip
    33d2:	e009      	b.n	33e8 <nrf_gpio_latches_read_and_clear+0x2c>
        *p_masks = gpio_regs[i]->LATCH;
    33d4:	a902      	add	r1, sp, #8
    33d6:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    33da:	f851 1c08 	ldr.w	r1, [r1, #-8]
    33de:	6a08      	ldr	r0, [r1, #32]
    33e0:	f842 0b04 	str.w	r0, [r2], #4
        gpio_regs[i]->LATCH = *p_masks;
    33e4:	6208      	str	r0, [r1, #32]
    for (i = start_port; i < (start_port + length); i++)
    33e6:	3301      	adds	r3, #1
    33e8:	eb0c 000e 	add.w	r0, ip, lr
    33ec:	4298      	cmp	r0, r3
    33ee:	d8f1      	bhi.n	33d4 <nrf_gpio_latches_read_and_clear+0x18>
}
    33f0:	b003      	add	sp, #12
    33f2:	f85d fb04 	ldr.w	pc, [sp], #4
    33f6:	bf00      	nop
    33f8:	00007c80 	.word	0x00007c80

000033fc <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    33fc:	3008      	adds	r0, #8
    33fe:	4b03      	ldr	r3, [pc, #12]	; (340c <pin_in_use+0x10>)
    3400:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    3404:	f000 0001 	and.w	r0, r0, #1
    3408:	4770      	bx	lr
    340a:	bf00      	nop
    340c:	20000100 	.word	0x20000100

00003410 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    3410:	3008      	adds	r0, #8
    3412:	4b03      	ldr	r3, [pc, #12]	; (3420 <pin_in_use_by_te+0x10>)
    3414:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    3418:	f3c0 1040 	ubfx	r0, r0, #5, #1
    341c:	4770      	bx	lr
    341e:	bf00      	nop
    3420:	20000100 	.word	0x20000100

00003424 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    3424:	3008      	adds	r0, #8
    3426:	4b04      	ldr	r3, [pc, #16]	; (3438 <pin_has_trigger+0x14>)
    3428:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    342c:	f010 001c 	ands.w	r0, r0, #28
    3430:	bf18      	it	ne
    3432:	2001      	movne	r0, #1
    3434:	4770      	bx	lr
    3436:	bf00      	nop
    3438:	20000100 	.word	0x20000100

0000343c <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    343c:	3008      	adds	r0, #8
    343e:	4b03      	ldr	r3, [pc, #12]	; (344c <pin_is_output+0x10>)
    3440:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    3444:	f3c0 0040 	ubfx	r0, r0, #1, #1
    3448:	4770      	bx	lr
    344a:	bf00      	nop
    344c:	20000100 	.word	0x20000100

00003450 <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3450:	3008      	adds	r0, #8
    3452:	4b02      	ldr	r3, [pc, #8]	; (345c <pin_te_get+0xc>)
    3454:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    3458:	0b40      	lsrs	r0, r0, #13
    345a:	4770      	bx	lr
    345c:	20000100 	.word	0x20000100

00003460 <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    3460:	2200      	movs	r2, #0
    3462:	e004      	b.n	346e <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    3464:	f04f 33ff 	mov.w	r3, #4294967295
    3468:	4283      	cmp	r3, r0
    346a:	d00f      	beq.n	348c <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    346c:	3201      	adds	r2, #1
    346e:	2a2f      	cmp	r2, #47	; 0x2f
    3470:	d80a      	bhi.n	3488 <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    3472:	f102 0308 	add.w	r3, r2, #8
    3476:	4906      	ldr	r1, [pc, #24]	; (3490 <handler_in_use+0x30>)
    3478:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    347c:	f413 7f80 	tst.w	r3, #256	; 0x100
    3480:	d0f0      	beq.n	3464 <handler_in_use+0x4>
    3482:	f3c3 2343 	ubfx	r3, r3, #9, #4
    3486:	e7ef      	b.n	3468 <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
    3488:	2000      	movs	r0, #0
    348a:	4770      	bx	lr
            return true;
    348c:	2001      	movs	r0, #1
}
    348e:	4770      	bx	lr
    3490:	20000100 	.word	0x20000100

00003494 <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    3494:	2300      	movs	r3, #0
    3496:	b113      	cbz	r3, 349e <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
    3498:	f04f 30ff 	mov.w	r0, #4294967295
}
    349c:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    349e:	4a07      	ldr	r2, [pc, #28]	; (34bc <find_handler+0x28>)
    34a0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    34a4:	4282      	cmp	r2, r0
    34a6:	d001      	beq.n	34ac <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    34a8:	3301      	adds	r3, #1
    34aa:	e7f4      	b.n	3496 <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    34ac:	4a03      	ldr	r2, [pc, #12]	; (34bc <find_handler+0x28>)
    34ae:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    34b2:	6852      	ldr	r2, [r2, #4]
    34b4:	428a      	cmp	r2, r1
    34b6:	d1f7      	bne.n	34a8 <find_handler+0x14>
            return i;
    34b8:	4618      	mov	r0, r3
    34ba:	4770      	bx	lr
    34bc:	20000100 	.word	0x20000100

000034c0 <get_initial_sense>:
    return NRFX_SUCCESS;
}

static inline nrf_gpio_pin_sense_t get_initial_sense(nrfx_gpiote_pin_t pin)
{
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    34c0:	f100 0208 	add.w	r2, r0, #8
    34c4:	4b0e      	ldr	r3, [pc, #56]	; (3500 <get_initial_sense+0x40>)
    34c6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    34ca:	f3c3 0382 	ubfx	r3, r3, #2, #3
    nrf_gpio_pin_sense_t sense;

    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    34ce:	2b04      	cmp	r3, #4
    34d0:	d010      	beq.n	34f4 <get_initial_sense+0x34>
    {
        sense = NRF_GPIO_PIN_SENSE_LOW;
    }
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    34d2:	2b05      	cmp	r3, #5
    34d4:	d010      	beq.n	34f8 <get_initial_sense+0x38>
    *p_pin = pin_number & 0x1F;
    34d6:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    34da:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    34dc:	2801      	cmp	r0, #1
    34de:	d007      	beq.n	34f0 <get_initial_sense+0x30>
        case 0: return NRF_P0;
    34e0:	4b08      	ldr	r3, [pc, #32]	; (3504 <get_initial_sense+0x44>)
    return p_reg->IN;
    34e2:	691b      	ldr	r3, [r3, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    34e4:	40d3      	lsrs	r3, r2
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    }
    else
    {
        /* If edge detection start with sensing opposite state. */
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    34e6:	f013 0f01 	tst.w	r3, #1
    34ea:	d007      	beq.n	34fc <get_initial_sense+0x3c>
    34ec:	2003      	movs	r0, #3
    34ee:	4770      	bx	lr
        case 1: return NRF_P1;
    34f0:	4b05      	ldr	r3, [pc, #20]	; (3508 <get_initial_sense+0x48>)
    34f2:	e7f6      	b.n	34e2 <get_initial_sense+0x22>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    34f4:	2003      	movs	r0, #3
    34f6:	4770      	bx	lr
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    34f8:	2002      	movs	r0, #2
    34fa:	4770      	bx	lr
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    34fc:	2002      	movs	r0, #2
    }

    return sense;
}
    34fe:	4770      	bx	lr
    3500:	20000100 	.word	0x20000100
    3504:	50842500 	.word	0x50842500
    3508:	50842800 	.word	0x50842800

0000350c <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    350c:	3008      	adds	r0, #8
    350e:	4b06      	ldr	r3, [pc, #24]	; (3528 <channel_handler_get+0x1c>)
    3510:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    3514:	f410 7f80 	tst.w	r0, #256	; 0x100
    3518:	d004      	beq.n	3524 <channel_handler_get+0x18>
    351a:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
    351e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    3522:	4770      	bx	lr
        return NULL;
    3524:	2000      	movs	r0, #0
}
    3526:	4770      	bx	lr
    3528:	20000100 	.word	0x20000100

0000352c <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    352c:	b570      	push	{r4, r5, r6, lr}
    352e:	4604      	mov	r4, r0
    3530:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
    3532:	f7ff ffeb 	bl	350c <channel_handler_get>

    if (handler)
    3536:	b120      	cbz	r0, 3542 <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
    3538:	6806      	ldr	r6, [r0, #0]
    353a:	6842      	ldr	r2, [r0, #4]
    353c:	4629      	mov	r1, r5
    353e:	4620      	mov	r0, r4
    3540:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
    3542:	4b04      	ldr	r3, [pc, #16]	; (3554 <call_handler+0x28>)
    3544:	689b      	ldr	r3, [r3, #8]
    3546:	b123      	cbz	r3, 3552 <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    3548:	4a02      	ldr	r2, [pc, #8]	; (3554 <call_handler+0x28>)
    354a:	68d2      	ldr	r2, [r2, #12]
    354c:	4629      	mov	r1, r5
    354e:	4620      	mov	r0, r4
    3550:	4798      	blx	r3
    }
}
    3552:	bd70      	pop	{r4, r5, r6, pc}
    3554:	20000100 	.word	0x20000100

00003558 <next_sense_cond_call_handler>:

static void next_sense_cond_call_handler(nrfx_gpiote_pin_t     pin,
                                         nrfx_gpiote_trigger_t trigger,
                                         nrf_gpio_pin_sense_t  sense)
{
    3558:	b570      	push	{r4, r5, r6, lr}
    355a:	4606      	mov	r6, r0
    355c:	460c      	mov	r4, r1
    355e:	4615      	mov	r5, r2
    if (is_level(trigger))
    3560:	4608      	mov	r0, r1
    3562:	f003 fdca 	bl	70fa <is_level>
    3566:	b960      	cbnz	r0, 3582 <next_sense_cond_call_handler+0x2a>
    {
        /* Reconfigure sense to the opposite level, so the internal PINx.DETECT signal
         * can be deasserted. Therefore PORT event can be generated again,
         * unless some other PINx.DETECT signal is still active. */
        nrf_gpio_pin_sense_t next_sense = (sense == NRF_GPIO_PIN_SENSE_HIGH) ?
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    3568:	2d02      	cmp	r5, #2
    356a:	d026      	beq.n	35ba <next_sense_cond_call_handler+0x62>
    356c:	2102      	movs	r1, #2

        nrf_gpio_cfg_sense_set(pin, next_sense);
    356e:	4630      	mov	r0, r6
    3570:	f003 fd9b 	bl	70aa <nrf_gpio_cfg_sense_set>

        /* Invoke user handler only if the sensed pin level matches its polarity
         * configuration. Call handler unconditionally in case of toggle trigger or
         * level trigger. */
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    3574:	2c03      	cmp	r4, #3
    3576:	d024      	beq.n	35c2 <next_sense_cond_call_handler+0x6a>
    3578:	2d02      	cmp	r5, #2
    357a:	d020      	beq.n	35be <next_sense_cond_call_handler+0x66>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    357c:	2d03      	cmp	r5, #3
    357e:	d025      	beq.n	35cc <next_sense_cond_call_handler+0x74>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
        {
            call_handler(pin, trigger);
        }
    }
}
    3580:	bd70      	pop	{r4, r5, r6, pc}
        call_handler(pin, trigger);
    3582:	4621      	mov	r1, r4
    3584:	4630      	mov	r0, r6
    3586:	f7ff ffd1 	bl	352c <call_handler>
    *p_pin = pin_number & 0x1F;
    358a:	f006 031f 	and.w	r3, r6, #31
    return pin_number >> 5;
    358e:	0972      	lsrs	r2, r6, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3590:	2a01      	cmp	r2, #1
    3592:	d010      	beq.n	35b6 <next_sense_cond_call_handler+0x5e>
        case 0: return NRF_P0;
    3594:	4a0f      	ldr	r2, [pc, #60]	; (35d4 <next_sense_cond_call_handler+0x7c>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    3596:	3380      	adds	r3, #128	; 0x80
    3598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    359c:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
    35a0:	429d      	cmp	r5, r3
    35a2:	d1ed      	bne.n	3580 <next_sense_cond_call_handler+0x28>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    35a4:	2100      	movs	r1, #0
    35a6:	4630      	mov	r0, r6
    35a8:	f003 fd7f 	bl	70aa <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    35ac:	4629      	mov	r1, r5
    35ae:	4630      	mov	r0, r6
    35b0:	f003 fd7b 	bl	70aa <nrf_gpio_cfg_sense_set>
    35b4:	e7e4      	b.n	3580 <next_sense_cond_call_handler+0x28>
        case 1: return NRF_P1;
    35b6:	4a08      	ldr	r2, [pc, #32]	; (35d8 <next_sense_cond_call_handler+0x80>)
    35b8:	e7ed      	b.n	3596 <next_sense_cond_call_handler+0x3e>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    35ba:	2103      	movs	r1, #3
    35bc:	e7d7      	b.n	356e <next_sense_cond_call_handler+0x16>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    35be:	2c01      	cmp	r4, #1
    35c0:	d1dc      	bne.n	357c <next_sense_cond_call_handler+0x24>
            call_handler(pin, trigger);
    35c2:	4621      	mov	r1, r4
    35c4:	4630      	mov	r0, r6
    35c6:	f7ff ffb1 	bl	352c <call_handler>
}
    35ca:	e7d9      	b.n	3580 <next_sense_cond_call_handler+0x28>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    35cc:	2c02      	cmp	r4, #2
    35ce:	d1d7      	bne.n	3580 <next_sense_cond_call_handler+0x28>
    35d0:	e7f7      	b.n	35c2 <next_sense_cond_call_handler+0x6a>
    35d2:	bf00      	nop
    35d4:	50842500 	.word	0x50842500
    35d8:	50842800 	.word	0x50842800

000035dc <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    35dc:	f100 0208 	add.w	r2, r0, #8
    35e0:	4b0e      	ldr	r3, [pc, #56]	; (361c <release_handler+0x40>)
    35e2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    35e6:	f413 7f80 	tst.w	r3, #256	; 0x100
    35ea:	d016      	beq.n	361a <release_handler+0x3e>
{
    35ec:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    35ee:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    35f2:	4610      	mov	r0, r2
    35f4:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    35f8:	4a08      	ldr	r2, [pc, #32]	; (361c <release_handler+0x40>)
    35fa:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
    35fe:	4620      	mov	r0, r4
    3600:	f7ff ff2e 	bl	3460 <handler_in_use>
    3604:	b100      	cbz	r0, 3608 <release_handler+0x2c>
}
    3606:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
    3608:	4804      	ldr	r0, [pc, #16]	; (361c <release_handler+0x40>)
    360a:	2300      	movs	r3, #0
    360c:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    3610:	4621      	mov	r1, r4
    3612:	3074      	adds	r0, #116	; 0x74
    3614:	f7ff fdc4 	bl	31a0 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    3618:	e7f5      	b.n	3606 <release_handler+0x2a>
    361a:	4770      	bx	lr
    361c:	20000100 	.word	0x20000100

00003620 <pin_handler_trigger_uninit>:
{
    3620:	b510      	push	{r4, lr}
    3622:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
    3624:	f7ff fef4 	bl	3410 <pin_in_use_by_te>
    3628:	b150      	cbz	r0, 3640 <pin_handler_trigger_uninit+0x20>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    362a:	4620      	mov	r0, r4
    362c:	f7ff ff10 	bl	3450 <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    3630:	4b08      	ldr	r3, [pc, #32]	; (3654 <pin_handler_trigger_uninit+0x34>)
    3632:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    3636:	2200      	movs	r2, #0
    3638:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
    363c:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
    3640:	4620      	mov	r0, r4
    3642:	f7ff ffcb 	bl	35dc <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    3646:	3408      	adds	r4, #8
    3648:	4b03      	ldr	r3, [pc, #12]	; (3658 <pin_handler_trigger_uninit+0x38>)
    364a:	2200      	movs	r2, #0
    364c:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
    3650:	bd10      	pop	{r4, pc}
    3652:	bf00      	nop
    3654:	5000d000 	.word	0x5000d000
    3658:	20000100 	.word	0x20000100

0000365c <pin_handler_set>:
{
    365c:	b570      	push	{r4, r5, r6, lr}
    365e:	b082      	sub	sp, #8
    3660:	4605      	mov	r5, r0
    3662:	460e      	mov	r6, r1
    3664:	4614      	mov	r4, r2
    release_handler(pin);
    3666:	f7ff ffb9 	bl	35dc <release_handler>
    if (!handler)
    366a:	b326      	cbz	r6, 36b6 <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
    366c:	4621      	mov	r1, r4
    366e:	4630      	mov	r0, r6
    3670:	f7ff ff10 	bl	3494 <find_handler>
    if (handler_id < 0)
    3674:	1e03      	subs	r3, r0, #0
    3676:	db13      	blt.n	36a0 <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
    3678:	4910      	ldr	r1, [pc, #64]	; (36bc <pin_handler_set+0x60>)
    367a:	f841 6033 	str.w	r6, [r1, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    367e:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
    3682:	6054      	str	r4, [r2, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    3684:	f105 0008 	add.w	r0, r5, #8
    3688:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
    368c:	025b      	lsls	r3, r3, #9
    368e:	b29b      	uxth	r3, r3
    3690:	4313      	orrs	r3, r2
    3692:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    3696:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
    return NRFX_SUCCESS;
    369a:	4809      	ldr	r0, [pc, #36]	; (36c0 <pin_handler_set+0x64>)
}
    369c:	b002      	add	sp, #8
    369e:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    36a0:	f10d 0107 	add.w	r1, sp, #7
    36a4:	4807      	ldr	r0, [pc, #28]	; (36c4 <pin_handler_set+0x68>)
    36a6:	f7ff fd57 	bl	3158 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    36aa:	4b05      	ldr	r3, [pc, #20]	; (36c0 <pin_handler_set+0x64>)
    36ac:	4298      	cmp	r0, r3
    36ae:	d1f5      	bne.n	369c <pin_handler_set+0x40>
        handler_id = (int32_t)id;
    36b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    36b4:	e7e0      	b.n	3678 <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
    36b6:	4802      	ldr	r0, [pc, #8]	; (36c0 <pin_handler_set+0x64>)
    36b8:	e7f0      	b.n	369c <pin_handler_set+0x40>
    36ba:	bf00      	nop
    36bc:	20000100 	.word	0x20000100
    36c0:	0bad0000 	.word	0x0bad0000
    36c4:	20000174 	.word	0x20000174

000036c8 <port_event_handle>:
    }
    return false;
}

static void port_event_handle(void)
{
    36c8:	b570      	push	{r4, r5, r6, lr}
    36ca:	b082      	sub	sp, #8
    uint32_t latch[GPIO_COUNT];

    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);
    36cc:	466a      	mov	r2, sp
    36ce:	2102      	movs	r1, #2
    36d0:	2000      	movs	r0, #0
    36d2:	f7ff fe73 	bl	33bc <nrf_gpio_latches_read_and_clear>
    36d6:	e03e      	b.n	3756 <port_event_handle+0x8e>
    36d8:	4e21      	ldr	r6, [pc, #132]	; (3760 <port_event_handle+0x98>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    36da:	f105 0380 	add.w	r3, r5, #128	; 0x80
    36de:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);

                nrf_bitmask_bit_clear(pin, latch);
                sense = nrf_gpio_pin_sense_get(pin);

                next_sense_cond_call_handler(pin, trigger, sense);
    36e2:	f3c2 4201 	ubfx	r2, r2, #16, #2
    36e6:	f7ff ff37 	bl	3558 <next_sense_cond_call_handler>
    reg->LATCH = (1 << pin_number);
    36ea:	2301      	movs	r3, #1
    36ec:	40ab      	lsls	r3, r5
    36ee:	6233      	str	r3, [r6, #32]
            while (latch[i])
    36f0:	ab02      	add	r3, sp, #8
    36f2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    36f6:	f853 0c08 	ldr.w	r0, [r3, #-8]
    36fa:	b1f8      	cbz	r0, 373c <port_event_handle+0x74>
                uint32_t pin = NRF_CTZ(latch[i]);
    36fc:	fa90 f0a0 	rbit	r0, r0
    3700:	fab0 f080 	clz	r0, r0
                pin += 32 * i;
    3704:	eb00 1044 	add.w	r0, r0, r4, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3708:	f100 0208 	add.w	r2, r0, #8
    370c:	4b15      	ldr	r3, [pc, #84]	; (3764 <port_event_handle+0x9c>)
    370e:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
    3712:	f3c1 0182 	ubfx	r1, r1, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    3716:	08c5      	lsrs	r5, r0, #3
    bit = BITMASK_RELBIT_GET(bit);
    3718:	f000 0607 	and.w	r6, r0, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    371c:	f81d 2005 	ldrb.w	r2, [sp, r5]
    3720:	2301      	movs	r3, #1
    3722:	40b3      	lsls	r3, r6
    3724:	43db      	mvns	r3, r3
    3726:	b25b      	sxtb	r3, r3
    3728:	4013      	ands	r3, r2
    372a:	f80d 3005 	strb.w	r3, [sp, r5]
    *p_pin = pin_number & 0x1F;
    372e:	f000 051f 	and.w	r5, r0, #31
    return pin_number >> 5;
    3732:	0943      	lsrs	r3, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3734:	2b01      	cmp	r3, #1
    3736:	d0cf      	beq.n	36d8 <port_event_handle+0x10>
        case 0: return NRF_P0;
    3738:	4e0b      	ldr	r6, [pc, #44]	; (3768 <port_event_handle+0xa0>)
    373a:	e7ce      	b.n	36da <port_event_handle+0x12>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    373c:	3401      	adds	r4, #1
    373e:	2c01      	cmp	r4, #1
    3740:	d9d6      	bls.n	36f0 <port_event_handle+0x28>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3742:	4b0a      	ldr	r3, [pc, #40]	; (376c <port_event_handle+0xa4>)
    3744:	2200      	movs	r2, #0
    3746:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    374a:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        }

        /* All pins have been handled, clear PORT, check latch again in case
         * something came between deciding to exit and clearing PORT event. */
        nrf_gpiote_event_clear(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT);
    } while (latch_pending_read_and_check(latch));
    374e:	4668      	mov	r0, sp
    3750:	f003 fcd8 	bl	7104 <latch_pending_read_and_check>
    3754:	b108      	cbz	r0, 375a <port_event_handle+0x92>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    3756:	2400      	movs	r4, #0
    3758:	e7f1      	b.n	373e <port_event_handle+0x76>
}
    375a:	b002      	add	sp, #8
    375c:	bd70      	pop	{r4, r5, r6, pc}
    375e:	bf00      	nop
    3760:	50842800 	.word	0x50842800
    3764:	20000100 	.word	0x20000100
    3768:	50842500 	.word	0x50842500
    376c:	5000d000 	.word	0x5000d000

00003770 <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
    3770:	b538      	push	{r3, r4, r5, lr}
    3772:	4604      	mov	r4, r0
    while (mask)
    3774:	e018      	b.n	37a8 <gpiote_evt_handle+0x38>
    {
        uint32_t ch = NRF_CTZ(mask);
    3776:	fa94 f3a4 	rbit	r3, r4
    377a:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    377e:	2201      	movs	r2, #1
    3780:	409a      	lsls	r2, r3
    3782:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    3786:	4a0a      	ldr	r2, [pc, #40]	; (37b0 <gpiote_evt_handle+0x40>)
    3788:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    378c:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    3790:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    3794:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    3798:	f3c0 4001 	ubfx	r0, r0, #16, #2
    379c:	f003 fcab 	bl	70f6 <gpiote_polarity_to_trigger>
    37a0:	4601      	mov	r1, r0
    37a2:	4628      	mov	r0, r5
    37a4:	f7ff fec2 	bl	352c <call_handler>
    while (mask)
    37a8:	2c00      	cmp	r4, #0
    37aa:	d1e4      	bne.n	3776 <gpiote_evt_handle+0x6>
    }
}
    37ac:	bd38      	pop	{r3, r4, r5, pc}
    37ae:	bf00      	nop
    37b0:	5000d000 	.word	0x5000d000

000037b4 <nrfx_gpiote_input_configure>:
{
    37b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    37b8:	b084      	sub	sp, #16
    37ba:	4604      	mov	r4, r0
    37bc:	4615      	mov	r5, r2
    37be:	461e      	mov	r6, r3
    if (p_input_config)
    37c0:	b309      	cbz	r1, 3806 <nrfx_gpiote_input_configure+0x52>
    37c2:	460f      	mov	r7, r1
        if (pin_is_task_output(pin))
    37c4:	f003 fc81 	bl	70ca <pin_is_task_output>
    37c8:	2800      	cmp	r0, #0
    37ca:	d13f      	bne.n	384c <nrfx_gpiote_input_configure+0x98>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    37cc:	2300      	movs	r3, #0
    37ce:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    37d2:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    37d6:	9301      	str	r3, [sp, #4]
    37d8:	9300      	str	r3, [sp, #0]
    37da:	463b      	mov	r3, r7
    37dc:	f10d 020f 	add.w	r2, sp, #15
    37e0:	f10d 010e 	add.w	r1, sp, #14
    37e4:	4620      	mov	r0, r4
    37e6:	f7ff fd77 	bl	32d8 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    37ea:	4a39      	ldr	r2, [pc, #228]	; (38d0 <nrfx_gpiote_input_configure+0x11c>)
    37ec:	f104 0108 	add.w	r1, r4, #8
    37f0:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    37f4:	f023 0302 	bic.w	r3, r3, #2
    37f8:	b29b      	uxth	r3, r3
    37fa:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    37fe:	f043 0301 	orr.w	r3, r3, #1
    3802:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    3806:	b1bd      	cbz	r5, 3838 <nrfx_gpiote_input_configure+0x84>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    3808:	782f      	ldrb	r7, [r5, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    380a:	f8d5 8004 	ldr.w	r8, [r5, #4]
        if (pin_is_output(pin))
    380e:	4620      	mov	r0, r4
    3810:	f7ff fe14 	bl	343c <pin_is_output>
    3814:	b1e0      	cbz	r0, 3850 <nrfx_gpiote_input_configure+0x9c>
            if (use_evt)
    3816:	f1b8 0f00 	cmp.w	r8, #0
    381a:	d153      	bne.n	38c4 <nrfx_gpiote_input_configure+0x110>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    381c:	4a2c      	ldr	r2, [pc, #176]	; (38d0 <nrfx_gpiote_input_configure+0x11c>)
    381e:	f104 0108 	add.w	r1, r4, #8
    3822:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    3826:	f023 031c 	bic.w	r3, r3, #28
    382a:	b29b      	uxth	r3, r3
    382c:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    3830:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
    3834:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
    3838:	2e00      	cmp	r6, #0
    383a:	d047      	beq.n	38cc <nrfx_gpiote_input_configure+0x118>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    383c:	6872      	ldr	r2, [r6, #4]
    383e:	6831      	ldr	r1, [r6, #0]
    3840:	4620      	mov	r0, r4
    3842:	f7ff ff0b 	bl	365c <pin_handler_set>
}
    3846:	b004      	add	sp, #16
    3848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return NRFX_ERROR_INVALID_PARAM;
    384c:	4821      	ldr	r0, [pc, #132]	; (38d4 <nrfx_gpiote_input_configure+0x120>)
    384e:	e7fa      	b.n	3846 <nrfx_gpiote_input_configure+0x92>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    3850:	4a1f      	ldr	r2, [pc, #124]	; (38d0 <nrfx_gpiote_input_configure+0x11c>)
    3852:	f104 0108 	add.w	r1, r4, #8
    3856:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    385a:	f023 0320 	bic.w	r3, r3, #32
    385e:	04db      	lsls	r3, r3, #19
    3860:	0cdb      	lsrs	r3, r3, #19
    3862:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            if (use_evt)
    3866:	f1b8 0f00 	cmp.w	r8, #0
    386a:	d0d7      	beq.n	381c <nrfx_gpiote_input_configure+0x68>
                if (!edge)
    386c:	2f03      	cmp	r7, #3
    386e:	d82b      	bhi.n	38c8 <nrfx_gpiote_input_configure+0x114>
                uint8_t ch = *p_trigger_config->p_in_channel;
    3870:	686b      	ldr	r3, [r5, #4]
    3872:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    3874:	b947      	cbnz	r7, 3888 <nrfx_gpiote_input_configure+0xd4>
    p_reg->CONFIG[idx] = 0;
    3876:	4b18      	ldr	r3, [pc, #96]	; (38d8 <nrfx_gpiote_input_configure+0x124>)
    3878:	f505 75a2 	add.w	r5, r5, #324	; 0x144
    387c:	2200      	movs	r2, #0
    387e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    p_reg->CONFIG[idx] = 0;
    3882:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#endif
}
    3886:	e7c9      	b.n	381c <nrfx_gpiote_input_configure+0x68>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
    3888:	4638      	mov	r0, r7
    388a:	f003 fc35 	bl	70f8 <gpiote_trigger_to_polarity>
    388e:	4603      	mov	r3, r0
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    3890:	4811      	ldr	r0, [pc, #68]	; (38d8 <nrfx_gpiote_input_configure+0x124>)
    3892:	f505 71a2 	add.w	r1, r5, #324	; 0x144
    3896:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
    389a:	f022 0203 	bic.w	r2, r2, #3
    389e:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
                    nrf_gpiote_event_configure(NRF_GPIOTE, ch, pin, polarity);
    38a2:	4622      	mov	r2, r4
    38a4:	4629      	mov	r1, r5
    38a6:	f003 fbc8 	bl	703a <nrf_gpiote_event_configure>
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    38aa:	4a09      	ldr	r2, [pc, #36]	; (38d0 <nrfx_gpiote_input_configure+0x11c>)
    38ac:	f104 0108 	add.w	r1, r4, #8
    38b0:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    38b4:	036d      	lsls	r5, r5, #13
    38b6:	b2ad      	uxth	r5, r5
    38b8:	432b      	orrs	r3, r5
    38ba:	f043 0320 	orr.w	r3, r3, #32
    38be:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    38c2:	e7ab      	b.n	381c <nrfx_gpiote_input_configure+0x68>
                return NRFX_ERROR_INVALID_PARAM;
    38c4:	4803      	ldr	r0, [pc, #12]	; (38d4 <nrfx_gpiote_input_configure+0x120>)
    38c6:	e7be      	b.n	3846 <nrfx_gpiote_input_configure+0x92>
                    return NRFX_ERROR_INVALID_PARAM;
    38c8:	4802      	ldr	r0, [pc, #8]	; (38d4 <nrfx_gpiote_input_configure+0x120>)
    38ca:	e7bc      	b.n	3846 <nrfx_gpiote_input_configure+0x92>
        err = NRFX_SUCCESS;
    38cc:	4803      	ldr	r0, [pc, #12]	; (38dc <nrfx_gpiote_input_configure+0x128>)
    38ce:	e7ba      	b.n	3846 <nrfx_gpiote_input_configure+0x92>
    38d0:	20000100 	.word	0x20000100
    38d4:	0bad0004 	.word	0x0bad0004
    38d8:	5000d000 	.word	0x5000d000
    38dc:	0bad0000 	.word	0x0bad0000

000038e0 <nrfx_gpiote_output_configure>:
{
    38e0:	b570      	push	{r4, r5, r6, lr}
    38e2:	b084      	sub	sp, #16
    38e4:	4604      	mov	r4, r0
    38e6:	4615      	mov	r5, r2
    if (p_config)
    38e8:	b329      	cbz	r1, 3936 <nrfx_gpiote_output_configure+0x56>
    38ea:	460e      	mov	r6, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    38ec:	f003 fbfc 	bl	70e8 <pin_is_input>
    38f0:	b120      	cbz	r0, 38fc <nrfx_gpiote_output_configure+0x1c>
    38f2:	4620      	mov	r0, r4
    38f4:	f7ff fd8c 	bl	3410 <pin_in_use_by_te>
    38f8:	2800      	cmp	r0, #0
    38fa:	d13a      	bne.n	3972 <nrfx_gpiote_output_configure+0x92>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    38fc:	4620      	mov	r0, r4
    38fe:	f7ff fd91 	bl	3424 <pin_has_trigger>
    3902:	b110      	cbz	r0, 390a <nrfx_gpiote_output_configure+0x2a>
    3904:	7873      	ldrb	r3, [r6, #1]
    3906:	2b01      	cmp	r3, #1
    3908:	d033      	beq.n	3972 <nrfx_gpiote_output_configure+0x92>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    390a:	2301      	movs	r3, #1
    390c:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    3910:	2300      	movs	r3, #0
    3912:	9301      	str	r3, [sp, #4]
    3914:	9600      	str	r6, [sp, #0]
    3916:	1cb3      	adds	r3, r6, #2
    3918:	1c72      	adds	r2, r6, #1
    391a:	f10d 010f 	add.w	r1, sp, #15
    391e:	4620      	mov	r0, r4
    3920:	f7ff fcda 	bl	32d8 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    3924:	4a20      	ldr	r2, [pc, #128]	; (39a8 <nrfx_gpiote_output_configure+0xc8>)
    3926:	f104 0108 	add.w	r1, r4, #8
    392a:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    392e:	f043 0303 	orr.w	r3, r3, #3
    3932:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    3936:	b395      	cbz	r5, 399e <nrfx_gpiote_output_configure+0xbe>
        if (pin_is_input(pin))
    3938:	4620      	mov	r0, r4
    393a:	f003 fbd5 	bl	70e8 <pin_is_input>
    393e:	bb80      	cbnz	r0, 39a2 <nrfx_gpiote_output_configure+0xc2>
        uint32_t ch = p_task_config->task_ch;
    3940:	782e      	ldrb	r6, [r5, #0]
    p_reg->CONFIG[idx] = 0;
    3942:	4b1a      	ldr	r3, [pc, #104]	; (39ac <nrfx_gpiote_output_configure+0xcc>)
    3944:	f506 72a2 	add.w	r2, r6, #324	; 0x144
    3948:	2100      	movs	r1, #0
    394a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    p_reg->CONFIG[idx] = 0;
    394e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    3952:	4a15      	ldr	r2, [pc, #84]	; (39a8 <nrfx_gpiote_output_configure+0xc8>)
    3954:	f104 0108 	add.w	r1, r4, #8
    3958:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    395c:	f023 0320 	bic.w	r3, r3, #32
    3960:	04db      	lsls	r3, r3, #19
    3962:	0cdb      	lsrs	r3, r3, #19
    3964:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    3968:	786b      	ldrb	r3, [r5, #1]
    396a:	b923      	cbnz	r3, 3976 <nrfx_gpiote_output_configure+0x96>
    return NRFX_SUCCESS;
    396c:	4810      	ldr	r0, [pc, #64]	; (39b0 <nrfx_gpiote_output_configure+0xd0>)
}
    396e:	b004      	add	sp, #16
    3970:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_INVALID_PARAM;
    3972:	4810      	ldr	r0, [pc, #64]	; (39b4 <nrfx_gpiote_output_configure+0xd4>)
    3974:	e7fb      	b.n	396e <nrfx_gpiote_output_configure+0x8e>
                                      p_task_config->init_val);
    3976:	78aa      	ldrb	r2, [r5, #2]
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    3978:	9200      	str	r2, [sp, #0]
    397a:	4622      	mov	r2, r4
    397c:	4631      	mov	r1, r6
    397e:	480b      	ldr	r0, [pc, #44]	; (39ac <nrfx_gpiote_output_configure+0xcc>)
    3980:	f003 fb74 	bl	706c <nrf_gpiote_task_configure>
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    3984:	4a08      	ldr	r2, [pc, #32]	; (39a8 <nrfx_gpiote_output_configure+0xc8>)
    3986:	3408      	adds	r4, #8
    3988:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
    398c:	0376      	lsls	r6, r6, #13
    398e:	b2b6      	uxth	r6, r6
    3990:	4333      	orrs	r3, r6
    3992:	f043 0320 	orr.w	r3, r3, #32
    3996:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    return NRFX_SUCCESS;
    399a:	4805      	ldr	r0, [pc, #20]	; (39b0 <nrfx_gpiote_output_configure+0xd0>)
    399c:	e7e7      	b.n	396e <nrfx_gpiote_output_configure+0x8e>
    399e:	4804      	ldr	r0, [pc, #16]	; (39b0 <nrfx_gpiote_output_configure+0xd0>)
    39a0:	e7e5      	b.n	396e <nrfx_gpiote_output_configure+0x8e>
            return NRFX_ERROR_INVALID_PARAM;
    39a2:	4804      	ldr	r0, [pc, #16]	; (39b4 <nrfx_gpiote_output_configure+0xd4>)
    39a4:	e7e3      	b.n	396e <nrfx_gpiote_output_configure+0x8e>
    39a6:	bf00      	nop
    39a8:	20000100 	.word	0x20000100
    39ac:	5000d000 	.word	0x5000d000
    39b0:	0bad0000 	.word	0x0bad0000
    39b4:	0bad0004 	.word	0x0bad0004

000039b8 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    39b8:	4b01      	ldr	r3, [pc, #4]	; (39c0 <nrfx_gpiote_global_callback_set+0x8>)
    39ba:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
    39bc:	60d9      	str	r1, [r3, #12]
}
    39be:	4770      	bx	lr
    39c0:	20000100 	.word	0x20000100

000039c4 <nrfx_gpiote_channel_get>:
{
    39c4:	b538      	push	{r3, r4, r5, lr}
    39c6:	4604      	mov	r4, r0
    39c8:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin))
    39ca:	f7ff fd21 	bl	3410 <pin_in_use_by_te>
    39ce:	b140      	cbz	r0, 39e2 <nrfx_gpiote_channel_get+0x1e>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    39d0:	f104 0008 	add.w	r0, r4, #8
    39d4:	4b04      	ldr	r3, [pc, #16]	; (39e8 <nrfx_gpiote_channel_get+0x24>)
    39d6:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
    39da:	0b5b      	lsrs	r3, r3, #13
    39dc:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
    39de:	4803      	ldr	r0, [pc, #12]	; (39ec <nrfx_gpiote_channel_get+0x28>)
}
    39e0:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
    39e2:	4803      	ldr	r0, [pc, #12]	; (39f0 <nrfx_gpiote_channel_get+0x2c>)
    39e4:	e7fc      	b.n	39e0 <nrfx_gpiote_channel_get+0x1c>
    39e6:	bf00      	nop
    39e8:	20000100 	.word	0x20000100
    39ec:	0bad0000 	.word	0x0bad0000
    39f0:	0bad0004 	.word	0x0bad0004

000039f4 <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    39f4:	4b0f      	ldr	r3, [pc, #60]	; (3a34 <nrfx_gpiote_init+0x40>)
    39f6:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    39fa:	b10b      	cbz	r3, 3a00 <nrfx_gpiote_init+0xc>
        return err_code;
    39fc:	480e      	ldr	r0, [pc, #56]	; (3a38 <nrfx_gpiote_init+0x44>)
}
    39fe:	4770      	bx	lr
{
    3a00:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    3a02:	4c0e      	ldr	r4, [pc, #56]	; (3a3c <nrfx_gpiote_init+0x48>)
    3a04:	2260      	movs	r2, #96	; 0x60
    3a06:	2100      	movs	r1, #0
    3a08:	4620      	mov	r0, r4
    3a0a:	f002 fb7e 	bl	610a <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    3a0e:	200d      	movs	r0, #13
    3a10:	f002 fa65 	bl	5ede <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3a14:	4b0a      	ldr	r3, [pc, #40]	; (3a40 <nrfx_gpiote_init+0x4c>)
    3a16:	2200      	movs	r2, #0
    3a18:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    3a1c:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    3a20:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    3a24:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    3a28:	2301      	movs	r3, #1
    3a2a:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    3a2e:	6663      	str	r3, [r4, #100]	; 0x64
    return err_code;
    3a30:	4804      	ldr	r0, [pc, #16]	; (3a44 <nrfx_gpiote_init+0x50>)
}
    3a32:	bd10      	pop	{r4, pc}
    3a34:	20000100 	.word	0x20000100
    3a38:	0bad0005 	.word	0x0bad0005
    3a3c:	20000110 	.word	0x20000110
    3a40:	5000d000 	.word	0x5000d000
    3a44:	0bad0000 	.word	0x0bad0000

00003a48 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    3a48:	4b03      	ldr	r3, [pc, #12]	; (3a58 <nrfx_gpiote_is_init+0x10>)
    3a4a:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    3a4e:	3800      	subs	r0, #0
    3a50:	bf18      	it	ne
    3a52:	2001      	movne	r0, #1
    3a54:	4770      	bx	lr
    3a56:	bf00      	nop
    3a58:	20000100 	.word	0x20000100

00003a5c <nrfx_gpiote_channel_free>:
{
    3a5c:	b508      	push	{r3, lr}
    3a5e:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    3a60:	4801      	ldr	r0, [pc, #4]	; (3a68 <nrfx_gpiote_channel_free+0xc>)
    3a62:	f7ff fb9d 	bl	31a0 <nrfx_flag32_free>
}
    3a66:	bd08      	pop	{r3, pc}
    3a68:	20000170 	.word	0x20000170

00003a6c <nrfx_gpiote_channel_alloc>:
{
    3a6c:	b508      	push	{r3, lr}
    3a6e:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    3a70:	4801      	ldr	r0, [pc, #4]	; (3a78 <nrfx_gpiote_channel_alloc+0xc>)
    3a72:	f7ff fb71 	bl	3158 <nrfx_flag32_alloc>
}
    3a76:	bd08      	pop	{r3, pc}
    3a78:	20000170 	.word	0x20000170

00003a7c <nrfx_gpiote_trigger_enable>:
{
    3a7c:	b538      	push	{r3, r4, r5, lr}
    3a7e:	4604      	mov	r4, r0
    3a80:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3a82:	f7ff fcc5 	bl	3410 <pin_in_use_by_te>
    3a86:	b300      	cbz	r0, 3aca <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x32>
    3a88:	4620      	mov	r0, r4
    3a8a:	f003 fb2d 	bl	70e8 <pin_is_input>
    3a8e:	b1e0      	cbz	r0, 3aca <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x32>
        uint8_t ch = pin_te_get(pin);
    3a90:	4620      	mov	r0, r4
    3a92:	f7ff fcdd 	bl	3450 <pin_te_get>
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    3a96:	0083      	lsls	r3, r0, #2
    3a98:	f503 7380 	add.w	r3, r3, #256	; 0x100
    return ((uint32_t)p_reg + event);
    3a9c:	b29b      	uxth	r3, r3
    3a9e:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    3aa2:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3aa6:	2200      	movs	r2, #0
    3aa8:	601a      	str	r2, [r3, #0]
    3aaa:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    3aac:	4a0b      	ldr	r2, [pc, #44]	; (3adc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x44>)
    3aae:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    3ab2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    3ab6:	f043 0301 	orr.w	r3, r3, #1
    3aba:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
    3abe:	b15d      	cbz	r5, 3ad8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x40>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    3ac0:	2301      	movs	r3, #1
    3ac2:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    3ac4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    3ac8:	e006      	b.n	3ad8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x40>
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    3aca:	4620      	mov	r0, r4
    3acc:	f7ff fcf8 	bl	34c0 <get_initial_sense>
    3ad0:	4601      	mov	r1, r0
    3ad2:	4620      	mov	r0, r4
    3ad4:	f003 fae9 	bl	70aa <nrf_gpio_cfg_sense_set>
}
    3ad8:	bd38      	pop	{r3, r4, r5, pc}
    3ada:	bf00      	nop
    3adc:	5000d000 	.word	0x5000d000

00003ae0 <nrfx_gpiote_trigger_disable>:
{
    3ae0:	b510      	push	{r4, lr}
    3ae2:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3ae4:	f7ff fc94 	bl	3410 <pin_in_use_by_te>
    3ae8:	b1a0      	cbz	r0, 3b14 <nrfx_gpiote_trigger_disable+0x34>
    3aea:	4620      	mov	r0, r4
    3aec:	f003 fafc 	bl	70e8 <pin_is_input>
    3af0:	b180      	cbz	r0, 3b14 <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
    3af2:	4620      	mov	r0, r4
    3af4:	f7ff fcac 	bl	3450 <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    3af8:	2201      	movs	r2, #1
    3afa:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    3afc:	4b08      	ldr	r3, [pc, #32]	; (3b20 <nrfx_gpiote_trigger_disable+0x40>)
    3afe:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    3b02:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    3b06:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    3b0a:	f022 0203 	bic.w	r2, r2, #3
    3b0e:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
    3b12:	e003      	b.n	3b1c <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    3b14:	2100      	movs	r1, #0
    3b16:	4620      	mov	r0, r4
    3b18:	f003 fac7 	bl	70aa <nrf_gpio_cfg_sense_set>
}
    3b1c:	bd10      	pop	{r4, pc}
    3b1e:	bf00      	nop
    3b20:	5000d000 	.word	0x5000d000

00003b24 <nrfx_gpiote_pin_uninit>:
{
    3b24:	b510      	push	{r4, lr}
    3b26:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    3b28:	f7ff fc68 	bl	33fc <pin_in_use>
    3b2c:	b908      	cbnz	r0, 3b32 <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
    3b2e:	4806      	ldr	r0, [pc, #24]	; (3b48 <nrfx_gpiote_pin_uninit+0x24>)
}
    3b30:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_disable(pin);
    3b32:	4620      	mov	r0, r4
    3b34:	f7ff ffd4 	bl	3ae0 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    3b38:	4620      	mov	r0, r4
    3b3a:	f7ff fd71 	bl	3620 <pin_handler_trigger_uninit>
    nrf_gpio_cfg_default(pin);
    3b3e:	4620      	mov	r0, r4
    3b40:	f7ff fc26 	bl	3390 <nrf_gpio_cfg_default>
    return NRFX_SUCCESS;
    3b44:	4801      	ldr	r0, [pc, #4]	; (3b4c <nrfx_gpiote_pin_uninit+0x28>)
    3b46:	e7f3      	b.n	3b30 <nrfx_gpiote_pin_uninit+0xc>
    3b48:	0bad0004 	.word	0x0bad0004
    3b4c:	0bad0000 	.word	0x0bad0000

00003b50 <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
    3b50:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    3b52:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    3b54:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3b58:	2100      	movs	r1, #0
    uint32_t status = 0;
    3b5a:	460c      	mov	r4, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3b5c:	e003      	b.n	3b66 <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
    3b5e:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    3b60:	3304      	adds	r3, #4
    3b62:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3b64:	3101      	adds	r1, #1
    3b66:	2907      	cmp	r1, #7
    3b68:	d814      	bhi.n	3b94 <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3b6a:	f103 42a0 	add.w	r2, r3, #1342177280	; 0x50000000
    3b6e:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    3b72:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    3b74:	2a00      	cmp	r2, #0
    3b76:	d0f2      	beq.n	3b5e <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
    3b78:	4a0c      	ldr	r2, [pc, #48]	; (3bac <nrfx_gpiote_irq_handler+0x5c>)
    3b7a:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    3b7e:	4210      	tst	r0, r2
    3b80:	d0ed      	beq.n	3b5e <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
    3b82:	f103 42a0 	add.w	r2, r3, #1342177280	; 0x50000000
    3b86:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3b8a:	2500      	movs	r5, #0
    3b8c:	6015      	str	r5, [r2, #0]
    3b8e:	6812      	ldr	r2, [r2, #0]
            status |= mask;
    3b90:	4304      	orrs	r4, r0
    3b92:	e7e4      	b.n	3b5e <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3b94:	4b05      	ldr	r3, [pc, #20]	; (3bac <nrfx_gpiote_irq_handler+0x5c>)
    3b96:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    3b9a:	b91b      	cbnz	r3, 3ba4 <nrfx_gpiote_irq_handler+0x54>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
    3b9c:	4620      	mov	r0, r4
    3b9e:	f7ff fde7 	bl	3770 <gpiote_evt_handle>
}
    3ba2:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
    3ba4:	f7ff fd90 	bl	36c8 <port_event_handle>
    3ba8:	e7f8      	b.n	3b9c <nrfx_gpiote_irq_handler+0x4c>
    3baa:	bf00      	nop
    3bac:	5000d000 	.word	0x5000d000

00003bb0 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
    3bb0:	4b03      	ldr	r3, [pc, #12]	; (3bc0 <z_device_state_init+0x10>)

	while (dev < __device_end) {
    3bb2:	e000      	b.n	3bb6 <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
    3bb4:	3318      	adds	r3, #24
	while (dev < __device_end) {
    3bb6:	4a03      	ldr	r2, [pc, #12]	; (3bc4 <z_device_state_init+0x14>)
    3bb8:	4293      	cmp	r3, r2
    3bba:	d3fb      	bcc.n	3bb4 <z_device_state_init+0x4>
	}
}
    3bbc:	4770      	bx	lr
    3bbe:	bf00      	nop
    3bc0:	00007974 	.word	0x00007974
    3bc4:	000079ec 	.word	0x000079ec

00003bc8 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
static void z_sys_init_run_level(enum init_level level)
{
    3bc8:	b570      	push	{r4, r5, r6, lr}
    3bca:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3bcc:	4b11      	ldr	r3, [pc, #68]	; (3c14 <z_sys_init_run_level+0x4c>)
    3bce:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    3bd2:	e009      	b.n	3be8 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
    3bd4:	4240      	negs	r0, r0
    3bd6:	e017      	b.n	3c08 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    3bd8:	68eb      	ldr	r3, [r5, #12]
    3bda:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
    3bdc:	68ea      	ldr	r2, [r5, #12]
    3bde:	7853      	ldrb	r3, [r2, #1]
    3be0:	f043 0301 	orr.w	r3, r3, #1
    3be4:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3be6:	3408      	adds	r4, #8
    3be8:	1c73      	adds	r3, r6, #1
    3bea:	4a0a      	ldr	r2, [pc, #40]	; (3c14 <z_sys_init_run_level+0x4c>)
    3bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3bf0:	42a3      	cmp	r3, r4
    3bf2:	d90d      	bls.n	3c10 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
    3bf4:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
    3bf6:	6823      	ldr	r3, [r4, #0]
    3bf8:	4628      	mov	r0, r5
    3bfa:	4798      	blx	r3
		if (dev != NULL) {
    3bfc:	2d00      	cmp	r5, #0
    3bfe:	d0f2      	beq.n	3be6 <z_sys_init_run_level+0x1e>
			if (rc != 0) {
    3c00:	2800      	cmp	r0, #0
    3c02:	d0eb      	beq.n	3bdc <z_sys_init_run_level+0x14>
				if (rc < 0) {
    3c04:	2800      	cmp	r0, #0
    3c06:	dbe5      	blt.n	3bd4 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
    3c08:	28ff      	cmp	r0, #255	; 0xff
    3c0a:	dde5      	ble.n	3bd8 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
    3c0c:	20ff      	movs	r0, #255	; 0xff
    3c0e:	e7e3      	b.n	3bd8 <z_sys_init_run_level+0x10>
		}
	}
}
    3c10:	bd70      	pop	{r4, r5, r6, pc}
    3c12:	bf00      	nop
    3c14:	00007ffc 	.word	0x00007ffc

00003c18 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    3c18:	b510      	push	{r4, lr}
    3c1a:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
    3c1c:	23b8      	movs	r3, #184	; 0xb8
    3c1e:	4c11      	ldr	r4, [pc, #68]	; (3c64 <init_idle_thread+0x4c>)
    3c20:	fb03 4400 	mla	r4, r3, r0, r4
	k_thread_stack_t *stack = z_idle_stacks[i];
    3c24:	eb00 0c80 	add.w	ip, r0, r0, lsl #2
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    3c28:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    3c2c:	4b0e      	ldr	r3, [pc, #56]	; (3c68 <init_idle_thread+0x50>)
    3c2e:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
	z_setup_new_thread(thread, stack,
    3c32:	4a0e      	ldr	r2, [pc, #56]	; (3c6c <init_idle_thread+0x54>)
    3c34:	9205      	str	r2, [sp, #20]
    3c36:	2201      	movs	r2, #1
    3c38:	9204      	str	r2, [sp, #16]
    3c3a:	220f      	movs	r2, #15
    3c3c:	9203      	str	r2, [sp, #12]
    3c3e:	2200      	movs	r2, #0
    3c40:	9202      	str	r2, [sp, #8]
    3c42:	9201      	str	r2, [sp, #4]
    3c44:	9300      	str	r3, [sp, #0]
    3c46:	4b0a      	ldr	r3, [pc, #40]	; (3c70 <init_idle_thread+0x58>)
    3c48:	f44f 72a0 	mov.w	r2, #320	; 0x140
    3c4c:	4909      	ldr	r1, [pc, #36]	; (3c74 <init_idle_thread+0x5c>)
    3c4e:	eb01 118c 	add.w	r1, r1, ip, lsl #6
    3c52:	4620      	mov	r0, r4
    3c54:	f000 f95c 	bl	3f10 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3c58:	7b63      	ldrb	r3, [r4, #13]
    3c5a:	f023 0304 	bic.w	r3, r3, #4
    3c5e:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    3c60:	b006      	add	sp, #24
    3c62:	bd10      	pop	{r4, pc}
    3c64:	20000260 	.word	0x20000260
    3c68:	20000ae8 	.word	0x20000ae8
    3c6c:	00007fec 	.word	0x00007fec
    3c70:	0000406d 	.word	0x0000406d
    3c74:	20001508 	.word	0x20001508

00003c78 <bg_thread_main>:
{
    3c78:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    3c7a:	4b0a      	ldr	r3, [pc, #40]	; (3ca4 <bg_thread_main+0x2c>)
    3c7c:	2201      	movs	r2, #1
    3c7e:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    3c80:	2003      	movs	r0, #3
    3c82:	f7ff ffa1 	bl	3bc8 <z_sys_init_run_level>
	boot_banner();
    3c86:	f001 f97f 	bl	4f88 <boot_banner>
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    3c8a:	2004      	movs	r0, #4
    3c8c:	f7ff ff9c 	bl	3bc8 <z_sys_init_run_level>
	z_init_static_threads();
    3c90:	f000 f9a2 	bl	3fd8 <z_init_static_threads>
	main();
    3c94:	f7fc fbc6 	bl	424 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    3c98:	4a03      	ldr	r2, [pc, #12]	; (3ca8 <bg_thread_main+0x30>)
    3c9a:	7b13      	ldrb	r3, [r2, #12]
    3c9c:	f023 0301 	bic.w	r3, r3, #1
    3ca0:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    3ca2:	bd08      	pop	{r3, pc}
    3ca4:	20000d07 	.word	0x20000d07
    3ca8:	20000318 	.word	0x20000318

00003cac <switch_to_main_thread>:
	return stack_ptr;
}

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
    3cac:	b508      	push	{r3, lr}
    3cae:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    3cb0:	4a01      	ldr	r2, [pc, #4]	; (3cb8 <switch_to_main_thread+0xc>)
    3cb2:	4802      	ldr	r0, [pc, #8]	; (3cbc <switch_to_main_thread+0x10>)
    3cb4:	f7fd fc4e 	bl	1554 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    3cb8:	00003c79 	.word	0x00003c79
    3cbc:	20000318 	.word	0x20000318

00003cc0 <z_bss_zero>:
{
    3cc0:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    3cc2:	4803      	ldr	r0, [pc, #12]	; (3cd0 <z_bss_zero+0x10>)
    3cc4:	4a03      	ldr	r2, [pc, #12]	; (3cd4 <z_bss_zero+0x14>)
    3cc6:	1a12      	subs	r2, r2, r0
    3cc8:	2100      	movs	r1, #0
    3cca:	f003 fa58 	bl	717e <z_early_memset>
}
    3cce:	bd08      	pop	{r3, pc}
    3cd0:	20000240 	.word	0x20000240
    3cd4:	20000d08 	.word	0x20000d08

00003cd8 <z_init_cpu>:
{
    3cd8:	b510      	push	{r4, lr}
    3cda:	4604      	mov	r4, r0
	init_idle_thread(id);
    3cdc:	f7ff ff9c 	bl	3c18 <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    3ce0:	23b8      	movs	r3, #184	; 0xb8
    3ce2:	490a      	ldr	r1, [pc, #40]	; (3d0c <z_init_cpu+0x34>)
    3ce4:	fb03 1104 	mla	r1, r3, r4, r1
    3ce8:	4a09      	ldr	r2, [pc, #36]	; (3d10 <z_init_cpu+0x38>)
    3cea:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    3cee:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    3cf2:	60d9      	str	r1, [r3, #12]
	_kernel.cpus[id].id = id;
    3cf4:	751c      	strb	r4, [r3, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    3cf6:	4b07      	ldr	r3, [pc, #28]	; (3d14 <z_init_cpu+0x3c>)
    3cf8:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
    3cfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
	_kernel.cpus[id].irq_stack =
    3d00:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    3d04:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
    3d08:	6053      	str	r3, [r2, #4]
}
    3d0a:	bd10      	pop	{r4, pc}
    3d0c:	20000260 	.word	0x20000260
    3d10:	20000ae8 	.word	0x20000ae8
    3d14:	20000d08 	.word	0x20000d08

00003d18 <prepare_multithreading>:
{
    3d18:	b570      	push	{r4, r5, r6, lr}
    3d1a:	b086      	sub	sp, #24
	z_sched_init();
    3d1c:	f000 fdbc 	bl	4898 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
    3d20:	4d10      	ldr	r5, [pc, #64]	; (3d64 <prepare_multithreading+0x4c>)
    3d22:	4b11      	ldr	r3, [pc, #68]	; (3d68 <prepare_multithreading+0x50>)
    3d24:	61dd      	str	r5, [r3, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3d26:	4b11      	ldr	r3, [pc, #68]	; (3d6c <prepare_multithreading+0x54>)
    3d28:	9305      	str	r3, [sp, #20]
    3d2a:	2301      	movs	r3, #1
    3d2c:	9304      	str	r3, [sp, #16]
    3d2e:	2400      	movs	r4, #0
    3d30:	9403      	str	r4, [sp, #12]
    3d32:	9402      	str	r4, [sp, #8]
    3d34:	9401      	str	r4, [sp, #4]
    3d36:	9400      	str	r4, [sp, #0]
    3d38:	4b0d      	ldr	r3, [pc, #52]	; (3d70 <prepare_multithreading+0x58>)
    3d3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3d3e:	490d      	ldr	r1, [pc, #52]	; (3d74 <prepare_multithreading+0x5c>)
    3d40:	4628      	mov	r0, r5
    3d42:	f000 f8e5 	bl	3f10 <z_setup_new_thread>
    3d46:	4606      	mov	r6, r0
    3d48:	7b6b      	ldrb	r3, [r5, #13]
    3d4a:	f023 0304 	bic.w	r3, r3, #4
    3d4e:	736b      	strb	r3, [r5, #13]
	z_ready_thread(&z_main_thread);
    3d50:	4628      	mov	r0, r5
    3d52:	f003 fb4d 	bl	73f0 <z_ready_thread>
	z_init_cpu(0);
    3d56:	4620      	mov	r0, r4
    3d58:	f7ff ffbe 	bl	3cd8 <z_init_cpu>
}
    3d5c:	4630      	mov	r0, r6
    3d5e:	b006      	add	sp, #24
    3d60:	bd70      	pop	{r4, r5, r6, pc}
    3d62:	bf00      	nop
    3d64:	20000318 	.word	0x20000318
    3d68:	20000ae8 	.word	0x20000ae8
    3d6c:	00007ff4 	.word	0x00007ff4
    3d70:	00003c79 	.word	0x00003c79
    3d74:	20001648 	.word	0x20001648

00003d78 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    3d78:	b500      	push	{lr}
    3d7a:	b0af      	sub	sp, #188	; 0xbc
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    3d7c:	2000      	movs	r0, #0
    3d7e:	f7ff ff23 	bl	3bc8 <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    3d82:	4b1d      	ldr	r3, [pc, #116]	; (3df8 <z_cstart+0x80>)
	uint32_t msp =
    3d84:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    3d88:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    3d8c:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3d90:	4c1a      	ldr	r4, [pc, #104]	; (3dfc <z_cstart+0x84>)
    3d92:	23e0      	movs	r3, #224	; 0xe0
    3d94:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    3d98:	2500      	movs	r5, #0
    3d9a:	77e5      	strb	r5, [r4, #31]
    3d9c:	7625      	strb	r5, [r4, #24]
    3d9e:	7665      	strb	r5, [r4, #25]
    3da0:	76a5      	strb	r5, [r4, #26]
    3da2:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    3da6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3da8:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    3dac:	6263      	str	r3, [r4, #36]	; 0x24
    3dae:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    3db2:	f7fd fd2f 	bl	1814 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    3db6:	f7fd fae3 	bl	1380 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    3dba:	f04f 33ff 	mov.w	r3, #4294967295
    3dbe:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    3dc0:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    3dc2:	f7fd ff5d 	bl	1c80 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    3dc6:	f7fd fdf3 	bl	19b0 <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    3dca:	2401      	movs	r4, #1
    3dcc:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    3dd0:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    3dd4:	9527      	str	r5, [sp, #156]	; 0x9c
	dummy_thread->stack_info.size = 0U;
    3dd6:	9528      	str	r5, [sp, #160]	; 0xa0
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
    3dd8:	952a      	str	r5, [sp, #168]	; 0xa8

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    3dda:	4b09      	ldr	r3, [pc, #36]	; (3e00 <z_cstart+0x88>)
    3ddc:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    3de0:	f7ff fee6 	bl	3bb0 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    3de4:	4620      	mov	r0, r4
    3de6:	f7ff feef 	bl	3bc8 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    3dea:	2002      	movs	r0, #2
    3dec:	f7ff feec 	bl	3bc8 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
    3df0:	f7ff ff92 	bl	3d18 <prepare_multithreading>
    3df4:	f7ff ff5a 	bl	3cac <switch_to_main_thread>
    3df8:	20000d08 	.word	0x20000d08
    3dfc:	e000ed00 	.word	0xe000ed00
    3e00:	20000ae8 	.word	0x20000ae8

00003e04 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    3e04:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    3e06:	4c06      	ldr	r4, [pc, #24]	; (3e20 <init_mem_slab_module+0x1c>)
	int rc = 0;
    3e08:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    3e0a:	e000      	b.n	3e0e <init_mem_slab_module+0xa>
    3e0c:	341c      	adds	r4, #28
    3e0e:	4b05      	ldr	r3, [pc, #20]	; (3e24 <init_mem_slab_module+0x20>)
    3e10:	429c      	cmp	r4, r3
    3e12:	d204      	bcs.n	3e1e <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
    3e14:	4620      	mov	r0, r4
    3e16:	f003 f9ba 	bl	718e <create_free_list>
		if (rc < 0) {
    3e1a:	2800      	cmp	r0, #0
    3e1c:	daf6      	bge.n	3e0c <init_mem_slab_module+0x8>
		z_object_init(slab);
	}

out:
	return rc;
}
    3e1e:	bd10      	pop	{r4, pc}
    3e20:	200001ee 	.word	0x200001ee
    3e24:	200001ee 	.word	0x200001ee

00003e28 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    3e28:	b530      	push	{r4, r5, lr}
    3e2a:	b083      	sub	sp, #12
    3e2c:	460d      	mov	r5, r1
	__asm__ volatile(
    3e2e:	f04f 0120 	mov.w	r1, #32
    3e32:	f3ef 8c11 	mrs	ip, BASEPRI
    3e36:	f381 8812 	msr	BASEPRI_MAX, r1
    3e3a:	f3bf 8f6f 	isb	sy
    3e3e:	4661      	mov	r1, ip
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    3e40:	6944      	ldr	r4, [r0, #20]
    3e42:	b164      	cbz	r4, 3e5e <k_mem_slab_alloc+0x36>
		/* take a free block */
		*mem = slab->free_list;
    3e44:	602c      	str	r4, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
    3e46:	6823      	ldr	r3, [r4, #0]
    3e48:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    3e4a:	6983      	ldr	r3, [r0, #24]
    3e4c:	3301      	adds	r3, #1
    3e4e:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    3e50:	2000      	movs	r0, #0
	__asm__ volatile(
    3e52:	f381 8811 	msr	BASEPRI, r1
    3e56:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
    3e5a:	b003      	add	sp, #12
    3e5c:	bd30      	pop	{r4, r5, pc}
    3e5e:	f100 0e08 	add.w	lr, r0, #8
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    3e62:	ea53 0402 	orrs.w	r4, r3, r2
    3e66:	d104      	bne.n	3e72 <k_mem_slab_alloc+0x4a>
		*mem = NULL;
    3e68:	2300      	movs	r3, #0
    3e6a:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
    3e6c:	f06f 000b 	mvn.w	r0, #11
    3e70:	e7ef      	b.n	3e52 <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    3e72:	9200      	str	r2, [sp, #0]
    3e74:	9301      	str	r3, [sp, #4]
    3e76:	4602      	mov	r2, r0
    3e78:	4670      	mov	r0, lr
    3e7a:	f000 fc07 	bl	468c <z_pend_curr>
		if (result == 0) {
    3e7e:	2800      	cmp	r0, #0
    3e80:	d1eb      	bne.n	3e5a <k_mem_slab_alloc+0x32>
			*mem = _current->base.swap_data;
    3e82:	4b02      	ldr	r3, [pc, #8]	; (3e8c <k_mem_slab_alloc+0x64>)
    3e84:	689b      	ldr	r3, [r3, #8]
    3e86:	695b      	ldr	r3, [r3, #20]
    3e88:	602b      	str	r3, [r5, #0]
		return result;
    3e8a:	e7e6      	b.n	3e5a <k_mem_slab_alloc+0x32>
    3e8c:	20000ae8 	.word	0x20000ae8

00003e90 <z_thread_monitor_exit>:
	__asm__ volatile(
    3e90:	f04f 0320 	mov.w	r3, #32
    3e94:	f3ef 8111 	mrs	r1, BASEPRI
    3e98:	f383 8812 	msr	BASEPRI_MAX, r3
    3e9c:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
    3ea0:	4b0a      	ldr	r3, [pc, #40]	; (3ecc <z_thread_monitor_exit+0x3c>)
    3ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3ea4:	4283      	cmp	r3, r0
    3ea6:	d104      	bne.n	3eb2 <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
    3ea8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
    3eaa:	4b08      	ldr	r3, [pc, #32]	; (3ecc <z_thread_monitor_exit+0x3c>)
    3eac:	629a      	str	r2, [r3, #40]	; 0x28
    3eae:	e007      	b.n	3ec0 <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
    3eb0:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    3eb2:	b113      	cbz	r3, 3eba <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
    3eb4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		while ((prev_thread != NULL) &&
    3eb6:	4282      	cmp	r2, r0
    3eb8:	d1fa      	bne.n	3eb0 <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
    3eba:	b10b      	cbz	r3, 3ec0 <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
    3ebc:	6f42      	ldr	r2, [r0, #116]	; 0x74
    3ebe:	675a      	str	r2, [r3, #116]	; 0x74
	__asm__ volatile(
    3ec0:	f381 8811 	msr	BASEPRI, r1
    3ec4:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
    3ec8:	4770      	bx	lr
    3eca:	bf00      	nop
    3ecc:	20000ae8 	.word	0x20000ae8

00003ed0 <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
    3ed0:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
    3ed2:	4604      	mov	r4, r0
    3ed4:	b140      	cbz	r0, 3ee8 <z_impl_k_thread_name_set+0x18>
		thread = _current;
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN - 1);
    3ed6:	221f      	movs	r2, #31
    3ed8:	f104 0078 	add.w	r0, r4, #120	; 0x78
    3edc:	f002 f8b9 	bl	6052 <strncpy>
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    3ee0:	2000      	movs	r0, #0
    3ee2:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
    3ee6:	bd10      	pop	{r4, pc}
		thread = _current;
    3ee8:	4b01      	ldr	r3, [pc, #4]	; (3ef0 <z_impl_k_thread_name_set+0x20>)
    3eea:	689c      	ldr	r4, [r3, #8]
    3eec:	e7f3      	b.n	3ed6 <z_impl_k_thread_name_set+0x6>
    3eee:	bf00      	nop
    3ef0:	20000ae8 	.word	0x20000ae8

00003ef4 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
    3ef4:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    3ef6:	ea53 0102 	orrs.w	r1, r3, r2
    3efa:	d102      	bne.n	3f02 <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
    3efc:	f003 f9ad 	bl	725a <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    3f00:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    3f02:	4902      	ldr	r1, [pc, #8]	; (3f0c <schedule_new_thread+0x18>)
    3f04:	3018      	adds	r0, #24
    3f06:	f000 fe43 	bl	4b90 <z_add_timeout>
    3f0a:	e7f9      	b.n	3f00 <schedule_new_thread+0xc>
    3f0c:	00007429 	.word	0x00007429

00003f10 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    3f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3f14:	b085      	sub	sp, #20
    3f16:	4604      	mov	r4, r0
    3f18:	460f      	mov	r7, r1
    3f1a:	4615      	mov	r5, r2
    3f1c:	461e      	mov	r6, r3
    3f1e:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
    3f22:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    3f26:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    3f2a:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    3f2e:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    3f32:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
    3f34:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    3f36:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3f38:	2204      	movs	r2, #4
    3f3a:	9911      	ldr	r1, [sp, #68]	; 0x44
    3f3c:	f003 f991 	bl	7262 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
    3f40:	462a      	mov	r2, r5
    3f42:	4639      	mov	r1, r7
    3f44:	4620      	mov	r0, r4
    3f46:	f003 f976 	bl	7236 <setup_thread_stack>
    3f4a:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3f4c:	f8cd 8008 	str.w	r8, [sp, #8]
    3f50:	f8cd 9004 	str.w	r9, [sp, #4]
    3f54:	f8cd a000 	str.w	sl, [sp]
    3f58:	4633      	mov	r3, r6
    3f5a:	4602      	mov	r2, r0
    3f5c:	4639      	mov	r1, r7
    3f5e:	4620      	mov	r0, r4
    3f60:	f7fd fad6 	bl	1510 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
    3f64:	2300      	movs	r3, #0
    3f66:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_THREAD_CUSTOM_DATA
	/* Initialize custom data field (value is opaque to kernel) */
	new_thread->custom_data = NULL;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
    3f68:	6666      	str	r6, [r4, #100]	; 0x64
	new_thread->entry.parameter1 = p1;
    3f6a:	f8c4 a068 	str.w	sl, [r4, #104]	; 0x68
	new_thread->entry.parameter2 = p2;
    3f6e:	f8c4 906c 	str.w	r9, [r4, #108]	; 0x6c
	new_thread->entry.parameter3 = p3;
    3f72:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	__asm__ volatile(
    3f76:	f04f 0320 	mov.w	r3, #32
    3f7a:	f3ef 8211 	mrs	r2, BASEPRI
    3f7e:	f383 8812 	msr	BASEPRI_MAX, r3
    3f82:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
    3f86:	4b13      	ldr	r3, [pc, #76]	; (3fd4 <z_setup_new_thread+0xc4>)
    3f88:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3f8a:	6761      	str	r1, [r4, #116]	; 0x74
	_kernel.threads = new_thread;
    3f8c:	629c      	str	r4, [r3, #40]	; 0x28
	__asm__ volatile(
    3f8e:	f382 8811 	msr	BASEPRI, r2
    3f92:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
    3f96:	f1bb 0f00 	cmp.w	fp, #0
    3f9a:	d013      	beq.n	3fc4 <z_setup_new_thread+0xb4>
		strncpy(new_thread->name, name,
    3f9c:	221f      	movs	r2, #31
    3f9e:	4659      	mov	r1, fp
    3fa0:	f104 0078 	add.w	r0, r4, #120	; 0x78
    3fa4:	f002 f855 	bl	6052 <strncpy>
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    3fa8:	2300      	movs	r3, #0
    3faa:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    3fae:	4b09      	ldr	r3, [pc, #36]	; (3fd4 <z_setup_new_thread+0xc4>)
    3fb0:	689b      	ldr	r3, [r3, #8]
    3fb2:	b15b      	cbz	r3, 3fcc <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    3fb4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    3fb8:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
#endif

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
    3fbc:	4628      	mov	r0, r5
    3fbe:	b005      	add	sp, #20
    3fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
    3fc4:	2300      	movs	r3, #0
    3fc6:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    3fca:	e7f0      	b.n	3fae <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
    3fcc:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
		return stack_ptr;
    3fd0:	e7f4      	b.n	3fbc <z_setup_new_thread+0xac>
    3fd2:	bf00      	nop
    3fd4:	20000ae8 	.word	0x20000ae8

00003fd8 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    3fd8:	b530      	push	{r4, r5, lr}
    3fda:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    3fdc:	4c21      	ldr	r4, [pc, #132]	; (4064 <CONFIG_FPROTECT_BLOCK_SIZE+0x64>)
    3fde:	e014      	b.n	400a <CONFIG_FPROTECT_BLOCK_SIZE+0xa>
		z_setup_new_thread(
    3fe0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3fe2:	9305      	str	r3, [sp, #20]
    3fe4:	6a23      	ldr	r3, [r4, #32]
    3fe6:	9304      	str	r3, [sp, #16]
    3fe8:	69e3      	ldr	r3, [r4, #28]
    3fea:	9303      	str	r3, [sp, #12]
    3fec:	69a3      	ldr	r3, [r4, #24]
    3fee:	9302      	str	r3, [sp, #8]
    3ff0:	6963      	ldr	r3, [r4, #20]
    3ff2:	9301      	str	r3, [sp, #4]
    3ff4:	6923      	ldr	r3, [r4, #16]
    3ff6:	9300      	str	r3, [sp, #0]
    3ff8:	68e3      	ldr	r3, [r4, #12]
    3ffa:	68a2      	ldr	r2, [r4, #8]
    3ffc:	6861      	ldr	r1, [r4, #4]
    3ffe:	6820      	ldr	r0, [r4, #0]
    4000:	f7ff ff86 	bl	3f10 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
    4004:	6823      	ldr	r3, [r4, #0]
    4006:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    4008:	3430      	adds	r4, #48	; 0x30
    400a:	4b17      	ldr	r3, [pc, #92]	; (4068 <CONFIG_FPROTECT_BLOCK_SIZE+0x68>)
    400c:	429c      	cmp	r4, r3
    400e:	d3e7      	bcc.n	3fe0 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    4010:	f000 f9ee 	bl	43f0 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    4014:	4c13      	ldr	r4, [pc, #76]	; (4064 <CONFIG_FPROTECT_BLOCK_SIZE+0x64>)
    4016:	e000      	b.n	401a <CONFIG_FPROTECT_BLOCK_SIZE+0x1a>
    4018:	3430      	adds	r4, #48	; 0x30
    401a:	4b13      	ldr	r3, [pc, #76]	; (4068 <CONFIG_FPROTECT_BLOCK_SIZE+0x68>)
    401c:	429c      	cmp	r4, r3
    401e:	d21c      	bcs.n	405a <CONFIG_FPROTECT_BLOCK_SIZE+0x5a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    4020:	6a60      	ldr	r0, [r4, #36]	; 0x24
    4022:	f1b0 3fff 	cmp.w	r0, #4294967295
    4026:	d0f7      	beq.n	4018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>
			schedule_new_thread(thread_data->init_thread,
    4028:	6825      	ldr	r5, [r4, #0]
					    K_MSEC(thread_data->init_delay));
    402a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    402e:	17c1      	asrs	r1, r0, #31
    4030:	03c9      	lsls	r1, r1, #15
    4032:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    4036:	03c0      	lsls	r0, r0, #15
    4038:	f240 33e7 	movw	r3, #999	; 0x3e7
    403c:	18c0      	adds	r0, r0, r3
    403e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4042:	f04f 0300 	mov.w	r3, #0
    4046:	f141 0100 	adc.w	r1, r1, #0
    404a:	f7fc f883 	bl	154 <__aeabi_uldivmod>
    404e:	4602      	mov	r2, r0
    4050:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
    4052:	4628      	mov	r0, r5
    4054:	f7ff ff4e 	bl	3ef4 <schedule_new_thread>
    4058:	e7de      	b.n	4018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>
		}
	}
	k_sched_unlock();
    405a:	f000 fbcb 	bl	47f4 <k_sched_unlock>
}
    405e:	b007      	add	sp, #28
    4060:	bd30      	pop	{r4, r5, pc}
    4062:	bf00      	nop
    4064:	00007c14 	.word	0x00007c14
    4068:	00007c14 	.word	0x00007c14

0000406c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    406c:	b508      	push	{r3, lr}
    406e:	e001      	b.n	4074 <idle+0x8>
	arch_cpu_idle();
    4070:	f7fd f98c 	bl	138c <arch_cpu_idle>
	__asm__ volatile(
    4074:	f04f 0220 	mov.w	r2, #32
    4078:	f3ef 8311 	mrs	r3, BASEPRI
    407c:	f382 8812 	msr	BASEPRI_MAX, r2
    4080:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    4084:	f003 faf2 	bl	766c <z_get_next_timeout_expiry>
    4088:	4b05      	ldr	r3, [pc, #20]	; (40a0 <idle+0x34>)
    408a:	6198      	str	r0, [r3, #24]
	return !z_sys_post_kernel;
    408c:	4b05      	ldr	r3, [pc, #20]	; (40a4 <idle+0x38>)
    408e:	781b      	ldrb	r3, [r3, #0]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    4090:	2b00      	cmp	r3, #0
    4092:	d0ed      	beq.n	4070 <idle+0x4>
    4094:	f7fc ff76 	bl	f84 <pm_system_suspend>
    4098:	2800      	cmp	r0, #0
    409a:	d1eb      	bne.n	4074 <idle+0x8>
    409c:	e7e8      	b.n	4070 <idle+0x4>
    409e:	bf00      	nop
    40a0:	20000ae8 	.word	0x20000ae8
    40a4:	20000d07 	.word	0x20000d07

000040a8 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    40a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    40ac:	b082      	sub	sp, #8
    40ae:	4604      	mov	r4, r0
    40b0:	461e      	mov	r6, r3
    40b2:	f04f 0320 	mov.w	r3, #32
    40b6:	f3ef 8511 	mrs	r5, BASEPRI
    40ba:	f383 8812 	msr	BASEPRI_MAX, r3
    40be:	f3bf 8f6f 	isb	sy
    40c2:	462b      	mov	r3, r5

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    40c4:	68c1      	ldr	r1, [r0, #12]
    40c6:	b999      	cbnz	r1, 40f0 <z_impl_k_mutex_lock+0x48>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
    40c8:	2900      	cmp	r1, #0
    40ca:	d151      	bne.n	4170 <z_impl_k_mutex_lock+0xc8>
    40cc:	4a36      	ldr	r2, [pc, #216]	; (41a8 <z_impl_k_mutex_lock+0x100>)
    40ce:	6892      	ldr	r2, [r2, #8]
    40d0:	f992 200e 	ldrsb.w	r2, [r2, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    40d4:	6122      	str	r2, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
    40d6:	3101      	adds	r1, #1
    40d8:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
    40da:	4a33      	ldr	r2, [pc, #204]	; (41a8 <z_impl_k_mutex_lock+0x100>)
    40dc:	6892      	ldr	r2, [r2, #8]
    40de:	60a2      	str	r2, [r4, #8]
	__asm__ volatile(
    40e0:	f383 8811 	msr	BASEPRI, r3
    40e4:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
    40e8:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    40ea:	b002      	add	sp, #8
    40ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    40f0:	4617      	mov	r7, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    40f2:	6880      	ldr	r0, [r0, #8]
    40f4:	4a2c      	ldr	r2, [pc, #176]	; (41a8 <z_impl_k_mutex_lock+0x100>)
    40f6:	6892      	ldr	r2, [r2, #8]
    40f8:	4290      	cmp	r0, r2
    40fa:	d0e5      	beq.n	40c8 <z_impl_k_mutex_lock+0x20>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    40fc:	ea56 0107 	orrs.w	r1, r6, r7
    4100:	d038      	beq.n	4174 <z_impl_k_mutex_lock+0xcc>
					    mutex->owner->base.prio);
    4102:	f990 800e 	ldrsb.w	r8, [r0, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
    4106:	4641      	mov	r1, r8
    4108:	f992 000e 	ldrsb.w	r0, [r2, #14]
    410c:	f003 f8dc 	bl	72c8 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    4110:	4580      	cmp	r8, r0
    4112:	dc36      	bgt.n	4182 <z_impl_k_mutex_lock+0xda>
	bool resched = false;
    4114:	f04f 0800 	mov.w	r8, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    4118:	9700      	str	r7, [sp, #0]
    411a:	9601      	str	r6, [sp, #4]
    411c:	4622      	mov	r2, r4
    411e:	4629      	mov	r1, r5
    4120:	4822      	ldr	r0, [pc, #136]	; (41ac <z_impl_k_mutex_lock+0x104>)
    4122:	f000 fab3 	bl	468c <z_pend_curr>
	if (got_mutex == 0) {
    4126:	2800      	cmp	r0, #0
    4128:	d0df      	beq.n	40ea <z_impl_k_mutex_lock+0x42>
	__asm__ volatile(
    412a:	f04f 0320 	mov.w	r3, #32
    412e:	f3ef 8511 	mrs	r5, BASEPRI
    4132:	f383 8812 	msr	BASEPRI_MAX, r3
    4136:	f3bf 8f6f 	isb	sy
    413a:	462e      	mov	r6, r5
	if (likely(mutex->owner != NULL)) {
    413c:	68a3      	ldr	r3, [r4, #8]
    413e:	b343      	cbz	r3, 4192 <z_impl_k_mutex_lock+0xea>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    4140:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4142:	429c      	cmp	r4, r3
    4144:	d023      	beq.n	418e <z_impl_k_mutex_lock+0xe6>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    4146:	b313      	cbz	r3, 418e <z_impl_k_mutex_lock+0xe6>
    4148:	6921      	ldr	r1, [r4, #16]
    414a:	f993 000e 	ldrsb.w	r0, [r3, #14]
    414e:	f003 f8bb 	bl	72c8 <new_prio_for_inheritance>
    4152:	4601      	mov	r1, r0
		resched = adjust_owner_prio(mutex, new_prio) || resched;
    4154:	4620      	mov	r0, r4
    4156:	f003 f8c2 	bl	72de <adjust_owner_prio>
    415a:	b9e8      	cbnz	r0, 4198 <z_impl_k_mutex_lock+0xf0>
    415c:	f1b8 0f00 	cmp.w	r8, #0
    4160:	d11a      	bne.n	4198 <z_impl_k_mutex_lock+0xf0>
	__asm__ volatile(
    4162:	f386 8811 	msr	BASEPRI, r6
    4166:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
    416a:	f06f 000a 	mvn.w	r0, #10
    416e:	e7bc      	b.n	40ea <z_impl_k_mutex_lock+0x42>
					_current->base.prio :
    4170:	6922      	ldr	r2, [r4, #16]
    4172:	e7af      	b.n	40d4 <z_impl_k_mutex_lock+0x2c>
    4174:	f385 8811 	msr	BASEPRI, r5
    4178:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    417c:	f06f 000f 	mvn.w	r0, #15
    4180:	e7b3      	b.n	40ea <z_impl_k_mutex_lock+0x42>
		resched = adjust_owner_prio(mutex, new_prio);
    4182:	4601      	mov	r1, r0
    4184:	4620      	mov	r0, r4
    4186:	f003 f8aa 	bl	72de <adjust_owner_prio>
    418a:	4680      	mov	r8, r0
    418c:	e7c4      	b.n	4118 <z_impl_k_mutex_lock+0x70>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    418e:	6921      	ldr	r1, [r4, #16]
    4190:	e7e0      	b.n	4154 <z_impl_k_mutex_lock+0xac>
	if (resched) {
    4192:	f1b8 0f00 	cmp.w	r8, #0
    4196:	d0e4      	beq.n	4162 <z_impl_k_mutex_lock+0xba>
		z_reschedule(&lock, key);
    4198:	4629      	mov	r1, r5
    419a:	4804      	ldr	r0, [pc, #16]	; (41ac <z_impl_k_mutex_lock+0x104>)
    419c:	f000 f912 	bl	43c4 <z_reschedule>
	return -EAGAIN;
    41a0:	f06f 000a 	mvn.w	r0, #10
    41a4:	e7a1      	b.n	40ea <z_impl_k_mutex_lock+0x42>
    41a6:	bf00      	nop
    41a8:	20000ae8 	.word	0x20000ae8
    41ac:	20000b14 	.word	0x20000b14

000041b0 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    41b0:	6883      	ldr	r3, [r0, #8]
    41b2:	b38b      	cbz	r3, 4218 <z_impl_k_mutex_unlock+0x68>
{
    41b4:	b570      	push	{r4, r5, r6, lr}
    41b6:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    41b8:	4a1a      	ldr	r2, [pc, #104]	; (4224 <z_impl_k_mutex_unlock+0x74>)
    41ba:	6892      	ldr	r2, [r2, #8]
    41bc:	4293      	cmp	r3, r2
    41be:	d12e      	bne.n	421e <z_impl_k_mutex_unlock+0x6e>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    41c0:	68c3      	ldr	r3, [r0, #12]
    41c2:	2b01      	cmp	r3, #1
    41c4:	d903      	bls.n	41ce <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
    41c6:	3b01      	subs	r3, #1
    41c8:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    41ca:	2000      	movs	r0, #0
}
    41cc:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
    41ce:	f04f 0320 	mov.w	r3, #32
    41d2:	f3ef 8511 	mrs	r5, BASEPRI
    41d6:	f383 8812 	msr	BASEPRI_MAX, r3
    41da:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    41de:	6901      	ldr	r1, [r0, #16]
    41e0:	f003 f87d 	bl	72de <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    41e4:	4620      	mov	r0, r4
    41e6:	f003 f9b8 	bl	755a <z_unpend_first_thread>
	mutex->owner = new_owner;
    41ea:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    41ec:	b168      	cbz	r0, 420a <z_impl_k_mutex_unlock+0x5a>
		mutex->owner_orig_prio = new_owner->base.prio;
    41ee:	f990 300e 	ldrsb.w	r3, [r0, #14]
    41f2:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    41f4:	2400      	movs	r4, #0
    41f6:	f8c0 40b0 	str.w	r4, [r0, #176]	; 0xb0
		z_ready_thread(new_owner);
    41fa:	f003 f8f9 	bl	73f0 <z_ready_thread>
		z_reschedule(&lock, key);
    41fe:	4629      	mov	r1, r5
    4200:	4809      	ldr	r0, [pc, #36]	; (4228 <z_impl_k_mutex_unlock+0x78>)
    4202:	f000 f8df 	bl	43c4 <z_reschedule>
	return 0;
    4206:	4620      	mov	r0, r4
    4208:	e7e0      	b.n	41cc <z_impl_k_mutex_unlock+0x1c>
		mutex->lock_count = 0U;
    420a:	2000      	movs	r0, #0
    420c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    420e:	f385 8811 	msr	BASEPRI, r5
    4212:	f3bf 8f6f 	isb	sy
    4216:	e7d9      	b.n	41cc <z_impl_k_mutex_unlock+0x1c>
		return -EINVAL;
    4218:	f06f 0015 	mvn.w	r0, #21
}
    421c:	4770      	bx	lr
		return -EPERM;
    421e:	f04f 30ff 	mov.w	r0, #4294967295
    4222:	e7d3      	b.n	41cc <z_impl_k_mutex_unlock+0x1c>
    4224:	20000ae8 	.word	0x20000ae8
    4228:	20000b14 	.word	0x20000b14

0000422c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    422c:	b538      	push	{r3, r4, r5, lr}
    422e:	4604      	mov	r4, r0
	__asm__ volatile(
    4230:	f04f 0320 	mov.w	r3, #32
    4234:	f3ef 8511 	mrs	r5, BASEPRI
    4238:	f383 8812 	msr	BASEPRI_MAX, r3
    423c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    4240:	f003 f98b 	bl	755a <z_unpend_first_thread>

	if (thread != NULL) {
    4244:	b148      	cbz	r0, 425a <z_impl_k_sem_give+0x2e>
    4246:	2200      	movs	r2, #0
    4248:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    424c:	f003 f8d0 	bl	73f0 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    4250:	4629      	mov	r1, r5
    4252:	4809      	ldr	r0, [pc, #36]	; (4278 <z_impl_k_sem_give+0x4c>)
    4254:	f000 f8b6 	bl	43c4 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    4258:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    425a:	68a3      	ldr	r3, [r4, #8]
    425c:	68e2      	ldr	r2, [r4, #12]
    425e:	4293      	cmp	r3, r2
    4260:	d008      	beq.n	4274 <z_impl_k_sem_give+0x48>
    4262:	2201      	movs	r2, #1
    4264:	4413      	add	r3, r2
    4266:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
    4268:	2102      	movs	r1, #2
    426a:	f104 0010 	add.w	r0, r4, #16
    426e:	f003 fadb 	bl	7828 <z_handle_obj_poll_events>
}
    4272:	e7ed      	b.n	4250 <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    4274:	2200      	movs	r2, #0
    4276:	e7f5      	b.n	4264 <z_impl_k_sem_give+0x38>
    4278:	20000b14 	.word	0x20000b14

0000427c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    427c:	b510      	push	{r4, lr}
    427e:	b082      	sub	sp, #8
    4280:	f04f 0420 	mov.w	r4, #32
    4284:	f3ef 8111 	mrs	r1, BASEPRI
    4288:	f384 8812 	msr	BASEPRI_MAX, r4
    428c:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    4290:	6884      	ldr	r4, [r0, #8]
    4292:	b144      	cbz	r4, 42a6 <z_impl_k_sem_take+0x2a>
		sem->count--;
    4294:	3c01      	subs	r4, #1
    4296:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    4298:	f381 8811 	msr	BASEPRI, r1
    429c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    42a0:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    42a2:	b002      	add	sp, #8
    42a4:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    42a6:	ea53 0402 	orrs.w	r4, r3, r2
    42aa:	d006      	beq.n	42ba <z_impl_k_sem_take+0x3e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    42ac:	9200      	str	r2, [sp, #0]
    42ae:	9301      	str	r3, [sp, #4]
    42b0:	4602      	mov	r2, r0
    42b2:	4805      	ldr	r0, [pc, #20]	; (42c8 <z_impl_k_sem_take+0x4c>)
    42b4:	f000 f9ea 	bl	468c <z_pend_curr>
	return ret;
    42b8:	e7f3      	b.n	42a2 <z_impl_k_sem_take+0x26>
    42ba:	f381 8811 	msr	BASEPRI, r1
    42be:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    42c2:	f06f 000f 	mvn.w	r0, #15
    42c6:	e7ec      	b.n	42a2 <z_impl_k_sem_take+0x26>
    42c8:	20000b14 	.word	0x20000b14

000042cc <sliceable>:


static inline int is_preempt(struct k_thread *thread)
{
	/* explanation in kernel_struct.h */
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    42cc:	89c3      	ldrh	r3, [r0, #14]
static inline bool sliceable(struct k_thread *thread)
{
	bool ret = is_preempt(thread)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_idle_thread_object(thread);
    42ce:	2b7f      	cmp	r3, #127	; 0x7f
    42d0:	d80e      	bhi.n	42f0 <sliceable+0x24>
	uint8_t state = thread->base.thread_state;
    42d2:	7b43      	ldrb	r3, [r0, #13]
		&& !z_is_thread_prevented_from_running(thread)
    42d4:	f013 0f1f 	tst.w	r3, #31
    42d8:	d10c      	bne.n	42f4 <sliceable+0x28>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    42da:	f990 200e 	ldrsb.w	r2, [r0, #14]
    42de:	4b08      	ldr	r3, [pc, #32]	; (4300 <sliceable+0x34>)
    42e0:	681b      	ldr	r3, [r3, #0]
    42e2:	429a      	cmp	r2, r3
    42e4:	db08      	blt.n	42f8 <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
    42e6:	4b07      	ldr	r3, [pc, #28]	; (4304 <sliceable+0x38>)
    42e8:	4298      	cmp	r0, r3
    42ea:	d007      	beq.n	42fc <sliceable+0x30>
    42ec:	2001      	movs	r0, #1
    42ee:	4770      	bx	lr
    42f0:	2000      	movs	r0, #0
    42f2:	4770      	bx	lr
    42f4:	2000      	movs	r0, #0
    42f6:	4770      	bx	lr
    42f8:	2000      	movs	r0, #0
    42fa:	4770      	bx	lr
    42fc:	2000      	movs	r0, #0
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
    42fe:	4770      	bx	lr
    4300:	20000b18 	.word	0x20000b18
    4304:	20000260 	.word	0x20000260

00004308 <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4308:	f1b3 3fff 	cmp.w	r3, #4294967295
    430c:	bf08      	it	eq
    430e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    4312:	d100      	bne.n	4316 <add_thread_timeout+0xe>
    4314:	4770      	bx	lr
{
    4316:	b508      	push	{r3, lr}
    4318:	4902      	ldr	r1, [pc, #8]	; (4324 <add_thread_timeout+0x1c>)
    431a:	3018      	adds	r0, #24
    431c:	f000 fc38 	bl	4b90 <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
    4320:	bd08      	pop	{r3, pc}
    4322:	bf00      	nop
    4324:	00007429 	.word	0x00007429

00004328 <z_reset_time_slice>:
{
    4328:	b510      	push	{r4, lr}
	int ret = slice_ticks;
    432a:	4b07      	ldr	r3, [pc, #28]	; (4348 <z_reset_time_slice+0x20>)
    432c:	681c      	ldr	r4, [r3, #0]
	if (slice_time(curr) != 0) {
    432e:	b904      	cbnz	r4, 4332 <z_reset_time_slice+0xa>
}
    4330:	bd10      	pop	{r4, pc}
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    4332:	f7fe fcd3 	bl	2cdc <sys_clock_elapsed>
    4336:	4404      	add	r4, r0
    4338:	4b04      	ldr	r3, [pc, #16]	; (434c <z_reset_time_slice+0x24>)
    433a:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    433c:	2100      	movs	r1, #0
    433e:	4b02      	ldr	r3, [pc, #8]	; (4348 <z_reset_time_slice+0x20>)
    4340:	6818      	ldr	r0, [r3, #0]
    4342:	f003 f9aa 	bl	769a <z_set_timeout_expiry>
}
    4346:	e7f3      	b.n	4330 <z_reset_time_slice+0x8>
    4348:	20000b1c 	.word	0x20000b1c
    434c:	20000ae8 	.word	0x20000ae8

00004350 <k_sched_time_slice_set>:
{
    4350:	b570      	push	{r4, r5, r6, lr}
    4352:	4604      	mov	r4, r0
    4354:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
    4356:	2300      	movs	r3, #0
	__asm__ volatile(
    4358:	f04f 0220 	mov.w	r2, #32
    435c:	f3ef 8511 	mrs	r5, BASEPRI
    4360:	f382 8812 	msr	BASEPRI_MAX, r2
    4364:	f3bf 8f6f 	isb	sy
	z_spin_lock_set_owner(l);
#if defined(CONFIG_SPIN_LOCK_TIME_LIMIT) && (CONFIG_SPIN_LOCK_TIME_LIMIT != 0)
	l->lock_time = sys_clock_cycle_get_32();
#endif /* CONFIG_SPIN_LOCK_TIME_LIMIT */
#endif/* CONFIG_SPIN_VALIDATE */
	return k;
    4368:	e00e      	b.n	4388 <k_sched_time_slice_set+0x38>
			slice_ticks = MAX(2, slice_ticks);
    436a:	2802      	cmp	r0, #2
    436c:	bfb8      	it	lt
    436e:	2002      	movlt	r0, #2
    4370:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    4372:	4b11      	ldr	r3, [pc, #68]	; (43b8 <k_sched_time_slice_set+0x68>)
    4374:	601e      	str	r6, [r3, #0]
		z_reset_time_slice(_current);
    4376:	4b11      	ldr	r3, [pc, #68]	; (43bc <k_sched_time_slice_set+0x6c>)
    4378:	6898      	ldr	r0, [r3, #8]
    437a:	f7ff ffd5 	bl	4328 <z_reset_time_slice>
	__asm__ volatile(
    437e:	f385 8811 	msr	BASEPRI, r5
    4382:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    4386:	2301      	movs	r3, #1
    4388:	b9a3      	cbnz	r3, 43b4 <k_sched_time_slice_set+0x64>
		_current_cpu->slice_ticks = 0;
    438a:	4b0c      	ldr	r3, [pc, #48]	; (43bc <k_sched_time_slice_set+0x6c>)
    438c:	2200      	movs	r2, #0
    438e:	611a      	str	r2, [r3, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
    4390:	0c61      	lsrs	r1, r4, #17
    4392:	03e0      	lsls	r0, r4, #15
    4394:	f240 33e7 	movw	r3, #999	; 0x3e7
    4398:	18c0      	adds	r0, r0, r3
    439a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    439e:	f04f 0300 	mov.w	r3, #0
    43a2:	f141 0100 	adc.w	r1, r1, #0
    43a6:	f7fb fed5 	bl	154 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    43aa:	4b05      	ldr	r3, [pc, #20]	; (43c0 <k_sched_time_slice_set+0x70>)
    43ac:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    43ae:	2c00      	cmp	r4, #0
    43b0:	dcdb      	bgt.n	436a <k_sched_time_slice_set+0x1a>
    43b2:	e7de      	b.n	4372 <k_sched_time_slice_set+0x22>
}
    43b4:	bd70      	pop	{r4, r5, r6, pc}
    43b6:	bf00      	nop
    43b8:	20000b18 	.word	0x20000b18
    43bc:	20000ae8 	.word	0x20000ae8
    43c0:	20000b1c 	.word	0x20000b1c

000043c4 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    43c4:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
    43c6:	460b      	mov	r3, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    43c8:	b959      	cbnz	r1, 43e2 <z_reschedule+0x1e>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    43ca:	f3ef 8205 	mrs	r2, IPSR
    43ce:	b942      	cbnz	r2, 43e2 <z_reschedule+0x1e>
	new_thread = _kernel.ready_q.cache;
    43d0:	4a06      	ldr	r2, [pc, #24]	; (43ec <z_reschedule+0x28>)
    43d2:	69d0      	ldr	r0, [r2, #28]
	return new_thread != _current;
    43d4:	6892      	ldr	r2, [r2, #8]
	if (resched(key.key) && need_swap()) {
    43d6:	4290      	cmp	r0, r2
    43d8:	d003      	beq.n	43e2 <z_reschedule+0x1e>
	ret = arch_swap(key);
    43da:	4608      	mov	r0, r1
    43dc:	f7fd f83e 	bl	145c <arch_swap>
		z_swap(lock, key);
    43e0:	e003      	b.n	43ea <z_reschedule+0x26>
    43e2:	f383 8811 	msr	BASEPRI, r3
    43e6:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
    43ea:	bd08      	pop	{r3, pc}
    43ec:	20000ae8 	.word	0x20000ae8

000043f0 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
    43f0:	2300      	movs	r3, #0
	__asm__ volatile(
    43f2:	f04f 0220 	mov.w	r2, #32
    43f6:	f3ef 8111 	mrs	r1, BASEPRI
    43fa:	f382 8812 	msr	BASEPRI_MAX, r2
    43fe:	f3bf 8f6f 	isb	sy
    4402:	e009      	b.n	4418 <k_sched_lock+0x28>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    4404:	4b06      	ldr	r3, [pc, #24]	; (4420 <k_sched_lock+0x30>)
    4406:	689a      	ldr	r2, [r3, #8]
    4408:	7bd3      	ldrb	r3, [r2, #15]
    440a:	3b01      	subs	r3, #1
    440c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    440e:	f381 8811 	msr	BASEPRI, r1
    4412:	f3bf 8f6f 	isb	sy
    4416:	2301      	movs	r3, #1
    4418:	2b00      	cmp	r3, #0
    441a:	d0f3      	beq.n	4404 <k_sched_lock+0x14>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    441c:	4770      	bx	lr
    441e:	bf00      	nop
    4420:	20000ae8 	.word	0x20000ae8

00004424 <update_cache>:
{
    4424:	b538      	push	{r3, r4, r5, lr}
    4426:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
    4428:	4810      	ldr	r0, [pc, #64]	; (446c <update_cache+0x48>)
    442a:	f002 ffda 	bl	73e2 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    442e:	4605      	mov	r5, r0
    4430:	b170      	cbz	r0, 4450 <update_cache+0x2c>
	if (preempt_ok != 0) {
    4432:	b984      	cbnz	r4, 4456 <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
    4434:	4b0e      	ldr	r3, [pc, #56]	; (4470 <update_cache+0x4c>)
    4436:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
    4438:	7b5a      	ldrb	r2, [r3, #13]
    443a:	f012 0f1f 	tst.w	r2, #31
    443e:	d10a      	bne.n	4456 <update_cache+0x32>
	return node->next != NULL;
    4440:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    4442:	b942      	cbnz	r2, 4456 <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    4444:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
    4446:	2a7f      	cmp	r2, #127	; 0x7f
    4448:	d905      	bls.n	4456 <update_cache+0x32>
		_kernel.ready_q.cache = _current;
    444a:	4a09      	ldr	r2, [pc, #36]	; (4470 <update_cache+0x4c>)
    444c:	61d3      	str	r3, [r2, #28]
    444e:	e00b      	b.n	4468 <update_cache+0x44>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    4450:	4b07      	ldr	r3, [pc, #28]	; (4470 <update_cache+0x4c>)
    4452:	68dd      	ldr	r5, [r3, #12]
    4454:	e7ed      	b.n	4432 <update_cache+0xe>
		if (thread != _current) {
    4456:	4b06      	ldr	r3, [pc, #24]	; (4470 <update_cache+0x4c>)
    4458:	689b      	ldr	r3, [r3, #8]
    445a:	42ab      	cmp	r3, r5
    445c:	d002      	beq.n	4464 <update_cache+0x40>
			z_reset_time_slice(thread);
    445e:	4628      	mov	r0, r5
    4460:	f7ff ff62 	bl	4328 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    4464:	4b02      	ldr	r3, [pc, #8]	; (4470 <update_cache+0x4c>)
    4466:	61dd      	str	r5, [r3, #28]
}
    4468:	bd38      	pop	{r3, r4, r5, pc}
    446a:	bf00      	nop
    446c:	20000b08 	.word	0x20000b08
    4470:	20000ae8 	.word	0x20000ae8

00004474 <move_thread_to_end_of_prio_q>:
{
    4474:	b538      	push	{r3, r4, r5, lr}
    4476:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
    4478:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    447a:	f990 300d 	ldrsb.w	r3, [r0, #13]
    447e:	2b00      	cmp	r3, #0
    4480:	db0a      	blt.n	4498 <move_thread_to_end_of_prio_q+0x24>
	thread->base.thread_state |= _THREAD_QUEUED;
    4482:	7b6b      	ldrb	r3, [r5, #13]
    4484:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4488:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    448a:	4b1b      	ldr	r3, [pc, #108]	; (44f8 <move_thread_to_end_of_prio_q+0x84>)
    448c:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4490:	429c      	cmp	r4, r3
    4492:	d110      	bne.n	44b6 <move_thread_to_end_of_prio_q+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4494:	2400      	movs	r4, #0
    4496:	e00e      	b.n	44b6 <move_thread_to_end_of_prio_q+0x42>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4498:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    449c:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    449e:	4601      	mov	r1, r0
    44a0:	4816      	ldr	r0, [pc, #88]	; (44fc <move_thread_to_end_of_prio_q+0x88>)
    44a2:	f002 ff6d 	bl	7380 <z_priq_dumb_remove>
}
    44a6:	e7ec      	b.n	4482 <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    44a8:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
    44aa:	606b      	str	r3, [r5, #4]
	node->next = successor;
    44ac:	602c      	str	r4, [r5, #0]
	prev->next = node;
    44ae:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    44b0:	6065      	str	r5, [r4, #4]
}
    44b2:	e017      	b.n	44e4 <move_thread_to_end_of_prio_q+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    44b4:	2400      	movs	r4, #0
    44b6:	b16c      	cbz	r4, 44d4 <move_thread_to_end_of_prio_q+0x60>
		if (z_sched_prio_cmp(thread, t) > 0) {
    44b8:	4621      	mov	r1, r4
    44ba:	4628      	mov	r0, r5
    44bc:	f002 ff25 	bl	730a <z_sched_prio_cmp>
    44c0:	2800      	cmp	r0, #0
    44c2:	dcf1      	bgt.n	44a8 <move_thread_to_end_of_prio_q+0x34>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    44c4:	2c00      	cmp	r4, #0
    44c6:	d0f6      	beq.n	44b6 <move_thread_to_end_of_prio_q+0x42>
	return (node == list->tail) ? NULL : node->next;
    44c8:	4b0b      	ldr	r3, [pc, #44]	; (44f8 <move_thread_to_end_of_prio_q+0x84>)
    44ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    44cc:	429c      	cmp	r4, r3
    44ce:	d0f1      	beq.n	44b4 <move_thread_to_end_of_prio_q+0x40>
    44d0:	6824      	ldr	r4, [r4, #0]
    44d2:	e7f0      	b.n	44b6 <move_thread_to_end_of_prio_q+0x42>
	sys_dnode_t *const tail = list->tail;
    44d4:	4b08      	ldr	r3, [pc, #32]	; (44f8 <move_thread_to_end_of_prio_q+0x84>)
    44d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    44d8:	f103 0120 	add.w	r1, r3, #32
    44dc:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    44de:	606a      	str	r2, [r5, #4]
	tail->next = node;
    44e0:	6015      	str	r5, [r2, #0]
	list->tail = node;
    44e2:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
    44e4:	4b04      	ldr	r3, [pc, #16]	; (44f8 <move_thread_to_end_of_prio_q+0x84>)
    44e6:	6898      	ldr	r0, [r3, #8]
    44e8:	42a8      	cmp	r0, r5
    44ea:	bf14      	ite	ne
    44ec:	2000      	movne	r0, #0
    44ee:	2001      	moveq	r0, #1
    44f0:	f7ff ff98 	bl	4424 <update_cache>
}
    44f4:	bd38      	pop	{r3, r4, r5, pc}
    44f6:	bf00      	nop
    44f8:	20000ae8 	.word	0x20000ae8
    44fc:	20000b08 	.word	0x20000b08

00004500 <slice_expired_locked>:
{
    4500:	b538      	push	{r3, r4, r5, lr}
    4502:	4604      	mov	r4, r0
	struct k_thread *curr = _current;
    4504:	4b07      	ldr	r3, [pc, #28]	; (4524 <slice_expired_locked+0x24>)
    4506:	689d      	ldr	r5, [r3, #8]
	uint8_t state = thread->base.thread_state;
    4508:	7b6b      	ldrb	r3, [r5, #13]
	if (!z_is_thread_prevented_from_running(curr)) {
    450a:	f013 0f1f 	tst.w	r3, #31
    450e:	d004      	beq.n	451a <slice_expired_locked+0x1a>
	z_reset_time_slice(curr);
    4510:	4628      	mov	r0, r5
    4512:	f7ff ff09 	bl	4328 <z_reset_time_slice>
}
    4516:	4620      	mov	r0, r4
    4518:	bd38      	pop	{r3, r4, r5, pc}
		move_thread_to_end_of_prio_q(curr);
    451a:	4628      	mov	r0, r5
    451c:	f7ff ffaa 	bl	4474 <move_thread_to_end_of_prio_q>
    4520:	e7f6      	b.n	4510 <slice_expired_locked+0x10>
    4522:	bf00      	nop
    4524:	20000ae8 	.word	0x20000ae8

00004528 <z_time_slice>:
{
    4528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    452a:	4605      	mov	r5, r0
	__asm__ volatile(
    452c:	f04f 0320 	mov.w	r3, #32
    4530:	f3ef 8611 	mrs	r6, BASEPRI
    4534:	f383 8812 	msr	BASEPRI_MAX, r3
    4538:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    453c:	4b15      	ldr	r3, [pc, #84]	; (4594 <z_time_slice+0x6c>)
    453e:	6898      	ldr	r0, [r3, #8]
    4540:	4b15      	ldr	r3, [pc, #84]	; (4598 <z_time_slice+0x70>)
    4542:	681b      	ldr	r3, [r3, #0]
    4544:	4298      	cmp	r0, r3
    4546:	d011      	beq.n	456c <z_time_slice+0x44>
    4548:	4634      	mov	r4, r6
	pending_current = NULL;
    454a:	4b13      	ldr	r3, [pc, #76]	; (4598 <z_time_slice+0x70>)
    454c:	2200      	movs	r2, #0
    454e:	601a      	str	r2, [r3, #0]
	int ret = slice_ticks;
    4550:	4b12      	ldr	r3, [pc, #72]	; (459c <z_time_slice+0x74>)
    4552:	681b      	ldr	r3, [r3, #0]
	if (slice_time(_current) && sliceable(_current)) {
    4554:	b1b3      	cbz	r3, 4584 <z_time_slice+0x5c>
    4556:	f7ff feb9 	bl	42cc <sliceable>
    455a:	b198      	cbz	r0, 4584 <z_time_slice+0x5c>
		if (ticks >= _current_cpu->slice_ticks) {
    455c:	4b0d      	ldr	r3, [pc, #52]	; (4594 <z_time_slice+0x6c>)
    455e:	691b      	ldr	r3, [r3, #16]
    4560:	42ab      	cmp	r3, r5
    4562:	dd0a      	ble.n	457a <z_time_slice+0x52>
			_current_cpu->slice_ticks -= ticks;
    4564:	1b5b      	subs	r3, r3, r5
    4566:	4a0b      	ldr	r2, [pc, #44]	; (4594 <z_time_slice+0x6c>)
    4568:	6113      	str	r3, [r2, #16]
    456a:	e00e      	b.n	458a <z_time_slice+0x62>
		z_reset_time_slice(_current);
    456c:	f7ff fedc 	bl	4328 <z_reset_time_slice>
	__asm__ volatile(
    4570:	f386 8811 	msr	BASEPRI, r6
    4574:	f3bf 8f6f 	isb	sy
		return;
    4578:	e00b      	b.n	4592 <z_time_slice+0x6a>
			key = slice_expired_locked(key);
    457a:	4630      	mov	r0, r6
    457c:	f7ff ffc0 	bl	4500 <slice_expired_locked>
    4580:	4604      	mov	r4, r0
    4582:	e002      	b.n	458a <z_time_slice+0x62>
		_current_cpu->slice_ticks = 0;
    4584:	4b03      	ldr	r3, [pc, #12]	; (4594 <z_time_slice+0x6c>)
    4586:	2200      	movs	r2, #0
    4588:	611a      	str	r2, [r3, #16]
    458a:	f384 8811 	msr	BASEPRI, r4
    458e:	f3bf 8f6f 	isb	sy
}
    4592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4594:	20000ae8 	.word	0x20000ae8
    4598:	20000b14 	.word	0x20000b14
    459c:	20000b1c 	.word	0x20000b1c

000045a0 <ready_thread>:
	return (thread->base.thread_state & state) != 0U;
    45a0:	7b42      	ldrb	r2, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    45a2:	f990 300d 	ldrsb.w	r3, [r0, #13]
    45a6:	2b00      	cmp	r3, #0
    45a8:	db33      	blt.n	4612 <ready_thread+0x72>
{
    45aa:	b570      	push	{r4, r5, r6, lr}
    45ac:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    45ae:	f012 0f1f 	tst.w	r2, #31
    45b2:	d101      	bne.n	45b8 <ready_thread+0x18>
	return node->next != NULL;
    45b4:	6986      	ldr	r6, [r0, #24]
    45b6:	b106      	cbz	r6, 45ba <ready_thread+0x1a>
}
    45b8:	bd70      	pop	{r4, r5, r6, pc}
	thread->base.thread_state |= _THREAD_QUEUED;
    45ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
    45be:	7342      	strb	r2, [r0, #13]
	return list->head == list;
    45c0:	4b14      	ldr	r3, [pc, #80]	; (4614 <ready_thread+0x74>)
    45c2:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    45c6:	429d      	cmp	r5, r3
    45c8:	d108      	bne.n	45dc <ready_thread+0x3c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    45ca:	4635      	mov	r5, r6
    45cc:	e006      	b.n	45dc <ready_thread+0x3c>
	sys_dnode_t *const prev = successor->prev;
    45ce:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    45d0:	6063      	str	r3, [r4, #4]
	node->next = successor;
    45d2:	6025      	str	r5, [r4, #0]
	prev->next = node;
    45d4:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    45d6:	606c      	str	r4, [r5, #4]
}
    45d8:	e017      	b.n	460a <ready_thread+0x6a>
    45da:	4635      	mov	r5, r6
    45dc:	b16d      	cbz	r5, 45fa <ready_thread+0x5a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    45de:	4629      	mov	r1, r5
    45e0:	4620      	mov	r0, r4
    45e2:	f002 fe92 	bl	730a <z_sched_prio_cmp>
    45e6:	2800      	cmp	r0, #0
    45e8:	dcf1      	bgt.n	45ce <ready_thread+0x2e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    45ea:	2d00      	cmp	r5, #0
    45ec:	d0f6      	beq.n	45dc <ready_thread+0x3c>
	return (node == list->tail) ? NULL : node->next;
    45ee:	4b09      	ldr	r3, [pc, #36]	; (4614 <ready_thread+0x74>)
    45f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    45f2:	429d      	cmp	r5, r3
    45f4:	d0f1      	beq.n	45da <ready_thread+0x3a>
    45f6:	682d      	ldr	r5, [r5, #0]
    45f8:	e7f0      	b.n	45dc <ready_thread+0x3c>
	sys_dnode_t *const tail = list->tail;
    45fa:	4b06      	ldr	r3, [pc, #24]	; (4614 <ready_thread+0x74>)
    45fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    45fe:	f103 0120 	add.w	r1, r3, #32
    4602:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    4604:	6062      	str	r2, [r4, #4]
	tail->next = node;
    4606:	6014      	str	r4, [r2, #0]
	list->tail = node;
    4608:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
    460a:	2000      	movs	r0, #0
    460c:	f7ff ff0a 	bl	4424 <update_cache>
}
    4610:	e7d2      	b.n	45b8 <ready_thread+0x18>
    4612:	4770      	bx	lr
    4614:	20000ae8 	.word	0x20000ae8

00004618 <z_sched_start>:
{
    4618:	b510      	push	{r4, lr}
	__asm__ volatile(
    461a:	f04f 0320 	mov.w	r3, #32
    461e:	f3ef 8411 	mrs	r4, BASEPRI
    4622:	f383 8812 	msr	BASEPRI_MAX, r3
    4626:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    462a:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
    462c:	f013 0f04 	tst.w	r3, #4
    4630:	d104      	bne.n	463c <z_sched_start+0x24>
	__asm__ volatile(
    4632:	f384 8811 	msr	BASEPRI, r4
    4636:	f3bf 8f6f 	isb	sy
}
    463a:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    463c:	f023 0304 	bic.w	r3, r3, #4
    4640:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
    4642:	f7ff ffad 	bl	45a0 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    4646:	4621      	mov	r1, r4
    4648:	4801      	ldr	r0, [pc, #4]	; (4650 <z_sched_start+0x38>)
    464a:	f7ff febb 	bl	43c4 <z_reschedule>
    464e:	e7f4      	b.n	463a <z_sched_start+0x22>
    4650:	20000b20 	.word	0x20000b20

00004654 <unready_thread>:
{
    4654:	b510      	push	{r4, lr}
    4656:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
    4658:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    465a:	f990 300d 	ldrsb.w	r3, [r0, #13]
    465e:	2b00      	cmp	r3, #0
    4660:	db08      	blt.n	4674 <unready_thread+0x20>
	update_cache(thread == _current);
    4662:	4b08      	ldr	r3, [pc, #32]	; (4684 <unready_thread+0x30>)
    4664:	6898      	ldr	r0, [r3, #8]
    4666:	42a0      	cmp	r0, r4
    4668:	bf14      	ite	ne
    466a:	2000      	movne	r0, #0
    466c:	2001      	moveq	r0, #1
    466e:	f7ff fed9 	bl	4424 <update_cache>
}
    4672:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4674:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    4678:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    467a:	4601      	mov	r1, r0
    467c:	4802      	ldr	r0, [pc, #8]	; (4688 <unready_thread+0x34>)
    467e:	f002 fe7f 	bl	7380 <z_priq_dumb_remove>
}
    4682:	e7ee      	b.n	4662 <unready_thread+0xe>
    4684:	20000ae8 	.word	0x20000ae8
    4688:	20000b08 	.word	0x20000b08

0000468c <z_pend_curr>:
{
    468c:	b510      	push	{r4, lr}
    468e:	460c      	mov	r4, r1
    4690:	4611      	mov	r1, r2
	pending_current = _current;
    4692:	480a      	ldr	r0, [pc, #40]	; (46bc <z_pend_curr+0x30>)
    4694:	6882      	ldr	r2, [r0, #8]
    4696:	4b0a      	ldr	r3, [pc, #40]	; (46c0 <z_pend_curr+0x34>)
    4698:	601a      	str	r2, [r3, #0]
	__asm__ volatile(
    469a:	f04f 0220 	mov.w	r2, #32
    469e:	f3ef 8311 	mrs	r3, BASEPRI
    46a2:	f382 8812 	msr	BASEPRI_MAX, r2
    46a6:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
    46aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    46ae:	6880      	ldr	r0, [r0, #8]
    46b0:	f002 ff29 	bl	7506 <pend_locked>
    46b4:	4620      	mov	r0, r4
    46b6:	f7fc fed1 	bl	145c <arch_swap>
}
    46ba:	bd10      	pop	{r4, pc}
    46bc:	20000ae8 	.word	0x20000ae8
    46c0:	20000b14 	.word	0x20000b14

000046c4 <z_set_prio>:
{
    46c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    46c8:	4605      	mov	r5, r0
    46ca:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
    46cc:	2300      	movs	r3, #0
    46ce:	f04f 0220 	mov.w	r2, #32
    46d2:	f3ef 8611 	mrs	r6, BASEPRI
    46d6:	f382 8812 	msr	BASEPRI_MAX, r2
    46da:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
    46de:	4618      	mov	r0, r3
    46e0:	e029      	b.n	4736 <z_set_prio+0x72>
	sys_dnode_t *const prev = successor->prev;
    46e2:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    46e4:	606b      	str	r3, [r5, #4]
	node->next = successor;
    46e6:	602c      	str	r4, [r5, #0]
	prev->next = node;
    46e8:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    46ea:	6065      	str	r5, [r4, #4]
}
    46ec:	e017      	b.n	471e <z_set_prio+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    46ee:	4644      	mov	r4, r8
    46f0:	b16c      	cbz	r4, 470e <z_set_prio+0x4a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    46f2:	4621      	mov	r1, r4
    46f4:	4628      	mov	r0, r5
    46f6:	f002 fe08 	bl	730a <z_sched_prio_cmp>
    46fa:	2800      	cmp	r0, #0
    46fc:	dcf1      	bgt.n	46e2 <z_set_prio+0x1e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    46fe:	2c00      	cmp	r4, #0
    4700:	d0f6      	beq.n	46f0 <z_set_prio+0x2c>
	return (node == list->tail) ? NULL : node->next;
    4702:	4b1d      	ldr	r3, [pc, #116]	; (4778 <z_set_prio+0xb4>)
    4704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4706:	429c      	cmp	r4, r3
    4708:	d0f1      	beq.n	46ee <z_set_prio+0x2a>
    470a:	6824      	ldr	r4, [r4, #0]
    470c:	e7f0      	b.n	46f0 <z_set_prio+0x2c>
	sys_dnode_t *const tail = list->tail;
    470e:	4b1a      	ldr	r3, [pc, #104]	; (4778 <z_set_prio+0xb4>)
    4710:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    4712:	f103 0120 	add.w	r1, r3, #32
    4716:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    4718:	606a      	str	r2, [r5, #4]
	tail->next = node;
    471a:	6015      	str	r5, [r2, #0]
	list->tail = node;
    471c:	625d      	str	r5, [r3, #36]	; 0x24
			update_cache(1);
    471e:	2001      	movs	r0, #1
    4720:	f7ff fe80 	bl	4424 <update_cache>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    4724:	2001      	movs	r0, #1
    4726:	e001      	b.n	472c <z_set_prio+0x68>
			thread->base.prio = prio;
    4728:	73af      	strb	r7, [r5, #14]
    472a:	2000      	movs	r0, #0
	__asm__ volatile(
    472c:	f386 8811 	msr	BASEPRI, r6
    4730:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    4734:	2301      	movs	r3, #1
    4736:	b9e3      	cbnz	r3, 4772 <z_set_prio+0xae>
	uint8_t state = thread->base.thread_state;
    4738:	7b6b      	ldrb	r3, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    473a:	f013 0f1f 	tst.w	r3, #31
    473e:	d1f3      	bne.n	4728 <z_set_prio+0x64>
	return node->next != NULL;
    4740:	f8d5 8018 	ldr.w	r8, [r5, #24]
    4744:	f1b8 0f00 	cmp.w	r8, #0
    4748:	d1ee      	bne.n	4728 <z_set_prio+0x64>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    474a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    474e:	736b      	strb	r3, [r5, #13]
	_priq_run_remove(thread_runq(thread), thread);
    4750:	f8df 9028 	ldr.w	r9, [pc, #40]	; 477c <z_set_prio+0xb8>
    4754:	4629      	mov	r1, r5
    4756:	4648      	mov	r0, r9
    4758:	f002 fe12 	bl	7380 <z_priq_dumb_remove>
				thread->base.prio = prio;
    475c:	73af      	strb	r7, [r5, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    475e:	7b6b      	ldrb	r3, [r5, #13]
    4760:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4764:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    4766:	f8d9 4000 	ldr.w	r4, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    476a:	454c      	cmp	r4, r9
    476c:	d1c0      	bne.n	46f0 <z_set_prio+0x2c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    476e:	4644      	mov	r4, r8
    4770:	e7be      	b.n	46f0 <z_set_prio+0x2c>
}
    4772:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4776:	bf00      	nop
    4778:	20000ae8 	.word	0x20000ae8
    477c:	20000b08 	.word	0x20000b08

00004780 <z_impl_k_thread_suspend>:
{
    4780:	b538      	push	{r3, r4, r5, lr}
    4782:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    4784:	3018      	adds	r0, #24
    4786:	f002 ff53 	bl	7630 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    478a:	2300      	movs	r3, #0
	__asm__ volatile(
    478c:	f04f 0220 	mov.w	r2, #32
    4790:	f3ef 8511 	mrs	r5, BASEPRI
    4794:	f382 8812 	msr	BASEPRI_MAX, r2
    4798:	f3bf 8f6f 	isb	sy
    479c:	e010      	b.n	47c0 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    479e:	7b63      	ldrb	r3, [r4, #13]
    47a0:	f043 0310 	orr.w	r3, r3, #16
    47a4:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    47a6:	4b11      	ldr	r3, [pc, #68]	; (47ec <z_impl_k_thread_suspend+0x6c>)
    47a8:	6898      	ldr	r0, [r3, #8]
    47aa:	42a0      	cmp	r0, r4
    47ac:	bf14      	ite	ne
    47ae:	2000      	movne	r0, #0
    47b0:	2001      	moveq	r0, #1
    47b2:	f7ff fe37 	bl	4424 <update_cache>
	__asm__ volatile(
    47b6:	f385 8811 	msr	BASEPRI, r5
    47ba:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    47be:	2301      	movs	r3, #1
    47c0:	b963      	cbnz	r3, 47dc <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
    47c2:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
    47c4:	f994 300d 	ldrsb.w	r3, [r4, #13]
    47c8:	2b00      	cmp	r3, #0
    47ca:	dae8      	bge.n	479e <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    47cc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    47d0:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    47d2:	4621      	mov	r1, r4
    47d4:	4806      	ldr	r0, [pc, #24]	; (47f0 <z_impl_k_thread_suspend+0x70>)
    47d6:	f002 fdd3 	bl	7380 <z_priq_dumb_remove>
}
    47da:	e7e0      	b.n	479e <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
    47dc:	4b03      	ldr	r3, [pc, #12]	; (47ec <z_impl_k_thread_suspend+0x6c>)
    47de:	689b      	ldr	r3, [r3, #8]
    47e0:	42a3      	cmp	r3, r4
    47e2:	d000      	beq.n	47e6 <z_impl_k_thread_suspend+0x66>
}
    47e4:	bd38      	pop	{r3, r4, r5, pc}
		z_reschedule_unlocked();
    47e6:	f002 fdbf 	bl	7368 <z_reschedule_unlocked>
}
    47ea:	e7fb      	b.n	47e4 <z_impl_k_thread_suspend+0x64>
    47ec:	20000ae8 	.word	0x20000ae8
    47f0:	20000b08 	.word	0x20000b08

000047f4 <k_sched_unlock>:

void k_sched_unlock(void)
{
    47f4:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
    47f6:	2300      	movs	r3, #0
	__asm__ volatile(
    47f8:	f04f 0220 	mov.w	r2, #32
    47fc:	f3ef 8411 	mrs	r4, BASEPRI
    4800:	f382 8812 	msr	BASEPRI_MAX, r2
    4804:	f3bf 8f6f 	isb	sy
    4808:	e00c      	b.n	4824 <k_sched_unlock+0x30>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
    480a:	4b09      	ldr	r3, [pc, #36]	; (4830 <k_sched_unlock+0x3c>)
    480c:	689a      	ldr	r2, [r3, #8]
    480e:	7bd3      	ldrb	r3, [r2, #15]
    4810:	3301      	adds	r3, #1
    4812:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    4814:	2000      	movs	r0, #0
    4816:	f7ff fe05 	bl	4424 <update_cache>
	__asm__ volatile(
    481a:	f384 8811 	msr	BASEPRI, r4
    481e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    4822:	2301      	movs	r3, #1
    4824:	2b00      	cmp	r3, #0
    4826:	d0f0      	beq.n	480a <k_sched_unlock+0x16>
	LOG_DBG("scheduler unlocked (%p:%d)",
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
    4828:	f002 fd9e 	bl	7368 <z_reschedule_unlocked>
}
    482c:	bd10      	pop	{r4, pc}
    482e:	bf00      	nop
    4830:	20000ae8 	.word	0x20000ae8

00004834 <end_thread>:
static void end_thread(struct k_thread *thread)
{
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
    4834:	7b43      	ldrb	r3, [r0, #13]
    4836:	f013 0f08 	tst.w	r3, #8
    483a:	d12a      	bne.n	4892 <end_thread+0x5e>
{
    483c:	b510      	push	{r4, lr}
    483e:	4604      	mov	r4, r0
		thread->base.thread_state |= _THREAD_DEAD;
    4840:	f043 0208 	orr.w	r2, r3, #8
    4844:	7342      	strb	r2, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
    4846:	f023 0220 	bic.w	r2, r3, #32
    484a:	f042 0208 	orr.w	r2, r2, #8
    484e:	7342      	strb	r2, [r0, #13]
		if (z_is_thread_queued(thread)) {
    4850:	f012 0f80 	tst.w	r2, #128	; 0x80
    4854:	d113      	bne.n	487e <end_thread+0x4a>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
    4856:	68a3      	ldr	r3, [r4, #8]
    4858:	b113      	cbz	r3, 4860 <end_thread+0x2c>
			unpend_thread_no_timeout(thread);
    485a:	4620      	mov	r0, r4
    485c:	f002 fd98 	bl	7390 <unpend_thread_no_timeout>
    4860:	f104 0018 	add.w	r0, r4, #24
    4864:	f002 fee4 	bl	7630 <z_abort_timeout>
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
    4868:	f104 0058 	add.w	r0, r4, #88	; 0x58
    486c:	f002 fe0b 	bl	7486 <unpend_all>
		update_cache(1);
    4870:	2001      	movs	r0, #1
    4872:	f7ff fdd7 	bl	4424 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
    4876:	4620      	mov	r0, r4
    4878:	f7ff fb0a 	bl	3e90 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
    487c:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    487e:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    4882:	f043 0308 	orr.w	r3, r3, #8
    4886:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    4888:	4601      	mov	r1, r0
    488a:	4802      	ldr	r0, [pc, #8]	; (4894 <end_thread+0x60>)
    488c:	f002 fd78 	bl	7380 <z_priq_dumb_remove>
}
    4890:	e7e1      	b.n	4856 <end_thread+0x22>
    4892:	4770      	bx	lr
    4894:	20000b08 	.word	0x20000b08

00004898 <z_sched_init>:
{
    4898:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
    489a:	4804      	ldr	r0, [pc, #16]	; (48ac <z_sched_init+0x14>)
    489c:	f002 fe7f 	bl	759e <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    48a0:	2100      	movs	r1, #0
    48a2:	4608      	mov	r0, r1
    48a4:	f7ff fd54 	bl	4350 <k_sched_time_slice_set>
}
    48a8:	bd08      	pop	{r3, pc}
    48aa:	bf00      	nop
    48ac:	20000b04 	.word	0x20000b04

000048b0 <z_impl_k_yield>:
{
    48b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    48b2:	f04f 0320 	mov.w	r3, #32
    48b6:	f3ef 8611 	mrs	r6, BASEPRI
    48ba:	f383 8812 	msr	BASEPRI_MAX, r3
    48be:	f3bf 8f6f 	isb	sy
		dequeue_thread(_current);
    48c2:	4c1d      	ldr	r4, [pc, #116]	; (4938 <z_impl_k_yield+0x88>)
    48c4:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    48c6:	7b4b      	ldrb	r3, [r1, #13]
    48c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    48cc:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    48ce:	f104 0720 	add.w	r7, r4, #32
    48d2:	4638      	mov	r0, r7
    48d4:	f002 fd54 	bl	7380 <z_priq_dumb_remove>
	queue_thread(_current);
    48d8:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    48da:	7b6b      	ldrb	r3, [r5, #13]
    48dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
    48e0:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    48e2:	6a24      	ldr	r4, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    48e4:	42bc      	cmp	r4, r7
    48e6:	d108      	bne.n	48fa <z_impl_k_yield+0x4a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    48e8:	2400      	movs	r4, #0
    48ea:	e006      	b.n	48fa <z_impl_k_yield+0x4a>
	sys_dnode_t *const prev = successor->prev;
    48ec:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    48ee:	606b      	str	r3, [r5, #4]
	node->next = successor;
    48f0:	602c      	str	r4, [r5, #0]
	prev->next = node;
    48f2:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    48f4:	6065      	str	r5, [r4, #4]
}
    48f6:	e017      	b.n	4928 <z_impl_k_yield+0x78>
    48f8:	2400      	movs	r4, #0
    48fa:	b16c      	cbz	r4, 4918 <z_impl_k_yield+0x68>
		if (z_sched_prio_cmp(thread, t) > 0) {
    48fc:	4621      	mov	r1, r4
    48fe:	4628      	mov	r0, r5
    4900:	f002 fd03 	bl	730a <z_sched_prio_cmp>
    4904:	2800      	cmp	r0, #0
    4906:	dcf1      	bgt.n	48ec <z_impl_k_yield+0x3c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4908:	2c00      	cmp	r4, #0
    490a:	d0f6      	beq.n	48fa <z_impl_k_yield+0x4a>
	return (node == list->tail) ? NULL : node->next;
    490c:	4b0a      	ldr	r3, [pc, #40]	; (4938 <z_impl_k_yield+0x88>)
    490e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4910:	429c      	cmp	r4, r3
    4912:	d0f1      	beq.n	48f8 <z_impl_k_yield+0x48>
    4914:	6824      	ldr	r4, [r4, #0]
    4916:	e7f0      	b.n	48fa <z_impl_k_yield+0x4a>
	sys_dnode_t *const tail = list->tail;
    4918:	4b07      	ldr	r3, [pc, #28]	; (4938 <z_impl_k_yield+0x88>)
    491a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    491c:	f103 0120 	add.w	r1, r3, #32
    4920:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    4922:	606a      	str	r2, [r5, #4]
	tail->next = node;
    4924:	6015      	str	r5, [r2, #0]
	list->tail = node;
    4926:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
    4928:	2001      	movs	r0, #1
    492a:	f7ff fd7b 	bl	4424 <update_cache>
    492e:	4630      	mov	r0, r6
    4930:	f7fc fd94 	bl	145c <arch_swap>
}
    4934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4936:	bf00      	nop
    4938:	20000ae8 	.word	0x20000ae8

0000493c <z_tick_sleep>:
{
    493c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (ticks == 0) {
    4940:	ea50 0301 	orrs.w	r3, r0, r1
    4944:	d038      	beq.n	49b8 <z_tick_sleep+0x7c>
    4946:	4604      	mov	r4, r0
    4948:	460e      	mov	r6, r1
	if (Z_TICK_ABS(ticks) <= 0) {
    494a:	f06f 0301 	mvn.w	r3, #1
    494e:	1a1b      	subs	r3, r3, r0
    4950:	f04f 32ff 	mov.w	r2, #4294967295
    4954:	eb62 0201 	sbc.w	r2, r2, r1
    4958:	2b01      	cmp	r3, #1
    495a:	f172 0200 	sbcs.w	r2, r2, #0
    495e:	db2f      	blt.n	49c0 <z_tick_sleep+0x84>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    4960:	f06f 0501 	mvn.w	r5, #1
    4964:	1a2d      	subs	r5, r5, r0
    4966:	f04f 0320 	mov.w	r3, #32
    496a:	f3ef 8811 	mrs	r8, BASEPRI
    496e:	f383 8812 	msr	BASEPRI_MAX, r3
    4972:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    4976:	4f14      	ldr	r7, [pc, #80]	; (49c8 <z_tick_sleep+0x8c>)
    4978:	68b8      	ldr	r0, [r7, #8]
    497a:	4b14      	ldr	r3, [pc, #80]	; (49cc <z_tick_sleep+0x90>)
    497c:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    497e:	f7ff fe69 	bl	4654 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    4982:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    4984:	4622      	mov	r2, r4
    4986:	4633      	mov	r3, r6
    4988:	4911      	ldr	r1, [pc, #68]	; (49d0 <z_tick_sleep+0x94>)
    498a:	3018      	adds	r0, #24
    498c:	f000 f900 	bl	4b90 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    4990:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    4992:	7b53      	ldrb	r3, [r2, #13]
    4994:	f043 0310 	orr.w	r3, r3, #16
    4998:	7353      	strb	r3, [r2, #13]
    499a:	4640      	mov	r0, r8
    499c:	f7fc fd5e 	bl	145c <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    49a0:	f002 fea6 	bl	76f0 <sys_clock_tick_get_32>
    49a4:	1a28      	subs	r0, r5, r0
    49a6:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    49aa:	2801      	cmp	r0, #1
    49ac:	f173 0300 	sbcs.w	r3, r3, #0
    49b0:	da00      	bge.n	49b4 <z_tick_sleep+0x78>
	return 0;
    49b2:	2000      	movs	r0, #0
}
    49b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
    49b8:	f7ff ff7a 	bl	48b0 <z_impl_k_yield>
		return 0;
    49bc:	2000      	movs	r0, #0
    49be:	e7f9      	b.n	49b4 <z_tick_sleep+0x78>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    49c0:	f002 fe96 	bl	76f0 <sys_clock_tick_get_32>
    49c4:	1905      	adds	r5, r0, r4
    49c6:	e7ce      	b.n	4966 <z_tick_sleep+0x2a>
    49c8:	20000ae8 	.word	0x20000ae8
    49cc:	20000b14 	.word	0x20000b14
    49d0:	00007429 	.word	0x00007429

000049d4 <z_impl_k_sleep>:
{
    49d4:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    49d6:	f1b1 3fff 	cmp.w	r1, #4294967295
    49da:	bf08      	it	eq
    49dc:	f1b0 3fff 	cmpeq.w	r0, #4294967295
    49e0:	d018      	beq.n	4a14 <z_impl_k_sleep+0x40>
	ticks = z_tick_sleep(ticks);
    49e2:	f7ff ffab 	bl	493c <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
    49e6:	17c2      	asrs	r2, r0, #31
			return ((t * to_hz + off) / from_hz);
    49e8:	0151      	lsls	r1, r2, #5
    49ea:	ea41 61d0 	orr.w	r1, r1, r0, lsr #27
    49ee:	0143      	lsls	r3, r0, #5
    49f0:	1a1b      	subs	r3, r3, r0
    49f2:	eb61 0102 	sbc.w	r1, r1, r2
    49f6:	0089      	lsls	r1, r1, #2
    49f8:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
    49fc:	009b      	lsls	r3, r3, #2
    49fe:	181b      	adds	r3, r3, r0
    4a00:	eb42 0201 	adc.w	r2, r2, r1
    4a04:	00d2      	lsls	r2, r2, #3
    4a06:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
    4a0a:	f3c3 3310 	ubfx	r3, r3, #12, #17
    4a0e:	ea43 4042 	orr.w	r0, r3, r2, lsl #17
}
    4a12:	bd08      	pop	{r3, pc}
		k_thread_suspend(_current);
    4a14:	4b03      	ldr	r3, [pc, #12]	; (4a24 <z_impl_k_sleep+0x50>)
    4a16:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    4a18:	f7ff feb2 	bl	4780 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    4a1c:	f04f 30ff 	mov.w	r0, #4294967295
    4a20:	e7f7      	b.n	4a12 <z_impl_k_sleep+0x3e>
    4a22:	bf00      	nop
    4a24:	20000ae8 	.word	0x20000ae8

00004a28 <z_impl_z_current_get>:
}
    4a28:	4b01      	ldr	r3, [pc, #4]	; (4a30 <z_impl_z_current_get+0x8>)
    4a2a:	6898      	ldr	r0, [r3, #8]
    4a2c:	4770      	bx	lr
    4a2e:	bf00      	nop
    4a30:	20000ae8 	.word	0x20000ae8

00004a34 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
    4a34:	b570      	push	{r4, r5, r6, lr}
    4a36:	f04f 0320 	mov.w	r3, #32
    4a3a:	f3ef 8511 	mrs	r5, BASEPRI
    4a3e:	f383 8812 	msr	BASEPRI_MAX, r3
    4a42:	f3bf 8f6f 	isb	sy
    4a46:	462e      	mov	r6, r5
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    4a48:	7b03      	ldrb	r3, [r0, #12]
    4a4a:	f013 0f01 	tst.w	r3, #1
    4a4e:	d109      	bne.n	4a64 <z_thread_abort+0x30>
    4a50:	4604      	mov	r4, r0
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
		return;
	}

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    4a52:	7b43      	ldrb	r3, [r0, #13]
    4a54:	f013 0f08 	tst.w	r3, #8
    4a58:	d00f      	beq.n	4a7a <z_thread_abort+0x46>
	__asm__ volatile(
    4a5a:	f385 8811 	msr	BASEPRI, r5
    4a5e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		return;
    4a62:	e009      	b.n	4a78 <z_thread_abort+0x44>
    4a64:	f385 8811 	msr	BASEPRI, r5
    4a68:	f3bf 8f6f 	isb	sy
		k_panic();
    4a6c:	4040      	eors	r0, r0
    4a6e:	f380 8811 	msr	BASEPRI, r0
    4a72:	f04f 0004 	mov.w	r0, #4
    4a76:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    4a78:	bd70      	pop	{r4, r5, r6, pc}
	end_thread(thread);
    4a7a:	f7ff fedb 	bl	4834 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
    4a7e:	4b08      	ldr	r3, [pc, #32]	; (4aa0 <z_thread_abort+0x6c>)
    4a80:	689b      	ldr	r3, [r3, #8]
    4a82:	42a3      	cmp	r3, r4
    4a84:	d004      	beq.n	4a90 <z_thread_abort+0x5c>
    4a86:	f386 8811 	msr	BASEPRI, r6
    4a8a:	f3bf 8f6f 	isb	sy
    4a8e:	e7f3      	b.n	4a78 <z_thread_abort+0x44>
    4a90:	f3ef 8305 	mrs	r3, IPSR
    4a94:	2b00      	cmp	r3, #0
    4a96:	d1f6      	bne.n	4a86 <z_thread_abort+0x52>
    4a98:	4628      	mov	r0, r5
    4a9a:	f7fc fcdf 	bl	145c <arch_swap>
	return ret;
    4a9e:	e7f2      	b.n	4a86 <z_thread_abort+0x52>
    4aa0:	20000ae8 	.word	0x20000ae8

00004aa4 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    4aa4:	e92d 4810 	stmdb	sp!, {r4, fp, lr}
    4aa8:	b083      	sub	sp, #12
    4aaa:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    4aac:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
    4ab0:	e9cd bc00 	strd	fp, ip, [sp]
    4ab4:	f7ff fdea 	bl	468c <z_pend_curr>

	if (data != NULL) {
    4ab8:	b11c      	cbz	r4, 4ac2 <z_sched_wait+0x1e>
		*data = _current->base.swap_data;
    4aba:	4b03      	ldr	r3, [pc, #12]	; (4ac8 <z_sched_wait+0x24>)
    4abc:	689b      	ldr	r3, [r3, #8]
    4abe:	695b      	ldr	r3, [r3, #20]
    4ac0:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    4ac2:	b003      	add	sp, #12
    4ac4:	e8bd 8810 	ldmia.w	sp!, {r4, fp, pc}
    4ac8:	20000ae8 	.word	0x20000ae8

00004acc <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    4acc:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    4ace:	4806      	ldr	r0, [pc, #24]	; (4ae8 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    4ad0:	4a06      	ldr	r2, [pc, #24]	; (4aec <z_data_copy+0x20>)
    4ad2:	1a12      	subs	r2, r2, r0
    4ad4:	4906      	ldr	r1, [pc, #24]	; (4af0 <z_data_copy+0x24>)
    4ad6:	f002 fb56 	bl	7186 <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    4ada:	4a06      	ldr	r2, [pc, #24]	; (4af4 <z_data_copy+0x28>)
    4adc:	4906      	ldr	r1, [pc, #24]	; (4af8 <z_data_copy+0x2c>)
    4ade:	4807      	ldr	r0, [pc, #28]	; (4afc <z_data_copy+0x30>)
    4ae0:	f002 fb51 	bl	7186 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    4ae4:	bd08      	pop	{r3, pc}
    4ae6:	bf00      	nop
    4ae8:	20000000 	.word	0x20000000
    4aec:	20000240 	.word	0x20000240
    4af0:	000080dc 	.word	0x000080dc
    4af4:	00000000 	.word	0x00000000
    4af8:	000080dc 	.word	0x000080dc
    4afc:	20000000 	.word	0x20000000

00004b00 <first>:
	return list->head == list;
    4b00:	4b03      	ldr	r3, [pc, #12]	; (4b10 <first+0x10>)
    4b02:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4b04:	4298      	cmp	r0, r3
    4b06:	d000      	beq.n	4b0a <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    4b08:	4770      	bx	lr
    4b0a:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    4b0c:	e7fc      	b.n	4b08 <first+0x8>
    4b0e:	bf00      	nop
    4b10:	2000017c 	.word	0x2000017c

00004b14 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4b14:	b130      	cbz	r0, 4b24 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    4b16:	4a04      	ldr	r2, [pc, #16]	; (4b28 <next+0x14>)
    4b18:	6852      	ldr	r2, [r2, #4]
    4b1a:	4290      	cmp	r0, r2
    4b1c:	d001      	beq.n	4b22 <next+0xe>
    4b1e:	6800      	ldr	r0, [r0, #0]
    4b20:	4770      	bx	lr
    4b22:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    4b24:	4770      	bx	lr
    4b26:	bf00      	nop
    4b28:	2000017c 	.word	0x2000017c

00004b2c <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    4b2c:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    4b2e:	4b04      	ldr	r3, [pc, #16]	; (4b40 <elapsed+0x14>)
    4b30:	681b      	ldr	r3, [r3, #0]
    4b32:	b10b      	cbz	r3, 4b38 <elapsed+0xc>
    4b34:	2000      	movs	r0, #0
}
    4b36:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    4b38:	f7fe f8d0 	bl	2cdc <sys_clock_elapsed>
    4b3c:	e7fb      	b.n	4b36 <elapsed+0xa>
    4b3e:	bf00      	nop
    4b40:	20000b20 	.word	0x20000b20

00004b44 <next_timeout>:

static int32_t next_timeout(void)
{
    4b44:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    4b46:	f7ff ffdb 	bl	4b00 <first>
    4b4a:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
    4b4c:	f7ff ffee 	bl	4b2c <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    4b50:	b17c      	cbz	r4, 4b72 <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    4b52:	6923      	ldr	r3, [r4, #16]
    4b54:	6962      	ldr	r2, [r4, #20]
    4b56:	1a1b      	subs	r3, r3, r0
    4b58:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    4b5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    4b60:	f172 0100 	sbcs.w	r1, r2, #0
    4b64:	da08      	bge.n	4b78 <next_timeout+0x34>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    4b66:	2a00      	cmp	r2, #0
    4b68:	db01      	blt.n	4b6e <next_timeout+0x2a>
    4b6a:	4618      	mov	r0, r3
    4b6c:	e006      	b.n	4b7c <next_timeout+0x38>
    4b6e:	2300      	movs	r3, #0
    4b70:	e7fb      	b.n	4b6a <next_timeout+0x26>
		ret = MAX_WAIT;
    4b72:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    4b76:	e001      	b.n	4b7c <next_timeout+0x38>
    4b78:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    4b7c:	4b03      	ldr	r3, [pc, #12]	; (4b8c <next_timeout+0x48>)
    4b7e:	691b      	ldr	r3, [r3, #16]
    4b80:	b113      	cbz	r3, 4b88 <next_timeout+0x44>
    4b82:	4283      	cmp	r3, r0
    4b84:	da00      	bge.n	4b88 <next_timeout+0x44>
		ret = _current_cpu->slice_ticks;
    4b86:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
    4b88:	bd10      	pop	{r4, pc}
    4b8a:	bf00      	nop
    4b8c:	20000ae8 	.word	0x20000ae8

00004b90 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4b90:	f1b3 3fff 	cmp.w	r3, #4294967295
    4b94:	bf08      	it	eq
    4b96:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    4b9a:	d07b      	beq.n	4c94 <z_add_timeout+0x104>
{
    4b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4ba0:	4604      	mov	r4, r0
    4ba2:	4692      	mov	sl, r2
    4ba4:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    4ba6:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
    4ba8:	2300      	movs	r3, #0
	__asm__ volatile(
    4baa:	f04f 0220 	mov.w	r2, #32
    4bae:	f3ef 8711 	mrs	r7, BASEPRI
    4bb2:	f382 8812 	msr	BASEPRI_MAX, r2
    4bb6:	f3bf 8f6f 	isb	sy
    4bba:	e026      	b.n	4c0a <z_add_timeout+0x7a>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    4bbc:	f11a 0801 	adds.w	r8, sl, #1
    4bc0:	f145 0900 	adc.w	r9, r5, #0
    4bc4:	f7ff ffb2 	bl	4b2c <elapsed>
    4bc8:	eb18 0300 	adds.w	r3, r8, r0
    4bcc:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
    4bd0:	6123      	str	r3, [r4, #16]
    4bd2:	6160      	str	r0, [r4, #20]
    4bd4:	e03b      	b.n	4c4e <z_add_timeout+0xbe>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
    4bd6:	1a52      	subs	r2, r2, r1
    4bd8:	eb66 0303 	sbc.w	r3, r6, r3
    4bdc:	6102      	str	r2, [r0, #16]
    4bde:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
    4be0:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
    4be2:	6063      	str	r3, [r4, #4]
	node->next = successor;
    4be4:	6020      	str	r0, [r4, #0]
	prev->next = node;
    4be6:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    4be8:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    4bea:	e005      	b.n	4bf8 <z_add_timeout+0x68>
	sys_dnode_t *const tail = list->tail;
    4bec:	4b2a      	ldr	r3, [pc, #168]	; (4c98 <z_add_timeout+0x108>)
    4bee:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    4bf0:	6023      	str	r3, [r4, #0]
	node->prev = tail;
    4bf2:	6062      	str	r2, [r4, #4]
	tail->next = node;
    4bf4:	6014      	str	r4, [r2, #0]
	list->tail = node;
    4bf6:	605c      	str	r4, [r3, #4]
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    4bf8:	f7ff ff82 	bl	4b00 <first>
    4bfc:	4284      	cmp	r4, r0
    4bfe:	d03a      	beq.n	4c76 <z_add_timeout+0xe6>
	__asm__ volatile(
    4c00:	f387 8811 	msr	BASEPRI, r7
    4c04:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    4c08:	2301      	movs	r3, #1
    4c0a:	2b00      	cmp	r3, #0
    4c0c:	d140      	bne.n	4c90 <z_add_timeout+0x100>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    4c0e:	4653      	mov	r3, sl
    4c10:	f06f 0101 	mvn.w	r1, #1
    4c14:	ebb1 010a 	subs.w	r1, r1, sl
    4c18:	f04f 30ff 	mov.w	r0, #4294967295
    4c1c:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    4c20:	2a00      	cmp	r2, #0
    4c22:	dbcb      	blt.n	4bbc <z_add_timeout+0x2c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    4c24:	4a1d      	ldr	r2, [pc, #116]	; (4c9c <z_add_timeout+0x10c>)
    4c26:	6811      	ldr	r1, [r2, #0]
    4c28:	6852      	ldr	r2, [r2, #4]
    4c2a:	185b      	adds	r3, r3, r1
    4c2c:	eb42 0205 	adc.w	r2, r2, r5
    4c30:	f06f 0101 	mvn.w	r1, #1
    4c34:	1ac9      	subs	r1, r1, r3
    4c36:	eb60 0302 	sbc.w	r3, r0, r2
			to->dticks = MAX(1, ticks);
    4c3a:	4608      	mov	r0, r1
    4c3c:	461a      	mov	r2, r3
    4c3e:	2901      	cmp	r1, #1
    4c40:	f173 0300 	sbcs.w	r3, r3, #0
    4c44:	da01      	bge.n	4c4a <z_add_timeout+0xba>
    4c46:	2001      	movs	r0, #1
    4c48:	2200      	movs	r2, #0
    4c4a:	6120      	str	r0, [r4, #16]
    4c4c:	6162      	str	r2, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    4c4e:	f7ff ff57 	bl	4b00 <first>
    4c52:	2800      	cmp	r0, #0
    4c54:	d0ca      	beq.n	4bec <z_add_timeout+0x5c>
			if (t->dticks > to->dticks) {
    4c56:	6902      	ldr	r2, [r0, #16]
    4c58:	6946      	ldr	r6, [r0, #20]
    4c5a:	6921      	ldr	r1, [r4, #16]
    4c5c:	6963      	ldr	r3, [r4, #20]
    4c5e:	4291      	cmp	r1, r2
    4c60:	eb73 0e06 	sbcs.w	lr, r3, r6
    4c64:	dbb7      	blt.n	4bd6 <z_add_timeout+0x46>
			to->dticks -= t->dticks;
    4c66:	1a89      	subs	r1, r1, r2
    4c68:	eb63 0306 	sbc.w	r3, r3, r6
    4c6c:	6121      	str	r1, [r4, #16]
    4c6e:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    4c70:	f7ff ff50 	bl	4b14 <next>
    4c74:	e7ed      	b.n	4c52 <z_add_timeout+0xc2>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    4c76:	f7ff ff65 	bl	4b44 <next_timeout>

			if (next_time == 0 ||
    4c7a:	4603      	mov	r3, r0
    4c7c:	b118      	cbz	r0, 4c86 <z_add_timeout+0xf6>
			    _current_cpu->slice_ticks != next_time) {
    4c7e:	4a08      	ldr	r2, [pc, #32]	; (4ca0 <z_add_timeout+0x110>)
    4c80:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
    4c82:	4282      	cmp	r2, r0
    4c84:	d0bc      	beq.n	4c00 <z_add_timeout+0x70>
				sys_clock_set_timeout(next_time, false);
    4c86:	2100      	movs	r1, #0
    4c88:	4618      	mov	r0, r3
    4c8a:	f7fd fff5 	bl	2c78 <sys_clock_set_timeout>
    4c8e:	e7b7      	b.n	4c00 <z_add_timeout+0x70>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    4c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4c94:	4770      	bx	lr
    4c96:	bf00      	nop
    4c98:	2000017c 	.word	0x2000017c
    4c9c:	200003d0 	.word	0x200003d0
    4ca0:	20000ae8 	.word	0x20000ae8

00004ca4 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    4ca4:	b570      	push	{r4, r5, r6, lr}
    4ca6:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    4ca8:	f7ff fc3e 	bl	4528 <z_time_slice>
	__asm__ volatile(
    4cac:	f04f 0320 	mov.w	r3, #32
    4cb0:	f3ef 8611 	mrs	r6, BASEPRI
    4cb4:	f383 8812 	msr	BASEPRI_MAX, r3
    4cb8:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    4cbc:	4b28      	ldr	r3, [pc, #160]	; (4d60 <sys_clock_announce+0xbc>)
    4cbe:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    4cc0:	e021      	b.n	4d06 <sys_clock_announce+0x62>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    4cc2:	4a28      	ldr	r2, [pc, #160]	; (4d64 <sys_clock_announce+0xc0>)
    4cc4:	6813      	ldr	r3, [r2, #0]
    4cc6:	6851      	ldr	r1, [r2, #4]
    4cc8:	195b      	adds	r3, r3, r5
    4cca:	eb41 71e5 	adc.w	r1, r1, r5, asr #31
    4cce:	6013      	str	r3, [r2, #0]
    4cd0:	6051      	str	r1, [r2, #4]
		t->dticks = 0;
    4cd2:	2200      	movs	r2, #0
    4cd4:	2300      	movs	r3, #0
    4cd6:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    4cda:	4620      	mov	r0, r4
    4cdc:	f002 fc91 	bl	7602 <remove_timeout>
	__asm__ volatile(
    4ce0:	f386 8811 	msr	BASEPRI, r6
    4ce4:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    4ce8:	68a3      	ldr	r3, [r4, #8]
    4cea:	4620      	mov	r0, r4
    4cec:	4798      	blx	r3
	__asm__ volatile(
    4cee:	f04f 0320 	mov.w	r3, #32
    4cf2:	f3ef 8611 	mrs	r6, BASEPRI
    4cf6:	f383 8812 	msr	BASEPRI_MAX, r3
    4cfa:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
    4cfe:	4a18      	ldr	r2, [pc, #96]	; (4d60 <sys_clock_announce+0xbc>)
    4d00:	6813      	ldr	r3, [r2, #0]
    4d02:	1b5b      	subs	r3, r3, r5
    4d04:	6013      	str	r3, [r2, #0]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    4d06:	f7ff fefb 	bl	4b00 <first>
    4d0a:	4604      	mov	r4, r0
    4d0c:	b138      	cbz	r0, 4d1e <sys_clock_announce+0x7a>
    4d0e:	6905      	ldr	r5, [r0, #16]
    4d10:	6941      	ldr	r1, [r0, #20]
    4d12:	4b13      	ldr	r3, [pc, #76]	; (4d60 <sys_clock_announce+0xbc>)
    4d14:	681a      	ldr	r2, [r3, #0]
    4d16:	17d3      	asrs	r3, r2, #31
    4d18:	42aa      	cmp	r2, r5
    4d1a:	418b      	sbcs	r3, r1
    4d1c:	dad1      	bge.n	4cc2 <sys_clock_announce+0x1e>
	}

	if (first() != NULL) {
    4d1e:	b144      	cbz	r4, 4d32 <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
    4d20:	6923      	ldr	r3, [r4, #16]
    4d22:	6962      	ldr	r2, [r4, #20]
    4d24:	490e      	ldr	r1, [pc, #56]	; (4d60 <sys_clock_announce+0xbc>)
    4d26:	6809      	ldr	r1, [r1, #0]
    4d28:	1a5b      	subs	r3, r3, r1
    4d2a:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
    4d2e:	6123      	str	r3, [r4, #16]
    4d30:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
    4d32:	4a0c      	ldr	r2, [pc, #48]	; (4d64 <sys_clock_announce+0xc0>)
    4d34:	4d0a      	ldr	r5, [pc, #40]	; (4d60 <sys_clock_announce+0xbc>)
    4d36:	6828      	ldr	r0, [r5, #0]
    4d38:	6813      	ldr	r3, [r2, #0]
    4d3a:	6851      	ldr	r1, [r2, #4]
    4d3c:	181b      	adds	r3, r3, r0
    4d3e:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
    4d42:	6013      	str	r3, [r2, #0]
    4d44:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
    4d46:	2400      	movs	r4, #0
    4d48:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
    4d4a:	f7ff fefb 	bl	4b44 <next_timeout>
    4d4e:	4621      	mov	r1, r4
    4d50:	f7fd ff92 	bl	2c78 <sys_clock_set_timeout>
	__asm__ volatile(
    4d54:	f386 8811 	msr	BASEPRI, r6
    4d58:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    4d5c:	bd70      	pop	{r4, r5, r6, pc}
    4d5e:	bf00      	nop
    4d60:	20000b20 	.word	0x20000b20
    4d64:	200003d0 	.word	0x200003d0

00004d68 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    4d68:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
    4d6a:	2200      	movs	r2, #0
	__asm__ volatile(
    4d6c:	f04f 0320 	mov.w	r3, #32
    4d70:	f3ef 8411 	mrs	r4, BASEPRI
    4d74:	f383 8812 	msr	BASEPRI_MAX, r3
    4d78:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
    4d7c:	4613      	mov	r3, r2
    4d7e:	4611      	mov	r1, r2
    4d80:	e00c      	b.n	4d9c <sys_clock_tick_get+0x34>
		t = curr_tick + elapsed();
    4d82:	f7ff fed3 	bl	4b2c <elapsed>
    4d86:	4a07      	ldr	r2, [pc, #28]	; (4da4 <sys_clock_tick_get+0x3c>)
    4d88:	6813      	ldr	r3, [r2, #0]
    4d8a:	6851      	ldr	r1, [r2, #4]
    4d8c:	18c3      	adds	r3, r0, r3
    4d8e:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
	__asm__ volatile(
    4d92:	f384 8811 	msr	BASEPRI, r4
    4d96:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    4d9a:	2201      	movs	r2, #1
    4d9c:	2a00      	cmp	r2, #0
    4d9e:	d0f0      	beq.n	4d82 <sys_clock_tick_get+0x1a>
	}
	return t;
}
    4da0:	4618      	mov	r0, r3
    4da2:	bd10      	pop	{r4, pc}
    4da4:	200003d0 	.word	0x200003d0

00004da8 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    4da8:	b538      	push	{r3, r4, r5, lr}
    4daa:	4604      	mov	r4, r0
	__asm__ volatile(
    4dac:	f04f 0320 	mov.w	r3, #32
    4db0:	f3ef 8511 	mrs	r5, BASEPRI
    4db4:	f383 8812 	msr	BASEPRI_MAX, r3
    4db8:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    4dbc:	6a82      	ldr	r2, [r0, #40]	; 0x28
    4dbe:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    4dc0:	ea52 0103 	orrs.w	r1, r2, r3
    4dc4:	d005      	beq.n	4dd2 <z_timer_expiration_handler+0x2a>
    4dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
    4dca:	bf08      	it	eq
    4dcc:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    4dd0:	d128      	bne.n	4e24 <z_timer_expiration_handler+0x7c>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
    4dd2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    4dd4:	3301      	adds	r3, #1
    4dd6:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    4dd8:	6a23      	ldr	r3, [r4, #32]
    4dda:	b173      	cbz	r3, 4dfa <z_timer_expiration_handler+0x52>
	__asm__ volatile(
    4ddc:	f385 8811 	msr	BASEPRI, r5
    4de0:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    4de4:	6a23      	ldr	r3, [r4, #32]
    4de6:	4620      	mov	r0, r4
    4de8:	4798      	blx	r3
	__asm__ volatile(
    4dea:	f04f 0320 	mov.w	r3, #32
    4dee:	f3ef 8511 	mrs	r5, BASEPRI
    4df2:	f383 8812 	msr	BASEPRI_MAX, r3
    4df6:	f3bf 8f6f 	isb	sy
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    4dfa:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
    4dfe:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4e00:	42a3      	cmp	r3, r4
    4e02:	d038      	beq.n	4e76 <z_timer_expiration_handler+0xce>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    4e04:	2c00      	cmp	r4, #0
    4e06:	d036      	beq.n	4e76 <z_timer_expiration_handler+0xce>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
    4e08:	4620      	mov	r0, r4
    4e0a:	f002 fa88 	bl	731e <z_unpend_thread_no_timeout>
    4e0e:	2300      	movs	r3, #0
    4e10:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	__asm__ volatile(
    4e14:	f385 8811 	msr	BASEPRI, r5
    4e18:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
    4e1c:	4620      	mov	r0, r4
    4e1e:	f002 fae7 	bl	73f0 <z_ready_thread>
}
    4e22:	bd38      	pop	{r3, r4, r5, pc}
	return z_impl_k_uptime_ticks();
    4e24:	f002 fc68 	bl	76f8 <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
    4e28:	3001      	adds	r0, #1
    4e2a:	f141 0100 	adc.w	r1, r1, #0
    4e2e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4e30:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4e32:	18c0      	adds	r0, r0, r3
    4e34:	eb41 0102 	adc.w	r1, r1, r2
    4e38:	2801      	cmp	r0, #1
    4e3a:	f171 0100 	sbcs.w	r1, r1, #0
    4e3e:	da08      	bge.n	4e52 <z_timer_expiration_handler+0xaa>
    4e40:	f06f 0201 	mvn.w	r2, #1
    4e44:	f04f 33ff 	mov.w	r3, #4294967295
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    4e48:	490d      	ldr	r1, [pc, #52]	; (4e80 <z_timer_expiration_handler+0xd8>)
    4e4a:	4620      	mov	r0, r4
    4e4c:	f7ff fea0 	bl	4b90 <z_add_timeout>
    4e50:	e7bf      	b.n	4dd2 <z_timer_expiration_handler+0x2a>
    4e52:	f002 fc51 	bl	76f8 <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
    4e56:	3001      	adds	r0, #1
    4e58:	f141 0300 	adc.w	r3, r1, #0
    4e5c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    4e5e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    4e60:	1880      	adds	r0, r0, r2
    4e62:	eb43 0301 	adc.w	r3, r3, r1
    4e66:	f06f 0201 	mvn.w	r2, #1
    4e6a:	1a12      	subs	r2, r2, r0
    4e6c:	f04f 31ff 	mov.w	r1, #4294967295
    4e70:	eb61 0303 	sbc.w	r3, r1, r3
    4e74:	e7e8      	b.n	4e48 <z_timer_expiration_handler+0xa0>
    4e76:	f385 8811 	msr	BASEPRI, r5
    4e7a:	f3bf 8f6f 	isb	sy
		return;
    4e7e:	e7d0      	b.n	4e22 <z_timer_expiration_handler+0x7a>
    4e80:	00004da9 	.word	0x00004da9

00004e84 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    4e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4e88:	461e      	mov	r6, r3
    4e8a:	9f06      	ldr	r7, [sp, #24]
    4e8c:	f8dd 801c 	ldr.w	r8, [sp, #28]
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    4e90:	f1b3 3fff 	cmp.w	r3, #4294967295
    4e94:	bf08      	it	eq
    4e96:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    4e9a:	d02f      	beq.n	4efc <z_impl_k_timer_start+0x78>
    4e9c:	4605      	mov	r5, r0
    4e9e:	4614      	mov	r4, r2
    4ea0:	4613      	mov	r3, r2
    4ea2:	4631      	mov	r1, r6
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    4ea4:	4640      	mov	r0, r8
    4ea6:	f1b8 3fff 	cmp.w	r8, #4294967295
    4eaa:	bf08      	it	eq
    4eac:	f1b7 3fff 	cmpeq.w	r7, #4294967295
    4eb0:	d00d      	beq.n	4ece <z_impl_k_timer_start+0x4a>
    4eb2:	ea57 0c08 	orrs.w	ip, r7, r8
    4eb6:	d00a      	beq.n	4ece <z_impl_k_timer_start+0x4a>
	    Z_TICK_ABS(period.ticks) < 0) {
    4eb8:	f06f 0c01 	mvn.w	ip, #1
    4ebc:	ebbc 0c07 	subs.w	ip, ip, r7
    4ec0:	f04f 3cff 	mov.w	ip, #4294967295
    4ec4:	eb6c 0c08 	sbc.w	ip, ip, r8
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    4ec8:	f1bc 0f00 	cmp.w	ip, #0
    4ecc:	db18      	blt.n	4f00 <z_impl_k_timer_start+0x7c>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    4ece:	f06f 0201 	mvn.w	r2, #1
    4ed2:	1ad2      	subs	r2, r2, r3
    4ed4:	f04f 32ff 	mov.w	r2, #4294967295
    4ed8:	eb62 0201 	sbc.w	r2, r2, r1
    4edc:	2a00      	cmp	r2, #0
    4ede:	db1a      	blt.n	4f16 <z_impl_k_timer_start+0x92>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
    4ee0:	4628      	mov	r0, r5
    4ee2:	f002 fba5 	bl	7630 <z_abort_timeout>
	timer->period = period;
    4ee6:	62af      	str	r7, [r5, #40]	; 0x28
    4ee8:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
	timer->status = 0U;
    4eec:	2300      	movs	r3, #0
    4eee:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    4ef0:	4622      	mov	r2, r4
    4ef2:	4633      	mov	r3, r6
    4ef4:	490e      	ldr	r1, [pc, #56]	; (4f30 <z_impl_k_timer_start+0xac>)
    4ef6:	4628      	mov	r0, r5
    4ef8:	f7ff fe4a 	bl	4b90 <z_add_timeout>
		     duration);
}
    4efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		period.ticks = MAX(period.ticks - 1, 1);
    4f00:	2f02      	cmp	r7, #2
    4f02:	f170 0000 	sbcs.w	r0, r0, #0
    4f06:	da02      	bge.n	4f0e <z_impl_k_timer_start+0x8a>
    4f08:	2702      	movs	r7, #2
    4f0a:	f04f 0800 	mov.w	r8, #0
    4f0e:	3f01      	subs	r7, #1
    4f10:	f148 38ff 	adc.w	r8, r8, #4294967295
    4f14:	e7db      	b.n	4ece <z_impl_k_timer_start+0x4a>
		duration.ticks = MAX(duration.ticks - 1, 0);
    4f16:	461c      	mov	r4, r3
    4f18:	460e      	mov	r6, r1
    4f1a:	2b01      	cmp	r3, #1
    4f1c:	f171 0100 	sbcs.w	r1, r1, #0
    4f20:	da01      	bge.n	4f26 <z_impl_k_timer_start+0xa2>
    4f22:	2401      	movs	r4, #1
    4f24:	2600      	movs	r6, #0
    4f26:	3c01      	subs	r4, #1
    4f28:	f146 36ff 	adc.w	r6, r6, #4294967295
    4f2c:	e7d8      	b.n	4ee0 <z_impl_k_timer_start+0x5c>
    4f2e:	bf00      	nop
    4f30:	00004da9 	.word	0x00004da9

00004f34 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
    4f34:	b538      	push	{r3, r4, r5, lr}
    4f36:	4603      	mov	r3, r0
	__asm__ volatile(
    4f38:	f04f 0220 	mov.w	r2, #32
    4f3c:	f3ef 8511 	mrs	r5, BASEPRI
    4f40:	f382 8812 	msr	BASEPRI_MAX, r2
    4f44:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
    4f48:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
    4f4a:	2201      	movs	r2, #1
    4f4c:	6082      	str	r2, [r0, #8]
	return list->head == list;
    4f4e:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
    4f50:	4283      	cmp	r3, r0
    4f52:	d010      	beq.n	4f76 <z_impl_k_poll_signal_raise+0x42>
	sys_dnode_t *const prev = node->prev;
    4f54:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
    4f56:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
    4f58:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    4f5a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    4f5c:	2300      	movs	r3, #0
    4f5e:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
    4f60:	6043      	str	r3, [r0, #4]
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
    4f62:	2101      	movs	r1, #1
    4f64:	f002 fc3e 	bl	77e4 <signal_poll_event>
    4f68:	4604      	mov	r4, r0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
    4f6a:	4629      	mov	r1, r5
    4f6c:	4805      	ldr	r0, [pc, #20]	; (4f84 <z_impl_k_poll_signal_raise+0x50>)
    4f6e:	f7ff fa29 	bl	43c4 <z_reschedule>
	return rc;
}
    4f72:	4620      	mov	r0, r4
    4f74:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    4f76:	f385 8811 	msr	BASEPRI, r5
    4f7a:	f3bf 8f6f 	isb	sy
		return 0;
    4f7e:	2400      	movs	r4, #0
    4f80:	e7f7      	b.n	4f72 <z_impl_k_poll_signal_raise+0x3e>
    4f82:	bf00      	nop
    4f84:	20000b24 	.word	0x20000b24

00004f88 <boot_banner>:
#else
#define BANNER_VERSION KERNEL_VERSION_STRING
#endif

void boot_banner(void)
{
    4f88:	b508      	push	{r3, lr}
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    4f8a:	4802      	ldr	r0, [pc, #8]	; (4f94 <boot_banner+0xc>)
    4f8c:	f000 fb83 	bl	5696 <printk>
#endif /* CONFIG_BOOT_BANNER */
}
    4f90:	bd08      	pop	{r3, pc}
    4f92:	bf00      	nop
    4f94:	00008014 	.word	0x00008014

00004f98 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
    4f98:	b510      	push	{r4, lr}
    4f9a:	b084      	sub	sp, #16
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
    4f9c:	4b08      	ldr	r3, [pc, #32]	; (4fc0 <k_sys_work_q_init+0x28>)
    4f9e:	9302      	str	r3, [sp, #8]
    4fa0:	2400      	movs	r4, #0
    4fa2:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    4fa6:	ab02      	add	r3, sp, #8
    4fa8:	9300      	str	r3, [sp, #0]
    4faa:	f04f 33ff 	mov.w	r3, #4294967295
    4fae:	f44f 6280 	mov.w	r2, #1024	; 0x400
    4fb2:	4904      	ldr	r1, [pc, #16]	; (4fc4 <k_sys_work_q_init+0x2c>)
    4fb4:	4804      	ldr	r0, [pc, #16]	; (4fc8 <k_sys_work_q_init+0x30>)
    4fb6:	f000 f8ef 	bl	5198 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    4fba:	4620      	mov	r0, r4
    4fbc:	b004      	add	sp, #16
    4fbe:	bd10      	pop	{r4, pc}
    4fc0:	00008044 	.word	0x00008044
    4fc4:	20001a48 	.word	0x20001a48
    4fc8:	200003d8 	.word	0x200003d8

00004fcc <queue_submit_locked>:
 * @retval -EBUSY if the submission was rejected (draining, plugged)
 */
static inline int queue_submit_locked(struct k_work_q *queue,
				      struct k_work *work)
{
	if (queue == NULL) {
    4fcc:	b370      	cbz	r0, 502c <queue_submit_locked+0x60>
{
    4fce:	b538      	push	{r3, r4, r5, lr}
    4fd0:	460d      	mov	r5, r1
    4fd2:	4604      	mov	r4, r0
		return -EINVAL;
	}

	int ret = -EBUSY;
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    4fd4:	4b1b      	ldr	r3, [pc, #108]	; (5044 <queue_submit_locked+0x78>)
    4fd6:	689b      	ldr	r3, [r3, #8]
    4fd8:	4283      	cmp	r3, r0
    4fda:	d01b      	beq.n	5014 <queue_submit_locked+0x48>
    4fdc:	2300      	movs	r3, #0
    4fde:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
    4fe0:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
    4fe4:	f3c3 0180 	ubfx	r1, r3, #2, #1
    4fe8:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	 * * -ENODEV if the queue isn't running.
	 * * -EBUSY if draining and not chained
	 * * -EBUSY if plugged and not draining
	 * * otherwise OK
	 */
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    4fec:	f013 0f01 	tst.w	r3, #1
    4ff0:	d01f      	beq.n	5032 <queue_submit_locked+0x66>
		ret = -ENODEV;
	} else if (draining && !chained) {
    4ff2:	b101      	cbz	r1, 4ff6 <queue_submit_locked+0x2a>
    4ff4:	b302      	cbz	r2, 5038 <queue_submit_locked+0x6c>
		ret = -EBUSY;
	} else if (plugged && !draining) {
    4ff6:	b100      	cbz	r0, 4ffa <queue_submit_locked+0x2e>
    4ff8:	b309      	cbz	r1, 503e <queue_submit_locked+0x72>
	parent->next = child;
    4ffa:	2300      	movs	r3, #0
    4ffc:	602b      	str	r3, [r5, #0]
	return list->tail;
    4ffe:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    5002:	b173      	cbz	r3, 5022 <queue_submit_locked+0x56>
	parent->next = child;
    5004:	601d      	str	r5, [r3, #0]
	list->tail = node;
    5006:	f8c4 50bc 	str.w	r5, [r4, #188]	; 0xbc
		ret = -EBUSY;
	} else {
		sys_slist_append(&queue->pending, &work->node);
		ret = 1;
		(void)notify_queue_locked(queue);
    500a:	4620      	mov	r0, r4
    500c:	f002 fc2e 	bl	786c <notify_queue_locked>
		ret = 1;
    5010:	2001      	movs	r0, #1
	}

	return ret;
}
    5012:	bd38      	pop	{r3, r4, r5, pc}
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    5014:	f002 f91b 	bl	724e <k_is_in_isr>
    5018:	b908      	cbnz	r0, 501e <queue_submit_locked+0x52>
    501a:	2301      	movs	r3, #1
    501c:	e7df      	b.n	4fde <queue_submit_locked+0x12>
    501e:	2300      	movs	r3, #0
    5020:	e7dd      	b.n	4fde <queue_submit_locked+0x12>
    5022:	f8c4 50bc 	str.w	r5, [r4, #188]	; 0xbc
	list->head = node;
    5026:	f8c4 50b8 	str.w	r5, [r4, #184]	; 0xb8
}
    502a:	e7ee      	b.n	500a <queue_submit_locked+0x3e>
		return -EINVAL;
    502c:	f06f 0015 	mvn.w	r0, #21
}
    5030:	4770      	bx	lr
		ret = -ENODEV;
    5032:	f06f 0012 	mvn.w	r0, #18
    5036:	e7ec      	b.n	5012 <queue_submit_locked+0x46>
		ret = -EBUSY;
    5038:	f06f 000f 	mvn.w	r0, #15
    503c:	e7e9      	b.n	5012 <queue_submit_locked+0x46>
		ret = -EBUSY;
    503e:	f06f 000f 	mvn.w	r0, #15
    5042:	e7e6      	b.n	5012 <queue_submit_locked+0x46>
    5044:	20000ae8 	.word	0x20000ae8

00005048 <finalize_cancel_locked>:
{
    5048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    504a:	4606      	mov	r6, r0
	*flagp &= ~BIT(bit);
    504c:	68c3      	ldr	r3, [r0, #12]
    504e:	f023 0302 	bic.w	r3, r3, #2
    5052:	60c3      	str	r3, [r0, #12]
	return list->head;
    5054:	4b13      	ldr	r3, [pc, #76]	; (50a4 <finalize_cancel_locked+0x5c>)
    5056:	681d      	ldr	r5, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    5058:	b185      	cbz	r5, 507c <finalize_cancel_locked+0x34>
	return node->next;
    505a:	682c      	ldr	r4, [r5, #0]
    505c:	b104      	cbz	r4, 5060 <finalize_cancel_locked+0x18>
Z_GENLIST_PEEK_NEXT(slist, snode)
    505e:	b10d      	cbz	r5, 5064 <finalize_cancel_locked+0x1c>
    5060:	2700      	movs	r7, #0
    5062:	e010      	b.n	5086 <finalize_cancel_locked+0x3e>
    5064:	462c      	mov	r4, r5
    5066:	e7fb      	b.n	5060 <finalize_cancel_locked+0x18>
			sys_slist_remove(&pending_cancels, prev, &wc->node);
    5068:	462a      	mov	r2, r5
    506a:	4639      	mov	r1, r7
    506c:	480d      	ldr	r0, [pc, #52]	; (50a4 <finalize_cancel_locked+0x5c>)
    506e:	f002 fbea 	bl	7846 <sys_slist_remove>
			k_sem_give(&wc->sem);
    5072:	f105 0008 	add.w	r0, r5, #8
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    5076:	f7ff f8d9 	bl	422c <z_impl_k_sem_give>
}
    507a:	e009      	b.n	5090 <finalize_cancel_locked+0x48>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    507c:	462c      	mov	r4, r5
    507e:	e7ef      	b.n	5060 <finalize_cancel_locked+0x18>
    5080:	4623      	mov	r3, r4
    5082:	4625      	mov	r5, r4
    5084:	461c      	mov	r4, r3
    5086:	b165      	cbz	r5, 50a2 <finalize_cancel_locked+0x5a>
		if (wc->work == work) {
    5088:	686b      	ldr	r3, [r5, #4]
    508a:	42b3      	cmp	r3, r6
    508c:	d0ec      	beq.n	5068 <finalize_cancel_locked+0x20>
			prev = &wc->node;
    508e:	462f      	mov	r7, r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    5090:	2c00      	cmp	r4, #0
    5092:	d0f5      	beq.n	5080 <finalize_cancel_locked+0x38>
	return node->next;
    5094:	6823      	ldr	r3, [r4, #0]
    5096:	2b00      	cmp	r3, #0
    5098:	d0f3      	beq.n	5082 <finalize_cancel_locked+0x3a>
Z_GENLIST_PEEK_NEXT(slist, snode)
    509a:	2c00      	cmp	r4, #0
    509c:	d1f1      	bne.n	5082 <finalize_cancel_locked+0x3a>
    509e:	4623      	mov	r3, r4
    50a0:	e7ef      	b.n	5082 <finalize_cancel_locked+0x3a>
}
    50a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    50a4:	20000b24 	.word	0x20000b24

000050a8 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    50a8:	b570      	push	{r4, r5, r6, lr}
    50aa:	b084      	sub	sp, #16
    50ac:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
    50ae:	e016      	b.n	50de <work_queue_main+0x36>
	return (*flagp & BIT(bit)) != 0U;
    50b0:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
	*flagp &= ~BIT(bit);
    50b4:	f023 0204 	bic.w	r2, r3, #4
    50b8:	f8c5 20d0 	str.w	r2, [r5, #208]	; 0xd0
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
    50bc:	f013 0f04 	tst.w	r3, #4
    50c0:	d15a      	bne.n	5178 <work_queue_main+0xd0>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
    50c2:	2300      	movs	r3, #0
    50c4:	9302      	str	r3, [sp, #8]
    50c6:	f04f 32ff 	mov.w	r2, #4294967295
    50ca:	f04f 33ff 	mov.w	r3, #4294967295
    50ce:	e9cd 2300 	strd	r2, r3, [sp]
    50d2:	f105 02c0 	add.w	r2, r5, #192	; 0xc0
    50d6:	4631      	mov	r1, r6
    50d8:	482e      	ldr	r0, [pc, #184]	; (5194 <work_queue_main+0xec>)
    50da:	f7ff fce3 	bl	4aa4 <z_sched_wait>
	__asm__ volatile(
    50de:	f04f 0320 	mov.w	r3, #32
    50e2:	f3ef 8611 	mrs	r6, BASEPRI
    50e6:	f383 8812 	msr	BASEPRI_MAX, r3
    50ea:	f3bf 8f6f 	isb	sy
    50ee:	4632      	mov	r2, r6
	return list->head;
    50f0:	f8d5 40b8 	ldr.w	r4, [r5, #184]	; 0xb8
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    50f4:	2c00      	cmp	r4, #0
    50f6:	d0db      	beq.n	50b0 <work_queue_main+0x8>
	return node->next;
    50f8:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    50fa:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	return list->tail;
    50fe:	f8d5 10bc 	ldr.w	r1, [r5, #188]	; 0xbc
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    5102:	428c      	cmp	r4, r1
    5104:	d035      	beq.n	5172 <work_queue_main+0xca>
	*flagp |= BIT(bit);
    5106:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
    510a:	f043 0302 	orr.w	r3, r3, #2
    510e:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
    5112:	68e3      	ldr	r3, [r4, #12]
    5114:	f043 0101 	orr.w	r1, r3, #1
    5118:	60e1      	str	r1, [r4, #12]
	*flagp &= ~BIT(bit);
    511a:	f023 0304 	bic.w	r3, r3, #4
    511e:	f043 0301 	orr.w	r3, r3, #1
    5122:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
    5124:	6863      	ldr	r3, [r4, #4]
	__asm__ volatile(
    5126:	f382 8811 	msr	BASEPRI, r2
    512a:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
    512e:	4620      	mov	r0, r4
    5130:	4798      	blx	r3
	__asm__ volatile(
    5132:	f04f 0320 	mov.w	r3, #32
    5136:	f3ef 8611 	mrs	r6, BASEPRI
    513a:	f383 8812 	msr	BASEPRI_MAX, r3
    513e:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    5142:	68e3      	ldr	r3, [r4, #12]
    5144:	f023 0301 	bic.w	r3, r3, #1
    5148:	60e3      	str	r3, [r4, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    514a:	f013 0f02 	tst.w	r3, #2
    514e:	d11d      	bne.n	518c <work_queue_main+0xe4>
	*flagp &= ~BIT(bit);
    5150:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
    5154:	f023 0302 	bic.w	r3, r3, #2
    5158:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
	return (*flagp & BIT(bit)) != 0U;
    515c:	f3c3 2300 	ubfx	r3, r3, #8, #1
	__asm__ volatile(
    5160:	f386 8811 	msr	BASEPRI, r6
    5164:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    5168:	2b00      	cmp	r3, #0
    516a:	d1b8      	bne.n	50de <work_queue_main+0x36>
	z_impl_k_yield();
    516c:	f7ff fba0 	bl	48b0 <z_impl_k_yield>
}
    5170:	e7b5      	b.n	50de <work_queue_main+0x36>
	list->tail = node;
    5172:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
		if (node != NULL) {
    5176:	e7c6      	b.n	5106 <work_queue_main+0x5e>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    5178:	f105 04c8 	add.w	r4, r5, #200	; 0xc8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    517c:	2200      	movs	r2, #0
    517e:	2101      	movs	r1, #1
    5180:	4620      	mov	r0, r4
    5182:	f002 fa10 	bl	75a6 <z_sched_wake>
    5186:	2800      	cmp	r0, #0
    5188:	d1f8      	bne.n	517c <work_queue_main+0xd4>
    518a:	e79a      	b.n	50c2 <work_queue_main+0x1a>
			finalize_cancel_locked(work);
    518c:	4620      	mov	r0, r4
    518e:	f7ff ff5b 	bl	5048 <finalize_cancel_locked>
    5192:	e7dd      	b.n	5150 <work_queue_main+0xa8>
    5194:	20000b2c 	.word	0x20000b2c

00005198 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    5198:	b5f0      	push	{r4, r5, r6, r7, lr}
    519a:	b089      	sub	sp, #36	; 0x24
    519c:	4604      	mov	r4, r0
    519e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	list->head = NULL;
    51a0:	2000      	movs	r0, #0
    51a2:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	list->tail = NULL;
    51a6:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	sys_dlist_init(&w->waitq);
    51aa:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	list->head = (sys_dnode_t *)list;
    51ae:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	list->tail = (sys_dnode_t *)list;
    51b2:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    51b6:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
	list->head = (sys_dnode_t *)list;
    51ba:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
	list->tail = (sys_dnode_t *)list;
    51be:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    51c2:	b1fd      	cbz	r5, 5204 <k_work_queue_start+0x6c>
    51c4:	7928      	ldrb	r0, [r5, #4]
    51c6:	b9f8      	cbnz	r0, 5208 <k_work_queue_start+0x70>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    51c8:	2001      	movs	r0, #1
	*flagp = flags;
    51ca:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    51ce:	f04f 36ff 	mov.w	r6, #4294967295
    51d2:	f04f 37ff 	mov.w	r7, #4294967295
    51d6:	e9cd 6706 	strd	r6, r7, [sp, #24]
    51da:	2000      	movs	r0, #0
    51dc:	9004      	str	r0, [sp, #16]
    51de:	9303      	str	r3, [sp, #12]
    51e0:	9002      	str	r0, [sp, #8]
    51e2:	9001      	str	r0, [sp, #4]
    51e4:	9400      	str	r4, [sp, #0]
    51e6:	4b0a      	ldr	r3, [pc, #40]	; (5210 <k_work_queue_start+0x78>)
    51e8:	4620      	mov	r0, r4
    51ea:	f002 f845 	bl	7278 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    51ee:	b125      	cbz	r5, 51fa <k_work_queue_start+0x62>
    51f0:	6829      	ldr	r1, [r5, #0]
    51f2:	b111      	cbz	r1, 51fa <k_work_queue_start+0x62>
	return z_impl_k_thread_name_set(thread, str);
    51f4:	4620      	mov	r0, r4
    51f6:	f7fe fe6b 	bl	3ed0 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    51fa:	4620      	mov	r0, r4
    51fc:	f002 f82d 	bl	725a <z_impl_k_thread_start>
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    5200:	b009      	add	sp, #36	; 0x24
    5202:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t flags = K_WORK_QUEUE_STARTED;
    5204:	2001      	movs	r0, #1
    5206:	e7e0      	b.n	51ca <k_work_queue_start+0x32>
		flags |= K_WORK_QUEUE_NO_YIELD;
    5208:	f240 1001 	movw	r0, #257	; 0x101
    520c:	e7dd      	b.n	51ca <k_work_queue_start+0x32>
    520e:	bf00      	nop
    5210:	000050a9 	.word	0x000050a9

00005214 <nrf_cc3xx_platform_init_no_rng>:
    5214:	b510      	push	{r4, lr}
    5216:	4c0a      	ldr	r4, [pc, #40]	; (5240 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    5218:	6823      	ldr	r3, [r4, #0]
    521a:	b11b      	cbz	r3, 5224 <nrf_cc3xx_platform_init_no_rng+0x10>
    521c:	2301      	movs	r3, #1
    521e:	2000      	movs	r0, #0
    5220:	6023      	str	r3, [r4, #0]
    5222:	bd10      	pop	{r4, pc}
    5224:	f000 f8f4 	bl	5410 <CC_LibInitNoRng>
    5228:	2800      	cmp	r0, #0
    522a:	d0f7      	beq.n	521c <nrf_cc3xx_platform_init_no_rng+0x8>
    522c:	3801      	subs	r0, #1
    522e:	2807      	cmp	r0, #7
    5230:	d803      	bhi.n	523a <nrf_cc3xx_platform_init_no_rng+0x26>
    5232:	4b04      	ldr	r3, [pc, #16]	; (5244 <nrf_cc3xx_platform_init_no_rng+0x30>)
    5234:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    5238:	bd10      	pop	{r4, pc}
    523a:	4803      	ldr	r0, [pc, #12]	; (5248 <nrf_cc3xx_platform_init_no_rng+0x34>)
    523c:	bd10      	pop	{r4, pc}
    523e:	bf00      	nop
    5240:	20000b2c 	.word	0x20000b2c
    5244:	00008050 	.word	0x00008050
    5248:	ffff8ffe 	.word	0xffff8ffe

0000524c <nrf_cc3xx_platform_abort>:
    524c:	f3bf 8f4f 	dsb	sy
    5250:	4905      	ldr	r1, [pc, #20]	; (5268 <nrf_cc3xx_platform_abort+0x1c>)
    5252:	4b06      	ldr	r3, [pc, #24]	; (526c <nrf_cc3xx_platform_abort+0x20>)
    5254:	68ca      	ldr	r2, [r1, #12]
    5256:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    525a:	4313      	orrs	r3, r2
    525c:	60cb      	str	r3, [r1, #12]
    525e:	f3bf 8f4f 	dsb	sy
    5262:	bf00      	nop
    5264:	e7fd      	b.n	5262 <nrf_cc3xx_platform_abort+0x16>
    5266:	bf00      	nop
    5268:	e000ed00 	.word	0xe000ed00
    526c:	05fa0004 	.word	0x05fa0004

00005270 <CC_PalAbort>:
    5270:	b430      	push	{r4, r5}
    5272:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    5276:	2500      	movs	r5, #0
    5278:	4b0b      	ldr	r3, [pc, #44]	; (52a8 <CC_PalAbort+0x38>)
    527a:	4c0c      	ldr	r4, [pc, #48]	; (52ac <CC_PalAbort+0x3c>)
    527c:	490c      	ldr	r1, [pc, #48]	; (52b0 <CC_PalAbort+0x40>)
    527e:	6849      	ldr	r1, [r1, #4]
    5280:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    5284:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    5288:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    528c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    5290:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    5294:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
    5298:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    529c:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
    52a0:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
    52a4:	bc30      	pop	{r4, r5}
    52a6:	4708      	bx	r1
    52a8:	50845000 	.word	0x50845000
    52ac:	50844000 	.word	0x50844000
    52b0:	20000184 	.word	0x20000184

000052b4 <nrf_cc3xx_platform_set_abort>:
    52b4:	4b02      	ldr	r3, [pc, #8]	; (52c0 <nrf_cc3xx_platform_set_abort+0xc>)
    52b6:	e9d0 1200 	ldrd	r1, r2, [r0]
    52ba:	e9c3 1200 	strd	r1, r2, [r3]
    52be:	4770      	bx	lr
    52c0:	20000184 	.word	0x20000184

000052c4 <mutex_free>:
    52c4:	b510      	push	{r4, lr}
    52c6:	4604      	mov	r4, r0
    52c8:	b150      	cbz	r0, 52e0 <mutex_free+0x1c>
    52ca:	6863      	ldr	r3, [r4, #4]
    52cc:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    52d0:	d005      	beq.n	52de <mutex_free+0x1a>
    52d2:	4a06      	ldr	r2, [pc, #24]	; (52ec <mutex_free+0x28>)
    52d4:	4293      	cmp	r3, r2
    52d6:	d002      	beq.n	52de <mutex_free+0x1a>
    52d8:	2300      	movs	r3, #0
    52da:	6062      	str	r2, [r4, #4]
    52dc:	6023      	str	r3, [r4, #0]
    52de:	bd10      	pop	{r4, pc}
    52e0:	4b03      	ldr	r3, [pc, #12]	; (52f0 <mutex_free+0x2c>)
    52e2:	4804      	ldr	r0, [pc, #16]	; (52f4 <mutex_free+0x30>)
    52e4:	685b      	ldr	r3, [r3, #4]
    52e6:	4798      	blx	r3
    52e8:	e7ef      	b.n	52ca <mutex_free+0x6>
    52ea:	bf00      	nop
    52ec:	a95c5f2c 	.word	0xa95c5f2c
    52f0:	20000184 	.word	0x20000184
    52f4:	00008070 	.word	0x00008070

000052f8 <mutex_lock>:
    52f8:	b1c8      	cbz	r0, 532e <mutex_lock+0x36>
    52fa:	6843      	ldr	r3, [r0, #4]
    52fc:	4a0d      	ldr	r2, [pc, #52]	; (5334 <mutex_lock+0x3c>)
    52fe:	4293      	cmp	r3, r2
    5300:	d013      	beq.n	532a <mutex_lock+0x32>
    5302:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    5306:	d00e      	beq.n	5326 <mutex_lock+0x2e>
    5308:	2301      	movs	r3, #1
    530a:	e850 2f00 	ldrex	r2, [r0]
    530e:	4619      	mov	r1, r3
    5310:	e840 1c00 	strex	ip, r1, [r0]
    5314:	f09c 0f00 	teq	ip, #0
    5318:	d1f7      	bne.n	530a <mutex_lock+0x12>
    531a:	2a01      	cmp	r2, #1
    531c:	d0f5      	beq.n	530a <mutex_lock+0x12>
    531e:	f3bf 8f5f 	dmb	sy
    5322:	2000      	movs	r0, #0
    5324:	4770      	bx	lr
    5326:	4804      	ldr	r0, [pc, #16]	; (5338 <mutex_lock+0x40>)
    5328:	4770      	bx	lr
    532a:	4804      	ldr	r0, [pc, #16]	; (533c <mutex_lock+0x44>)
    532c:	4770      	bx	lr
    532e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    5332:	4770      	bx	lr
    5334:	a95c5f2c 	.word	0xa95c5f2c
    5338:	ffff8fe9 	.word	0xffff8fe9
    533c:	ffff8fea 	.word	0xffff8fea

00005340 <mutex_unlock>:
    5340:	4603      	mov	r3, r0
    5342:	b180      	cbz	r0, 5366 <mutex_unlock+0x26>
    5344:	6842      	ldr	r2, [r0, #4]
    5346:	4909      	ldr	r1, [pc, #36]	; (536c <mutex_unlock+0x2c>)
    5348:	428a      	cmp	r2, r1
    534a:	d00a      	beq.n	5362 <mutex_unlock+0x22>
    534c:	f012 5f68 	tst.w	r2, #973078528	; 0x3a000000
    5350:	d005      	beq.n	535e <mutex_unlock+0x1e>
    5352:	f3bf 8f5f 	dmb	sy
    5356:	2200      	movs	r2, #0
    5358:	4610      	mov	r0, r2
    535a:	601a      	str	r2, [r3, #0]
    535c:	4770      	bx	lr
    535e:	4804      	ldr	r0, [pc, #16]	; (5370 <mutex_unlock+0x30>)
    5360:	4770      	bx	lr
    5362:	4804      	ldr	r0, [pc, #16]	; (5374 <mutex_unlock+0x34>)
    5364:	4770      	bx	lr
    5366:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    536a:	4770      	bx	lr
    536c:	a95c5f2c 	.word	0xa95c5f2c
    5370:	ffff8fe9 	.word	0xffff8fe9
    5374:	ffff8fea 	.word	0xffff8fea

00005378 <mutex_init>:
    5378:	b510      	push	{r4, lr}
    537a:	4604      	mov	r4, r0
    537c:	b120      	cbz	r0, 5388 <mutex_init+0x10>
    537e:	2300      	movs	r3, #0
    5380:	4a03      	ldr	r2, [pc, #12]	; (5390 <mutex_init+0x18>)
    5382:	6023      	str	r3, [r4, #0]
    5384:	6062      	str	r2, [r4, #4]
    5386:	bd10      	pop	{r4, pc}
    5388:	4802      	ldr	r0, [pc, #8]	; (5394 <mutex_init+0x1c>)
    538a:	f7ff ff71 	bl	5270 <CC_PalAbort>
    538e:	e7f6      	b.n	537e <mutex_init+0x6>
    5390:	3a00003a 	.word	0x3a00003a
    5394:	00008098 	.word	0x00008098

00005398 <nrf_cc3xx_platform_set_mutexes>:
    5398:	b570      	push	{r4, r5, r6, lr}
    539a:	4c19      	ldr	r4, [pc, #100]	; (5400 <nrf_cc3xx_platform_set_mutexes+0x68>)
    539c:	f8d0 c004 	ldr.w	ip, [r0, #4]
    53a0:	6806      	ldr	r6, [r0, #0]
    53a2:	f8c4 c004 	str.w	ip, [r4, #4]
    53a6:	f8d0 c008 	ldr.w	ip, [r0, #8]
    53aa:	68c0      	ldr	r0, [r0, #12]
    53ac:	f8c4 c008 	str.w	ip, [r4, #8]
    53b0:	60e0      	str	r0, [r4, #12]
    53b2:	6026      	str	r6, [r4, #0]
    53b4:	6808      	ldr	r0, [r1, #0]
    53b6:	4b13      	ldr	r3, [pc, #76]	; (5404 <nrf_cc3xx_platform_set_mutexes+0x6c>)
    53b8:	4d13      	ldr	r5, [pc, #76]	; (5408 <nrf_cc3xx_platform_set_mutexes+0x70>)
    53ba:	6018      	str	r0, [r3, #0]
    53bc:	6848      	ldr	r0, [r1, #4]
    53be:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
    53c2:	6058      	str	r0, [r3, #4]
    53c4:	6888      	ldr	r0, [r1, #8]
    53c6:	f012 5f68 	tst.w	r2, #973078528	; 0x3a000000
    53ca:	6098      	str	r0, [r3, #8]
    53cc:	68c8      	ldr	r0, [r1, #12]
    53ce:	6909      	ldr	r1, [r1, #16]
    53d0:	60d8      	str	r0, [r3, #12]
    53d2:	6119      	str	r1, [r3, #16]
    53d4:	d012      	beq.n	53fc <nrf_cc3xx_platform_set_mutexes+0x64>
    53d6:	2300      	movs	r3, #0
    53d8:	4a0c      	ldr	r2, [pc, #48]	; (540c <nrf_cc3xx_platform_set_mutexes+0x74>)
    53da:	f505 708a 	add.w	r0, r5, #276	; 0x114
    53de:	f8c5 3114 	str.w	r3, [r5, #276]	; 0x114
    53e2:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
    53e6:	f8c5 2118 	str.w	r2, [r5, #280]	; 0x118
    53ea:	f8c5 21bc 	str.w	r2, [r5, #444]	; 0x1bc
    53ee:	47b0      	blx	r6
    53f0:	6823      	ldr	r3, [r4, #0]
    53f2:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    53f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    53fa:	4718      	bx	r3
    53fc:	bd70      	pop	{r4, r5, r6, pc}
    53fe:	bf00      	nop
    5400:	20000194 	.word	0x20000194
    5404:	200001a4 	.word	0x200001a4
    5408:	20000b44 	.word	0x20000b44
    540c:	a95c5f2c 	.word	0xa95c5f2c

00005410 <CC_LibInitNoRng>:
    5410:	b508      	push	{r3, lr}
    5412:	f000 f811 	bl	5438 <CC_HalInit>
    5416:	b930      	cbnz	r0, 5426 <CC_LibInitNoRng+0x16>
    5418:	f000 f810 	bl	543c <CC_PalInit>
    541c:	b938      	cbnz	r0, 542e <CC_LibInitNoRng+0x1e>
    541e:	4a05      	ldr	r2, [pc, #20]	; (5434 <CC_LibInitNoRng+0x24>)
    5420:	f8c2 0a0c 	str.w	r0, [r2, #2572]	; 0xa0c
    5424:	bd08      	pop	{r3, pc}
    5426:	f000 f837 	bl	5498 <CC_PalTerminate>
    542a:	2003      	movs	r0, #3
    542c:	bd08      	pop	{r3, pc}
    542e:	2004      	movs	r0, #4
    5430:	bd08      	pop	{r3, pc}
    5432:	bf00      	nop
    5434:	50845000 	.word	0x50845000

00005438 <CC_HalInit>:
    5438:	2000      	movs	r0, #0
    543a:	4770      	bx	lr

0000543c <CC_PalInit>:
    543c:	b510      	push	{r4, lr}
    543e:	4811      	ldr	r0, [pc, #68]	; (5484 <CC_PalInit+0x48>)
    5440:	f000 f848 	bl	54d4 <CC_PalMutexCreate>
    5444:	b100      	cbz	r0, 5448 <CC_PalInit+0xc>
    5446:	bd10      	pop	{r4, pc}
    5448:	480f      	ldr	r0, [pc, #60]	; (5488 <CC_PalInit+0x4c>)
    544a:	f000 f843 	bl	54d4 <CC_PalMutexCreate>
    544e:	2800      	cmp	r0, #0
    5450:	d1f9      	bne.n	5446 <CC_PalInit+0xa>
    5452:	4c0e      	ldr	r4, [pc, #56]	; (548c <CC_PalInit+0x50>)
    5454:	4620      	mov	r0, r4
    5456:	f000 f83d 	bl	54d4 <CC_PalMutexCreate>
    545a:	2800      	cmp	r0, #0
    545c:	d1f3      	bne.n	5446 <CC_PalInit+0xa>
    545e:	4b0c      	ldr	r3, [pc, #48]	; (5490 <CC_PalInit+0x54>)
    5460:	480c      	ldr	r0, [pc, #48]	; (5494 <CC_PalInit+0x58>)
    5462:	601c      	str	r4, [r3, #0]
    5464:	f000 f836 	bl	54d4 <CC_PalMutexCreate>
    5468:	4601      	mov	r1, r0
    546a:	2800      	cmp	r0, #0
    546c:	d1eb      	bne.n	5446 <CC_PalInit+0xa>
    546e:	f000 f82d 	bl	54cc <CC_PalDmaInit>
    5472:	4604      	mov	r4, r0
    5474:	b108      	cbz	r0, 547a <CC_PalInit+0x3e>
    5476:	4620      	mov	r0, r4
    5478:	bd10      	pop	{r4, pc}
    547a:	f000 f83f 	bl	54fc <CC_PalPowerSaveModeInit>
    547e:	4620      	mov	r0, r4
    5480:	e7fa      	b.n	5478 <CC_PalInit+0x3c>
    5482:	bf00      	nop
    5484:	200001dc 	.word	0x200001dc
    5488:	200001d0 	.word	0x200001d0
    548c:	200001d8 	.word	0x200001d8
    5490:	200001e0 	.word	0x200001e0
    5494:	200001d4 	.word	0x200001d4

00005498 <CC_PalTerminate>:
    5498:	b508      	push	{r3, lr}
    549a:	4808      	ldr	r0, [pc, #32]	; (54bc <CC_PalTerminate+0x24>)
    549c:	f000 f824 	bl	54e8 <CC_PalMutexDestroy>
    54a0:	4807      	ldr	r0, [pc, #28]	; (54c0 <CC_PalTerminate+0x28>)
    54a2:	f000 f821 	bl	54e8 <CC_PalMutexDestroy>
    54a6:	4807      	ldr	r0, [pc, #28]	; (54c4 <CC_PalTerminate+0x2c>)
    54a8:	f000 f81e 	bl	54e8 <CC_PalMutexDestroy>
    54ac:	4806      	ldr	r0, [pc, #24]	; (54c8 <CC_PalTerminate+0x30>)
    54ae:	f000 f81b 	bl	54e8 <CC_PalMutexDestroy>
    54b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    54b6:	f000 b80b 	b.w	54d0 <CC_PalDmaTerminate>
    54ba:	bf00      	nop
    54bc:	200001dc 	.word	0x200001dc
    54c0:	200001d0 	.word	0x200001d0
    54c4:	200001d8 	.word	0x200001d8
    54c8:	200001d4 	.word	0x200001d4

000054cc <CC_PalDmaInit>:
    54cc:	2000      	movs	r0, #0
    54ce:	4770      	bx	lr

000054d0 <CC_PalDmaTerminate>:
    54d0:	4770      	bx	lr
    54d2:	bf00      	nop

000054d4 <CC_PalMutexCreate>:
    54d4:	b508      	push	{r3, lr}
    54d6:	4b03      	ldr	r3, [pc, #12]	; (54e4 <CC_PalMutexCreate+0x10>)
    54d8:	6802      	ldr	r2, [r0, #0]
    54da:	681b      	ldr	r3, [r3, #0]
    54dc:	6810      	ldr	r0, [r2, #0]
    54de:	4798      	blx	r3
    54e0:	2000      	movs	r0, #0
    54e2:	bd08      	pop	{r3, pc}
    54e4:	20000194 	.word	0x20000194

000054e8 <CC_PalMutexDestroy>:
    54e8:	b508      	push	{r3, lr}
    54ea:	4b03      	ldr	r3, [pc, #12]	; (54f8 <CC_PalMutexDestroy+0x10>)
    54ec:	6802      	ldr	r2, [r0, #0]
    54ee:	685b      	ldr	r3, [r3, #4]
    54f0:	6810      	ldr	r0, [r2, #0]
    54f2:	4798      	blx	r3
    54f4:	2000      	movs	r0, #0
    54f6:	bd08      	pop	{r3, pc}
    54f8:	20000194 	.word	0x20000194

000054fc <CC_PalPowerSaveModeInit>:
    54fc:	b570      	push	{r4, r5, r6, lr}
    54fe:	4c09      	ldr	r4, [pc, #36]	; (5524 <CC_PalPowerSaveModeInit+0x28>)
    5500:	4d09      	ldr	r5, [pc, #36]	; (5528 <CC_PalPowerSaveModeInit+0x2c>)
    5502:	6920      	ldr	r0, [r4, #16]
    5504:	68ab      	ldr	r3, [r5, #8]
    5506:	4798      	blx	r3
    5508:	b118      	cbz	r0, 5512 <CC_PalPowerSaveModeInit+0x16>
    550a:	4b08      	ldr	r3, [pc, #32]	; (552c <CC_PalPowerSaveModeInit+0x30>)
    550c:	4808      	ldr	r0, [pc, #32]	; (5530 <CC_PalPowerSaveModeInit+0x34>)
    550e:	685b      	ldr	r3, [r3, #4]
    5510:	4798      	blx	r3
    5512:	2100      	movs	r1, #0
    5514:	4a07      	ldr	r2, [pc, #28]	; (5534 <CC_PalPowerSaveModeInit+0x38>)
    5516:	68eb      	ldr	r3, [r5, #12]
    5518:	6011      	str	r1, [r2, #0]
    551a:	6920      	ldr	r0, [r4, #16]
    551c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5520:	4718      	bx	r3
    5522:	bf00      	nop
    5524:	200001a4 	.word	0x200001a4
    5528:	20000194 	.word	0x20000194
    552c:	20000184 	.word	0x20000184
    5530:	000080bc 	.word	0x000080bc
    5534:	20000b40 	.word	0x20000b40

00005538 <z_impl_gpio_pin_configure>:
{
    5538:	b538      	push	{r3, r4, r5, lr}
    553a:	4613      	mov	r3, r2
	const struct gpio_driver_api *api =
    553c:	6885      	ldr	r5, [r0, #8]
	struct gpio_driver_data *data =
    553e:	6904      	ldr	r4, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    5540:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
    5544:	d007      	beq.n	5556 <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
    5546:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
    554a:	d004      	beq.n	5556 <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    554c:	f012 0f01 	tst.w	r2, #1
    5550:	d001      	beq.n	5556 <z_impl_gpio_pin_configure+0x1e>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    5552:	f482 2340 	eor.w	r3, r2, #786432	; 0xc0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    5556:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    555a:	f013 0f01 	tst.w	r3, #1
    555e:	d00a      	beq.n	5576 <z_impl_gpio_pin_configure+0x3e>
		data->invert |= (gpio_port_pins_t)BIT(pin);
    5560:	6823      	ldr	r3, [r4, #0]
    5562:	f04f 0c01 	mov.w	ip, #1
    5566:	fa0c fc01 	lsl.w	ip, ip, r1
    556a:	ea43 030c 	orr.w	r3, r3, ip
    556e:	6023      	str	r3, [r4, #0]
	return api->pin_configure(port, pin, flags);
    5570:	682b      	ldr	r3, [r5, #0]
    5572:	4798      	blx	r3
}
    5574:	bd38      	pop	{r3, r4, r5, pc}
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    5576:	6823      	ldr	r3, [r4, #0]
    5578:	f04f 0c01 	mov.w	ip, #1
    557c:	fa0c fc01 	lsl.w	ip, ip, r1
    5580:	ea23 030c 	bic.w	r3, r3, ip
    5584:	6023      	str	r3, [r4, #0]
    5586:	e7f3      	b.n	5570 <z_impl_gpio_pin_configure+0x38>

00005588 <gpio_pin_configure_dt>:
{
    5588:	b508      	push	{r3, lr}
    558a:	4603      	mov	r3, r0
    558c:	468c      	mov	ip, r1
	return gpio_pin_configure(spec->port,
    558e:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
    5590:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
    5592:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
    5594:	ea42 020c 	orr.w	r2, r2, ip
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
    5598:	f7ff ffce 	bl	5538 <z_impl_gpio_pin_configure>
}
    559c:	bd08      	pop	{r3, pc}

0000559e <gpio_port_get>:
{
    559e:	b538      	push	{r3, r4, r5, lr}
    55a0:	460c      	mov	r4, r1
	const struct gpio_driver_data *const data =
    55a2:	6905      	ldr	r5, [r0, #16]
	const struct gpio_driver_api *api =
    55a4:	6883      	ldr	r3, [r0, #8]
	return api->port_get_raw(port, value);
    55a6:	685b      	ldr	r3, [r3, #4]
    55a8:	4798      	blx	r3
	if (ret == 0) {
    55aa:	b918      	cbnz	r0, 55b4 <gpio_port_get+0x16>
		*value ^= data->invert;
    55ac:	6823      	ldr	r3, [r4, #0]
    55ae:	682a      	ldr	r2, [r5, #0]
    55b0:	4053      	eors	r3, r2
    55b2:	6023      	str	r3, [r4, #0]
}
    55b4:	bd38      	pop	{r3, r4, r5, pc}

000055b6 <gpio_pin_get>:
{
    55b6:	b510      	push	{r4, lr}
    55b8:	b082      	sub	sp, #8
    55ba:	460c      	mov	r4, r1
	ret = gpio_port_get(port, &value);
    55bc:	a901      	add	r1, sp, #4
    55be:	f7ff ffee 	bl	559e <gpio_port_get>
	if (ret == 0) {
    55c2:	b930      	cbnz	r0, 55d2 <gpio_pin_get+0x1c>
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
    55c4:	2301      	movs	r3, #1
    55c6:	40a3      	lsls	r3, r4
    55c8:	9a01      	ldr	r2, [sp, #4]
    55ca:	4213      	tst	r3, r2
    55cc:	bf14      	ite	ne
    55ce:	2001      	movne	r0, #1
    55d0:	2000      	moveq	r0, #0
}
    55d2:	b002      	add	sp, #8
    55d4:	bd10      	pop	{r4, pc}

000055d6 <gpio_pin_toggle_dt>:
 *
 * @param spec GPIO specification from devicetree
 * @return a value from gpio_pin_toggle()
 */
static inline int gpio_pin_toggle_dt(const struct gpio_dt_spec *spec)
{
    55d6:	b508      	push	{r3, lr}
    55d8:	4603      	mov	r3, r0
	return gpio_pin_toggle(spec->port, spec->pin);
    55da:	6800      	ldr	r0, [r0, #0]
    55dc:	791b      	ldrb	r3, [r3, #4]
	return gpio_port_toggle_bits(port, (gpio_port_pins_t)BIT(pin));
    55de:	2101      	movs	r1, #1
    55e0:	4099      	lsls	r1, r3
	const struct gpio_driver_api *api =
    55e2:	6883      	ldr	r3, [r0, #8]
	return api->port_toggle_bits(port, pins);
    55e4:	695b      	ldr	r3, [r3, #20]
    55e6:	4798      	blx	r3
}
    55e8:	bd08      	pop	{r3, pc}

000055ea <adc_channel_setup_dt>:
{
    55ea:	b508      	push	{r3, lr}
	if (!spec->channel_cfg_dt_node_exists) {
    55ec:	7943      	ldrb	r3, [r0, #5]
    55ee:	b133      	cbz	r3, 55fe <adc_channel_setup_dt+0x14>
    55f0:	4601      	mov	r1, r0
	return adc_channel_setup(spec->dev, &spec->channel_cfg);
    55f2:	f851 0b06 	ldr.w	r0, [r1], #6
	const struct adc_driver_api *api =
    55f6:	6883      	ldr	r3, [r0, #8]
	return api->channel_setup(dev, channel_cfg);
    55f8:	681b      	ldr	r3, [r3, #0]
    55fa:	4798      	blx	r3
}
    55fc:	bd08      	pop	{r3, pc}
		return -ENOTSUP;
    55fe:	f06f 0085 	mvn.w	r0, #133	; 0x85
    5602:	e7fb      	b.n	55fc <adc_channel_setup_dt+0x12>

00005604 <adc_raw_to_millivolts>:
{
    5604:	b530      	push	{r4, r5, lr}
    5606:	b083      	sub	sp, #12
    5608:	4684      	mov	ip, r0
    560a:	4608      	mov	r0, r1
    560c:	4615      	mov	r5, r2
    560e:	461c      	mov	r4, r3
	int32_t adc_mv = *valp * ref_mv;
    5610:	681b      	ldr	r3, [r3, #0]
    5612:	fb0c f303 	mul.w	r3, ip, r3
    5616:	9301      	str	r3, [sp, #4]
	int ret = adc_gain_invert(gain, &adc_mv);
    5618:	a901      	add	r1, sp, #4
    561a:	f7fc fb59 	bl	1cd0 <adc_gain_invert>
	if (ret == 0) {
    561e:	b910      	cbnz	r0, 5626 <adc_raw_to_millivolts+0x22>
		*valp = (adc_mv >> resolution);
    5620:	9b01      	ldr	r3, [sp, #4]
    5622:	412b      	asrs	r3, r5
    5624:	6023      	str	r3, [r4, #0]
}
    5626:	b003      	add	sp, #12
    5628:	bd30      	pop	{r4, r5, pc}

0000562a <adc_raw_to_millivolts_dt>:
	if (!spec->channel_cfg_dt_node_exists) {
    562a:	7942      	ldrb	r2, [r0, #5]
    562c:	b1c2      	cbz	r2, 5660 <adc_raw_to_millivolts_dt+0x36>
{
    562e:	b508      	push	{r3, lr}
    5630:	4684      	mov	ip, r0
    5632:	460b      	mov	r3, r1
	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
    5634:	79c2      	ldrb	r2, [r0, #7]
    5636:	2a04      	cmp	r2, #4
    5638:	d00e      	beq.n	5658 <adc_raw_to_millivolts_dt+0x2e>
		vref_mv = spec->vref_mv;
    563a:	89c0      	ldrh	r0, [r0, #14]
	resolution = spec->resolution;
    563c:	f89c 2010 	ldrb.w	r2, [ip, #16]
	if (spec->channel_cfg.differential) {
    5640:	f89c 100a 	ldrb.w	r1, [ip, #10]
    5644:	f011 0f20 	tst.w	r1, #32
    5648:	d001      	beq.n	564e <adc_raw_to_millivolts_dt+0x24>
		resolution -= 1U;
    564a:	3a01      	subs	r2, #1
    564c:	b2d2      	uxtb	r2, r2
	return adc_raw_to_millivolts(vref_mv, spec->channel_cfg.gain,
    564e:	f89c 1006 	ldrb.w	r1, [ip, #6]
    5652:	f7ff ffd7 	bl	5604 <adc_raw_to_millivolts>
}
    5656:	bd08      	pop	{r3, pc}
		vref_mv = (int32_t)adc_ref_internal(spec->dev);
    5658:	6802      	ldr	r2, [r0, #0]
	const struct adc_driver_api *api =
    565a:	6892      	ldr	r2, [r2, #8]
	return api->ref_internal;
    565c:	8990      	ldrh	r0, [r2, #12]
    565e:	e7ed      	b.n	563c <adc_raw_to_millivolts_dt+0x12>
		return -ENOTSUP;
    5660:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    5664:	4770      	bx	lr

00005666 <k_msleep>:
{
    5666:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
    5668:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    566c:	17c1      	asrs	r1, r0, #31
    566e:	03c9      	lsls	r1, r1, #15
    5670:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    5674:	03c0      	lsls	r0, r0, #15
    5676:	f240 33e7 	movw	r3, #999	; 0x3e7
    567a:	18c0      	adds	r0, r0, r3
    567c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5680:	f04f 0300 	mov.w	r3, #0
    5684:	f141 0100 	adc.w	r1, r1, #0
    5688:	f7fa fd64 	bl	154 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    568c:	f7ff f9a2 	bl	49d4 <z_impl_k_sleep>
}
    5690:	bd08      	pop	{r3, pc}

00005692 <arch_printk_char_out>:
}
    5692:	2000      	movs	r0, #0
    5694:	4770      	bx	lr

00005696 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    5696:	b40f      	push	{r0, r1, r2, r3}
    5698:	b500      	push	{lr}
    569a:	b083      	sub	sp, #12
    569c:	a904      	add	r1, sp, #16
    569e:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    56a2:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    56a4:	f7fa ffb0 	bl	608 <vprintk>

	va_end(ap);
}
    56a8:	b003      	add	sp, #12
    56aa:	f85d eb04 	ldr.w	lr, [sp], #4
    56ae:	b004      	add	sp, #16
    56b0:	4770      	bx	lr

000056b2 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    56b2:	b508      	push	{r3, lr}
    56b4:	4604      	mov	r4, r0
    56b6:	4608      	mov	r0, r1
    56b8:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    56ba:	461a      	mov	r2, r3
    56bc:	47a0      	blx	r4
	return z_impl_z_current_get();
    56be:	f7ff f9b3 	bl	4a28 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    56c2:	f7fc f95b 	bl	197c <z_impl_k_thread_abort>

000056c6 <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
    56c6:	f001 0107 	and.w	r1, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    56ca:	8b03      	ldrh	r3, [r0, #24]
    56cc:	f023 0307 	bic.w	r3, r3, #7
    56d0:	430b      	orrs	r3, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    56d2:	8303      	strh	r3, [r0, #24]
}
    56d4:	4770      	bx	lr

000056d6 <notify_monitors>:
{
    56d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    56da:	4606      	mov	r6, r0
    56dc:	460f      	mov	r7, r1
    56de:	4690      	mov	r8, r2
	return list->head;
    56e0:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    56e2:	b121      	cbz	r1, 56ee <notify_monitors+0x18>
	return node->next;
    56e4:	680c      	ldr	r4, [r1, #0]
    56e6:	b13c      	cbz	r4, 56f8 <notify_monitors+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
    56e8:	b931      	cbnz	r1, 56f8 <notify_monitors+0x22>
    56ea:	460c      	mov	r4, r1
    56ec:	e004      	b.n	56f8 <notify_monitors+0x22>
    56ee:	460c      	mov	r4, r1
    56f0:	e002      	b.n	56f8 <notify_monitors+0x22>
    56f2:	4623      	mov	r3, r4
    56f4:	4621      	mov	r1, r4
    56f6:	461c      	mov	r4, r3
    56f8:	b169      	cbz	r1, 5716 <notify_monitors+0x40>
		mon->callback(mgr, mon, state, res);
    56fa:	684d      	ldr	r5, [r1, #4]
    56fc:	4643      	mov	r3, r8
    56fe:	463a      	mov	r2, r7
    5700:	4630      	mov	r0, r6
    5702:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    5704:	2c00      	cmp	r4, #0
    5706:	d0f4      	beq.n	56f2 <notify_monitors+0x1c>
	return node->next;
    5708:	6823      	ldr	r3, [r4, #0]
    570a:	2b00      	cmp	r3, #0
    570c:	d0f2      	beq.n	56f4 <notify_monitors+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
    570e:	2c00      	cmp	r4, #0
    5710:	d1f0      	bne.n	56f4 <notify_monitors+0x1e>
    5712:	4623      	mov	r3, r4
    5714:	e7ee      	b.n	56f4 <notify_monitors+0x1e>
}
    5716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000571a <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    571a:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    571c:	f013 0307 	ands.w	r3, r3, #7
    5720:	d103      	bne.n	572a <process_recheck+0x10>
	return list->head;
    5722:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
    5724:	b10a      	cbz	r2, 572a <process_recheck+0x10>
		evt = EVT_START;
    5726:	2003      	movs	r0, #3
    5728:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    572a:	2b02      	cmp	r3, #2
    572c:	d003      	beq.n	5736 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
    572e:	2b01      	cmp	r3, #1
    5730:	d006      	beq.n	5740 <process_recheck+0x26>
	int evt = EVT_NOP;
    5732:	2000      	movs	r0, #0
    5734:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
    5736:	8b42      	ldrh	r2, [r0, #26]
    5738:	2a00      	cmp	r2, #0
    573a:	d1f8      	bne.n	572e <process_recheck+0x14>
		evt = EVT_STOP;
    573c:	2004      	movs	r0, #4
    573e:	4770      	bx	lr
    5740:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
    5742:	b10b      	cbz	r3, 5748 <process_recheck+0x2e>
		evt = EVT_RESET;
    5744:	2005      	movs	r0, #5
}
    5746:	4770      	bx	lr
	int evt = EVT_NOP;
    5748:	2000      	movs	r0, #0
    574a:	4770      	bx	lr

0000574c <process_complete>:
{
    574c:	b510      	push	{r4, lr}
    574e:	4604      	mov	r4, r0
    5750:	468c      	mov	ip, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    5752:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
    5754:	2a00      	cmp	r2, #0
    5756:	db07      	blt.n	5768 <process_complete+0x1c>
    5758:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    575c:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    575e:	2a01      	cmp	r2, #1
    5760:	d90e      	bls.n	5780 <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
    5762:	2b04      	cmp	r3, #4
    5764:	d036      	beq.n	57d4 <process_complete+0x88>
}
    5766:	bd10      	pop	{r4, pc}
		*clients = mgr->clients;
    5768:	e9d0 0100 	ldrd	r0, r1, [r0]
    576c:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
    5770:	2300      	movs	r3, #0
    5772:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
    5774:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
    5776:	2101      	movs	r1, #1
    5778:	4620      	mov	r0, r4
    577a:	f7ff ffa4 	bl	56c6 <set_state>
    577e:	e7f2      	b.n	5766 <process_complete+0x1a>
		*clients = mgr->clients;
    5780:	e9d0 0100 	ldrd	r0, r1, [r0]
    5784:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
    5788:	2200      	movs	r2, #0
    578a:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
    578c:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
    578e:	2b06      	cmp	r3, #6
    5790:	d11b      	bne.n	57ca <process_complete+0x7e>
	return list->head;
    5792:	f8dc 3000 	ldr.w	r3, [ip]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    5796:	b153      	cbz	r3, 57ae <process_complete+0x62>
				mgr->refs += 1U;
    5798:	8b62      	ldrh	r2, [r4, #26]
    579a:	3201      	adds	r2, #1
    579c:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    579e:	461a      	mov	r2, r3
	return node->next;
    57a0:	681b      	ldr	r3, [r3, #0]
    57a2:	2b00      	cmp	r3, #0
    57a4:	d0f7      	beq.n	5796 <process_complete+0x4a>
Z_GENLIST_PEEK_NEXT(slist, snode)
    57a6:	2a00      	cmp	r2, #0
    57a8:	d1f5      	bne.n	5796 <process_complete+0x4a>
    57aa:	4613      	mov	r3, r2
    57ac:	e7f3      	b.n	5796 <process_complete+0x4a>
			set_state(mgr, ONOFF_STATE_ON);
    57ae:	2102      	movs	r1, #2
    57b0:	4620      	mov	r0, r4
    57b2:	f7ff ff88 	bl	56c6 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    57b6:	4620      	mov	r0, r4
    57b8:	f7ff ffaf 	bl	571a <process_recheck>
    57bc:	2800      	cmp	r0, #0
    57be:	d0d2      	beq.n	5766 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    57c0:	8b23      	ldrh	r3, [r4, #24]
    57c2:	f043 0320 	orr.w	r3, r3, #32
    57c6:	8323      	strh	r3, [r4, #24]
    57c8:	e7cd      	b.n	5766 <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
    57ca:	2100      	movs	r1, #0
    57cc:	4620      	mov	r0, r4
    57ce:	f7ff ff7a 	bl	56c6 <set_state>
    57d2:	e7f0      	b.n	57b6 <process_complete+0x6a>
		set_state(mgr, ONOFF_STATE_OFF);
    57d4:	2100      	movs	r1, #0
    57d6:	f7ff ff76 	bl	56c6 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    57da:	4620      	mov	r0, r4
    57dc:	f7ff ff9d 	bl	571a <process_recheck>
    57e0:	2800      	cmp	r0, #0
    57e2:	d0c0      	beq.n	5766 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    57e4:	8b23      	ldrh	r3, [r4, #24]
    57e6:	f043 0320 	orr.w	r3, r3, #32
    57ea:	8323      	strh	r3, [r4, #24]
}
    57ec:	e7bb      	b.n	5766 <process_complete+0x1a>

000057ee <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
    57ee:	b150      	cbz	r0, 5806 <validate_args+0x18>
{
    57f0:	b510      	push	{r4, lr}
    57f2:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    57f4:	b151      	cbz	r1, 580c <validate_args+0x1e>
	int rv = sys_notify_validate(&cli->notify);
    57f6:	1d08      	adds	r0, r1, #4
    57f8:	f000 f8c4 	bl	5984 <sys_notify_validate>
	if ((rv == 0)
    57fc:	b910      	cbnz	r0, 5804 <validate_args+0x16>
	    && ((cli->notify.flags
    57fe:	68a3      	ldr	r3, [r4, #8]
    5800:	2b03      	cmp	r3, #3
    5802:	d806      	bhi.n	5812 <validate_args+0x24>
}
    5804:	bd10      	pop	{r4, pc}
		return -EINVAL;
    5806:	f06f 0015 	mvn.w	r0, #21
}
    580a:	4770      	bx	lr
		return -EINVAL;
    580c:	f06f 0015 	mvn.w	r0, #21
    5810:	e7f8      	b.n	5804 <validate_args+0x16>
		rv = -EINVAL;
    5812:	f06f 0015 	mvn.w	r0, #21
    5816:	e7f5      	b.n	5804 <validate_args+0x16>

00005818 <notify_one>:
{
    5818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    581c:	4607      	mov	r7, r0
    581e:	460c      	mov	r4, r1
    5820:	4616      	mov	r6, r2
    5822:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    5824:	4619      	mov	r1, r3
    5826:	1d20      	adds	r0, r4, #4
    5828:	f000 f8cb 	bl	59c2 <sys_notify_finalize>
	if (cb) {
    582c:	b128      	cbz	r0, 583a <notify_one+0x22>
    582e:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
    5830:	462b      	mov	r3, r5
    5832:	4632      	mov	r2, r6
    5834:	4621      	mov	r1, r4
    5836:	4638      	mov	r0, r7
    5838:	47c0      	blx	r8
}
    583a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000583e <notify_all>:
{
    583e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5842:	4680      	mov	r8, r0
    5844:	460c      	mov	r4, r1
    5846:	4617      	mov	r7, r2
    5848:	461e      	mov	r6, r3
	while (!sys_slist_is_empty(list)) {
    584a:	e004      	b.n	5856 <notify_all+0x18>
		notify_one(mgr, cli, state, res);
    584c:	4633      	mov	r3, r6
    584e:	463a      	mov	r2, r7
    5850:	4640      	mov	r0, r8
    5852:	f7ff ffe1 	bl	5818 <notify_one>
	return list->head;
    5856:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
    5858:	b131      	cbz	r1, 5868 <notify_all+0x2a>
	return node->next;
    585a:	680d      	ldr	r5, [r1, #0]
	list->head = node;
    585c:	6025      	str	r5, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    585e:	6863      	ldr	r3, [r4, #4]
    5860:	428b      	cmp	r3, r1
    5862:	d1f3      	bne.n	584c <notify_all+0xe>
	list->tail = node;
    5864:	6065      	str	r5, [r4, #4]
}
    5866:	e7f1      	b.n	584c <notify_all+0xe>
}
    5868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000586c <transition_complete>:
{
    586c:	b508      	push	{r3, lr}
	__asm__ volatile(
    586e:	f04f 0c20 	mov.w	ip, #32
    5872:	f3ef 8211 	mrs	r2, BASEPRI
    5876:	f38c 8812 	msr	BASEPRI_MAX, ip
    587a:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    587e:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
    5880:	2101      	movs	r1, #1
    5882:	f7fa fecf 	bl	624 <process_event>
}
    5886:	bd08      	pop	{r3, pc}

00005888 <onoff_manager_init>:
	if ((mgr == NULL)
    5888:	4603      	mov	r3, r0
    588a:	b170      	cbz	r0, 58aa <onoff_manager_init+0x22>
	    || (transitions == NULL)
    588c:	b181      	cbz	r1, 58b0 <onoff_manager_init+0x28>
	    || (transitions->start == NULL)
    588e:	680a      	ldr	r2, [r1, #0]
    5890:	b18a      	cbz	r2, 58b6 <onoff_manager_init+0x2e>
	    || (transitions->stop == NULL)) {
    5892:	684a      	ldr	r2, [r1, #4]
    5894:	b192      	cbz	r2, 58bc <onoff_manager_init+0x34>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    5896:	2000      	movs	r0, #0
    5898:	6018      	str	r0, [r3, #0]
    589a:	6058      	str	r0, [r3, #4]
    589c:	6098      	str	r0, [r3, #8]
    589e:	60d8      	str	r0, [r3, #12]
    58a0:	6118      	str	r0, [r3, #16]
    58a2:	6158      	str	r0, [r3, #20]
    58a4:	6198      	str	r0, [r3, #24]
    58a6:	6119      	str	r1, [r3, #16]
	return 0;
    58a8:	4770      	bx	lr
		return -EINVAL;
    58aa:	f06f 0015 	mvn.w	r0, #21
    58ae:	4770      	bx	lr
    58b0:	f06f 0015 	mvn.w	r0, #21
    58b4:	4770      	bx	lr
    58b6:	f06f 0015 	mvn.w	r0, #21
    58ba:	4770      	bx	lr
    58bc:	f06f 0015 	mvn.w	r0, #21
}
    58c0:	4770      	bx	lr

000058c2 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    58c2:	b570      	push	{r4, r5, r6, lr}
    58c4:	4605      	mov	r5, r0
    58c6:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    58c8:	f7ff ff91 	bl	57ee <validate_args>

	if (rv < 0) {
    58cc:	1e04      	subs	r4, r0, #0
    58ce:	db30      	blt.n	5932 <onoff_request+0x70>
    58d0:	f04f 0320 	mov.w	r3, #32
    58d4:	f3ef 8211 	mrs	r2, BASEPRI
    58d8:	f383 8812 	msr	BASEPRI_MAX, r3
    58dc:	f3bf 8f6f 	isb	sy
    58e0:	4696      	mov	lr, r2
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    58e2:	f8b5 c018 	ldrh.w	ip, [r5, #24]
    58e6:	f00c 0c07 	and.w	ip, ip, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    58ea:	8b6b      	ldrh	r3, [r5, #26]
    58ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
    58f0:	428b      	cmp	r3, r1
    58f2:	d02c      	beq.n	594e <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
    58f4:	4664      	mov	r4, ip
	if (state == ONOFF_STATE_ON) {
    58f6:	f1bc 0f02 	cmp.w	ip, #2
    58fa:	d008      	beq.n	590e <onoff_request+0x4c>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
    58fc:	f1bc 0f06 	cmp.w	ip, #6
    5900:	d819      	bhi.n	5936 <onoff_request+0x74>
    5902:	e8df f00c 	tbb	[pc, ip]
    5906:	181e      	.short	0x181e
    5908:	2a1e1818 	.word	0x2a1e1818
    590c:	1e          	.byte	0x1e
    590d:	00          	.byte	0x00
		mgr->refs += 1U;
    590e:	3301      	adds	r3, #1
    5910:	836b      	strh	r3, [r5, #26]
		notify = true;
    5912:	2301      	movs	r3, #1
	bool start = false;             /* trigger a start transition */
    5914:	2100      	movs	r1, #0
	bool add_client = false;        /* add client to pending list */
    5916:	4608      	mov	r0, r1
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
	}

out:
	if (add_client) {
    5918:	b128      	cbz	r0, 5926 <onoff_request+0x64>
	parent->next = child;
    591a:	2000      	movs	r0, #0
    591c:	6030      	str	r0, [r6, #0]
	return list->tail;
    591e:	6868      	ldr	r0, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
    5920:	b308      	cbz	r0, 5966 <onoff_request+0xa4>
	parent->next = child;
    5922:	6006      	str	r6, [r0, #0]
	list->tail = node;
    5924:	606e      	str	r6, [r5, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    5926:	bb09      	cbnz	r1, 596c <onoff_request+0xaa>
	__asm__ volatile(
    5928:	f38e 8811 	msr	BASEPRI, lr
    592c:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    5930:	bb0b      	cbnz	r3, 5976 <onoff_request+0xb4>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    5932:	4620      	mov	r0, r4
    5934:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    5936:	f06f 0404 	mvn.w	r4, #4
    593a:	2300      	movs	r3, #0
    593c:	4619      	mov	r1, r3
    593e:	4618      	mov	r0, r3
    5940:	e7ea      	b.n	5918 <onoff_request+0x56>
		start = (state == ONOFF_STATE_OFF);
    5942:	fabc f18c 	clz	r1, ip
    5946:	0949      	lsrs	r1, r1, #5
	bool notify = false;            /* do client notification */
    5948:	2300      	movs	r3, #0
		add_client = true;
    594a:	2001      	movs	r0, #1
    594c:	e7e4      	b.n	5918 <onoff_request+0x56>
		rv = -EAGAIN;
    594e:	f06f 040a 	mvn.w	r4, #10
	bool notify = false;            /* do client notification */
    5952:	2300      	movs	r3, #0
	bool start = false;             /* trigger a start transition */
    5954:	4619      	mov	r1, r3
	bool add_client = false;        /* add client to pending list */
    5956:	4618      	mov	r0, r3
    5958:	e7de      	b.n	5918 <onoff_request+0x56>
	if (state == ONOFF_STATE_ON) {
    595a:	f06f 0485 	mvn.w	r4, #133	; 0x85
    595e:	2300      	movs	r3, #0
    5960:	4619      	mov	r1, r3
    5962:	4618      	mov	r0, r3
    5964:	e7d8      	b.n	5918 <onoff_request+0x56>
    5966:	606e      	str	r6, [r5, #4]
	list->head = node;
    5968:	602e      	str	r6, [r5, #0]
}
    596a:	e7dc      	b.n	5926 <onoff_request+0x64>
		process_event(mgr, EVT_RECHECK, key);
    596c:	2102      	movs	r1, #2
    596e:	4628      	mov	r0, r5
    5970:	f7fa fe58 	bl	624 <process_event>
    5974:	e7dd      	b.n	5932 <onoff_request+0x70>
			notify_one(mgr, cli, state, 0);
    5976:	2300      	movs	r3, #0
    5978:	4662      	mov	r2, ip
    597a:	4631      	mov	r1, r6
    597c:	4628      	mov	r0, r5
    597e:	f7ff ff4b 	bl	5818 <notify_one>
    5982:	e7d6      	b.n	5932 <onoff_request+0x70>

00005984 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    5984:	4602      	mov	r2, r0
    5986:	b1b0      	cbz	r0, 59b6 <sys_notify_validate+0x32>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    5988:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    598a:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    598e:	2b02      	cmp	r3, #2
    5990:	d00b      	beq.n	59aa <sys_notify_validate+0x26>
    5992:	2b03      	cmp	r3, #3
    5994:	d004      	beq.n	59a0 <sys_notify_validate+0x1c>
    5996:	2b01      	cmp	r3, #1
    5998:	d004      	beq.n	59a4 <sys_notify_validate+0x20>
    599a:	f06f 0015 	mvn.w	r0, #21
    599e:	4770      	bx	lr
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    59a0:	6803      	ldr	r3, [r0, #0]
    59a2:	b15b      	cbz	r3, 59bc <sys_notify_validate+0x38>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    59a4:	2000      	movs	r0, #0
    59a6:	6090      	str	r0, [r2, #8]
    59a8:	4770      	bx	lr
		if (notify->method.signal == NULL) {
    59aa:	6803      	ldr	r3, [r0, #0]
    59ac:	2b00      	cmp	r3, #0
    59ae:	d1f9      	bne.n	59a4 <sys_notify_validate+0x20>
			rv = -EINVAL;
    59b0:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    59b4:	4770      	bx	lr
		return -EINVAL;
    59b6:	f06f 0015 	mvn.w	r0, #21
    59ba:	4770      	bx	lr
			rv = -EINVAL;
    59bc:	f06f 0015 	mvn.w	r0, #21
    59c0:	4770      	bx	lr

000059c2 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    59c2:	b510      	push	{r4, lr}
    59c4:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    59c6:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    59c8:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    59cc:	6081      	str	r1, [r0, #8]
	switch (method) {
    59ce:	2a02      	cmp	r2, #2
    59d0:	d004      	beq.n	59dc <sys_notify_finalize+0x1a>
    59d2:	2a03      	cmp	r2, #3
    59d4:	d105      	bne.n	59e2 <sys_notify_finalize+0x20>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    59d6:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
    59d8:	2000      	movs	r0, #0
		break;
    59da:	e004      	b.n	59e6 <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SIGNAL:
		sig = notify->method.signal;
    59dc:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    59de:	2400      	movs	r4, #0
		break;
    59e0:	e001      	b.n	59e6 <sys_notify_finalize+0x24>
	switch (method) {
    59e2:	2400      	movs	r4, #0
    59e4:	4620      	mov	r0, r4
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    59e6:	2200      	movs	r2, #0
    59e8:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    59ea:	b108      	cbz	r0, 59f0 <sys_notify_finalize+0x2e>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    59ec:	f7ff faa2 	bl	4f34 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    59f0:	4620      	mov	r0, r4
    59f2:	bd10      	pop	{r4, pc}

000059f4 <extract_decimal>:
{
    59f4:	4684      	mov	ip, r0
	const char *sp = *str;
    59f6:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
    59f8:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
    59fa:	e006      	b.n	5a0a <extract_decimal+0x16>
		val = 10U * val + *sp++ - '0';
    59fc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    5a00:	3201      	adds	r2, #1
    5a02:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    5a06:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    5a0a:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    5a0c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    5a10:	2909      	cmp	r1, #9
    5a12:	d9f3      	bls.n	59fc <extract_decimal+0x8>
	*str = sp;
    5a14:	f8cc 2000 	str.w	r2, [ip]
}
    5a18:	4770      	bx	lr

00005a1a <extract_width>:
{
    5a1a:	b530      	push	{r4, r5, lr}
    5a1c:	b083      	sub	sp, #12
    5a1e:	4604      	mov	r4, r0
    5a20:	9101      	str	r1, [sp, #4]
	conv->width_present = true;
    5a22:	7803      	ldrb	r3, [r0, #0]
    5a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    5a28:	7003      	strb	r3, [r0, #0]
	if (*sp == '*') {
    5a2a:	460d      	mov	r5, r1
    5a2c:	780b      	ldrb	r3, [r1, #0]
    5a2e:	2b2a      	cmp	r3, #42	; 0x2a
    5a30:	d018      	beq.n	5a64 <extract_width+0x4a>
	size_t width = extract_decimal(&sp);
    5a32:	a801      	add	r0, sp, #4
    5a34:	f7ff ffde 	bl	59f4 <extract_decimal>
	if (sp != wp) {
    5a38:	9b01      	ldr	r3, [sp, #4]
    5a3a:	429d      	cmp	r5, r3
    5a3c:	d00f      	beq.n	5a5e <extract_width+0x44>
		conv->width_present = true;
    5a3e:	7823      	ldrb	r3, [r4, #0]
    5a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    5a44:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
    5a46:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
    5a48:	b2db      	uxtb	r3, r3
    5a4a:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
    5a4e:	2800      	cmp	r0, #0
    5a50:	db10      	blt.n	5a74 <extract_width+0x5a>
    5a52:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
    5a54:	4313      	orrs	r3, r2
    5a56:	7822      	ldrb	r2, [r4, #0]
    5a58:	f363 0241 	bfi	r2, r3, #1, #1
    5a5c:	7022      	strb	r2, [r4, #0]
	return sp;
    5a5e:	9801      	ldr	r0, [sp, #4]
}
    5a60:	b003      	add	sp, #12
    5a62:	bd30      	pop	{r4, r5, pc}
		conv->width_star = true;
    5a64:	7843      	ldrb	r3, [r0, #1]
    5a66:	f043 0301 	orr.w	r3, r3, #1
    5a6a:	7043      	strb	r3, [r0, #1]
		return ++sp;
    5a6c:	4608      	mov	r0, r1
    5a6e:	3001      	adds	r0, #1
    5a70:	9001      	str	r0, [sp, #4]
    5a72:	e7f5      	b.n	5a60 <extract_width+0x46>
				      || (width != (size_t)conv->width_value));
    5a74:	2201      	movs	r2, #1
    5a76:	e7ed      	b.n	5a54 <extract_width+0x3a>

00005a78 <extract_prec>:
{
    5a78:	b510      	push	{r4, lr}
    5a7a:	b082      	sub	sp, #8
    5a7c:	9101      	str	r1, [sp, #4]
	conv->prec_present = (*sp == '.');
    5a7e:	780b      	ldrb	r3, [r1, #0]
    5a80:	2b2e      	cmp	r3, #46	; 0x2e
    5a82:	bf14      	ite	ne
    5a84:	2300      	movne	r3, #0
    5a86:	2301      	moveq	r3, #1
    5a88:	7842      	ldrb	r2, [r0, #1]
    5a8a:	f363 0241 	bfi	r2, r3, #1, #1
    5a8e:	7042      	strb	r2, [r0, #1]
	if (!conv->prec_present) {
    5a90:	b1c3      	cbz	r3, 5ac4 <extract_prec+0x4c>
    5a92:	4604      	mov	r4, r0
	++sp;
    5a94:	9b01      	ldr	r3, [sp, #4]
    5a96:	1c5a      	adds	r2, r3, #1
    5a98:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
    5a9a:	785b      	ldrb	r3, [r3, #1]
    5a9c:	2b2a      	cmp	r3, #42	; 0x2a
    5a9e:	d013      	beq.n	5ac8 <extract_prec+0x50>
	size_t prec = extract_decimal(&sp);
    5aa0:	a801      	add	r0, sp, #4
    5aa2:	f7ff ffa7 	bl	59f4 <extract_decimal>
	conv->prec_value = prec;
    5aa6:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
    5aa8:	7823      	ldrb	r3, [r4, #0]
    5aaa:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
    5aae:	2800      	cmp	r0, #0
    5ab0:	db12      	blt.n	5ad8 <extract_prec+0x60>
    5ab2:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
    5ab4:	4313      	orrs	r3, r2
    5ab6:	7822      	ldrb	r2, [r4, #0]
    5ab8:	f363 0241 	bfi	r2, r3, #1, #1
    5abc:	7022      	strb	r2, [r4, #0]
	return sp;
    5abe:	9801      	ldr	r0, [sp, #4]
}
    5ac0:	b002      	add	sp, #8
    5ac2:	bd10      	pop	{r4, pc}
		return sp;
    5ac4:	4608      	mov	r0, r1
    5ac6:	e7fb      	b.n	5ac0 <extract_prec+0x48>
		conv->prec_star = true;
    5ac8:	7843      	ldrb	r3, [r0, #1]
    5aca:	f043 0304 	orr.w	r3, r3, #4
    5ace:	7043      	strb	r3, [r0, #1]
		return ++sp;
    5ad0:	4610      	mov	r0, r2
    5ad2:	3001      	adds	r0, #1
    5ad4:	9001      	str	r0, [sp, #4]
    5ad6:	e7f3      	b.n	5ac0 <extract_prec+0x48>
			      || (prec != (size_t)conv->prec_value));
    5ad8:	2201      	movs	r2, #1
    5ada:	e7eb      	b.n	5ab4 <extract_prec+0x3c>

00005adc <extract_length>:
{
    5adc:	4602      	mov	r2, r0
	switch (*sp) {
    5ade:	780b      	ldrb	r3, [r1, #0]
    5ae0:	3b4c      	subs	r3, #76	; 0x4c
    5ae2:	2b2e      	cmp	r3, #46	; 0x2e
    5ae4:	d85b      	bhi.n	5b9e <extract_length+0xc2>
    5ae6:	e8df f003 	tbb	[pc, r3]
    5aea:	5a4f      	.short	0x5a4f
    5aec:	5a5a5a5a 	.word	0x5a5a5a5a
    5af0:	5a5a5a5a 	.word	0x5a5a5a5a
    5af4:	5a5a5a5a 	.word	0x5a5a5a5a
    5af8:	5a5a5a5a 	.word	0x5a5a5a5a
    5afc:	5a5a5a5a 	.word	0x5a5a5a5a
    5b00:	5a5a5a5a 	.word	0x5a5a5a5a
    5b04:	5a185a5a 	.word	0x5a185a5a
    5b08:	5a295a3a 	.word	0x5a295a3a
    5b0c:	5a5a5a5a 	.word	0x5a5a5a5a
    5b10:	5a485a5a 	.word	0x5a485a5a
    5b14:	5a5a5a5a 	.word	0x5a5a5a5a
    5b18:	41          	.byte	0x41
    5b19:	00          	.byte	0x00
		if (*++sp == 'h') {
    5b1a:	1c48      	adds	r0, r1, #1
    5b1c:	784b      	ldrb	r3, [r1, #1]
    5b1e:	2b68      	cmp	r3, #104	; 0x68
    5b20:	d005      	beq.n	5b2e <extract_length+0x52>
			conv->length_mod = LENGTH_H;
    5b22:	7853      	ldrb	r3, [r2, #1]
    5b24:	2102      	movs	r1, #2
    5b26:	f361 03c6 	bfi	r3, r1, #3, #4
    5b2a:	7053      	strb	r3, [r2, #1]
    5b2c:	4770      	bx	lr
			conv->length_mod = LENGTH_HH;
    5b2e:	7853      	ldrb	r3, [r2, #1]
    5b30:	2001      	movs	r0, #1
    5b32:	f360 03c6 	bfi	r3, r0, #3, #4
    5b36:	7053      	strb	r3, [r2, #1]
			++sp;
    5b38:	1c88      	adds	r0, r1, #2
    5b3a:	4770      	bx	lr
		if (*++sp == 'l') {
    5b3c:	1c48      	adds	r0, r1, #1
    5b3e:	784b      	ldrb	r3, [r1, #1]
    5b40:	2b6c      	cmp	r3, #108	; 0x6c
    5b42:	d005      	beq.n	5b50 <extract_length+0x74>
			conv->length_mod = LENGTH_L;
    5b44:	7853      	ldrb	r3, [r2, #1]
    5b46:	2103      	movs	r1, #3
    5b48:	f361 03c6 	bfi	r3, r1, #3, #4
    5b4c:	7053      	strb	r3, [r2, #1]
    5b4e:	4770      	bx	lr
			conv->length_mod = LENGTH_LL;
    5b50:	7853      	ldrb	r3, [r2, #1]
    5b52:	2004      	movs	r0, #4
    5b54:	f360 03c6 	bfi	r3, r0, #3, #4
    5b58:	7053      	strb	r3, [r2, #1]
			++sp;
    5b5a:	1c88      	adds	r0, r1, #2
    5b5c:	4770      	bx	lr
		conv->length_mod = LENGTH_J;
    5b5e:	7853      	ldrb	r3, [r2, #1]
    5b60:	2005      	movs	r0, #5
    5b62:	f360 03c6 	bfi	r3, r0, #3, #4
    5b66:	7053      	strb	r3, [r2, #1]
		++sp;
    5b68:	1c48      	adds	r0, r1, #1
		break;
    5b6a:	4770      	bx	lr
		conv->length_mod = LENGTH_Z;
    5b6c:	7853      	ldrb	r3, [r2, #1]
    5b6e:	2006      	movs	r0, #6
    5b70:	f360 03c6 	bfi	r3, r0, #3, #4
    5b74:	7053      	strb	r3, [r2, #1]
		++sp;
    5b76:	1c48      	adds	r0, r1, #1
		break;
    5b78:	4770      	bx	lr
		conv->length_mod = LENGTH_T;
    5b7a:	7853      	ldrb	r3, [r2, #1]
    5b7c:	2007      	movs	r0, #7
    5b7e:	f360 03c6 	bfi	r3, r0, #3, #4
    5b82:	7053      	strb	r3, [r2, #1]
		++sp;
    5b84:	1c48      	adds	r0, r1, #1
		break;
    5b86:	4770      	bx	lr
		conv->length_mod = LENGTH_UPPER_L;
    5b88:	7853      	ldrb	r3, [r2, #1]
    5b8a:	2008      	movs	r0, #8
    5b8c:	f360 03c6 	bfi	r3, r0, #3, #4
    5b90:	7053      	strb	r3, [r2, #1]
		++sp;
    5b92:	1c48      	adds	r0, r1, #1
		conv->unsupported = true;
    5b94:	7813      	ldrb	r3, [r2, #0]
    5b96:	f043 0302 	orr.w	r3, r3, #2
    5b9a:	7013      	strb	r3, [r2, #0]
		break;
    5b9c:	4770      	bx	lr
		conv->length_mod = LENGTH_NONE;
    5b9e:	7853      	ldrb	r3, [r2, #1]
    5ba0:	f36f 03c6 	bfc	r3, #3, #4
    5ba4:	7053      	strb	r3, [r2, #1]
		break;
    5ba6:	4608      	mov	r0, r1
}
    5ba8:	4770      	bx	lr

00005baa <extract_specifier>:
{
    5baa:	b500      	push	{lr}
    5bac:	4602      	mov	r2, r0
	conv->specifier = *sp++;
    5bae:	4608      	mov	r0, r1
    5bb0:	f810 3b01 	ldrb.w	r3, [r0], #1
    5bb4:	70d3      	strb	r3, [r2, #3]
	switch (conv->specifier) {
    5bb6:	2b78      	cmp	r3, #120	; 0x78
    5bb8:	d817      	bhi.n	5bea <extract_specifier+0x40>
    5bba:	2b6e      	cmp	r3, #110	; 0x6e
    5bbc:	d229      	bcs.n	5c12 <extract_specifier+0x68>
    5bbe:	2b69      	cmp	r3, #105	; 0x69
    5bc0:	d813      	bhi.n	5bea <extract_specifier+0x40>
    5bc2:	2b58      	cmp	r3, #88	; 0x58
    5bc4:	d317      	bcc.n	5bf6 <extract_specifier+0x4c>
    5bc6:	f1a3 0c58 	sub.w	ip, r3, #88	; 0x58
    5bca:	fa5f fc8c 	uxtb.w	ip, ip
    5bce:	2101      	movs	r1, #1
    5bd0:	fa01 f10c 	lsl.w	r1, r1, ip
    5bd4:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    5bd8:	d114      	bne.n	5c04 <extract_specifier+0x5a>
    5bda:	f640 0c01 	movw	ip, #2049	; 0x801
    5bde:	ea11 0f0c 	tst.w	r1, ip
    5be2:	d155      	bne.n	5c90 <extract_specifier+0xe6>
    5be4:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    5be8:	d13a      	bne.n	5c60 <extract_specifier+0xb6>
		conv->invalid = true;
    5bea:	7813      	ldrb	r3, [r2, #0]
    5bec:	f043 0301 	orr.w	r3, r3, #1
    5bf0:	7013      	strb	r3, [r2, #0]
	bool unsupported = false;
    5bf2:	2100      	movs	r1, #0
		break;
    5bf4:	e042      	b.n	5c7c <extract_specifier+0xd2>
	switch (conv->specifier) {
    5bf6:	2b41      	cmp	r3, #65	; 0x41
    5bf8:	d004      	beq.n	5c04 <extract_specifier+0x5a>
    5bfa:	d3f6      	bcc.n	5bea <extract_specifier+0x40>
    5bfc:	3b45      	subs	r3, #69	; 0x45
    5bfe:	b2db      	uxtb	r3, r3
    5c00:	2b02      	cmp	r3, #2
    5c02:	d8f2      	bhi.n	5bea <extract_specifier+0x40>
		conv->specifier_cat = SPECIFIER_FP;
    5c04:	7893      	ldrb	r3, [r2, #2]
    5c06:	2104      	movs	r1, #4
    5c08:	f361 0302 	bfi	r3, r1, #0, #3
    5c0c:	7093      	strb	r3, [r2, #2]
			unsupported = true;
    5c0e:	2101      	movs	r1, #1
			break;
    5c10:	e034      	b.n	5c7c <extract_specifier+0xd2>
	switch (conv->specifier) {
    5c12:	f1a3 016e 	sub.w	r1, r3, #110	; 0x6e
    5c16:	b2c9      	uxtb	r1, r1
    5c18:	f04f 0c01 	mov.w	ip, #1
    5c1c:	fa0c fc01 	lsl.w	ip, ip, r1
    5c20:	f240 4182 	movw	r1, #1154	; 0x482
    5c24:	ea1c 0f01 	tst.w	ip, r1
    5c28:	bf14      	ite	ne
    5c2a:	f04f 0e01 	movne.w	lr, #1
    5c2e:	f04f 0e00 	moveq.w	lr, #0
    5c32:	d12d      	bne.n	5c90 <extract_specifier+0xe6>
    5c34:	f01c 0f24 	tst.w	ip, #36	; 0x24
    5c38:	bf14      	ite	ne
    5c3a:	2101      	movne	r1, #1
    5c3c:	2100      	moveq	r1, #0
    5c3e:	d139      	bne.n	5cb4 <extract_specifier+0x10a>
    5c40:	f01c 0c01 	ands.w	ip, ip, #1
    5c44:	d0d1      	beq.n	5bea <extract_specifier+0x40>
		conv->specifier_cat = SPECIFIER_PTR;
    5c46:	7893      	ldrb	r3, [r2, #2]
    5c48:	f04f 0e03 	mov.w	lr, #3
    5c4c:	f36e 0302 	bfi	r3, lr, #0, #3
    5c50:	7093      	strb	r3, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    5c52:	7853      	ldrb	r3, [r2, #1]
    5c54:	f003 0378 	and.w	r3, r3, #120	; 0x78
    5c58:	2b40      	cmp	r3, #64	; 0x40
    5c5a:	d10f      	bne.n	5c7c <extract_specifier+0xd2>
			unsupported = true;
    5c5c:	4661      	mov	r1, ip
    5c5e:	e00d      	b.n	5c7c <extract_specifier+0xd2>
		conv->specifier_cat = SPECIFIER_SINT;
    5c60:	7891      	ldrb	r1, [r2, #2]
    5c62:	f04f 0c01 	mov.w	ip, #1
    5c66:	f36c 0102 	bfi	r1, ip, #0, #3
    5c6a:	7091      	strb	r1, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    5c6c:	7851      	ldrb	r1, [r2, #1]
    5c6e:	f001 0178 	and.w	r1, r1, #120	; 0x78
    5c72:	2940      	cmp	r1, #64	; 0x40
    5c74:	d013      	beq.n	5c9e <extract_specifier+0xf4>
		if (conv->specifier == 'c') {
    5c76:	2b63      	cmp	r3, #99	; 0x63
    5c78:	d018      	beq.n	5cac <extract_specifier+0x102>
	bool unsupported = false;
    5c7a:	2100      	movs	r1, #0
	conv->unsupported |= unsupported;
    5c7c:	7813      	ldrb	r3, [r2, #0]
    5c7e:	f3c3 0c40 	ubfx	ip, r3, #1, #1
    5c82:	ea41 010c 	orr.w	r1, r1, ip
    5c86:	f361 0341 	bfi	r3, r1, #1, #1
    5c8a:	7013      	strb	r3, [r2, #0]
}
    5c8c:	f85d fb04 	ldr.w	pc, [sp], #4
		conv->specifier_cat = SPECIFIER_UINT;
    5c90:	7891      	ldrb	r1, [r2, #2]
    5c92:	f04f 0c02 	mov.w	ip, #2
    5c96:	f36c 0102 	bfi	r1, ip, #0, #3
    5c9a:	7091      	strb	r1, [r2, #2]
    5c9c:	e7e6      	b.n	5c6c <extract_specifier+0xc2>
			conv->invalid = true;
    5c9e:	f892 c000 	ldrb.w	ip, [r2]
    5ca2:	f04c 0c01 	orr.w	ip, ip, #1
    5ca6:	f882 c000 	strb.w	ip, [r2]
    5caa:	e7e4      	b.n	5c76 <extract_specifier+0xcc>
			unsupported = (conv->length_mod != LENGTH_NONE);
    5cac:	3900      	subs	r1, #0
    5cae:	bf18      	it	ne
    5cb0:	2101      	movne	r1, #1
    5cb2:	e7e3      	b.n	5c7c <extract_specifier+0xd2>
		conv->specifier_cat = SPECIFIER_PTR;
    5cb4:	7893      	ldrb	r3, [r2, #2]
    5cb6:	f04f 0c03 	mov.w	ip, #3
    5cba:	f36c 0302 	bfi	r3, ip, #0, #3
    5cbe:	7093      	strb	r3, [r2, #2]
		if (conv->length_mod != LENGTH_NONE) {
    5cc0:	7853      	ldrb	r3, [r2, #1]
    5cc2:	f013 0f78 	tst.w	r3, #120	; 0x78
    5cc6:	d1d9      	bne.n	5c7c <extract_specifier+0xd2>
	bool unsupported = false;
    5cc8:	4671      	mov	r1, lr
    5cca:	e7d7      	b.n	5c7c <extract_specifier+0xd2>

00005ccc <extract_conversion>:
{
    5ccc:	b510      	push	{r4, lr}
    5cce:	4604      	mov	r4, r0
    5cd0:	4608      	mov	r0, r1
	*conv = (struct conversion) {
    5cd2:	2300      	movs	r3, #0
    5cd4:	6023      	str	r3, [r4, #0]
    5cd6:	6063      	str	r3, [r4, #4]
    5cd8:	60a3      	str	r3, [r4, #8]
	if (*sp == '%') {
    5cda:	784b      	ldrb	r3, [r1, #1]
    5cdc:	2b25      	cmp	r3, #37	; 0x25
    5cde:	d014      	beq.n	5d0a <extract_conversion+0x3e>
    5ce0:	3101      	adds	r1, #1
	sp = extract_flags(conv, sp);
    5ce2:	4620      	mov	r0, r4
    5ce4:	f7fa fd54 	bl	790 <extract_flags>
    5ce8:	4601      	mov	r1, r0
	sp = extract_width(conv, sp);
    5cea:	4620      	mov	r0, r4
    5cec:	f7ff fe95 	bl	5a1a <extract_width>
    5cf0:	4601      	mov	r1, r0
	sp = extract_prec(conv, sp);
    5cf2:	4620      	mov	r0, r4
    5cf4:	f7ff fec0 	bl	5a78 <extract_prec>
    5cf8:	4601      	mov	r1, r0
	sp = extract_length(conv, sp);
    5cfa:	4620      	mov	r0, r4
    5cfc:	f7ff feee 	bl	5adc <extract_length>
    5d00:	4601      	mov	r1, r0
	sp = extract_specifier(conv, sp);
    5d02:	4620      	mov	r0, r4
    5d04:	f7ff ff51 	bl	5baa <extract_specifier>
}
    5d08:	bd10      	pop	{r4, pc}
		conv->specifier = *sp++;
    5d0a:	3002      	adds	r0, #2
    5d0c:	70e3      	strb	r3, [r4, #3]
		return sp;
    5d0e:	e7fb      	b.n	5d08 <extract_conversion+0x3c>

00005d10 <conversion_radix>:
	switch (specifier) {
    5d10:	286f      	cmp	r0, #111	; 0x6f
    5d12:	d00c      	beq.n	5d2e <conversion_radix+0x1e>
    5d14:	d905      	bls.n	5d22 <conversion_radix+0x12>
    5d16:	2870      	cmp	r0, #112	; 0x70
    5d18:	d00b      	beq.n	5d32 <conversion_radix+0x22>
    5d1a:	2878      	cmp	r0, #120	; 0x78
    5d1c:	d10b      	bne.n	5d36 <conversion_radix+0x26>
		return 16;
    5d1e:	2010      	movs	r0, #16
    5d20:	4770      	bx	lr
	switch (specifier) {
    5d22:	2858      	cmp	r0, #88	; 0x58
    5d24:	d001      	beq.n	5d2a <conversion_radix+0x1a>
    5d26:	200a      	movs	r0, #10
    5d28:	4770      	bx	lr
		return 16;
    5d2a:	2010      	movs	r0, #16
    5d2c:	4770      	bx	lr
		return 8;
    5d2e:	2008      	movs	r0, #8
    5d30:	4770      	bx	lr
		return 16;
    5d32:	2010      	movs	r0, #16
    5d34:	4770      	bx	lr
	switch (specifier) {
    5d36:	200a      	movs	r0, #10
}
    5d38:	4770      	bx	lr

00005d3a <encode_uint>:
{
    5d3a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5d3e:	4605      	mov	r5, r0
    5d40:	460c      	mov	r4, r1
    5d42:	4693      	mov	fp, r2
    5d44:	4699      	mov	r9, r3
    5d46:	9f0a      	ldr	r7, [sp, #40]	; 0x28
	bool upcase = isupper((int)conv->specifier);
    5d48:	78d0      	ldrb	r0, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    5d4a:	f1a0 0a41 	sub.w	sl, r0, #65	; 0x41
	const unsigned int radix = conversion_radix(conv->specifier);
    5d4e:	f7ff ffdf 	bl	5d10 <conversion_radix>
    5d52:	4606      	mov	r6, r0
	char *bp = bps + (bpe - bps);
    5d54:	e015      	b.n	5d82 <encode_uint+0x48>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5d56:	f1ba 0f19 	cmp.w	sl, #25
    5d5a:	d820      	bhi.n	5d9e <encode_uint+0x64>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    5d5c:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5d5e:	3237      	adds	r2, #55	; 0x37
    5d60:	b2d2      	uxtb	r2, r2
    5d62:	f807 2d01 	strb.w	r2, [r7, #-1]!
		value /= radix;
    5d66:	4632      	mov	r2, r6
    5d68:	4643      	mov	r3, r8
    5d6a:	4628      	mov	r0, r5
    5d6c:	4621      	mov	r1, r4
    5d6e:	f7fa f9f1 	bl	154 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
    5d72:	42b5      	cmp	r5, r6
    5d74:	f174 0400 	sbcs.w	r4, r4, #0
    5d78:	d315      	bcc.n	5da6 <encode_uint+0x6c>
    5d7a:	454f      	cmp	r7, r9
    5d7c:	d913      	bls.n	5da6 <encode_uint+0x6c>
		value /= radix;
    5d7e:	4605      	mov	r5, r0
    5d80:	460c      	mov	r4, r1
		unsigned int lsv = (unsigned int)(value % radix);
    5d82:	f04f 0800 	mov.w	r8, #0
    5d86:	4632      	mov	r2, r6
    5d88:	4643      	mov	r3, r8
    5d8a:	4628      	mov	r0, r5
    5d8c:	4621      	mov	r1, r4
    5d8e:	f7fa f9e1 	bl	154 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5d92:	2a09      	cmp	r2, #9
    5d94:	d8df      	bhi.n	5d56 <encode_uint+0x1c>
    5d96:	b2d2      	uxtb	r2, r2
    5d98:	3230      	adds	r2, #48	; 0x30
    5d9a:	b2d2      	uxtb	r2, r2
    5d9c:	e7e1      	b.n	5d62 <encode_uint+0x28>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    5d9e:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5da0:	3257      	adds	r2, #87	; 0x57
    5da2:	b2d2      	uxtb	r2, r2
    5da4:	e7dd      	b.n	5d62 <encode_uint+0x28>
	if (conv->flag_hash) {
    5da6:	f89b 3000 	ldrb.w	r3, [fp]
    5daa:	f013 0f20 	tst.w	r3, #32
    5dae:	d003      	beq.n	5db8 <encode_uint+0x7e>
		if (radix == 8) {
    5db0:	2e08      	cmp	r6, #8
    5db2:	d004      	beq.n	5dbe <encode_uint+0x84>
		} else if (radix == 16) {
    5db4:	2e10      	cmp	r6, #16
    5db6:	d009      	beq.n	5dcc <encode_uint+0x92>
}
    5db8:	4638      	mov	r0, r7
    5dba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
    5dbe:	f89b 3002 	ldrb.w	r3, [fp, #2]
    5dc2:	f043 0308 	orr.w	r3, r3, #8
    5dc6:	f88b 3002 	strb.w	r3, [fp, #2]
    5dca:	e7f5      	b.n	5db8 <encode_uint+0x7e>
			conv->altform_0c = true;
    5dcc:	f89b 3002 	ldrb.w	r3, [fp, #2]
    5dd0:	f043 0310 	orr.w	r3, r3, #16
    5dd4:	f88b 3002 	strb.w	r3, [fp, #2]
    5dd8:	e7ee      	b.n	5db8 <encode_uint+0x7e>

00005dda <store_count>:
	switch ((enum length_mod_enum)conv->length_mod) {
    5dda:	7843      	ldrb	r3, [r0, #1]
    5ddc:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    5de0:	2b07      	cmp	r3, #7
    5de2:	d818      	bhi.n	5e16 <store_count+0x3c>
    5de4:	e8df f003 	tbb	[pc, r3]
    5de8:	0a080604 	.word	0x0a080604
    5dec:	1614100c 	.word	0x1614100c
		*(int *)dp = count;
    5df0:	600a      	str	r2, [r1, #0]
		break;
    5df2:	4770      	bx	lr
		*(signed char *)dp = (signed char)count;
    5df4:	700a      	strb	r2, [r1, #0]
		break;
    5df6:	4770      	bx	lr
		*(short *)dp = (short)count;
    5df8:	800a      	strh	r2, [r1, #0]
		break;
    5dfa:	4770      	bx	lr
		*(long *)dp = (long)count;
    5dfc:	600a      	str	r2, [r1, #0]
		break;
    5dfe:	4770      	bx	lr
		*(long long *)dp = (long long)count;
    5e00:	17d3      	asrs	r3, r2, #31
    5e02:	600a      	str	r2, [r1, #0]
    5e04:	604b      	str	r3, [r1, #4]
		break;
    5e06:	4770      	bx	lr
		*(intmax_t *)dp = (intmax_t)count;
    5e08:	17d3      	asrs	r3, r2, #31
    5e0a:	600a      	str	r2, [r1, #0]
    5e0c:	604b      	str	r3, [r1, #4]
		break;
    5e0e:	4770      	bx	lr
		*(size_t *)dp = (size_t)count;
    5e10:	600a      	str	r2, [r1, #0]
		break;
    5e12:	4770      	bx	lr
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    5e14:	600a      	str	r2, [r1, #0]
}
    5e16:	4770      	bx	lr

00005e18 <outs>:
{
    5e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5e1c:	4607      	mov	r7, r0
    5e1e:	460e      	mov	r6, r1
    5e20:	4614      	mov	r4, r2
    5e22:	4698      	mov	r8, r3
	size_t count = 0;
    5e24:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    5e26:	e006      	b.n	5e36 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
    5e28:	4631      	mov	r1, r6
    5e2a:	f814 0b01 	ldrb.w	r0, [r4], #1
    5e2e:	47b8      	blx	r7
		if (rc < 0) {
    5e30:	2800      	cmp	r0, #0
    5e32:	db09      	blt.n	5e48 <outs+0x30>
		++count;
    5e34:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    5e36:	4544      	cmp	r4, r8
    5e38:	d3f6      	bcc.n	5e28 <outs+0x10>
    5e3a:	f1b8 0f00 	cmp.w	r8, #0
    5e3e:	d102      	bne.n	5e46 <outs+0x2e>
    5e40:	7823      	ldrb	r3, [r4, #0]
    5e42:	2b00      	cmp	r3, #0
    5e44:	d1f0      	bne.n	5e28 <outs+0x10>
	return (int)count;
    5e46:	4628      	mov	r0, r5
}
    5e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005e4c <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    5e4c:	4770      	bx	lr

00005e4e <arch_busy_wait>:

void arch_busy_wait(uint32_t time_us)
{
    5e4e:	b508      	push	{r3, lr}
	nrfx_coredep_delay_us(time_us);
    5e50:	f7fa ffe0 	bl	e14 <nrfx_coredep_delay_us>
}
    5e54:	bd08      	pop	{r3, pc}

00005e56 <nrf_regulators_system_off>:
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
    5e56:	2301      	movs	r3, #1
    5e58:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    5e5c:	f3bf 8f4f 	dsb	sy
        __WFE();
    5e60:	bf20      	wfe
    while (true)
    5e62:	e7fd      	b.n	5e60 <nrf_regulators_system_off+0xa>

00005e64 <pm_state_exit_post_ops>:
    5e64:	2300      	movs	r3, #0
    5e66:	f383 8811 	msr	BASEPRI, r3
    5e6a:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    5e6e:	4770      	bx	lr

00005e70 <atomic_test_and_clear_bit>:
 * @param bit Bit number (starting from 0).
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
    5e70:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
    5e72:	f001 021f 	and.w	r2, r1, #31
    5e76:	2301      	movs	r3, #1
    5e78:	4093      	lsls	r3, r2
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    5e7a:	0949      	lsrs	r1, r1, #5
    5e7c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    5e80:	43d9      	mvns	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5e82:	e8d0 2fef 	ldaex	r2, [r0]
    5e86:	ea02 0c01 	and.w	ip, r2, r1
    5e8a:	e8c0 cfee 	stlex	lr, ip, [r0]
    5e8e:	f1be 0f00 	cmp.w	lr, #0
    5e92:	d1f6      	bne.n	5e82 <atomic_test_and_clear_bit+0x12>

	return (old & mask) != 0;
    5e94:	4213      	tst	r3, r2
}
    5e96:	bf14      	ite	ne
    5e98:	2001      	movne	r0, #1
    5e9a:	2000      	moveq	r0, #0
    5e9c:	f85d fb04 	ldr.w	pc, [sp], #4

00005ea0 <atomic_set_bit>:
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    5ea0:	f001 021f 	and.w	r2, r1, #31
    5ea4:	2301      	movs	r3, #1
    5ea6:	4093      	lsls	r3, r2

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    5ea8:	0949      	lsrs	r1, r1, #5
    5eaa:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5eae:	e8d0 2fef 	ldaex	r2, [r0]
    5eb2:	431a      	orrs	r2, r3
    5eb4:	e8c0 2fe1 	stlex	r1, r2, [r0]
    5eb8:	2900      	cmp	r1, #0
    5eba:	d1f8      	bne.n	5eae <atomic_set_bit+0xe>
}
    5ebc:	4770      	bx	lr

00005ebe <pm_policy_state_lock_is_active>:
			return (atomic_get(&substate_lock_t[i].lock) != 0);
		}
	}

	return false;
}
    5ebe:	2000      	movs	r0, #0
    5ec0:	4770      	bx	lr

00005ec2 <abort_function>:
{
    5ec2:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    5ec4:	2000      	movs	r0, #0
    5ec6:	f7fa ff91 	bl	dec <sys_reboot>

00005eca <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    5eca:	b508      	push	{r3, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    5ecc:	f001 f93d 	bl	714a <z_fatal_error>
}
    5ed0:	bd08      	pop	{r3, pc}

00005ed2 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    5ed2:	b508      	push	{r3, lr}
    5ed4:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    5ed6:	6800      	ldr	r0, [r0, #0]
    5ed8:	f7ff fff7 	bl	5eca <z_arm_fatal_error>
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
    5edc:	bd08      	pop	{r3, pc}

00005ede <arch_irq_enable>:
{
    5ede:	b508      	push	{r3, lr}
	NVIC_EnableIRQ((IRQn_Type)irq);
    5ee0:	b240      	sxtb	r0, r0
    5ee2:	f7fb fa6b 	bl	13bc <__NVIC_EnableIRQ>
}
    5ee6:	bd08      	pop	{r3, pc}

00005ee8 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    5ee8:	b508      	push	{r3, lr}
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    5eea:	3101      	adds	r1, #1
    5eec:	b240      	sxtb	r0, r0
    5eee:	f7fb fa73 	bl	13d8 <__NVIC_SetPriority>
}
    5ef2:	bd08      	pop	{r3, pc}

00005ef4 <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
    5ef4:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    5ef6:	2100      	movs	r1, #0
    5ef8:	2001      	movs	r0, #1
    5efa:	f7ff ffe6 	bl	5eca <z_arm_fatal_error>
}
    5efe:	bd08      	pop	{r3, pc}

00005f00 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    5f00:	b508      	push	{r3, lr}
	handler();
    5f02:	f7fb fa8b 	bl	141c <z_SysNmiOnReset>
	z_arm_int_exit();
    5f06:	f7fb fb5b 	bl	15c0 <z_arm_exc_exit>
}
    5f0a:	bd08      	pop	{r3, pc}

00005f0c <configure_builtin_stack_guard>:
	uint32_t guard_start = thread->stack_info.start;
    5f0c:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    5f10:	f383 880b 	msr	PSPLIM, r3
}
    5f14:	4770      	bx	lr

00005f16 <memory_fault_recoverable>:
}
    5f16:	2000      	movs	r0, #0
    5f18:	4770      	bx	lr

00005f1a <debug_monitor>:
	*recoverable = false;
    5f1a:	2300      	movs	r3, #0
    5f1c:	700b      	strb	r3, [r1, #0]
}
    5f1e:	4770      	bx	lr

00005f20 <fault_handle>:
{
    5f20:	b508      	push	{r3, lr}
	*recoverable = false;
    5f22:	2300      	movs	r3, #0
    5f24:	7013      	strb	r3, [r2, #0]
	switch (fault) {
    5f26:	1ecb      	subs	r3, r1, #3
    5f28:	2b09      	cmp	r3, #9
    5f2a:	d81a      	bhi.n	5f62 <fault_handle+0x42>
    5f2c:	e8df f003 	tbb	[pc, r3]
    5f30:	110d0905 	.word	0x110d0905
    5f34:	19191919 	.word	0x19191919
    5f38:	1419      	.short	0x1419
		reason = hard_fault(esf, recoverable);
    5f3a:	4611      	mov	r1, r2
    5f3c:	f7fb fbe4 	bl	1708 <hard_fault>
		break;
    5f40:	e010      	b.n	5f64 <fault_handle+0x44>
		reason = mem_manage_fault(esf, 0, recoverable);
    5f42:	2100      	movs	r1, #0
    5f44:	f7fb fb4a 	bl	15dc <mem_manage_fault>
		break;
    5f48:	e00c      	b.n	5f64 <fault_handle+0x44>
		reason = bus_fault(esf, 0, recoverable);
    5f4a:	2100      	movs	r1, #0
    5f4c:	f7fb fb7c 	bl	1648 <bus_fault>
		break;
    5f50:	e008      	b.n	5f64 <fault_handle+0x44>
		reason = usage_fault(esf);
    5f52:	f7fb fba3 	bl	169c <usage_fault>
		break;
    5f56:	e005      	b.n	5f64 <fault_handle+0x44>
		debug_monitor(esf, recoverable);
    5f58:	4611      	mov	r1, r2
    5f5a:	f7ff ffde 	bl	5f1a <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    5f5e:	2000      	movs	r0, #0
		break;
    5f60:	e000      	b.n	5f64 <fault_handle+0x44>
	switch (fault) {
    5f62:	2000      	movs	r0, #0
}
    5f64:	bd08      	pop	{r3, pc}

00005f66 <sys_arch_reboot>:
{
    5f66:	b508      	push	{r3, lr}
	NVIC_SystemReset();
    5f68:	f7fb fcb8 	bl	18dc <__NVIC_SystemReset>

00005f6c <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    5f6c:	e840 f000 	tt	r0, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
    5f70:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    5f74:	d001      	beq.n	5f7a <arm_cmse_mpu_region_get+0xe>
		return addr_info.flags.mpu_region;
    5f76:	b2c0      	uxtb	r0, r0
    5f78:	4770      	bx	lr
	}

	return -EINVAL;
    5f7a:	f06f 0015 	mvn.w	r0, #21
}
    5f7e:	4770      	bx	lr

00005f80 <region_init>:
{
    5f80:	b508      	push	{r3, lr}
		(region_conf->base & MPU_RBAR_BASE_Msk)
    5f82:	680b      	ldr	r3, [r1, #0]
    5f84:	f023 0c1f 	bic.w	ip, r3, #31
		| (region_conf->attr.rbar &
    5f88:	7a0b      	ldrb	r3, [r1, #8]
    5f8a:	f003 0e1f 	and.w	lr, r3, #31
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    5f8e:	68ca      	ldr	r2, [r1, #12]
    5f90:	f022 021f 	bic.w	r2, r2, #31
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    5f94:	095b      	lsrs	r3, r3, #5
    5f96:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
	mpu_set_region(
    5f9a:	f042 0201 	orr.w	r2, r2, #1
    5f9e:	ea4c 010e 	orr.w	r1, ip, lr
    5fa2:	f7fb fd2f 	bl	1a04 <mpu_set_region>
}
    5fa6:	bd08      	pop	{r3, pc}

00005fa8 <mpu_partition_is_valid>:
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
    5fa8:	6843      	ldr	r3, [r0, #4]
		&&
    5faa:	2b1f      	cmp	r3, #31
    5fac:	d908      	bls.n	5fc0 <mpu_partition_is_valid+0x18>
		&&
    5fae:	f013 0f1f 	tst.w	r3, #31
    5fb2:	d107      	bne.n	5fc4 <mpu_partition_is_valid+0x1c>
		((part->start &
    5fb4:	6803      	ldr	r3, [r0, #0]
		&&
    5fb6:	f013 0f1f 	tst.w	r3, #31
    5fba:	d005      	beq.n	5fc8 <mpu_partition_is_valid+0x20>
    5fbc:	2000      	movs	r0, #0
    5fbe:	4770      	bx	lr
    5fc0:	2000      	movs	r0, #0
    5fc2:	4770      	bx	lr
    5fc4:	2000      	movs	r0, #0
    5fc6:	4770      	bx	lr
    5fc8:	2001      	movs	r0, #1
}
    5fca:	4770      	bx	lr

00005fcc <region_allocate_and_init>:
	if (index > (get_num_regions() - 1U)) {
    5fcc:	2807      	cmp	r0, #7
    5fce:	d805      	bhi.n	5fdc <region_allocate_and_init+0x10>
{
    5fd0:	b510      	push	{r4, lr}
    5fd2:	4604      	mov	r4, r0
	region_init(index, region_conf);
    5fd4:	f7ff ffd4 	bl	5f80 <region_init>
	return index;
    5fd8:	4620      	mov	r0, r4
}
    5fda:	bd10      	pop	{r4, pc}
		return -EINVAL;
    5fdc:	f06f 0015 	mvn.w	r0, #21
}
    5fe0:	4770      	bx	lr

00005fe2 <mpu_configure_region>:
{
    5fe2:	b510      	push	{r4, lr}
    5fe4:	b084      	sub	sp, #16
	region_conf.base = new_region->start;
    5fe6:	680b      	ldr	r3, [r1, #0]
    5fe8:	9300      	str	r3, [sp, #0]
		&new_region->attr, new_region->start, new_region->size);
    5fea:	684c      	ldr	r4, [r1, #4]
	p_attr->rbar = attr->rbar &
    5fec:	f8b1 c008 	ldrh.w	ip, [r1, #8]
    5ff0:	f89d 2008 	ldrb.w	r2, [sp, #8]
    5ff4:	f36c 0204 	bfi	r2, ip, #0, #5
    5ff8:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->mair_idx = attr->mair_idx;
    5ffc:	8949      	ldrh	r1, [r1, #10]
    5ffe:	b2d2      	uxtb	r2, r2
    6000:	f361 1247 	bfi	r2, r1, #5, #3
    6004:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    6008:	f023 031f 	bic.w	r3, r3, #31
    600c:	4423      	add	r3, r4
    600e:	3b01      	subs	r3, #1
    6010:	f023 031f 	bic.w	r3, r3, #31
    6014:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
    6016:	4669      	mov	r1, sp
    6018:	f7ff ffd8 	bl	5fcc <region_allocate_and_init>
}
    601c:	b004      	add	sp, #16
    601e:	bd10      	pop	{r4, pc}

00006020 <get_region_index>:
{
    6020:	b570      	push	{r4, r5, r6, lr}
    6022:	4604      	mov	r4, r0
    6024:	460e      	mov	r6, r1
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    6026:	f7ff ffa1 	bl	5f6c <arm_cmse_mpu_region_get>
    602a:	4605      	mov	r5, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    602c:	4434      	add	r4, r6
    602e:	1e60      	subs	r0, r4, #1
    6030:	f7ff ff9c 	bl	5f6c <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    6034:	4285      	cmp	r5, r0
    6036:	d101      	bne.n	603c <get_region_index+0x1c>
}
    6038:	4628      	mov	r0, r5
    603a:	bd70      	pop	{r4, r5, r6, pc}
	return -EINVAL;
    603c:	f06f 0515 	mvn.w	r5, #21
    6040:	e7fa      	b.n	6038 <get_region_index+0x18>

00006042 <arm_core_mpu_configure_static_mpu_regions>:
{
    6042:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    6044:	f7fb fdcc 	bl	1be0 <mpu_configure_static_mpu_regions>
}
    6048:	bd08      	pop	{r3, pc}

0000604a <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    604a:	b508      	push	{r3, lr}
	if (mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    604c:	f7fb fdd2 	bl	1bf4 <mpu_mark_areas_for_dynamic_regions>
}
    6050:	bd08      	pop	{r3, pc}

00006052 <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    6052:	4603      	mov	r3, r0
    6054:	b1a2      	cbz	r2, 6080 <strncpy+0x2e>
{
    6056:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
    6058:	780c      	ldrb	r4, [r1, #0]
    605a:	b12c      	cbz	r4, 6068 <strncpy+0x16>
		*d = *s;
    605c:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
    6060:	3101      	adds	r1, #1
		d++;
		n--;
    6062:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
    6064:	2a00      	cmp	r2, #0
    6066:	d1f7      	bne.n	6058 <strncpy+0x6>
	}

	while (n > 0) {
    6068:	b122      	cbz	r2, 6074 <strncpy+0x22>
		*d = '\0';
    606a:	2100      	movs	r1, #0
    606c:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
    6070:	3a01      	subs	r2, #1
    6072:	e7f9      	b.n	6068 <strncpy+0x16>
	}

	return dest;
}
    6074:	bc10      	pop	{r4}
    6076:	4770      	bx	lr
		*d = '\0';
    6078:	2100      	movs	r1, #0
    607a:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    607e:	3a01      	subs	r2, #1
	while (n > 0) {
    6080:	2a00      	cmp	r2, #0
    6082:	d1f9      	bne.n	6078 <strncpy+0x26>
    6084:	4770      	bx	lr

00006086 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    6086:	4603      	mov	r3, r0
	size_t n = 0;
    6088:	2000      	movs	r0, #0

	while (*s != '\0') {
    608a:	e001      	b.n	6090 <strlen+0xa>
		s++;
    608c:	3301      	adds	r3, #1
		n++;
    608e:	3001      	adds	r0, #1
	while (*s != '\0') {
    6090:	781a      	ldrb	r2, [r3, #0]
    6092:	2a00      	cmp	r2, #0
    6094:	d1fa      	bne.n	608c <strlen+0x6>
	}

	return n;
}
    6096:	4770      	bx	lr

00006098 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    6098:	4603      	mov	r3, r0
	size_t n = 0;
    609a:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    609c:	e001      	b.n	60a2 <strnlen+0xa>
		s++;
    609e:	3301      	adds	r3, #1
		n++;
    60a0:	3001      	adds	r0, #1
	while (*s != '\0' && n < maxlen) {
    60a2:	781a      	ldrb	r2, [r3, #0]
    60a4:	b10a      	cbz	r2, 60aa <strnlen+0x12>
    60a6:	4288      	cmp	r0, r1
    60a8:	d3f9      	bcc.n	609e <strnlen+0x6>
	}

	return n;
}
    60aa:	4770      	bx	lr

000060ac <memcpy>:
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    60ac:	ea80 0301 	eor.w	r3, r0, r1
    60b0:	f013 0f03 	tst.w	r3, #3
    60b4:	d001      	beq.n	60ba <memcpy+0xe>
	unsigned char *d_byte = (unsigned char *)d;
    60b6:	4603      	mov	r3, r0
    60b8:	e023      	b.n	6102 <memcpy+0x56>
    60ba:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
    60bc:	f013 0f03 	tst.w	r3, #3
    60c0:	d00f      	beq.n	60e2 <memcpy+0x36>
			if (n == 0) {
    60c2:	b30a      	cbz	r2, 6108 <memcpy+0x5c>
				return d;
			}
			*(d_byte++) = *(s_byte++);
    60c4:	f811 cb01 	ldrb.w	ip, [r1], #1
    60c8:	f803 cb01 	strb.w	ip, [r3], #1
			n--;
    60cc:	3a01      	subs	r2, #1
    60ce:	e7f5      	b.n	60bc <memcpy+0x10>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
    60d0:	f811 cb01 	ldrb.w	ip, [r1], #1
    60d4:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    60d8:	3a01      	subs	r2, #1
	while (n > 0) {
    60da:	2a00      	cmp	r2, #0
    60dc:	d1f8      	bne.n	60d0 <memcpy+0x24>
	}

	return d;
}
    60de:	bc10      	pop	{r4}
    60e0:	4770      	bx	lr
		while (n >= sizeof(mem_word_t)) {
    60e2:	2a03      	cmp	r2, #3
    60e4:	d90d      	bls.n	6102 <memcpy+0x56>
{
    60e6:	b410      	push	{r4}
			*(d_word++) = *(s_word++);
    60e8:	f851 4b04 	ldr.w	r4, [r1], #4
    60ec:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
    60f0:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
    60f2:	2a03      	cmp	r2, #3
    60f4:	d8f8      	bhi.n	60e8 <memcpy+0x3c>
    60f6:	e7f0      	b.n	60da <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
    60f8:	f811 cb01 	ldrb.w	ip, [r1], #1
    60fc:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    6100:	3a01      	subs	r2, #1
	while (n > 0) {
    6102:	2a00      	cmp	r2, #0
    6104:	d1f8      	bne.n	60f8 <memcpy+0x4c>
    6106:	4770      	bx	lr
}
    6108:	4770      	bx	lr

0000610a <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    610a:	fa5f fc81 	uxtb.w	ip, r1
	unsigned char *d_byte = (unsigned char *)buf;
    610e:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    6110:	e002      	b.n	6118 <memset+0xe>
		if (n == 0) {
			return buf;
		}
		*(d_byte++) = c_byte;
    6112:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    6116:	3a01      	subs	r2, #1
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    6118:	f013 0f03 	tst.w	r3, #3
    611c:	d002      	beq.n	6124 <memset+0x1a>
		if (n == 0) {
    611e:	2a00      	cmp	r2, #0
    6120:	d1f7      	bne.n	6112 <memset+0x8>
    6122:	e00f      	b.n	6144 <memset+0x3a>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
    6124:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
    6126:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
    612a:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    612e:	2a03      	cmp	r2, #3
    6130:	d906      	bls.n	6140 <memset+0x36>
		*(d_word++) = c_word;
    6132:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
    6136:	3a04      	subs	r2, #4
    6138:	e7f9      	b.n	612e <memset+0x24>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
    613a:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    613e:	3a01      	subs	r2, #1
	while (n > 0) {
    6140:	2a00      	cmp	r2, #0
    6142:	d1fa      	bne.n	613a <memset+0x30>
	}

	return buf;
}
    6144:	4770      	bx	lr

00006146 <_stdout_hook_default>:
}
    6146:	f04f 30ff 	mov.w	r0, #4294967295
    614a:	4770      	bx	lr

0000614c <nrf_saadc_channel_init>:
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
    614c:	7813      	ldrb	r3, [r2, #0]
    614e:	f003 0303 	and.w	r3, r3, #3
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
    6152:	f892 c001 	ldrb.w	ip, [r2, #1]
    6156:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
    615a:	f00c 0c30 	and.w	ip, ip, #48	; 0x30
    615e:	ea43 030c 	orr.w	r3, r3, ip
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
    6162:	f892 c002 	ldrb.w	ip, [r2, #2]
    6166:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
    616a:	f40c 6ce0 	and.w	ip, ip, #1792	; 0x700
    616e:	ea43 030c 	orr.w	r3, r3, ip
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
    6172:	f892 c003 	ldrb.w	ip, [r2, #3]
    6176:	ea4f 3c0c 	mov.w	ip, ip, lsl #12
    617a:	f40c 5c80 	and.w	ip, ip, #4096	; 0x1000
    617e:	ea43 030c 	orr.w	r3, r3, ip
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
    6182:	f892 c004 	ldrb.w	ip, [r2, #4]
    6186:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
    618a:	f40c 2ce0 	and.w	ip, ip, #458752	; 0x70000
    618e:	ea43 030c 	orr.w	r3, r3, ip
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    6192:	f892 c005 	ldrb.w	ip, [r2, #5]
    6196:	ea4f 5c0c 	mov.w	ip, ip, lsl #20
    619a:	f40c 1c80 	and.w	ip, ip, #1048576	; 0x100000
    619e:	ea43 030c 	orr.w	r3, r3, ip
            | ((config->burst      << SAADC_CH_CONFIG_BURST_Pos)  & SAADC_CH_CONFIG_BURST_Msk);
    61a2:	7992      	ldrb	r2, [r2, #6]
    61a4:	0612      	lsls	r2, r2, #24
    61a6:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
    61aa:	4313      	orrs	r3, r2
    p_reg->CH[channel].CONFIG =
    61ac:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    61b0:	f8c0 3518 	str.w	r3, [r0, #1304]	; 0x518
}
    61b4:	4770      	bx	lr

000061b6 <check_buffer_size>:
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
    61b6:	0049      	lsls	r1, r1, #1
	if (sequence->options) {
    61b8:	6803      	ldr	r3, [r0, #0]
    61ba:	b113      	cbz	r3, 61c2 <check_buffer_size+0xc>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
    61bc:	899b      	ldrh	r3, [r3, #12]
    61be:	fb03 1101 	mla	r1, r3, r1, r1
	if (sequence->buffer_size < needed_buffer_size) {
    61c2:	68c3      	ldr	r3, [r0, #12]
    61c4:	428b      	cmp	r3, r1
    61c6:	d301      	bcc.n	61cc <check_buffer_size+0x16>
	return 0;
    61c8:	2000      	movs	r0, #0
    61ca:	4770      	bx	lr
		return -ENOMEM;
    61cc:	f06f 000b 	mvn.w	r0, #11
}
    61d0:	4770      	bx	lr

000061d2 <adc_context_request_next_sampling>:
{
    61d2:	b508      	push	{r3, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    61d4:	e8d0 3fef 	ldaex	r3, [r0]
    61d8:	1c5a      	adds	r2, r3, #1
    61da:	e8c0 2fe1 	stlex	r1, r2, [r0]
    61de:	2900      	cmp	r1, #0
    61e0:	d1f8      	bne.n	61d4 <adc_context_request_next_sampling+0x2>
	if (atomic_inc(&ctx->sampling_requested) == 0) {
    61e2:	b11b      	cbz	r3, 61ec <adc_context_request_next_sampling+0x1a>
		ctx->status = -EBUSY;
    61e4:	f06f 030f 	mvn.w	r3, #15
    61e8:	6703      	str	r3, [r0, #112]	; 0x70
}
    61ea:	bd08      	pop	{r3, pc}
		adc_context_start_sampling(ctx);
    61ec:	f7fb fe34 	bl	1e58 <adc_context_start_sampling>
    61f0:	e7fb      	b.n	61ea <adc_context_request_next_sampling+0x18>

000061f2 <adc_context_on_timer_expired>:
{
	k_timer_stop(&ctx->timer);
}

static void adc_context_on_timer_expired(struct k_timer *timer_id)
{
    61f2:	b508      	push	{r3, lr}
	struct adc_context *ctx =
		CONTAINER_OF(timer_id, struct adc_context, timer);

	adc_context_request_next_sampling(ctx);
    61f4:	3808      	subs	r0, #8
    61f6:	f7ff ffec 	bl	61d2 <adc_context_request_next_sampling>
}
    61fa:	bd08      	pop	{r3, pc}

000061fc <adc_context_lock>:
#endif /* ADC_CONTEXT_USES_KERNEL_TIMER */

static inline void adc_context_lock(struct adc_context *ctx,
				    bool asynchronous,
				    struct k_poll_signal *signal)
{
    61fc:	b570      	push	{r4, r5, r6, lr}
    61fe:	4604      	mov	r4, r0
    6200:	460e      	mov	r6, r1
    6202:	4615      	mov	r5, r2
	k_sem_take(&ctx->lock, K_FOREVER);
    6204:	3040      	adds	r0, #64	; 0x40
	return z_impl_k_sem_take(sem, timeout);
    6206:	f04f 32ff 	mov.w	r2, #4294967295
    620a:	f04f 33ff 	mov.w	r3, #4294967295
    620e:	f7fe f835 	bl	427c <z_impl_k_sem_take>

#ifdef CONFIG_ADC_ASYNC
	ctx->asynchronous = asynchronous;
    6212:	f884 6078 	strb.w	r6, [r4, #120]	; 0x78
	ctx->signal = signal;
    6216:	6765      	str	r5, [r4, #116]	; 0x74
#endif /* CONFIG_ADC_ASYNC */
}
    6218:	bd70      	pop	{r4, r5, r6, pc}

0000621a <adc_context_wait_for_completion>:
}

static inline int adc_context_wait_for_completion(struct adc_context *ctx)
{
#ifdef CONFIG_ADC_ASYNC
	if (ctx->asynchronous) {
    621a:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
    621e:	b10b      	cbz	r3, 6224 <adc_context_wait_for_completion+0xa>
		return 0;
    6220:	2000      	movs	r0, #0
	}
#endif /* CONFIG_ADC_ASYNC */

	k_sem_take(&ctx->sync, K_FOREVER);
	return ctx->status;
}
    6222:	4770      	bx	lr
{
    6224:	b510      	push	{r4, lr}
    6226:	4604      	mov	r4, r0
	k_sem_take(&ctx->sync, K_FOREVER);
    6228:	3058      	adds	r0, #88	; 0x58
    622a:	f04f 32ff 	mov.w	r2, #4294967295
    622e:	f04f 33ff 	mov.w	r3, #4294967295
    6232:	f7fe f823 	bl	427c <z_impl_k_sem_take>
	return ctx->status;
    6236:	6f20      	ldr	r0, [r4, #112]	; 0x70
}
    6238:	bd10      	pop	{r4, pc}

0000623a <adc_context_start_read>:
	k_sem_give(&ctx->sync);
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
    623a:	b538      	push	{r3, r4, r5, lr}
    623c:	4684      	mov	ip, r0
    623e:	460d      	mov	r5, r1
	ctx->sequence = *sequence;
    6240:	f100 0e7c 	add.w	lr, r0, #124	; 0x7c
    6244:	460c      	mov	r4, r1
    6246:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    6248:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    624c:	6823      	ldr	r3, [r4, #0]
    624e:	f8ce 3000 	str.w	r3, [lr]
	ctx->status = 0;
    6252:	2300      	movs	r3, #0
    6254:	f8cc 3070 	str.w	r3, [ip, #112]	; 0x70

	if (sequence->options) {
    6258:	682b      	ldr	r3, [r5, #0]
    625a:	b153      	cbz	r3, 6272 <adc_context_start_read+0x38>
		ctx->options = *sequence->options;
    625c:	f10c 0490 	add.w	r4, ip, #144	; 0x90
    6260:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    6262:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
    6266:	f8cc 407c 	str.w	r4, [ip, #124]	; 0x7c
		ctx->sampling_index = 0U;
    626a:	2300      	movs	r3, #0
    626c:	f8ac 30a0 	strh.w	r3, [ip, #160]	; 0xa0

		if (ctx->options.interval_us != 0U) {
    6270:	b918      	cbnz	r0, 627a <adc_context_start_read+0x40>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
    6272:	4660      	mov	r0, ip
    6274:	f7fb fdf0 	bl	1e58 <adc_context_start_sampling>
}
    6278:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    627a:	2300      	movs	r3, #0
    627c:	e8dc 2fef 	ldaex	r2, [ip]
    6280:	e8cc 3fe1 	stlex	r1, r3, [ip]
    6284:	2900      	cmp	r1, #0
    6286:	d1f9      	bne.n	627c <adc_context_start_read+0x42>
			adc_context_enable_timer(ctx);
    6288:	4660      	mov	r0, ip
    628a:	f7fb fe3d 	bl	1f08 <adc_context_enable_timer>
			return;
    628e:	e7f3      	b.n	6278 <adc_context_start_read+0x3e>

00006290 <adc_context_release>:
{
    6290:	b508      	push	{r3, lr}
	if (ctx->asynchronous && (status == 0)) {
    6292:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
    6296:	b103      	cbz	r3, 629a <adc_context_release+0xa>
    6298:	b111      	cbz	r1, 62a0 <adc_context_release+0x10>
	k_sem_give(&ctx->lock);
    629a:	3040      	adds	r0, #64	; 0x40
	z_impl_k_sem_give(sem);
    629c:	f7fd ffc6 	bl	422c <z_impl_k_sem_give>
}
    62a0:	bd08      	pop	{r3, pc}

000062a2 <adc_context_unlock_unconditionally>:
{
    62a2:	b508      	push	{r3, lr}
	return sem->count;
    62a4:	6c83      	ldr	r3, [r0, #72]	; 0x48
	if (!k_sem_count_get(&ctx->lock)) {
    62a6:	b103      	cbz	r3, 62aa <adc_context_unlock_unconditionally+0x8>
}
    62a8:	bd08      	pop	{r3, pc}
		k_sem_give(&ctx->lock);
    62aa:	3040      	adds	r0, #64	; 0x40
    62ac:	f7fd ffbe 	bl	422c <z_impl_k_sem_give>
}
    62b0:	e7fa      	b.n	62a8 <adc_context_unlock_unconditionally+0x6>

000062b2 <adc_context_complete>:
{
    62b2:	b510      	push	{r4, lr}
    62b4:	4604      	mov	r4, r0
	if (ctx->asynchronous) {
    62b6:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
    62ba:	b933      	cbnz	r3, 62ca <adc_context_complete+0x18>
	if (status != 0) {
    62bc:	b101      	cbz	r1, 62c0 <adc_context_complete+0xe>
		ctx->status = status;
    62be:	6701      	str	r1, [r0, #112]	; 0x70
	k_sem_give(&ctx->sync);
    62c0:	f104 0058 	add.w	r0, r4, #88	; 0x58
    62c4:	f7fd ffb2 	bl	422c <z_impl_k_sem_give>
}
    62c8:	bd10      	pop	{r4, pc}
		if (ctx->signal) {
    62ca:	6f40      	ldr	r0, [r0, #116]	; 0x74
    62cc:	b108      	cbz	r0, 62d2 <adc_context_complete+0x20>
	return z_impl_k_poll_signal_raise(sig, result);
    62ce:	f7fe fe31 	bl	4f34 <z_impl_k_poll_signal_raise>
		k_sem_give(&ctx->lock);
    62d2:	f104 0040 	add.w	r0, r4, #64	; 0x40
	z_impl_k_sem_give(sem);
    62d6:	f7fd ffa9 	bl	422c <z_impl_k_sem_give>
		return;
    62da:	e7f5      	b.n	62c8 <adc_context_complete+0x16>

000062dc <adc_context_on_sampling_done>:
 * depending on the realized sequence) is done. It calls the defined callback
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
    62dc:	b510      	push	{r4, lr}
    62de:	4604      	mov	r4, r0
	if (ctx->sequence.options) {
    62e0:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
    62e2:	b30b      	cbz	r3, 6328 <adc_context_on_sampling_done+0x4c>
    62e4:	4608      	mov	r0, r1
		adc_sequence_callback callback = ctx->options.callback;
    62e6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
    62ea:	b143      	cbz	r3, 62fe <adc_context_on_sampling_done+0x22>
			action = callback(dev,
    62ec:	f8b4 20a0 	ldrh.w	r2, [r4, #160]	; 0xa0
    62f0:	f104 017c 	add.w	r1, r4, #124	; 0x7c
    62f4:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
    62f6:	2801      	cmp	r0, #1
    62f8:	d00d      	beq.n	6316 <adc_context_on_sampling_done+0x3a>
    62fa:	2802      	cmp	r0, #2
    62fc:	d00e      	beq.n	631c <adc_context_on_sampling_done+0x40>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
    62fe:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
			    ctx->options.extra_samplings) {
    6302:	f8b4 209c 	ldrh.w	r2, [r4, #156]	; 0x9c
			if (ctx->sampling_index <
    6306:	4293      	cmp	r3, r2
    6308:	d213      	bcs.n	6332 <adc_context_on_sampling_done+0x56>
				++ctx->sampling_index;
    630a:	3301      	adds	r3, #1
    630c:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
		bool repeat = false;
    6310:	2100      	movs	r1, #0
		bool finish = false;
    6312:	460b      	mov	r3, r1
    6314:	e004      	b.n	6320 <adc_context_on_sampling_done+0x44>
		switch (action) {
    6316:	2101      	movs	r1, #1
    6318:	2300      	movs	r3, #0
    631a:	e001      	b.n	6320 <adc_context_on_sampling_done+0x44>
		bool repeat = false;
    631c:	2100      	movs	r1, #0
			finish = true;
    631e:	2301      	movs	r3, #1
			} else {
				finish = true;
			}
		}

		if (!finish) {
    6320:	b153      	cbz	r3, 6338 <adc_context_on_sampling_done+0x5c>
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
    6322:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    6326:	b9f3      	cbnz	r3, 6366 <adc_context_on_sampling_done+0x8a>
			adc_context_disable_timer(ctx);
		}
	}

	adc_context_complete(ctx, 0);
    6328:	2100      	movs	r1, #0
    632a:	4620      	mov	r0, r4
    632c:	f7ff ffc1 	bl	62b2 <adc_context_complete>
}
    6330:	bd10      	pop	{r4, pc}
		bool repeat = false;
    6332:	2100      	movs	r1, #0
				finish = true;
    6334:	2301      	movs	r3, #1
    6336:	e7f3      	b.n	6320 <adc_context_on_sampling_done+0x44>
			adc_context_update_buffer_pointer(ctx, repeat);
    6338:	4620      	mov	r0, r4
    633a:	f7fb fd9f 	bl	1e7c <adc_context_update_buffer_pointer>
			if (ctx->options.interval_us == 0U) {
    633e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    6342:	b91b      	cbnz	r3, 634c <adc_context_on_sampling_done+0x70>
				adc_context_start_sampling(ctx);
    6344:	4620      	mov	r0, r4
    6346:	f7fb fd87 	bl	1e58 <adc_context_start_sampling>
    634a:	e7f1      	b.n	6330 <adc_context_on_sampling_done+0x54>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    634c:	e8d4 3fef 	ldaex	r3, [r4]
    6350:	1e5a      	subs	r2, r3, #1
    6352:	e8c4 2fe1 	stlex	r1, r2, [r4]
    6356:	2900      	cmp	r1, #0
    6358:	d1f8      	bne.n	634c <adc_context_on_sampling_done+0x70>
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
    635a:	2b01      	cmp	r3, #1
    635c:	dde8      	ble.n	6330 <adc_context_on_sampling_done+0x54>
				adc_context_start_sampling(ctx);
    635e:	4620      	mov	r0, r4
    6360:	f7fb fd7a 	bl	1e58 <adc_context_start_sampling>
			return;
    6364:	e7e4      	b.n	6330 <adc_context_on_sampling_done+0x54>
	k_timer_stop(&ctx->timer);
    6366:	f104 0008 	add.w	r0, r4, #8
	z_impl_k_timer_stop(timer);
    636a:	f001 f9db 	bl	7724 <z_impl_k_timer_stop>
}
    636e:	e7db      	b.n	6328 <adc_context_on_sampling_done+0x4c>

00006370 <nrf_clock_is_running>:
    switch (domain)
    6370:	2903      	cmp	r1, #3
    6372:	d82f      	bhi.n	63d4 <nrf_clock_is_running+0x64>
    6374:	e8df f001 	tbb	[pc, r1]
    6378:	291c0f02 	.word	0x291c0f02
            if (p_clk_src != NULL)
    637c:	b122      	cbz	r2, 6388 <nrf_clock_is_running+0x18>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    637e:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
    6382:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    6386:	7013      	strb	r3, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6388:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
    638c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    6390:	d122      	bne.n	63d8 <nrf_clock_is_running+0x68>
    return false;
    6392:	2000      	movs	r0, #0
    6394:	4770      	bx	lr
            if (p_clk_src != NULL)
    6396:	b122      	cbz	r2, 63a2 <nrf_clock_is_running+0x32>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    6398:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
    639c:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    63a0:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    63a2:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
    63a6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    63aa:	d117      	bne.n	63dc <nrf_clock_is_running+0x6c>
    return false;
    63ac:	2000      	movs	r0, #0
    63ae:	4770      	bx	lr
            if (p_clk_src != NULL)
    63b0:	b122      	cbz	r2, 63bc <nrf_clock_is_running+0x4c>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
    63b2:	f8d0 345c 	ldr.w	r3, [r0, #1116]	; 0x45c
    63b6:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    63ba:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    63bc:	f8d0 345c 	ldr.w	r3, [r0, #1116]	; 0x45c
    63c0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    63c4:	d10c      	bne.n	63e0 <nrf_clock_is_running+0x70>
    return false;
    63c6:	2000      	movs	r0, #0
    63c8:	4770      	bx	lr
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
    63ca:	f8d0 0454 	ldr.w	r0, [r0, #1108]	; 0x454
    63ce:	f3c0 4000 	ubfx	r0, r0, #16, #1
    63d2:	4770      	bx	lr
    switch (domain)
    63d4:	2000      	movs	r0, #0
    63d6:	4770      	bx	lr
                return true;
    63d8:	2001      	movs	r0, #1
    63da:	4770      	bx	lr
                return true;
    63dc:	2001      	movs	r0, #1
    63de:	4770      	bx	lr
                return true;
    63e0:	2001      	movs	r0, #1
}
    63e2:	4770      	bx	lr

000063e4 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
    63e4:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    63e6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    63ea:	0089      	lsls	r1, r1, #2
    63ec:	3170      	adds	r1, #112	; 0x70
}
    63ee:	4408      	add	r0, r1
    63f0:	4770      	bx	lr

000063f2 <get_sub_config>:
	const struct nrf_clock_control_config *config =
    63f2:	6840      	ldr	r0, [r0, #4]
}
    63f4:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    63f8:	4770      	bx	lr

000063fa <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
    63fa:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
    63fc:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
    6400:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6404:	4770      	bx	lr

00006406 <get_status>:
{
    6406:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
    6408:	b2c9      	uxtb	r1, r1
    640a:	f7ff ffeb 	bl	63e4 <get_sub_data>
    640e:	6880      	ldr	r0, [r0, #8]
}
    6410:	f000 0007 	and.w	r0, r0, #7
    6414:	bd08      	pop	{r3, pc}

00006416 <set_off_state>:
	__asm__ volatile(
    6416:	f04f 0320 	mov.w	r3, #32
    641a:	f3ef 8211 	mrs	r2, BASEPRI
    641e:	f383 8812 	msr	BASEPRI_MAX, r3
    6422:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    6426:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    6428:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    642c:	d001      	beq.n	6432 <set_off_state+0x1c>
    642e:	428b      	cmp	r3, r1
    6430:	d107      	bne.n	6442 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    6432:	2301      	movs	r3, #1
    6434:	6003      	str	r3, [r0, #0]
	int err = 0;
    6436:	2000      	movs	r0, #0
	__asm__ volatile(
    6438:	f382 8811 	msr	BASEPRI, r2
    643c:	f3bf 8f6f 	isb	sy
}
    6440:	4770      	bx	lr
		err = -EPERM;
    6442:	f04f 30ff 	mov.w	r0, #4294967295
    6446:	e7f7      	b.n	6438 <set_off_state+0x22>

00006448 <set_starting_state>:
	__asm__ volatile(
    6448:	f04f 0320 	mov.w	r3, #32
    644c:	f3ef 8211 	mrs	r2, BASEPRI
    6450:	f383 8812 	msr	BASEPRI_MAX, r3
    6454:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    6458:	6803      	ldr	r3, [r0, #0]
    645a:	f003 0cc0 	and.w	ip, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    645e:	f003 0307 	and.w	r3, r3, #7
    6462:	2b01      	cmp	r3, #1
    6464:	d008      	beq.n	6478 <set_starting_state+0x30>
	} else if (current_ctx != ctx) {
    6466:	458c      	cmp	ip, r1
    6468:	d009      	beq.n	647e <set_starting_state+0x36>
		err = -EPERM;
    646a:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
    646e:	f382 8811 	msr	BASEPRI, r2
    6472:	f3bf 8f6f 	isb	sy
}
    6476:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    6478:	6001      	str	r1, [r0, #0]
	int err = 0;
    647a:	2000      	movs	r0, #0
    647c:	e7f7      	b.n	646e <set_starting_state+0x26>
		err = -EALREADY;
    647e:	f06f 0077 	mvn.w	r0, #119	; 0x77
    6482:	e7f4      	b.n	646e <set_starting_state+0x26>

00006484 <set_on_state>:
	__asm__ volatile(
    6484:	f04f 0320 	mov.w	r3, #32
    6488:	f3ef 8211 	mrs	r2, BASEPRI
    648c:	f383 8812 	msr	BASEPRI_MAX, r3
    6490:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    6494:	6803      	ldr	r3, [r0, #0]
    6496:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    649a:	f043 0302 	orr.w	r3, r3, #2
    649e:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    64a0:	f382 8811 	msr	BASEPRI, r2
    64a4:	f3bf 8f6f 	isb	sy
}
    64a8:	4770      	bx	lr

000064aa <clkstarted_handle>:
{
    64aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    64ac:	4606      	mov	r6, r0
    64ae:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    64b0:	f7ff ff98 	bl	63e4 <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
    64b4:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
    64b6:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
    64b8:	2300      	movs	r3, #0
    64ba:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
    64be:	f7ff ffe1 	bl	6484 <set_on_state>
	if (callback) {
    64c2:	b11d      	cbz	r5, 64cc <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
    64c4:	463a      	mov	r2, r7
    64c6:	4621      	mov	r1, r4
    64c8:	4630      	mov	r0, r6
    64ca:	47a8      	blx	r5
}
    64cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000064ce <stop>:
{
    64ce:	b570      	push	{r4, r5, r6, lr}
    64d0:	4606      	mov	r6, r0
    64d2:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    64d4:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    64d6:	4621      	mov	r1, r4
    64d8:	f7ff ff84 	bl	63e4 <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
    64dc:	4629      	mov	r1, r5
    64de:	3008      	adds	r0, #8
    64e0:	f7ff ff99 	bl	6416 <set_off_state>
	if (err < 0) {
    64e4:	2800      	cmp	r0, #0
    64e6:	db06      	blt.n	64f6 <stop+0x28>
	get_sub_config(dev, type)->stop();
    64e8:	4621      	mov	r1, r4
    64ea:	4630      	mov	r0, r6
    64ec:	f7ff ff81 	bl	63f2 <get_sub_config>
    64f0:	6843      	ldr	r3, [r0, #4]
    64f2:	4798      	blx	r3
	return 0;
    64f4:	2000      	movs	r0, #0
}
    64f6:	bd70      	pop	{r4, r5, r6, pc}

000064f8 <api_stop>:
{
    64f8:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
    64fa:	2280      	movs	r2, #128	; 0x80
    64fc:	f7ff ffe7 	bl	64ce <stop>
}
    6500:	bd08      	pop	{r3, pc}

00006502 <async_start>:
{
    6502:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6506:	4606      	mov	r6, r0
    6508:	4690      	mov	r8, r2
    650a:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    650c:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    650e:	4629      	mov	r1, r5
    6510:	f7ff ff68 	bl	63e4 <get_sub_data>
    6514:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
    6516:	9906      	ldr	r1, [sp, #24]
    6518:	3008      	adds	r0, #8
    651a:	f7ff ff95 	bl	6448 <set_starting_state>
	if (err < 0) {
    651e:	2800      	cmp	r0, #0
    6520:	db09      	blt.n	6536 <async_start+0x34>
	subdata->cb = cb;
    6522:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
    6526:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
    6528:	4629      	mov	r1, r5
    652a:	4630      	mov	r0, r6
    652c:	f7ff ff61 	bl	63f2 <get_sub_config>
    6530:	6803      	ldr	r3, [r0, #0]
    6532:	4798      	blx	r3
	return 0;
    6534:	2000      	movs	r0, #0
}
    6536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000653a <api_start>:
{
    653a:	b510      	push	{r4, lr}
    653c:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
    653e:	2480      	movs	r4, #128	; 0x80
    6540:	9400      	str	r4, [sp, #0]
    6542:	f7ff ffde 	bl	6502 <async_start>
}
    6546:	b002      	add	sp, #8
    6548:	bd10      	pop	{r4, pc}

0000654a <onoff_started_callback>:
{
    654a:	b510      	push	{r4, lr}
    654c:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
    654e:	b2c9      	uxtb	r1, r1
    6550:	f7ff ff53 	bl	63fa <get_onoff_manager>
	notify(mgr, 0);
    6554:	2100      	movs	r1, #0
    6556:	47a0      	blx	r4
}
    6558:	bd10      	pop	{r4, pc}

0000655a <hfclk_start>:
{
    655a:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    655c:	2001      	movs	r0, #1
    655e:	f000 fcf3 	bl	6f48 <nrfx_clock_start>
}
    6562:	bd08      	pop	{r3, pc}

00006564 <hfclkaudio_start>:
{
    6564:	b508      	push	{r3, lr}
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    6566:	2003      	movs	r0, #3
    6568:	f000 fcee 	bl	6f48 <nrfx_clock_start>
}
    656c:	bd08      	pop	{r3, pc}

0000656e <hfclk192m_start>:
{
    656e:	b508      	push	{r3, lr}
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
    6570:	2002      	movs	r0, #2
    6572:	f000 fce9 	bl	6f48 <nrfx_clock_start>
}
    6576:	bd08      	pop	{r3, pc}

00006578 <lfclk_start>:
{
    6578:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    657a:	2000      	movs	r0, #0
    657c:	f000 fce4 	bl	6f48 <nrfx_clock_start>
}
    6580:	bd08      	pop	{r3, pc}

00006582 <hfclk_stop>:
{
    6582:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    6584:	2001      	movs	r0, #1
    6586:	f000 fd54 	bl	7032 <nrfx_clock_stop>
}
    658a:	bd08      	pop	{r3, pc}

0000658c <hfclkaudio_stop>:
{
    658c:	b508      	push	{r3, lr}
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    658e:	2003      	movs	r0, #3
    6590:	f000 fd4f 	bl	7032 <nrfx_clock_stop>
}
    6594:	bd08      	pop	{r3, pc}

00006596 <hfclk192m_stop>:
{
    6596:	b508      	push	{r3, lr}
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
    6598:	2002      	movs	r0, #2
    659a:	f000 fd4a 	bl	7032 <nrfx_clock_stop>
}
    659e:	bd08      	pop	{r3, pc}

000065a0 <lfclk_stop>:
{
    65a0:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    65a2:	2000      	movs	r0, #0
    65a4:	f000 fd45 	bl	7032 <nrfx_clock_stop>
}
    65a8:	bd08      	pop	{r3, pc}

000065aa <k_msleep>:
{
    65aa:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
    65ac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    65b0:	17c1      	asrs	r1, r0, #31
    65b2:	03c9      	lsls	r1, r1, #15
    65b4:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    65b8:	03c0      	lsls	r0, r0, #15
    65ba:	f240 33e7 	movw	r3, #999	; 0x3e7
    65be:	18c0      	adds	r0, r0, r3
    65c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    65c4:	f04f 0300 	mov.w	r3, #0
    65c8:	f141 0100 	adc.w	r1, r1, #0
    65cc:	f7f9 fdc2 	bl	154 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    65d0:	f7fe fa00 	bl	49d4 <z_impl_k_sleep>
}
    65d4:	bd08      	pop	{r3, pc}

000065d6 <blocking_start_callback>:
{
    65d6:	b508      	push	{r3, lr}
    65d8:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    65da:	f7fd fe27 	bl	422c <z_impl_k_sem_give>
}
    65de:	bd08      	pop	{r3, pc}

000065e0 <sys_slist_remove>:
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    65e0:	460b      	mov	r3, r1
    65e2:	b139      	cbz	r1, 65f4 <sys_slist_remove+0x14>
	return node->next;
    65e4:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
    65e6:	6019      	str	r1, [r3, #0]
	return list->tail;
    65e8:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
    65ea:	428a      	cmp	r2, r1
    65ec:	d009      	beq.n	6602 <sys_slist_remove+0x22>
	parent->next = child;
    65ee:	2300      	movs	r3, #0
    65f0:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    65f2:	4770      	bx	lr
	return node->next;
    65f4:	6813      	ldr	r3, [r2, #0]
	list->head = node;
    65f6:	6003      	str	r3, [r0, #0]
	return list->tail;
    65f8:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
    65fa:	428a      	cmp	r2, r1
    65fc:	d1f7      	bne.n	65ee <sys_slist_remove+0xe>
	list->tail = node;
    65fe:	6043      	str	r3, [r0, #4]
}
    6600:	e7f5      	b.n	65ee <sys_slist_remove+0xe>
	list->tail = node;
    6602:	6043      	str	r3, [r0, #4]
}
    6604:	e7f3      	b.n	65ee <sys_slist_remove+0xe>

00006606 <sys_slist_find_and_remove>:
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    6606:	b508      	push	{r3, lr}
    6608:	460a      	mov	r2, r1
	return list->head;
    660a:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    660c:	2100      	movs	r1, #0
    660e:	e001      	b.n	6614 <sys_slist_find_and_remove+0xe>
    6610:	4619      	mov	r1, r3
    6612:	681b      	ldr	r3, [r3, #0]
    6614:	b12b      	cbz	r3, 6622 <sys_slist_find_and_remove+0x1c>
    6616:	4293      	cmp	r3, r2
    6618:	d1fa      	bne.n	6610 <sys_slist_find_and_remove+0xa>
    661a:	f7ff ffe1 	bl	65e0 <sys_slist_remove>
    661e:	2001      	movs	r0, #1
    6620:	e000      	b.n	6624 <sys_slist_find_and_remove+0x1e>
    6622:	2000      	movs	r0, #0
    6624:	bd08      	pop	{r3, pc}

00006626 <gpio_manage_callback>:
 * @return 0 on success, negative errno otherwise.
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
    6626:	b570      	push	{r4, r5, r6, lr}
    6628:	4604      	mov	r4, r0
    662a:	460d      	mov	r5, r1
    662c:	4616      	mov	r6, r2
	return list->head;
    662e:	6803      	ldr	r3, [r0, #0]
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
    6630:	b133      	cbz	r3, 6640 <gpio_manage_callback+0x1a>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
    6632:	f7ff ffe8 	bl	6606 <sys_slist_find_and_remove>
    6636:	b970      	cbnz	r0, 6656 <gpio_manage_callback+0x30>
			if (!set) {
    6638:	b91e      	cbnz	r6, 6642 <gpio_manage_callback+0x1c>
				return -EINVAL;
    663a:	f06f 0015 	mvn.w	r0, #21
    663e:	e006      	b.n	664e <gpio_manage_callback+0x28>
			}
		}
	} else if (!set) {
    6640:	b132      	cbz	r2, 6650 <gpio_manage_callback+0x2a>
    6642:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
    6644:	602b      	str	r3, [r5, #0]
	list->head = node;
    6646:	6025      	str	r5, [r4, #0]
	return list->tail;
    6648:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
    664a:	b143      	cbz	r3, 665e <gpio_manage_callback+0x38>

	if (set) {
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    664c:	2000      	movs	r0, #0
}
    664e:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    6650:	f06f 0015 	mvn.w	r0, #21
    6654:	e7fb      	b.n	664e <gpio_manage_callback+0x28>
	if (set) {
    6656:	2e00      	cmp	r6, #0
    6658:	d1f3      	bne.n	6642 <gpio_manage_callback+0x1c>
	return 0;
    665a:	2000      	movs	r0, #0
    665c:	e7f7      	b.n	664e <gpio_manage_callback+0x28>
	list->tail = node;
    665e:	6065      	str	r5, [r4, #4]
    6660:	2000      	movs	r0, #0
}
    6662:	e7f4      	b.n	664e <gpio_manage_callback+0x28>

00006664 <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
    6664:	b570      	push	{r4, r5, r6, lr}
    6666:	460e      	mov	r6, r1
    6668:	4615      	mov	r5, r2
	return list->head;
    666a:	6801      	ldr	r1, [r0, #0]
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    666c:	b121      	cbz	r1, 6678 <gpio_fire_callbacks+0x14>
	return node->next;
    666e:	680c      	ldr	r4, [r1, #0]
    6670:	b13c      	cbz	r4, 6682 <gpio_fire_callbacks+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
    6672:	b931      	cbnz	r1, 6682 <gpio_fire_callbacks+0x1e>
    6674:	460c      	mov	r4, r1
    6676:	e004      	b.n	6682 <gpio_fire_callbacks+0x1e>
    6678:	460c      	mov	r4, r1
    667a:	e002      	b.n	6682 <gpio_fire_callbacks+0x1e>
    667c:	4623      	mov	r3, r4
    667e:	4621      	mov	r1, r4
    6680:	461c      	mov	r4, r3
    6682:	b171      	cbz	r1, 66a2 <gpio_fire_callbacks+0x3e>
		if (cb->pin_mask & pins) {
    6684:	688a      	ldr	r2, [r1, #8]
    6686:	402a      	ands	r2, r5
    6688:	d002      	beq.n	6690 <gpio_fire_callbacks+0x2c>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    668a:	684b      	ldr	r3, [r1, #4]
    668c:	4630      	mov	r0, r6
    668e:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    6690:	2c00      	cmp	r4, #0
    6692:	d0f3      	beq.n	667c <gpio_fire_callbacks+0x18>
	return node->next;
    6694:	6823      	ldr	r3, [r4, #0]
    6696:	2b00      	cmp	r3, #0
    6698:	d0f1      	beq.n	667e <gpio_fire_callbacks+0x1a>
Z_GENLIST_PEEK_NEXT(slist, snode)
    669a:	2c00      	cmp	r4, #0
    669c:	d1ef      	bne.n	667e <gpio_fire_callbacks+0x1a>
    669e:	4623      	mov	r3, r4
    66a0:	e7ed      	b.n	667e <gpio_fire_callbacks+0x1a>
		}
	}
}
    66a2:	bd70      	pop	{r4, r5, r6, pc}

000066a4 <get_drive>:
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    66a4:	f020 00f9 	bic.w	r0, r0, #249	; 0xf9
    66a8:	0580      	lsls	r0, r0, #22
    66aa:	0d80      	lsrs	r0, r0, #22
    66ac:	f5b0 7f83 	cmp.w	r0, #262	; 0x106
    66b0:	d033      	beq.n	671a <get_drive+0x76>
    66b2:	d816      	bhi.n	66e2 <get_drive+0x3e>
    66b4:	2806      	cmp	r0, #6
    66b6:	d02c      	beq.n	6712 <get_drive+0x6e>
    66b8:	d906      	bls.n	66c8 <get_drive+0x24>
    66ba:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    66be:	d10d      	bne.n	66dc <get_drive+0x38>
		*drive = NRF_GPIO_PIN_H0S1;
    66c0:	2301      	movs	r3, #1
    66c2:	700b      	strb	r3, [r1, #0]
	return 0;
    66c4:	2000      	movs	r0, #0
		break;
    66c6:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    66c8:	b300      	cbz	r0, 670c <get_drive+0x68>
    66ca:	2802      	cmp	r0, #2
    66cc:	d103      	bne.n	66d6 <get_drive+0x32>
		*drive = NRF_GPIO_PIN_D0S1;
    66ce:	2304      	movs	r3, #4
    66d0:	700b      	strb	r3, [r1, #0]
	return 0;
    66d2:	2000      	movs	r0, #0
		break;
    66d4:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    66d6:	f06f 0015 	mvn.w	r0, #21
    66da:	4770      	bx	lr
    66dc:	f06f 0015 	mvn.w	r0, #21
    66e0:	4770      	bx	lr
    66e2:	f240 2302 	movw	r3, #514	; 0x202
    66e6:	4298      	cmp	r0, r3
    66e8:	d01b      	beq.n	6722 <get_drive+0x7e>
    66ea:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
    66ee:	d103      	bne.n	66f8 <get_drive+0x54>
		*drive = NRF_GPIO_PIN_H0H1;
    66f0:	2303      	movs	r3, #3
    66f2:	700b      	strb	r3, [r1, #0]
	return 0;
    66f4:	2000      	movs	r0, #0
		break;
    66f6:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    66f8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    66fc:	d103      	bne.n	6706 <get_drive+0x62>
		*drive = NRF_GPIO_PIN_S0H1;
    66fe:	2302      	movs	r3, #2
    6700:	700b      	strb	r3, [r1, #0]
	return 0;
    6702:	2000      	movs	r0, #0
		break;
    6704:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    6706:	f06f 0015 	mvn.w	r0, #21
    670a:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
    670c:	2000      	movs	r0, #0
    670e:	7008      	strb	r0, [r1, #0]
		break;
    6710:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
    6712:	2306      	movs	r3, #6
    6714:	700b      	strb	r3, [r1, #0]
	return 0;
    6716:	2000      	movs	r0, #0
		break;
    6718:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
    671a:	2307      	movs	r3, #7
    671c:	700b      	strb	r3, [r1, #0]
	return 0;
    671e:	2000      	movs	r0, #0
		break;
    6720:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_D0H1;
    6722:	2305      	movs	r3, #5
    6724:	700b      	strb	r3, [r1, #0]
	return 0;
    6726:	2000      	movs	r0, #0
}
    6728:	4770      	bx	lr

0000672a <get_pull>:
	if (flags & GPIO_PULL_UP) {
    672a:	f010 0f10 	tst.w	r0, #16
    672e:	d104      	bne.n	673a <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
    6730:	f010 0f20 	tst.w	r0, #32
    6734:	d103      	bne.n	673e <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
    6736:	2000      	movs	r0, #0
    6738:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
    673a:	2003      	movs	r0, #3
    673c:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
    673e:	2001      	movs	r0, #1
}
    6740:	4770      	bx	lr

00006742 <gpio_nrfx_port_get_raw>:
	return port->config;
    6742:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6744:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    6746:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
    6748:	600b      	str	r3, [r1, #0]
}
    674a:	2000      	movs	r0, #0
    674c:	4770      	bx	lr

0000674e <gpio_nrfx_port_set_masked_raw>:
	return port->config;
    674e:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6750:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
    6752:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
    6756:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    675a:	6098      	str	r0, [r3, #8]
    p_reg->OUTCLR = clr_mask;
    675c:	60d9      	str	r1, [r3, #12]
}
    675e:	2000      	movs	r0, #0
    6760:	4770      	bx	lr

00006762 <gpio_nrfx_port_set_bits_raw>:
	return port->config;
    6762:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6764:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    6766:	6099      	str	r1, [r3, #8]
}
    6768:	2000      	movs	r0, #0
    676a:	4770      	bx	lr

0000676c <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
    676c:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    676e:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    6770:	60d9      	str	r1, [r3, #12]
}
    6772:	2000      	movs	r0, #0
    6774:	4770      	bx	lr

00006776 <gpio_nrfx_port_toggle_bits>:
	return port->config;
    6776:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6778:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    677a:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
    677c:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    6780:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    6782:	6090      	str	r0, [r2, #8]
    p_reg->OUTCLR = clr_mask;
    6784:	60d3      	str	r3, [r2, #12]
}
    6786:	2000      	movs	r0, #0
    6788:	4770      	bx	lr

0000678a <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
    678a:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    678e:	d007      	beq.n	67a0 <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    6790:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
    6794:	d00d      	beq.n	67b2 <get_trigger+0x28>
    6796:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    679a:	d008      	beq.n	67ae <get_trigger+0x24>
    679c:	2001      	movs	r0, #1
}
    679e:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    67a0:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    67a4:	d001      	beq.n	67aa <get_trigger+0x20>
    67a6:	2005      	movs	r0, #5
    67a8:	4770      	bx	lr
    67aa:	2004      	movs	r0, #4
    67ac:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    67ae:	2002      	movs	r0, #2
    67b0:	4770      	bx	lr
    67b2:	2003      	movs	r0, #3
    67b4:	4770      	bx	lr

000067b6 <gpio_nrfx_manage_callback>:
{
    67b6:	b508      	push	{r3, lr}
	return port->data;
    67b8:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    67ba:	3004      	adds	r0, #4
    67bc:	f7ff ff33 	bl	6626 <gpio_manage_callback>
}
    67c0:	bd08      	pop	{r3, pc}

000067c2 <nrfx_gpio_handler>:
{
    67c2:	b510      	push	{r4, lr}
    *p_pin = pin_number & 0x1F;
    67c4:	f000 041f 	and.w	r4, r0, #31
	const struct device *port = get_dev(port_id);
    67c8:	0940      	lsrs	r0, r0, #5
    67ca:	f7fb fe4f 	bl	246c <get_dev>
	if (port == NULL) {
    67ce:	b130      	cbz	r0, 67de <nrfx_gpio_handler+0x1c>
    67d0:	4601      	mov	r1, r0
	return port->data;
    67d2:	6900      	ldr	r0, [r0, #16]
	gpio_fire_callbacks(list, port, BIT(pin));
    67d4:	2201      	movs	r2, #1
    67d6:	40a2      	lsls	r2, r4
    67d8:	3004      	adds	r0, #4
    67da:	f7ff ff43 	bl	6664 <gpio_fire_callbacks>
}
    67de:	bd10      	pop	{r4, pc}

000067e0 <endtx_isr>:
	const struct uarte_nrfx_config *config = dev->config;
    67e0:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    67e2:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
    67e4:	f04f 0120 	mov.w	r1, #32
    67e8:	f3ef 8311 	mrs	r3, BASEPRI
    67ec:	f381 8812 	msr	BASEPRI_MAX, r1
    67f0:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    67f4:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    67f8:	b131      	cbz	r1, 6808 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    67fa:	2100      	movs	r1, #0
    67fc:	f8c2 1120 	str.w	r1, [r2, #288]	; 0x120
    6800:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6804:	2101      	movs	r1, #1
    6806:	60d1      	str	r1, [r2, #12]
	__asm__ volatile(
    6808:	f383 8811 	msr	BASEPRI, r3
    680c:	f3bf 8f6f 	isb	sy
}
    6810:	4770      	bx	lr

00006812 <uarte_nrfx_isr_int>:
{
    6812:	b538      	push	{r3, r4, r5, lr}
	const struct uarte_nrfx_config *config = dev->config;
    6814:	6845      	ldr	r5, [r0, #4]
	return config->uarte_regs;
    6816:	682c      	ldr	r4, [r5, #0]
    return p_reg->INTENSET & mask;
    6818:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    681c:	f413 7f80 	tst.w	r3, #256	; 0x100
    6820:	d002      	beq.n	6828 <uarte_nrfx_isr_int+0x16>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6822:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    6826:	b9d3      	cbnz	r3, 685e <uarte_nrfx_isr_int+0x4c>
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    6828:	686b      	ldr	r3, [r5, #4]
    682a:	f013 0f10 	tst.w	r3, #16
    682e:	d015      	beq.n	685c <uarte_nrfx_isr_int+0x4a>
	__asm__ volatile(
    6830:	f04f 0220 	mov.w	r2, #32
    6834:	f3ef 8311 	mrs	r3, BASEPRI
    6838:	f382 8812 	msr	BASEPRI_MAX, r2
    683c:	f3bf 8f6f 	isb	sy
    6840:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    6844:	b112      	cbz	r2, 684c <uarte_nrfx_isr_int+0x3a>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    6846:	2200      	movs	r2, #0
    6848:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    684c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    6850:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
	__asm__ volatile(
    6854:	f383 8811 	msr	BASEPRI, r3
    6858:	f3bf 8f6f 	isb	sy
}
    685c:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
    685e:	f7ff ffbf 	bl	67e0 <endtx_isr>
    6862:	e7e1      	b.n	6828 <uarte_nrfx_isr_int+0x16>

00006864 <uarte_nrfx_configure>:
{
    6864:	b570      	push	{r4, r5, r6, lr}
    6866:	b082      	sub	sp, #8
    6868:	4605      	mov	r5, r0
    686a:	460c      	mov	r4, r1
	struct uarte_nrfx_data *data = dev->data;
    686c:	6906      	ldr	r6, [r0, #16]
	switch (cfg->stop_bits) {
    686e:	794b      	ldrb	r3, [r1, #5]
    6870:	2b01      	cmp	r3, #1
    6872:	d006      	beq.n	6882 <uarte_nrfx_configure+0x1e>
    6874:	2b03      	cmp	r3, #3
    6876:	d011      	beq.n	689c <uarte_nrfx_configure+0x38>
    6878:	f06f 0285 	mvn.w	r2, #133	; 0x85
}
    687c:	4610      	mov	r0, r2
    687e:	b002      	add	sp, #8
    6880:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
    6882:	2300      	movs	r3, #0
    6884:	f88d 3002 	strb.w	r3, [sp, #2]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    6888:	79a3      	ldrb	r3, [r4, #6]
    688a:	2b03      	cmp	r3, #3
    688c:	d146      	bne.n	691c <uarte_nrfx_configure+0xb8>
	switch (cfg->flow_ctrl) {
    688e:	79e3      	ldrb	r3, [r4, #7]
    6890:	b143      	cbz	r3, 68a4 <uarte_nrfx_configure+0x40>
    6892:	2b01      	cmp	r3, #1
    6894:	d015      	beq.n	68c2 <uarte_nrfx_configure+0x5e>
    6896:	f06f 0285 	mvn.w	r2, #133	; 0x85
    689a:	e7ef      	b.n	687c <uarte_nrfx_configure+0x18>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    689c:	2310      	movs	r3, #16
    689e:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
    68a2:	e7f1      	b.n	6888 <uarte_nrfx_configure+0x24>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
    68a4:	2300      	movs	r3, #0
    68a6:	f88d 3000 	strb.w	r3, [sp]
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
    68aa:	2300      	movs	r3, #0
    68ac:	f8ad 3004 	strh.w	r3, [sp, #4]
	switch (cfg->parity) {
    68b0:	7923      	ldrb	r3, [r4, #4]
    68b2:	2b01      	cmp	r3, #1
    68b4:	d02a      	beq.n	690c <uarte_nrfx_configure+0xa8>
    68b6:	2b02      	cmp	r3, #2
    68b8:	d024      	beq.n	6904 <uarte_nrfx_configure+0xa0>
    68ba:	b133      	cbz	r3, 68ca <uarte_nrfx_configure+0x66>
    68bc:	f06f 0285 	mvn.w	r2, #133	; 0x85
    68c0:	e7dc      	b.n	687c <uarte_nrfx_configure+0x18>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
    68c2:	2301      	movs	r3, #1
    68c4:	f88d 3000 	strb.w	r3, [sp]
		break;
    68c8:	e7ef      	b.n	68aa <uarte_nrfx_configure+0x46>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
    68ca:	f88d 3001 	strb.w	r3, [sp, #1]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    68ce:	6821      	ldr	r1, [r4, #0]
    68d0:	4628      	mov	r0, r5
    68d2:	f7fb fee1 	bl	2698 <baudrate_set>
    68d6:	4602      	mov	r2, r0
    68d8:	bb18      	cbnz	r0, 6922 <uarte_nrfx_configure+0xbe>
	const struct uarte_nrfx_config *config = dev->config;
    68da:	686b      	ldr	r3, [r5, #4]
	return config->uarte_regs;
    68dc:	6819      	ldr	r1, [r3, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    68de:	f89d 3001 	ldrb.w	r3, [sp, #1]
                    | (uint32_t)p_cfg->stop
    68e2:	f89d 0002 	ldrb.w	r0, [sp, #2]
    68e6:	4303      	orrs	r3, r0
                    | (uint32_t)p_cfg->paritytype
    68e8:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    68ec:	4303      	orrs	r3, r0
                    | (uint32_t)p_cfg->hwfc;
    68ee:	f89d 0000 	ldrb.w	r0, [sp]
    68f2:	4303      	orrs	r3, r0
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    68f4:	f8c1 356c 	str.w	r3, [r1, #1388]	; 0x56c
	data->uart_config = *cfg;
    68f8:	3604      	adds	r6, #4
    68fa:	e894 0003 	ldmia.w	r4, {r0, r1}
    68fe:	e886 0003 	stmia.w	r6, {r0, r1}
	return 0;
    6902:	e7bb      	b.n	687c <uarte_nrfx_configure+0x18>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    6904:	230e      	movs	r3, #14
    6906:	f88d 3001 	strb.w	r3, [sp, #1]
		break;
    690a:	e7e0      	b.n	68ce <uarte_nrfx_configure+0x6a>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    690c:	230e      	movs	r3, #14
    690e:	f88d 3001 	strb.w	r3, [sp, #1]
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
    6912:	f44f 7380 	mov.w	r3, #256	; 0x100
    6916:	f8ad 3004 	strh.w	r3, [sp, #4]
		break;
    691a:	e7d8      	b.n	68ce <uarte_nrfx_configure+0x6a>
		return -ENOTSUP;
    691c:	f06f 0285 	mvn.w	r2, #133	; 0x85
    6920:	e7ac      	b.n	687c <uarte_nrfx_configure+0x18>
		return -ENOTSUP;
    6922:	f06f 0285 	mvn.w	r2, #133	; 0x85
    6926:	e7a9      	b.n	687c <uarte_nrfx_configure+0x18>

00006928 <uarte_nrfx_config_get>:
{
    6928:	460a      	mov	r2, r1
	struct uarte_nrfx_data *data = dev->data;
    692a:	6903      	ldr	r3, [r0, #16]
	*cfg = data->uart_config;
    692c:	3304      	adds	r3, #4
    692e:	e893 0003 	ldmia.w	r3, {r0, r1}
    6932:	e882 0003 	stmia.w	r2, {r0, r1}
}
    6936:	2000      	movs	r0, #0
    6938:	4770      	bx	lr

0000693a <uarte_nrfx_err_check>:
	const struct uarte_nrfx_config *config = dev->config;
    693a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    693c:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    693e:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    6942:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    6946:	4770      	bx	lr

00006948 <is_tx_ready>:
	const struct uarte_nrfx_config *config = dev->config;
    6948:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    694a:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    694c:	685b      	ldr	r3, [r3, #4]
    694e:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6952:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    6956:	b929      	cbnz	r1, 6964 <is_tx_ready+0x1c>
    6958:	b933      	cbnz	r3, 6968 <is_tx_ready+0x20>
    695a:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
    695e:	b92b      	cbnz	r3, 696c <is_tx_ready+0x24>
    6960:	2000      	movs	r0, #0
    6962:	4770      	bx	lr
    6964:	2001      	movs	r0, #1
    6966:	4770      	bx	lr
    6968:	2000      	movs	r0, #0
    696a:	4770      	bx	lr
    696c:	2001      	movs	r0, #1
}
    696e:	4770      	bx	lr

00006970 <uarte_enable>:
	const struct uarte_nrfx_config *config = dev->config;
    6970:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    6972:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    6974:	2208      	movs	r2, #8
    6976:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    697a:	4770      	bx	lr

0000697c <tx_start>:
{
    697c:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
    697e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    6980:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    6982:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    6986:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    698a:	2200      	movs	r2, #0
    698c:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    6990:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
    6994:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
    6998:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    699c:	685b      	ldr	r3, [r3, #4]
    699e:	f013 0f10 	tst.w	r3, #16
    69a2:	d102      	bne.n	69aa <tx_start+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    69a4:	2301      	movs	r3, #1
    69a6:	60a3      	str	r3, [r4, #8]
}
    69a8:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
    69aa:	2101      	movs	r1, #1
    69ac:	f7ff ffe0 	bl	6970 <uarte_enable>
    p_reg->INTENSET = mask;
    69b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    69b4:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    69b8:	e7f4      	b.n	69a4 <tx_start+0x28>

000069ba <uarte_nrfx_poll_in>:
{
    69ba:	b410      	push	{r4}
	const struct uarte_nrfx_data *data = dev->data;
    69bc:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    69be:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    69c0:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    69c2:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    69c6:	b15a      	cbz	r2, 69e0 <uarte_nrfx_poll_in+0x26>
	*c = *data->rx_data;
    69c8:	6962      	ldr	r2, [r4, #20]
    69ca:	7812      	ldrb	r2, [r2, #0]
    69cc:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    69ce:	2000      	movs	r0, #0
    69d0:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    69d4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    69d8:	2201      	movs	r2, #1
    69da:	601a      	str	r2, [r3, #0]
}
    69dc:	bc10      	pop	{r4}
    69de:	4770      	bx	lr
		return -1;
    69e0:	f04f 30ff 	mov.w	r0, #4294967295
    69e4:	e7fa      	b.n	69dc <uarte_nrfx_poll_in+0x22>

000069e6 <k_msleep>:
{
    69e6:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
    69e8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    69ec:	17c1      	asrs	r1, r0, #31
    69ee:	03c9      	lsls	r1, r1, #15
    69f0:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    69f4:	03c0      	lsls	r0, r0, #15
    69f6:	f240 33e7 	movw	r3, #999	; 0x3e7
    69fa:	18c0      	adds	r0, r0, r3
    69fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    6a00:	f04f 0300 	mov.w	r3, #0
    6a04:	f141 0100 	adc.w	r1, r1, #0
    6a08:	f7f9 fba4 	bl	154 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    6a0c:	f7fd ffe2 	bl	49d4 <z_impl_k_sleep>
}
    6a10:	bd08      	pop	{r3, pc}

00006a12 <wait_tx_ready>:
{
    6a12:	b570      	push	{r4, r5, r6, lr}
    6a14:	4606      	mov	r6, r0
    6a16:	e013      	b.n	6a40 <wait_tx_ready+0x2e>
		if (res) {
    6a18:	b17d      	cbz	r5, 6a3a <wait_tx_ready+0x28>
	__asm__ volatile(
    6a1a:	f04f 0320 	mov.w	r3, #32
    6a1e:	f3ef 8411 	mrs	r4, BASEPRI
    6a22:	f383 8812 	msr	BASEPRI_MAX, r3
    6a26:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    6a2a:	4630      	mov	r0, r6
    6a2c:	f7ff ff8c 	bl	6948 <is_tx_ready>
    6a30:	b998      	cbnz	r0, 6a5a <wait_tx_ready+0x48>
	__asm__ volatile(
    6a32:	f384 8811 	msr	BASEPRI, r4
    6a36:	f3bf 8f6f 	isb	sy
			k_msleep(1);
    6a3a:	2001      	movs	r0, #1
    6a3c:	f7ff ffd3 	bl	69e6 <k_msleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    6a40:	2464      	movs	r4, #100	; 0x64
    6a42:	4630      	mov	r0, r6
    6a44:	f7ff ff80 	bl	6948 <is_tx_ready>
    6a48:	4605      	mov	r5, r0
    6a4a:	2800      	cmp	r0, #0
    6a4c:	d1e4      	bne.n	6a18 <wait_tx_ready+0x6>
    6a4e:	2001      	movs	r0, #1
    6a50:	f000 f9af 	bl	6db2 <nrfx_busy_wait>
    6a54:	3c01      	subs	r4, #1
    6a56:	d1f4      	bne.n	6a42 <wait_tx_ready+0x30>
    6a58:	e7de      	b.n	6a18 <wait_tx_ready+0x6>
}
    6a5a:	4620      	mov	r0, r4
    6a5c:	bd70      	pop	{r4, r5, r6, pc}

00006a5e <pinctrl_apply_state>:
 * @retval -ENOENT If given state id does not exist.
 * @retval -errno Negative errno for other failures.
 */
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
				      uint8_t id)
{
    6a5e:	b510      	push	{r4, lr}
    6a60:	b082      	sub	sp, #8
    6a62:	4604      	mov	r4, r0
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    6a64:	aa01      	add	r2, sp, #4
    6a66:	f000 f8e1 	bl	6c2c <pinctrl_lookup_state>
	if (ret < 0) {
    6a6a:	2800      	cmp	r0, #0
    6a6c:	db05      	blt.n	6a7a <pinctrl_apply_state+0x1c>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    6a6e:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    6a70:	6822      	ldr	r2, [r4, #0]
    6a72:	7919      	ldrb	r1, [r3, #4]
    6a74:	6818      	ldr	r0, [r3, #0]
    6a76:	f7fc f97f 	bl	2d78 <pinctrl_configure_pins>
}
    6a7a:	b002      	add	sp, #8
    6a7c:	bd10      	pop	{r4, pc}

00006a7e <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
    6a7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6a82:	4604      	mov	r4, r0
	const struct uarte_nrfx_config *config = dev->config;
    6a84:	6847      	ldr	r7, [r0, #4]
	return config->uarte_regs;
    6a86:	683e      	ldr	r6, [r7, #0]
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    6a88:	f8d0 8010 	ldr.w	r8, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    6a8c:	2100      	movs	r1, #0
    6a8e:	f8c6 1500 	str.w	r1, [r6, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
    6a92:	f8c8 0000 	str.w	r0, [r8]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    6a96:	68f8      	ldr	r0, [r7, #12]
    6a98:	f7ff ffe1 	bl	6a5e <pinctrl_apply_state>
	if (err < 0) {
    6a9c:	1e05      	subs	r5, r0, #0
    6a9e:	db35      	blt.n	6b0c <uarte_instance_init+0x8e>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    6aa0:	f108 0104 	add.w	r1, r8, #4
    6aa4:	4620      	mov	r0, r4
    6aa6:	f7ff fedd 	bl	6864 <uarte_nrfx_configure>
	if (err) {
    6aaa:	4605      	mov	r5, r0
    6aac:	bb70      	cbnz	r0, 6b0c <uarte_instance_init+0x8e>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    6aae:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    6ab0:	f013 0f02 	tst.w	r3, #2
    6ab4:	d12d      	bne.n	6b12 <uarte_instance_init+0x94>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    6ab6:	2308      	movs	r3, #8
    6ab8:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    6abc:	7a3b      	ldrb	r3, [r7, #8]
    6abe:	b95b      	cbnz	r3, 6ad8 <uarte_instance_init+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6ac0:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
    6ac4:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, data->rx_data, 1);
    6ac8:	f8d8 3014 	ldr.w	r3, [r8, #20]

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    6acc:	f8c6 3534 	str.w	r3, [r6, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    6ad0:	2301      	movs	r3, #1
    6ad2:	f8c6 3538 	str.w	r3, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6ad6:	6033      	str	r3, [r6, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    6ad8:	687b      	ldr	r3, [r7, #4]
    6ada:	f013 0f02 	tst.w	r3, #2
    6ade:	d103      	bne.n	6ae8 <uarte_instance_init+0x6a>
    p_reg->INTENSET = mask;
    6ae0:	f44f 7380 	mov.w	r3, #256	; 0x100
    6ae4:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    6ae8:	687b      	ldr	r3, [r7, #4]
    6aea:	f013 0f10 	tst.w	r3, #16
    6aee:	d003      	beq.n	6af8 <uarte_instance_init+0x7a>
    6af0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    6af4:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, data->char_out, 0);
    6af8:	f8d8 3010 	ldr.w	r3, [r8, #16]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    6afc:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    6b00:	2300      	movs	r3, #0
    6b02:	f8c6 3548 	str.w	r3, [r6, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6b06:	2301      	movs	r3, #1
    6b08:	60b3      	str	r3, [r6, #8]
    6b0a:	60f3      	str	r3, [r6, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    6b0c:	4628      	mov	r0, r5
    6b0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
    6b12:	4641      	mov	r1, r8
    6b14:	4630      	mov	r0, r6
    6b16:	f7fb fe95 	bl	2844 <endtx_stoptx_ppi_init>
		if (err < 0) {
    6b1a:	2800      	cmp	r0, #0
    6b1c:	dacb      	bge.n	6ab6 <uarte_instance_init+0x38>
			return err;
    6b1e:	4605      	mov	r5, r0
    6b20:	e7f4      	b.n	6b0c <uarte_instance_init+0x8e>

00006b22 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    6b22:	b510      	push	{r4, lr}
    6b24:	4604      	mov	r4, r0
    6b26:	2200      	movs	r2, #0
    6b28:	2101      	movs	r1, #1
    6b2a:	2008      	movs	r0, #8
    6b2c:	f7ff f9dc 	bl	5ee8 <z_arm_irq_priority_set>
    6b30:	2008      	movs	r0, #8
    6b32:	f7ff f9d4 	bl	5ede <arch_irq_enable>
    6b36:	2100      	movs	r1, #0
    6b38:	4620      	mov	r0, r4
    6b3a:	f7ff ffa0 	bl	6a7e <uarte_instance_init>
    6b3e:	bd10      	pop	{r4, pc}

00006b40 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    6b40:	4770      	bx	lr

00006b42 <counter_sub>:
	return (a - b) & COUNTER_MAX;
    6b42:	1a40      	subs	r0, r0, r1
}
    6b44:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    6b48:	4770      	bx	lr

00006b4a <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    6b4a:	f100 0350 	add.w	r3, r0, #80	; 0x50
    6b4e:	009b      	lsls	r3, r3, #2
    6b50:	b29b      	uxth	r3, r3
    6b52:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    6b56:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    6b5a:	2200      	movs	r2, #0
    6b5c:	601a      	str	r2, [r3, #0]
    6b5e:	681b      	ldr	r3, [r3, #0]
}
    6b60:	4770      	bx	lr

00006b62 <absolute_time_to_cc>:
}
    6b62:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    6b66:	4770      	bx	lr

00006b68 <full_int_lock>:
	__asm__ volatile(
    6b68:	f04f 0320 	mov.w	r3, #32
    6b6c:	f3ef 8011 	mrs	r0, BASEPRI
    6b70:	f383 8812 	msr	BASEPRI_MAX, r3
    6b74:	f3bf 8f6f 	isb	sy
}
    6b78:	4770      	bx	lr

00006b7a <full_int_unlock>:
	__asm__ volatile(
    6b7a:	f380 8811 	msr	BASEPRI, r0
    6b7e:	f3bf 8f6f 	isb	sy
}
    6b82:	4770      	bx	lr

00006b84 <set_absolute_alarm>:
{
    6b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6b86:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
    6b88:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
    6b8c:	f7fb fe84 	bl	2898 <get_comparator>
    6b90:	4607      	mov	r7, r0
    6b92:	e019      	b.n	6bc8 <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
    6b94:	2013      	movs	r0, #19
    6b96:	f000 fdb3 	bl	7700 <z_impl_k_busy_wait>
}
    6b9a:	e022      	b.n	6be2 <set_absolute_alarm+0x5e>
		event_clear(chan);
    6b9c:	4630      	mov	r0, r6
    6b9e:	f7ff ffd4 	bl	6b4a <event_clear>
		event_enable(chan);
    6ba2:	4630      	mov	r0, r6
    6ba4:	f7fb fe80 	bl	28a8 <event_enable>
		set_comparator(chan, cc_val);
    6ba8:	4629      	mov	r1, r5
    6baa:	4630      	mov	r0, r6
    6bac:	f7fb fe6a 	bl	2884 <set_comparator>
		now2 = counter();
    6bb0:	f7fb fe8e 	bl	28d0 <counter>
	} while ((now2 != now) &&
    6bb4:	4284      	cmp	r4, r0
    6bb6:	d01e      	beq.n	6bf6 <set_absolute_alarm+0x72>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    6bb8:	1c81      	adds	r1, r0, #2
    6bba:	4628      	mov	r0, r5
    6bbc:	f7ff ffc1 	bl	6b42 <counter_sub>
	} while ((now2 != now) &&
    6bc0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    6bc4:	d917      	bls.n	6bf6 <set_absolute_alarm+0x72>
		prev_cc = cc_val;
    6bc6:	462f      	mov	r7, r5
		now = counter();
    6bc8:	f7fb fe82 	bl	28d0 <counter>
    6bcc:	4604      	mov	r4, r0
		set_comparator(chan, now);
    6bce:	4601      	mov	r1, r0
    6bd0:	4630      	mov	r0, r6
    6bd2:	f7fb fe57 	bl	2884 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
    6bd6:	4621      	mov	r1, r4
    6bd8:	4638      	mov	r0, r7
    6bda:	f7ff ffb2 	bl	6b42 <counter_sub>
    6bde:	2801      	cmp	r0, #1
    6be0:	d0d8      	beq.n	6b94 <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    6be2:	1ca7      	adds	r7, r4, #2
    6be4:	4639      	mov	r1, r7
    6be6:	4628      	mov	r0, r5
    6be8:	f7ff ffab 	bl	6b42 <counter_sub>
    6bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    6bf0:	d9d4      	bls.n	6b9c <set_absolute_alarm+0x18>
			cc_val = now + 2;
    6bf2:	463d      	mov	r5, r7
    6bf4:	e7d2      	b.n	6b9c <set_absolute_alarm+0x18>
}
    6bf6:	4628      	mov	r0, r5
    6bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00006bfa <compare_set>:
{
    6bfa:	b5f0      	push	{r4, r5, r6, r7, lr}
    6bfc:	b083      	sub	sp, #12
    6bfe:	4604      	mov	r4, r0
    6c00:	4617      	mov	r7, r2
    6c02:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
    6c04:	f7fb fe6a 	bl	28dc <compare_int_lock>
    6c08:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
    6c0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6c0c:	9301      	str	r3, [sp, #4]
    6c0e:	9b08      	ldr	r3, [sp, #32]
    6c10:	9300      	str	r3, [sp, #0]
    6c12:	463a      	mov	r2, r7
    6c14:	462b      	mov	r3, r5
    6c16:	4620      	mov	r0, r4
    6c18:	f7fb ff3c 	bl	2a94 <compare_set_nolocks>
    6c1c:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
    6c1e:	4631      	mov	r1, r6
    6c20:	4620      	mov	r0, r4
    6c22:	f7fb feb3 	bl	298c <compare_int_unlock>
}
    6c26:	4628      	mov	r0, r5
    6c28:	b003      	add	sp, #12
    6c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006c2c <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    6c2c:	b410      	push	{r4}
	*state = &config->states[0];
    6c2e:	6843      	ldr	r3, [r0, #4]
    6c30:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    6c32:	e001      	b.n	6c38 <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
    6c34:	3408      	adds	r4, #8
    6c36:	6014      	str	r4, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    6c38:	6814      	ldr	r4, [r2, #0]
    6c3a:	7a03      	ldrb	r3, [r0, #8]
    6c3c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    6c40:	3b01      	subs	r3, #1
    6c42:	f8d0 c004 	ldr.w	ip, [r0, #4]
    6c46:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
    6c4a:	429c      	cmp	r4, r3
    6c4c:	d804      	bhi.n	6c58 <pinctrl_lookup_state+0x2c>
		if (id == (*state)->id) {
    6c4e:	7963      	ldrb	r3, [r4, #5]
    6c50:	428b      	cmp	r3, r1
    6c52:	d1ef      	bne.n	6c34 <pinctrl_lookup_state+0x8>
			return 0;
    6c54:	2000      	movs	r0, #0
    6c56:	e001      	b.n	6c5c <pinctrl_lookup_state+0x30>
	}

	return -ENOENT;
    6c58:	f06f 0001 	mvn.w	r0, #1
}
    6c5c:	bc10      	pop	{r4}
    6c5e:	4770      	bx	lr

00006c60 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    6c60:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    6c62:	2000      	movs	r0, #0
    6c64:	f7ff f97f 	bl	5f66 <sys_arch_reboot>

00006c68 <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
    6c68:	b508      	push	{r3, lr}

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    6c6a:	f7fe fad3 	bl	5214 <nrf_cc3xx_platform_init_no_rng>
#endif

	return res;
}
    6c6e:	bd08      	pop	{r3, pc}

00006c70 <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
    6c70:	b510      	push	{r4, lr}
    6c72:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    6c74:	f7fa fa5c 	bl	1130 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    6c78:	f7fa fb6e 	bl	1358 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
    6c7c:	4620      	mov	r0, r4
    6c7e:	f7ff fff3 	bl	6c68 <hw_cc3xx_init_internal>
	return res;
}
    6c82:	bd10      	pop	{r4, pc}

00006c84 <nrf53_errata_42>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    6c84:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    6c88:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    6c8c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    6c90:	2a07      	cmp	r2, #7
    6c92:	d001      	beq.n	6c98 <nrf53_errata_42+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    6c94:	2000      	movs	r0, #0
    6c96:	4770      	bx	lr
                    switch(var2)
    6c98:	3b02      	subs	r3, #2
    6c9a:	2b00      	cmp	r3, #0
    6c9c:	d804      	bhi.n	6ca8 <nrf53_errata_42+0x24>
    6c9e:	e8df f003 	tbb	[pc, r3]
    6ca2:	01          	.byte	0x01
    6ca3:	00          	.byte	0x00
    6ca4:	2001      	movs	r0, #1
    6ca6:	4770      	bx	lr
                            return false;
    6ca8:	2000      	movs	r0, #0
    #endif
}
    6caa:	4770      	bx	lr

00006cac <nrf53_errata_46>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    6cac:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    6cb0:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    6cb4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    6cb8:	2a07      	cmp	r2, #7
    6cba:	d001      	beq.n	6cc0 <nrf53_errata_46+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    6cbc:	2000      	movs	r0, #0
    6cbe:	4770      	bx	lr
                    switch(var2)
    6cc0:	2b04      	cmp	r3, #4
    6cc2:	d007      	beq.n	6cd4 <nrf53_errata_46+0x28>
    6cc4:	d808      	bhi.n	6cd8 <nrf53_errata_46+0x2c>
    6cc6:	3b02      	subs	r3, #2
    6cc8:	2b01      	cmp	r3, #1
    6cca:	d801      	bhi.n	6cd0 <nrf53_errata_46+0x24>
    6ccc:	2001      	movs	r0, #1
    #endif
}
    6cce:	4770      	bx	lr
                            return false;
    6cd0:	2000      	movs	r0, #0
    6cd2:	4770      	bx	lr
                            return false;
    6cd4:	2000      	movs	r0, #0
    6cd6:	4770      	bx	lr
                            return false;
    6cd8:	2000      	movs	r0, #0
    6cda:	4770      	bx	lr

00006cdc <nrf53_errata_49>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    6cdc:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    6ce0:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    6ce4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    6ce8:	2a07      	cmp	r2, #7
    6cea:	d001      	beq.n	6cf0 <nrf53_errata_49+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    6cec:	2000      	movs	r0, #0
    6cee:	4770      	bx	lr
                    switch(var2)
    6cf0:	3b02      	subs	r3, #2
    6cf2:	2b00      	cmp	r3, #0
    6cf4:	d804      	bhi.n	6d00 <nrf53_errata_49+0x24>
    6cf6:	e8df f003 	tbb	[pc, r3]
    6cfa:	01          	.byte	0x01
    6cfb:	00          	.byte	0x00
    6cfc:	2001      	movs	r0, #1
    6cfe:	4770      	bx	lr
                            return false;
    6d00:	2000      	movs	r0, #0
    #endif
}
    6d02:	4770      	bx	lr

00006d04 <nrf53_errata_55>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    6d04:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    6d08:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    6d0c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    6d10:	2a07      	cmp	r2, #7
    6d12:	d001      	beq.n	6d18 <nrf53_errata_55+0x14>
                            return true;
                    }
                }
            #endif
        #endif
        return false;
    6d14:	2000      	movs	r0, #0
    6d16:	4770      	bx	lr
                            return true;
    6d18:	2001      	movs	r0, #1
    #endif
}
    6d1a:	4770      	bx	lr

00006d1c <nrf53_errata_64>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    6d1c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    6d20:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    6d24:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    6d28:	2a07      	cmp	r2, #7
    6d2a:	d001      	beq.n	6d30 <nrf53_errata_64+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    6d2c:	2000      	movs	r0, #0
    6d2e:	4770      	bx	lr
                    switch(var2)
    6d30:	3b02      	subs	r3, #2
    6d32:	2b00      	cmp	r3, #0
    6d34:	d804      	bhi.n	6d40 <nrf53_errata_64+0x24>
    6d36:	e8df f003 	tbb	[pc, r3]
    6d3a:	01          	.byte	0x01
    6d3b:	00          	.byte	0x00
    6d3c:	2001      	movs	r0, #1
    6d3e:	4770      	bx	lr
                            return false;
    6d40:	2000      	movs	r0, #0
    #endif
}
    6d42:	4770      	bx	lr

00006d44 <nrf53_errata_69>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    6d44:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    6d48:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    6d4c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    6d50:	2a07      	cmp	r2, #7
    6d52:	d001      	beq.n	6d58 <nrf53_errata_69+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    6d54:	2000      	movs	r0, #0
    6d56:	4770      	bx	lr
                    switch(var2)
    6d58:	3b02      	subs	r3, #2
    6d5a:	2b00      	cmp	r3, #0
    6d5c:	d804      	bhi.n	6d68 <nrf53_errata_69+0x24>
    6d5e:	e8df f003 	tbb	[pc, r3]
    6d62:	01          	.byte	0x01
    6d63:	00          	.byte	0x00
    6d64:	2001      	movs	r0, #1
    6d66:	4770      	bx	lr
                            return false;
    6d68:	2000      	movs	r0, #0
    #endif
}
    6d6a:	4770      	bx	lr

00006d6c <nrf53_errata_97>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    6d6c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    6d70:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    6d74:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    6d78:	2a07      	cmp	r2, #7
    6d7a:	d001      	beq.n	6d80 <nrf53_errata_97+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    6d7c:	2000      	movs	r0, #0
    6d7e:	4770      	bx	lr
                    switch(var2)
    6d80:	3b02      	subs	r3, #2
    6d82:	2b00      	cmp	r3, #0
    6d84:	d804      	bhi.n	6d90 <nrf53_errata_97+0x24>
    6d86:	e8df f003 	tbb	[pc, r3]
    6d8a:	01          	.byte	0x01
    6d8b:	00          	.byte	0x00
    6d8c:	2001      	movs	r0, #1
    6d8e:	4770      	bx	lr
                            return false;
    6d90:	2000      	movs	r0, #0
    #endif
}
    6d92:	4770      	bx	lr

00006d94 <nrf53_errata_140>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    6d94:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    6d98:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    6d9c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    6da0:	2a07      	cmp	r2, #7
    6da2:	d001      	beq.n	6da8 <nrf53_errata_140+0x14>
                            return true;
                    }
                }
            #endif
        #endif
        return false;
    6da4:	2000      	movs	r0, #0
    6da6:	4770      	bx	lr
                            return true;
    6da8:	2001      	movs	r0, #1
    #endif
}
    6daa:	4770      	bx	lr

00006dac <nrfx_isr>:
#include <nrfx.h>
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
    6dac:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
    6dae:	4780      	blx	r0
}
    6db0:	bd08      	pop	{r3, pc}

00006db2 <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
    6db2:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
    6db4:	f000 fca4 	bl	7700 <z_impl_k_busy_wait>
	if (IS_ENABLED(CONFIG_SYS_CLOCK_EXISTS)) {
		k_busy_wait(usec_to_wait);
	} else {
		nrfx_coredep_delay_us(usec_to_wait);
	}
}
    6db8:	bd08      	pop	{r3, pc}

00006dba <nrf_clock_is_running>:
    switch (domain)
    6dba:	2903      	cmp	r1, #3
    6dbc:	d82f      	bhi.n	6e1e <nrf_clock_is_running+0x64>
    6dbe:	e8df f001 	tbb	[pc, r1]
    6dc2:	0f02      	.short	0x0f02
    6dc4:	291c      	.short	0x291c
            if (p_clk_src != NULL)
    6dc6:	b122      	cbz	r2, 6dd2 <nrf_clock_is_running+0x18>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    6dc8:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
    6dcc:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    6dd0:	7013      	strb	r3, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6dd2:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
    6dd6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    6dda:	d122      	bne.n	6e22 <nrf_clock_is_running+0x68>
    return false;
    6ddc:	2000      	movs	r0, #0
    6dde:	4770      	bx	lr
            if (p_clk_src != NULL)
    6de0:	b122      	cbz	r2, 6dec <nrf_clock_is_running+0x32>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    6de2:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
    6de6:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    6dea:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    6dec:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
    6df0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    6df4:	d117      	bne.n	6e26 <nrf_clock_is_running+0x6c>
    return false;
    6df6:	2000      	movs	r0, #0
    6df8:	4770      	bx	lr
            if (p_clk_src != NULL)
    6dfa:	b122      	cbz	r2, 6e06 <nrf_clock_is_running+0x4c>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
    6dfc:	f8d0 345c 	ldr.w	r3, [r0, #1116]	; 0x45c
    6e00:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    6e04:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    6e06:	f8d0 345c 	ldr.w	r3, [r0, #1116]	; 0x45c
    6e0a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    6e0e:	d10c      	bne.n	6e2a <nrf_clock_is_running+0x70>
    return false;
    6e10:	2000      	movs	r0, #0
    6e12:	4770      	bx	lr
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
    6e14:	f8d0 0454 	ldr.w	r0, [r0, #1108]	; 0x454
    6e18:	f3c0 4000 	ubfx	r0, r0, #16, #1
    6e1c:	4770      	bx	lr
    switch (domain)
    6e1e:	2000      	movs	r0, #0
    6e20:	4770      	bx	lr
                return true;
    6e22:	2001      	movs	r0, #1
    6e24:	4770      	bx	lr
                return true;
    6e26:	2001      	movs	r0, #1
    6e28:	4770      	bx	lr
                return true;
    6e2a:	2001      	movs	r0, #1
}
    6e2c:	4770      	bx	lr

00006e2e <clock_initial_lfclksrc_get>:
}
    6e2e:	2001      	movs	r0, #1
    6e30:	4770      	bx	lr

00006e32 <nrfx_power_clock_irq_init>:
extern "C" {
#endif


__STATIC_INLINE void nrfx_power_clock_irq_init(void)
{
    6e32:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    6e34:	2005      	movs	r0, #5
    6e36:	f7fa fae3 	bl	1400 <arch_irq_is_enabled>
    6e3a:	b100      	cbz	r0, 6e3e <nrfx_power_clock_irq_init+0xc>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    }
}
    6e3c:	bd08      	pop	{r3, pc}
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    6e3e:	2005      	movs	r0, #5
    6e40:	f7ff f84d 	bl	5ede <arch_irq_enable>
}
    6e44:	e7fa      	b.n	6e3c <nrfx_power_clock_irq_init+0xa>

00006e46 <clock_stop>:
{
    6e46:	b570      	push	{r4, r5, r6, lr}
    6e48:	b082      	sub	sp, #8
    6e4a:	4606      	mov	r6, r0
    switch (domain)
    6e4c:	2803      	cmp	r0, #3
    6e4e:	d855      	bhi.n	6efc <clock_stop+0xb6>
    6e50:	e8df f000 	tbb	[pc, r0]
    6e54:	31231702 	.word	0x31231702
    p_reg->INTENCLR = mask;
    6e58:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6e5c:	2202      	movs	r2, #2
    6e5e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6e62:	2200      	movs	r2, #0
    6e64:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    6e68:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6e6c:	2201      	movs	r2, #1
    6e6e:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    6e70:	2301      	movs	r3, #1
    6e72:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    6e76:	429e      	cmp	r6, r3
    6e78:	d02b      	beq.n	6ed2 <clock_stop+0x8c>
    6e7a:	2500      	movs	r5, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    6e7c:	f242 7410 	movw	r4, #10000	; 0x2710
    6e80:	e02f      	b.n	6ee2 <clock_stop+0x9c>
    p_reg->INTENCLR = mask;
    6e82:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6e86:	2201      	movs	r2, #1
    6e88:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6e8c:	2100      	movs	r1, #0
    6e8e:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    6e92:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6e96:	605a      	str	r2, [r3, #4]
}
    6e98:	e7ea      	b.n	6e70 <clock_stop+0x2a>
    p_reg->INTENCLR = mask;
    6e9a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6e9e:	f44f 7200 	mov.w	r2, #512	; 0x200
    6ea2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6ea6:	2200      	movs	r2, #0
    6ea8:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    6eac:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6eb0:	2201      	movs	r2, #1
    6eb2:	625a      	str	r2, [r3, #36]	; 0x24
}
    6eb4:	e7dc      	b.n	6e70 <clock_stop+0x2a>
    p_reg->INTENCLR = mask;
    6eb6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6eba:	f44f 7280 	mov.w	r2, #256	; 0x100
    6ebe:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6ec2:	2200      	movs	r2, #0
    6ec4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    6ec8:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6ecc:	2201      	movs	r2, #1
    6ece:	61da      	str	r2, [r3, #28]
}
    6ed0:	e7ce      	b.n	6e70 <clock_stop+0x2a>
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    6ed2:	f10d 0507 	add.w	r5, sp, #7
    6ed6:	e7d1      	b.n	6e7c <clock_stop+0x36>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    6ed8:	2001      	movs	r0, #1
    6eda:	f7ff ff6a 	bl	6db2 <nrfx_busy_wait>
    6ede:	3c01      	subs	r4, #1
    6ee0:	d00c      	beq.n	6efc <clock_stop+0xb6>
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
    6ee2:	462a      	mov	r2, r5
    6ee4:	4631      	mov	r1, r6
    6ee6:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
    6eea:	f7ff ff66 	bl	6dba <nrf_clock_is_running>
    6eee:	b128      	cbz	r0, 6efc <clock_stop+0xb6>
    6ef0:	2d00      	cmp	r5, #0
    6ef2:	d0f1      	beq.n	6ed8 <clock_stop+0x92>
    6ef4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6ef8:	2b01      	cmp	r3, #1
    6efa:	d0ed      	beq.n	6ed8 <clock_stop+0x92>
}
    6efc:	b002      	add	sp, #8
    6efe:	bd70      	pop	{r4, r5, r6, pc}

00006f00 <clock_lfclksrc_tweak>:
{
    6f00:	b538      	push	{r3, r4, r5, lr}
    6f02:	4604      	mov	r4, r0
    bool is_correct_clk = (*p_lfclksrc == NRFX_CLOCK_CONFIG_LF_SRC);
    6f04:	7803      	ldrb	r3, [r0, #0]
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    6f06:	2b02      	cmp	r3, #2
    6f08:	d006      	beq.n	6f18 <clock_lfclksrc_tweak+0x18>
    6f0a:	2b01      	cmp	r3, #1
    6f0c:	d000      	beq.n	6f10 <clock_lfclksrc_tweak+0x10>
    6f0e:	2300      	movs	r3, #0
    if (!is_correct_clk)
    6f10:	461d      	mov	r5, r3
    6f12:	b11b      	cbz	r3, 6f1c <clock_lfclksrc_tweak+0x1c>
}
    6f14:	4628      	mov	r0, r5
    6f16:	bd38      	pop	{r3, r4, r5, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    6f18:	2301      	movs	r3, #1
    6f1a:	e7f9      	b.n	6f10 <clock_lfclksrc_tweak+0x10>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    6f1c:	2000      	movs	r0, #0
    6f1e:	f7ff ff92 	bl	6e46 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    6f22:	f7ff ff84 	bl	6e2e <clock_initial_lfclksrc_get>
    6f26:	7020      	strb	r0, [r4, #0]
    6f28:	e7f4      	b.n	6f14 <clock_lfclksrc_tweak+0x14>

00006f2a <nrfx_clock_enable>:
{
    6f2a:	b508      	push	{r3, lr}
    nrfx_power_clock_irq_init();
    6f2c:	f7ff ff81 	bl	6e32 <nrfx_power_clock_irq_init>
    nrf_clock_lf_src_set(NRF_CLOCK, clock_initial_lfclksrc_get());
    6f30:	f7ff ff7d 	bl	6e2e <clock_initial_lfclksrc_get>
    p_reg->LFCLKSRC = (uint32_t)(source);
    6f34:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6f38:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
}

#if NRF_CLOCK_HAS_HFCLKSRC
NRF_STATIC_INLINE void nrf_clock_hf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLKSRC = (uint32_t)(source);
    6f3c:	2201      	movs	r2, #1
    6f3e:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
    6f42:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
}
    6f46:	bd08      	pop	{r3, pc}

00006f48 <nrfx_clock_start>:
    switch (domain)
    6f48:	2803      	cmp	r0, #3
    6f4a:	d871      	bhi.n	7030 <nrfx_clock_start+0xe8>
    6f4c:	e8df f000 	tbb	[pc, r0]
    6f50:	62544802 	.word	0x62544802
{
    6f54:	b500      	push	{lr}
    6f56:	b083      	sub	sp, #12
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    6f58:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    6f5c:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    6f60:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    6f64:	f88d 3007 	strb.w	r3, [sp, #7]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6f68:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    6f6c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    6f70:	d11d      	bne.n	6fae <nrfx_clock_start+0x66>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    6f72:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6f76:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    6f7a:	f013 0f01 	tst.w	r3, #1
    6f7e:	d11b      	bne.n	6fb8 <nrfx_clock_start+0x70>
                    lfclksrc = clock_initial_lfclksrc_get();
    6f80:	f7ff ff55 	bl	6e2e <clock_initial_lfclksrc_get>
    6f84:	f88d 0007 	strb.w	r0, [sp, #7]
                nrf_clock_lf_src_set(NRF_CLOCK, lfclksrc);
    6f88:	f89d 2007 	ldrb.w	r2, [sp, #7]
    p_reg->LFCLKSRC = (uint32_t)(source);
    6f8c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6f90:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6f94:	2200      	movs	r2, #0
    6f96:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    6f9a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    6f9e:	2202      	movs	r2, #2
    6fa0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6fa4:	2201      	movs	r2, #1
    6fa6:	609a      	str	r2, [r3, #8]
}
    6fa8:	b003      	add	sp, #12
    6faa:	f85d fb04 	ldr.w	pc, [sp], #4
                    (void)clock_lfclksrc_tweak(&lfclksrc);
    6fae:	f10d 0007 	add.w	r0, sp, #7
    6fb2:	f7ff ffa5 	bl	6f00 <clock_lfclksrc_tweak>
    6fb6:	e7e7      	b.n	6f88 <nrfx_clock_start+0x40>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    6fb8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6fbc:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    6fc0:	f003 0303 	and.w	r3, r3, #3
                    lfclksrc = nrf_clock_lf_srccopy_get(NRF_CLOCK);
    6fc4:	f88d 3007 	strb.w	r3, [sp, #7]
                    if (clock_lfclksrc_tweak(&lfclksrc))
    6fc8:	f10d 0007 	add.w	r0, sp, #7
    6fcc:	f7ff ff98 	bl	6f00 <clock_lfclksrc_tweak>
    6fd0:	2800      	cmp	r0, #0
    6fd2:	d0d9      	beq.n	6f88 <nrfx_clock_start+0x40>
    p_reg->INTENSET = mask;
    6fd4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6fd8:	2202      	movs	r2, #2
    6fda:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                        break;
    6fde:	e7e3      	b.n	6fa8 <nrfx_clock_start+0x60>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6fe0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6fe4:	2200      	movs	r2, #0
    6fe6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    6fea:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    6fee:	2201      	movs	r2, #1
    6ff0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6ff4:	601a      	str	r2, [r3, #0]
}
    6ff6:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6ff8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6ffc:	2200      	movs	r2, #0
    6ffe:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    7002:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
    7006:	f44f 7200 	mov.w	r2, #512	; 0x200
    700a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    700e:	2201      	movs	r2, #1
    7010:	621a      	str	r2, [r3, #32]
}
    7012:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7014:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    7018:	2200      	movs	r2, #0
    701a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    701e:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
    7022:	f44f 7280 	mov.w	r2, #256	; 0x100
    7026:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    702a:	2201      	movs	r2, #1
    702c:	619a      	str	r2, [r3, #24]
}
    702e:	4770      	bx	lr
    7030:	4770      	bx	lr

00007032 <nrfx_clock_stop>:
{
    7032:	b508      	push	{r3, lr}
    clock_stop(domain);
    7034:	f7ff ff07 	bl	6e46 <clock_stop>
}
    7038:	bd08      	pop	{r3, pc}

0000703a <nrf_gpiote_event_configure>:
{
    703a:	b410      	push	{r4}
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    703c:	f501 71a2 	add.w	r1, r1, #324	; 0x144
    7040:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    7044:	f424 344f 	bic.w	r4, r4, #211968	; 0x33c00
    7048:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    704c:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    7050:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    7054:	0212      	lsls	r2, r2, #8
    7056:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    705a:	041b      	lsls	r3, r3, #16
    705c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    7060:	431a      	orrs	r2, r3
    7062:	4314      	orrs	r4, r2
    7064:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
    7068:	bc10      	pop	{r4}
    706a:	4770      	bx	lr

0000706c <nrf_gpiote_task_configure>:
{
    706c:	b410      	push	{r4}
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    706e:	f501 71a2 	add.w	r1, r1, #324	; 0x144
    7072:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    7076:	f424 1499 	bic.w	r4, r4, #1253376	; 0x132000
    707a:	f424 54f8 	bic.w	r4, r4, #7936	; 0x1f00
    707e:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    7082:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    7086:	0212      	lsls	r2, r2, #8
    7088:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    708c:	041b      	lsls	r3, r3, #16
    708e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    7092:	431a      	orrs	r2, r3
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    7094:	f89d 3004 	ldrb.w	r3, [sp, #4]
    7098:	051b      	lsls	r3, r3, #20
    709a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    709e:	431a      	orrs	r2, r3
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    70a0:	4314      	orrs	r4, r2
    70a2:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
    70a6:	bc10      	pop	{r4}
    70a8:	4770      	bx	lr

000070aa <nrf_gpio_cfg_sense_set>:
{
    70aa:	b500      	push	{lr}
    70ac:	b085      	sub	sp, #20
    70ae:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    70b2:	f10d 030f 	add.w	r3, sp, #15
    70b6:	9301      	str	r3, [sp, #4]
    70b8:	2100      	movs	r1, #0
    70ba:	9100      	str	r1, [sp, #0]
    70bc:	460b      	mov	r3, r1
    70be:	460a      	mov	r2, r1
    70c0:	f7fc f90a 	bl	32d8 <nrf_gpio_reconfigure>
}
    70c4:	b005      	add	sp, #20
    70c6:	f85d fb04 	ldr.w	pc, [sp], #4

000070ca <pin_is_task_output>:
{
    70ca:	b510      	push	{r4, lr}
    70cc:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    70ce:	f7fc f9b5 	bl	343c <pin_is_output>
    70d2:	b128      	cbz	r0, 70e0 <pin_is_task_output+0x16>
    70d4:	4620      	mov	r0, r4
    70d6:	f7fc f99b 	bl	3410 <pin_in_use_by_te>
    70da:	b118      	cbz	r0, 70e4 <pin_is_task_output+0x1a>
    70dc:	2001      	movs	r0, #1
    70de:	e000      	b.n	70e2 <pin_is_task_output+0x18>
    70e0:	2000      	movs	r0, #0
}
    70e2:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    70e4:	2000      	movs	r0, #0
    70e6:	e7fc      	b.n	70e2 <pin_is_task_output+0x18>

000070e8 <pin_is_input>:
{
    70e8:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
    70ea:	f7fc f9a7 	bl	343c <pin_is_output>
    70ee:	f080 0001 	eor.w	r0, r0, #1
}
    70f2:	b2c0      	uxtb	r0, r0
    70f4:	bd08      	pop	{r3, pc}

000070f6 <gpiote_polarity_to_trigger>:
}
    70f6:	4770      	bx	lr

000070f8 <gpiote_trigger_to_polarity>:
}
    70f8:	4770      	bx	lr

000070fa <is_level>:
}
    70fa:	2803      	cmp	r0, #3
    70fc:	bf94      	ite	ls
    70fe:	2000      	movls	r0, #0
    7100:	2001      	movhi	r0, #1
    7102:	4770      	bx	lr

00007104 <latch_pending_read_and_check>:
{
    7104:	b510      	push	{r4, lr}
    7106:	4604      	mov	r4, r0
    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);
    7108:	4602      	mov	r2, r0
    710a:	2102      	movs	r1, #2
    710c:	2000      	movs	r0, #0
    710e:	f7fc f955 	bl	33bc <nrf_gpio_latches_read_and_clear>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    7112:	2300      	movs	r3, #0
    7114:	2b01      	cmp	r3, #1
    7116:	d804      	bhi.n	7122 <latch_pending_read_and_check+0x1e>
        if (latch[port_idx])
    7118:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    711c:	b91a      	cbnz	r2, 7126 <latch_pending_read_and_check+0x22>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    711e:	3301      	adds	r3, #1
    7120:	e7f8      	b.n	7114 <latch_pending_read_and_check+0x10>
    return false;
    7122:	2000      	movs	r0, #0
}
    7124:	bd10      	pop	{r4, pc}
            return true;
    7126:	2001      	movs	r0, #1
    7128:	e7fc      	b.n	7124 <latch_pending_read_and_check+0x20>

0000712a <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    712a:	b160      	cbz	r0, 7146 <z_device_is_ready+0x1c>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    712c:	68c3      	ldr	r3, [r0, #12]
    712e:	785a      	ldrb	r2, [r3, #1]
    7130:	f012 0f01 	tst.w	r2, #1
    7134:	d003      	beq.n	713e <z_device_is_ready+0x14>
    7136:	781b      	ldrb	r3, [r3, #0]
    7138:	b11b      	cbz	r3, 7142 <z_device_is_ready+0x18>
    713a:	2000      	movs	r0, #0
    713c:	4770      	bx	lr
    713e:	2000      	movs	r0, #0
    7140:	4770      	bx	lr
    7142:	2001      	movs	r0, #1
    7144:	4770      	bx	lr
		return false;
    7146:	2000      	movs	r0, #0
}
    7148:	4770      	bx	lr

0000714a <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    714a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    714c:	4605      	mov	r5, r0
    714e:	460e      	mov	r6, r1
	__asm__ volatile(
    7150:	f04f 0320 	mov.w	r3, #32
    7154:	f3ef 8711 	mrs	r7, BASEPRI
    7158:	f383 8812 	msr	BASEPRI_MAX, r3
    715c:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    7160:	f7fd fc62 	bl	4a28 <z_impl_z_current_get>
    7164:	4604      	mov	r4, r0

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    7166:	4631      	mov	r1, r6
    7168:	4628      	mov	r0, r5
    716a:	f7ff fd79 	bl	6c60 <k_sys_fatal_error_handler>
	__asm__ volatile(
    716e:	f387 8811 	msr	BASEPRI, r7
    7172:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    7176:	4620      	mov	r0, r4
    7178:	f7fa fc00 	bl	197c <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    717c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000717e <z_early_memset>:
{
    717e:	b508      	push	{r3, lr}
	(void) memset(dst, c, n);
    7180:	f7fe ffc3 	bl	610a <memset>
}
    7184:	bd08      	pop	{r3, pc}

00007186 <z_early_memcpy>:
{
    7186:	b508      	push	{r3, lr}
	(void) memcpy(dst, src, n);
    7188:	f7fe ff90 	bl	60ac <memcpy>
}
    718c:	bd08      	pop	{r3, pc}

0000718e <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    718e:	68c2      	ldr	r2, [r0, #12]
    7190:	6903      	ldr	r3, [r0, #16]
    7192:	431a      	orrs	r2, r3
    7194:	f012 0203 	ands.w	r2, r2, #3
    7198:	d10d      	bne.n	71b6 <create_free_list+0x28>
	slab->free_list = NULL;
    719a:	2100      	movs	r1, #0
    719c:	6141      	str	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    719e:	e005      	b.n	71ac <create_free_list+0x1e>
		*(char **)p = slab->free_list;
    71a0:	6941      	ldr	r1, [r0, #20]
    71a2:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
    71a4:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
    71a6:	68c1      	ldr	r1, [r0, #12]
    71a8:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    71aa:	3201      	adds	r2, #1
    71ac:	6881      	ldr	r1, [r0, #8]
    71ae:	4291      	cmp	r1, r2
    71b0:	d8f6      	bhi.n	71a0 <create_free_list+0x12>
	return 0;
    71b2:	2000      	movs	r0, #0
    71b4:	4770      	bx	lr
		return -EINVAL;
    71b6:	f06f 0015 	mvn.w	r0, #21
}
    71ba:	4770      	bx	lr

000071bc <k_mem_slab_init>:
{
    71bc:	b510      	push	{r4, lr}
    71be:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
    71c0:	6083      	str	r3, [r0, #8]
	slab->block_size = block_size;
    71c2:	60c2      	str	r2, [r0, #12]
	slab->buffer = buffer;
    71c4:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
    71c6:	2300      	movs	r3, #0
    71c8:	6183      	str	r3, [r0, #24]
	rc = create_free_list(slab);
    71ca:	f7ff ffe0 	bl	718e <create_free_list>
	if (rc < 0) {
    71ce:	2800      	cmp	r0, #0
    71d0:	db01      	blt.n	71d6 <k_mem_slab_init+0x1a>
	list->head = (sys_dnode_t *)list;
    71d2:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
    71d4:	6064      	str	r4, [r4, #4]
}
    71d6:	bd10      	pop	{r4, pc}

000071d8 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    71d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    71dc:	4604      	mov	r4, r0
    71de:	460d      	mov	r5, r1
	__asm__ volatile(
    71e0:	f04f 0320 	mov.w	r3, #32
    71e4:	f3ef 8611 	mrs	r6, BASEPRI
    71e8:	f383 8812 	msr	BASEPRI_MAX, r3
    71ec:	f3bf 8f6f 	isb	sy
    71f0:	4637      	mov	r7, r6
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    71f2:	6943      	ldr	r3, [r0, #20]
    71f4:	b16b      	cbz	r3, 7212 <k_mem_slab_free+0x3a>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
    71f6:	682b      	ldr	r3, [r5, #0]
    71f8:	6962      	ldr	r2, [r4, #20]
    71fa:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    71fc:	682b      	ldr	r3, [r5, #0]
    71fe:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    7200:	69a3      	ldr	r3, [r4, #24]
    7202:	3b01      	subs	r3, #1
    7204:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    7206:	f387 8811 	msr	BASEPRI, r7
    720a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    720e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7212:	f100 0808 	add.w	r8, r0, #8
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    7216:	f000 f9a0 	bl	755a <z_unpend_first_thread>
		if (pending_thread != NULL) {
    721a:	2800      	cmp	r0, #0
    721c:	d0eb      	beq.n	71f6 <k_mem_slab_free+0x1e>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    721e:	682a      	ldr	r2, [r5, #0]
    7220:	2100      	movs	r1, #0
    7222:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    7226:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    7228:	f000 f8e2 	bl	73f0 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    722c:	4631      	mov	r1, r6
    722e:	4640      	mov	r0, r8
    7230:	f7fd f8c8 	bl	43c4 <z_reschedule>
			return;
    7234:	e7eb      	b.n	720e <k_mem_slab_free+0x36>

00007236 <setup_thread_stack>:
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    7236:	3207      	adds	r2, #7
    7238:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
    723c:	f8c0 109c 	str.w	r1, [r0, #156]	; 0x9c
	new_thread->stack_info.size = stack_buf_size;
    7240:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
	new_thread->stack_info.delta = delta;
    7244:	2300      	movs	r3, #0
    7246:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
}
    724a:	1888      	adds	r0, r1, r2
    724c:	4770      	bx	lr

0000724e <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    724e:	f3ef 8005 	mrs	r0, IPSR
}
    7252:	3800      	subs	r0, #0
    7254:	bf18      	it	ne
    7256:	2001      	movne	r0, #1
    7258:	4770      	bx	lr

0000725a <z_impl_k_thread_start>:
{
    725a:	b508      	push	{r3, lr}
	z_sched_start(thread);
    725c:	f7fd f9dc 	bl	4618 <z_sched_start>
}
    7260:	bd08      	pop	{r3, pc}

00007262 <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
    7262:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
    7264:	2400      	movs	r4, #0
    7266:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
    7268:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    726a:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
    726c:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
    726e:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
    7270:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
    7272:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
    7274:	bc10      	pop	{r4}
    7276:	4770      	bx	lr

00007278 <z_impl_k_thread_create>:
{
    7278:	b5f0      	push	{r4, r5, r6, r7, lr}
    727a:	b087      	sub	sp, #28
    727c:	4604      	mov	r4, r0
    727e:	9e12      	ldr	r6, [sp, #72]	; 0x48
    7280:	9d13      	ldr	r5, [sp, #76]	; 0x4c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    7282:	2700      	movs	r7, #0
    7284:	9705      	str	r7, [sp, #20]
    7286:	9f10      	ldr	r7, [sp, #64]	; 0x40
    7288:	9704      	str	r7, [sp, #16]
    728a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    728c:	9703      	str	r7, [sp, #12]
    728e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    7290:	9702      	str	r7, [sp, #8]
    7292:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    7294:	9701      	str	r7, [sp, #4]
    7296:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    7298:	9700      	str	r7, [sp, #0]
    729a:	f7fc fe39 	bl	3f10 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    729e:	f1b5 3fff 	cmp.w	r5, #4294967295
    72a2:	bf08      	it	eq
    72a4:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    72a8:	d102      	bne.n	72b0 <z_impl_k_thread_create+0x38>
}
    72aa:	4620      	mov	r0, r4
    72ac:	b007      	add	sp, #28
    72ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
    72b0:	4632      	mov	r2, r6
    72b2:	462b      	mov	r3, r5
    72b4:	4620      	mov	r0, r4
    72b6:	f7fc fe1d 	bl	3ef4 <schedule_new_thread>
    72ba:	e7f6      	b.n	72aa <z_impl_k_thread_create+0x32>

000072bc <z_pm_save_idle_exit>:
{
    72bc:	b508      	push	{r3, lr}
	pm_system_resume();
    72be:	f7f9 fe3d 	bl	f3c <pm_system_resume>
	sys_clock_idle_exit();
    72c2:	f7ff fc3d 	bl	6b40 <sys_clock_idle_exit>
}
    72c6:	bd08      	pop	{r3, pc}

000072c8 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
    72c8:	4288      	cmp	r0, r1
    72ca:	da00      	bge.n	72ce <new_prio_for_inheritance+0x6>
    72cc:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    72ce:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
    72d2:	db01      	blt.n	72d8 <new_prio_for_inheritance+0x10>
    72d4:	4608      	mov	r0, r1
    72d6:	4770      	bx	lr
    72d8:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
    72dc:	4770      	bx	lr

000072de <adjust_owner_prio>:
{
    72de:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
    72e0:	6880      	ldr	r0, [r0, #8]
    72e2:	f990 300e 	ldrsb.w	r3, [r0, #14]
    72e6:	428b      	cmp	r3, r1
    72e8:	d101      	bne.n	72ee <adjust_owner_prio+0x10>
	return false;
    72ea:	2000      	movs	r0, #0
}
    72ec:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
    72ee:	f7fd f9e9 	bl	46c4 <z_set_prio>
    72f2:	e7fb      	b.n	72ec <adjust_owner_prio+0xe>

000072f4 <z_impl_k_mutex_init>:
{
    72f4:	4603      	mov	r3, r0
	mutex->owner = NULL;
    72f6:	2000      	movs	r0, #0
    72f8:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
    72fa:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
    72fc:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
    72fe:	605b      	str	r3, [r3, #4]
}
    7300:	4770      	bx	lr

00007302 <thread_active_elsewhere>:
}
    7302:	2000      	movs	r0, #0
    7304:	4770      	bx	lr

00007306 <pended_on_thread>:
}
    7306:	6880      	ldr	r0, [r0, #8]
    7308:	4770      	bx	lr

0000730a <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
    730a:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    730e:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
    7312:	4283      	cmp	r3, r0
    7314:	d001      	beq.n	731a <z_sched_prio_cmp+0x10>
		return b2 - b1;
    7316:	1ac0      	subs	r0, r0, r3
    7318:	4770      	bx	lr
	return 0;
    731a:	2000      	movs	r0, #0
}
    731c:	4770      	bx	lr

0000731e <z_unpend_thread_no_timeout>:
{
    731e:	b538      	push	{r3, r4, r5, lr}
    7320:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
    7322:	2300      	movs	r3, #0
	__asm__ volatile(
    7324:	f04f 0220 	mov.w	r2, #32
    7328:	f3ef 8411 	mrs	r4, BASEPRI
    732c:	f382 8812 	msr	BASEPRI_MAX, r2
    7330:	f3bf 8f6f 	isb	sy
    7334:	e007      	b.n	7346 <z_unpend_thread_no_timeout+0x28>
		unpend_thread_no_timeout(thread);
    7336:	4628      	mov	r0, r5
    7338:	f000 f82a 	bl	7390 <unpend_thread_no_timeout>
	__asm__ volatile(
    733c:	f384 8811 	msr	BASEPRI, r4
    7340:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    7344:	2301      	movs	r3, #1
    7346:	2b00      	cmp	r3, #0
    7348:	d0f5      	beq.n	7336 <z_unpend_thread_no_timeout+0x18>
}
    734a:	bd38      	pop	{r3, r4, r5, pc}

0000734c <z_reschedule_irqlock>:
{
    734c:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    734e:	4603      	mov	r3, r0
    7350:	b928      	cbnz	r0, 735e <z_reschedule_irqlock+0x12>
    7352:	f3ef 8205 	mrs	r2, IPSR
    7356:	b912      	cbnz	r2, 735e <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
    7358:	f7fa f880 	bl	145c <arch_swap>
	return ret;
    735c:	e003      	b.n	7366 <z_reschedule_irqlock+0x1a>
    735e:	f383 8811 	msr	BASEPRI, r3
    7362:	f3bf 8f6f 	isb	sy
}
    7366:	bd08      	pop	{r3, pc}

00007368 <z_reschedule_unlocked>:
{
    7368:	b508      	push	{r3, lr}
	__asm__ volatile(
    736a:	f04f 0320 	mov.w	r3, #32
    736e:	f3ef 8011 	mrs	r0, BASEPRI
    7372:	f383 8812 	msr	BASEPRI_MAX, r3
    7376:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    737a:	f7ff ffe7 	bl	734c <z_reschedule_irqlock>
}
    737e:	bd08      	pop	{r3, pc}

00007380 <z_priq_dumb_remove>:
	sys_dnode_t *const prev = node->prev;
    7380:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
    7382:	680b      	ldr	r3, [r1, #0]
	prev->next = next;
    7384:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    7386:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    7388:	2300      	movs	r3, #0
    738a:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
    738c:	604b      	str	r3, [r1, #4]
}
    738e:	4770      	bx	lr

00007390 <unpend_thread_no_timeout>:
{
    7390:	b510      	push	{r4, lr}
    7392:	4604      	mov	r4, r0
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    7394:	f7ff ffb7 	bl	7306 <pended_on_thread>
    7398:	4621      	mov	r1, r4
    739a:	f7ff fff1 	bl	7380 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    739e:	7b63      	ldrb	r3, [r4, #13]
    73a0:	f023 0302 	bic.w	r3, r3, #2
    73a4:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    73a6:	2300      	movs	r3, #0
    73a8:	60a3      	str	r3, [r4, #8]
}
    73aa:	bd10      	pop	{r4, pc}

000073ac <z_unpend_thread>:
{
    73ac:	b538      	push	{r3, r4, r5, lr}
    73ae:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    73b0:	2300      	movs	r3, #0
    73b2:	f04f 0220 	mov.w	r2, #32
    73b6:	f3ef 8511 	mrs	r5, BASEPRI
    73ba:	f382 8812 	msr	BASEPRI_MAX, r2
    73be:	f3bf 8f6f 	isb	sy
    73c2:	e007      	b.n	73d4 <z_unpend_thread+0x28>
		unpend_thread_no_timeout(thread);
    73c4:	4620      	mov	r0, r4
    73c6:	f7ff ffe3 	bl	7390 <unpend_thread_no_timeout>
	__asm__ volatile(
    73ca:	f385 8811 	msr	BASEPRI, r5
    73ce:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    73d2:	2301      	movs	r3, #1
    73d4:	2b00      	cmp	r3, #0
    73d6:	d0f5      	beq.n	73c4 <z_unpend_thread+0x18>
	return z_abort_timeout(&thread->base.timeout);
    73d8:	f104 0018 	add.w	r0, r4, #24
    73dc:	f000 f928 	bl	7630 <z_abort_timeout>
}
    73e0:	bd38      	pop	{r3, r4, r5, pc}

000073e2 <z_priq_dumb_best>:
{
    73e2:	4603      	mov	r3, r0
	return list->head == list;
    73e4:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    73e6:	4283      	cmp	r3, r0
    73e8:	d000      	beq.n	73ec <z_priq_dumb_best+0xa>
}
    73ea:	4770      	bx	lr
	struct k_thread *thread = NULL;
    73ec:	2000      	movs	r0, #0
	return thread;
    73ee:	e7fc      	b.n	73ea <z_priq_dumb_best+0x8>

000073f0 <z_ready_thread>:
{
    73f0:	b538      	push	{r3, r4, r5, lr}
    73f2:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    73f4:	2300      	movs	r3, #0
	__asm__ volatile(
    73f6:	f04f 0220 	mov.w	r2, #32
    73fa:	f3ef 8511 	mrs	r5, BASEPRI
    73fe:	f382 8812 	msr	BASEPRI_MAX, r2
    7402:	f3bf 8f6f 	isb	sy
    7406:	e004      	b.n	7412 <z_ready_thread+0x22>
	__asm__ volatile(
    7408:	f385 8811 	msr	BASEPRI, r5
    740c:	f3bf 8f6f 	isb	sy
    7410:	2301      	movs	r3, #1
    7412:	b943      	cbnz	r3, 7426 <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
    7414:	4620      	mov	r0, r4
    7416:	f7ff ff74 	bl	7302 <thread_active_elsewhere>
    741a:	2800      	cmp	r0, #0
    741c:	d1f4      	bne.n	7408 <z_ready_thread+0x18>
			ready_thread(thread);
    741e:	4620      	mov	r0, r4
    7420:	f7fd f8be 	bl	45a0 <ready_thread>
    7424:	e7f0      	b.n	7408 <z_ready_thread+0x18>
}
    7426:	bd38      	pop	{r3, r4, r5, pc}

00007428 <z_thread_timeout>:
{
    7428:	b570      	push	{r4, r5, r6, lr}
    742a:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    742c:	f1a0 0618 	sub.w	r6, r0, #24
	LOCKED(&sched_spinlock) {
    7430:	2300      	movs	r3, #0
	__asm__ volatile(
    7432:	f04f 0220 	mov.w	r2, #32
    7436:	f3ef 8511 	mrs	r5, BASEPRI
    743a:	f382 8812 	msr	BASEPRI_MAX, r2
    743e:	f3bf 8f6f 	isb	sy
    7442:	e011      	b.n	7468 <z_thread_timeout+0x40>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    7444:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    7448:	f023 0204 	bic.w	r2, r3, #4
    744c:	f804 2c0b 	strb.w	r2, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    7450:	f023 0314 	bic.w	r3, r3, #20
    7454:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    7458:	4630      	mov	r0, r6
    745a:	f7fd f8a1 	bl	45a0 <ready_thread>
	__asm__ volatile(
    745e:	f385 8811 	msr	BASEPRI, r5
    7462:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    7466:	2301      	movs	r3, #1
    7468:	b963      	cbnz	r3, 7484 <z_thread_timeout+0x5c>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
    746a:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
    746e:	f013 0f28 	tst.w	r3, #40	; 0x28
    7472:	d1f4      	bne.n	745e <z_thread_timeout+0x36>
			if (thread->base.pended_on != NULL) {
    7474:	f854 3c10 	ldr.w	r3, [r4, #-16]
    7478:	2b00      	cmp	r3, #0
    747a:	d0e3      	beq.n	7444 <z_thread_timeout+0x1c>
				unpend_thread_no_timeout(thread);
    747c:	4630      	mov	r0, r6
    747e:	f7ff ff87 	bl	7390 <unpend_thread_no_timeout>
    7482:	e7df      	b.n	7444 <z_thread_timeout+0x1c>
}
    7484:	bd70      	pop	{r4, r5, r6, pc}

00007486 <unpend_all>:
{
    7486:	b538      	push	{r3, r4, r5, lr}
    7488:	4605      	mov	r5, r0
	return list->head == list;
    748a:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    748c:	42a5      	cmp	r5, r4
    748e:	d00e      	beq.n	74ae <unpend_all+0x28>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    7490:	b16c      	cbz	r4, 74ae <unpend_all+0x28>
		unpend_thread_no_timeout(thread);
    7492:	4620      	mov	r0, r4
    7494:	f7ff ff7c 	bl	7390 <unpend_thread_no_timeout>
    7498:	f104 0018 	add.w	r0, r4, #24
    749c:	f000 f8c8 	bl	7630 <z_abort_timeout>
    74a0:	2300      	movs	r3, #0
    74a2:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
		ready_thread(thread);
    74a6:	4620      	mov	r0, r4
    74a8:	f7fd f87a 	bl	45a0 <ready_thread>
    74ac:	e7ed      	b.n	748a <unpend_all+0x4>
}
    74ae:	bd38      	pop	{r3, r4, r5, pc}

000074b0 <add_to_waitq_locked>:
{
    74b0:	b570      	push	{r4, r5, r6, lr}
    74b2:	4605      	mov	r5, r0
    74b4:	460e      	mov	r6, r1
	unready_thread(thread);
    74b6:	f7fd f8cd 	bl	4654 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    74ba:	7b6b      	ldrb	r3, [r5, #13]
    74bc:	f043 0302 	orr.w	r3, r3, #2
    74c0:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
    74c2:	b1fe      	cbz	r6, 7504 <add_to_waitq_locked+0x54>
		thread->base.pended_on = wait_q;
    74c4:	60ae      	str	r6, [r5, #8]
	return list->head == list;
    74c6:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    74c8:	42a6      	cmp	r6, r4
    74ca:	d108      	bne.n	74de <add_to_waitq_locked+0x2e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    74cc:	2400      	movs	r4, #0
    74ce:	e006      	b.n	74de <add_to_waitq_locked+0x2e>
	sys_dnode_t *const prev = successor->prev;
    74d0:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    74d2:	606b      	str	r3, [r5, #4]
	node->next = successor;
    74d4:	602c      	str	r4, [r5, #0]
	prev->next = node;
    74d6:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    74d8:	6065      	str	r5, [r4, #4]
}
    74da:	e013      	b.n	7504 <add_to_waitq_locked+0x54>
    74dc:	2400      	movs	r4, #0
    74de:	b164      	cbz	r4, 74fa <add_to_waitq_locked+0x4a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    74e0:	4621      	mov	r1, r4
    74e2:	4628      	mov	r0, r5
    74e4:	f7ff ff11 	bl	730a <z_sched_prio_cmp>
    74e8:	2800      	cmp	r0, #0
    74ea:	dcf1      	bgt.n	74d0 <add_to_waitq_locked+0x20>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    74ec:	2c00      	cmp	r4, #0
    74ee:	d0f6      	beq.n	74de <add_to_waitq_locked+0x2e>
	return (node == list->tail) ? NULL : node->next;
    74f0:	6873      	ldr	r3, [r6, #4]
    74f2:	429c      	cmp	r4, r3
    74f4:	d0f2      	beq.n	74dc <add_to_waitq_locked+0x2c>
    74f6:	6824      	ldr	r4, [r4, #0]
    74f8:	e7f1      	b.n	74de <add_to_waitq_locked+0x2e>
	sys_dnode_t *const tail = list->tail;
    74fa:	6873      	ldr	r3, [r6, #4]
	node->next = list;
    74fc:	602e      	str	r6, [r5, #0]
	node->prev = tail;
    74fe:	606b      	str	r3, [r5, #4]
	tail->next = node;
    7500:	601d      	str	r5, [r3, #0]
	list->tail = node;
    7502:	6075      	str	r5, [r6, #4]
}
    7504:	bd70      	pop	{r4, r5, r6, pc}

00007506 <pend_locked>:
{
    7506:	b570      	push	{r4, r5, r6, lr}
    7508:	4604      	mov	r4, r0
    750a:	4616      	mov	r6, r2
    750c:	461d      	mov	r5, r3
	add_to_waitq_locked(thread, wait_q);
    750e:	f7ff ffcf 	bl	74b0 <add_to_waitq_locked>
	add_thread_timeout(thread, timeout);
    7512:	4632      	mov	r2, r6
    7514:	462b      	mov	r3, r5
    7516:	4620      	mov	r0, r4
    7518:	f7fc fef6 	bl	4308 <add_thread_timeout>
}
    751c:	bd70      	pop	{r4, r5, r6, pc}

0000751e <z_unpend1_no_timeout>:
{
    751e:	b570      	push	{r4, r5, r6, lr}
    7520:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    7522:	2300      	movs	r3, #0
	__asm__ volatile(
    7524:	f04f 0220 	mov.w	r2, #32
    7528:	f3ef 8511 	mrs	r5, BASEPRI
    752c:	f382 8812 	msr	BASEPRI_MAX, r2
    7530:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
    7534:	461c      	mov	r4, r3
    7536:	e004      	b.n	7542 <z_unpend1_no_timeout+0x24>
	__asm__ volatile(
    7538:	f385 8811 	msr	BASEPRI, r5
    753c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    7540:	2301      	movs	r3, #1
    7542:	b943      	cbnz	r3, 7556 <z_unpend1_no_timeout+0x38>
		thread = _priq_wait_best(&wait_q->waitq);
    7544:	4630      	mov	r0, r6
    7546:	f7ff ff4c 	bl	73e2 <z_priq_dumb_best>
		if (thread != NULL) {
    754a:	4604      	mov	r4, r0
    754c:	2800      	cmp	r0, #0
    754e:	d0f3      	beq.n	7538 <z_unpend1_no_timeout+0x1a>
			unpend_thread_no_timeout(thread);
    7550:	f7ff ff1e 	bl	7390 <unpend_thread_no_timeout>
    7554:	e7f0      	b.n	7538 <z_unpend1_no_timeout+0x1a>
}
    7556:	4620      	mov	r0, r4
    7558:	bd70      	pop	{r4, r5, r6, pc}

0000755a <z_unpend_first_thread>:
{
    755a:	b570      	push	{r4, r5, r6, lr}
    755c:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    755e:	2300      	movs	r3, #0
	__asm__ volatile(
    7560:	f04f 0220 	mov.w	r2, #32
    7564:	f3ef 8511 	mrs	r5, BASEPRI
    7568:	f382 8812 	msr	BASEPRI_MAX, r2
    756c:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
    7570:	461c      	mov	r4, r3
    7572:	e004      	b.n	757e <z_unpend_first_thread+0x24>
	__asm__ volatile(
    7574:	f385 8811 	msr	BASEPRI, r5
    7578:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    757c:	2301      	movs	r3, #1
    757e:	b963      	cbnz	r3, 759a <z_unpend_first_thread+0x40>
		thread = _priq_wait_best(&wait_q->waitq);
    7580:	4630      	mov	r0, r6
    7582:	f7ff ff2e 	bl	73e2 <z_priq_dumb_best>
		if (thread != NULL) {
    7586:	4604      	mov	r4, r0
    7588:	2800      	cmp	r0, #0
    758a:	d0f3      	beq.n	7574 <z_unpend_first_thread+0x1a>
			unpend_thread_no_timeout(thread);
    758c:	f7ff ff00 	bl	7390 <unpend_thread_no_timeout>
    7590:	f104 0018 	add.w	r0, r4, #24
    7594:	f000 f84c 	bl	7630 <z_abort_timeout>
    7598:	e7ec      	b.n	7574 <z_unpend_first_thread+0x1a>
}
    759a:	4620      	mov	r0, r4
    759c:	bd70      	pop	{r4, r5, r6, pc}

0000759e <init_ready_q>:
	sys_dlist_init(&rq->runq);
    759e:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
    75a0:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
    75a2:	6083      	str	r3, [r0, #8]
}
    75a4:	4770      	bx	lr

000075a6 <z_sched_wake>:
{
    75a6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    75aa:	4606      	mov	r6, r0
    75ac:	4688      	mov	r8, r1
    75ae:	4617      	mov	r7, r2
	LOCKED(&sched_spinlock) {
    75b0:	2300      	movs	r3, #0
	__asm__ volatile(
    75b2:	f04f 0220 	mov.w	r2, #32
    75b6:	f3ef 8511 	mrs	r5, BASEPRI
    75ba:	f382 8812 	msr	BASEPRI_MAX, r2
    75be:	f3bf 8f6f 	isb	sy
	bool ret = false;
    75c2:	4699      	mov	r9, r3
    75c4:	e004      	b.n	75d0 <z_sched_wake+0x2a>
	__asm__ volatile(
    75c6:	f385 8811 	msr	BASEPRI, r5
    75ca:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    75ce:	2301      	movs	r3, #1
    75d0:	b9a3      	cbnz	r3, 75fc <z_sched_wake+0x56>
		thread = _priq_wait_best(&wait_q->waitq);
    75d2:	4630      	mov	r0, r6
    75d4:	f7ff ff05 	bl	73e2 <z_priq_dumb_best>
		if (thread != NULL) {
    75d8:	4604      	mov	r4, r0
    75da:	2800      	cmp	r0, #0
    75dc:	d0f3      	beq.n	75c6 <z_sched_wake+0x20>
    75de:	f8c0 80b0 	str.w	r8, [r0, #176]	; 0xb0
    75e2:	6147      	str	r7, [r0, #20]
			unpend_thread_no_timeout(thread);
    75e4:	f7ff fed4 	bl	7390 <unpend_thread_no_timeout>
    75e8:	f104 0018 	add.w	r0, r4, #24
    75ec:	f000 f820 	bl	7630 <z_abort_timeout>
			ready_thread(thread);
    75f0:	4620      	mov	r0, r4
    75f2:	f7fc ffd5 	bl	45a0 <ready_thread>
			ret = true;
    75f6:	f04f 0901 	mov.w	r9, #1
    75fa:	e7e4      	b.n	75c6 <z_sched_wake+0x20>
}
    75fc:	4648      	mov	r0, r9
    75fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00007602 <remove_timeout>:
{
    7602:	b510      	push	{r4, lr}
    7604:	4604      	mov	r4, r0
	if (next(t) != NULL) {
    7606:	f7fd fa85 	bl	4b14 <next>
    760a:	b148      	cbz	r0, 7620 <remove_timeout+0x1e>
    760c:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
    760e:	6903      	ldr	r3, [r0, #16]
    7610:	6941      	ldr	r1, [r0, #20]
    7612:	6920      	ldr	r0, [r4, #16]
    7614:	181b      	adds	r3, r3, r0
    7616:	6960      	ldr	r0, [r4, #20]
    7618:	eb41 0100 	adc.w	r1, r1, r0
    761c:	6113      	str	r3, [r2, #16]
    761e:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
    7620:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    7622:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
    7624:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    7626:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    7628:	2300      	movs	r3, #0
    762a:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    762c:	6063      	str	r3, [r4, #4]
}
    762e:	bd10      	pop	{r4, pc}

00007630 <z_abort_timeout>:
{
    7630:	b570      	push	{r4, r5, r6, lr}
    7632:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
    7634:	2300      	movs	r3, #0
	__asm__ volatile(
    7636:	f04f 0220 	mov.w	r2, #32
    763a:	f3ef 8611 	mrs	r6, BASEPRI
    763e:	f382 8812 	msr	BASEPRI_MAX, r2
    7642:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
    7646:	f06f 0015 	mvn.w	r0, #21
    764a:	e004      	b.n	7656 <z_abort_timeout+0x26>
	__asm__ volatile(
    764c:	f386 8811 	msr	BASEPRI, r6
    7650:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    7654:	2301      	movs	r3, #1
    7656:	461d      	mov	r5, r3
    7658:	b93b      	cbnz	r3, 766a <z_abort_timeout+0x3a>
	return node->next != NULL;
    765a:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
    765c:	2b00      	cmp	r3, #0
    765e:	d0f5      	beq.n	764c <z_abort_timeout+0x1c>
			remove_timeout(to);
    7660:	4620      	mov	r0, r4
    7662:	f7ff ffce 	bl	7602 <remove_timeout>
			ret = 0;
    7666:	4628      	mov	r0, r5
    7668:	e7f0      	b.n	764c <z_abort_timeout+0x1c>
}
    766a:	bd70      	pop	{r4, r5, r6, pc}

0000766c <z_get_next_timeout_expiry>:
{
    766c:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
    766e:	2300      	movs	r3, #0
	__asm__ volatile(
    7670:	f04f 0220 	mov.w	r2, #32
    7674:	f3ef 8411 	mrs	r4, BASEPRI
    7678:	f382 8812 	msr	BASEPRI_MAX, r2
    767c:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
    7680:	f04f 30ff 	mov.w	r0, #4294967295
    7684:	e006      	b.n	7694 <z_get_next_timeout_expiry+0x28>
		ret = next_timeout();
    7686:	f7fd fa5d 	bl	4b44 <next_timeout>
	__asm__ volatile(
    768a:	f384 8811 	msr	BASEPRI, r4
    768e:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    7692:	2301      	movs	r3, #1
    7694:	2b00      	cmp	r3, #0
    7696:	d0f6      	beq.n	7686 <z_get_next_timeout_expiry+0x1a>
}
    7698:	bd10      	pop	{r4, pc}

0000769a <z_set_timeout_expiry>:
{
    769a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    769c:	4606      	mov	r6, r0
    769e:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
    76a0:	2300      	movs	r3, #0
	__asm__ volatile(
    76a2:	f04f 0220 	mov.w	r2, #32
    76a6:	f3ef 8511 	mrs	r5, BASEPRI
    76aa:	f382 8812 	msr	BASEPRI_MAX, r2
    76ae:	f3bf 8f6f 	isb	sy
    76b2:	e00a      	b.n	76ca <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
    76b4:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
    76b6:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    76ba:	2801      	cmp	r0, #1
    76bc:	dd00      	ble.n	76c0 <z_set_timeout_expiry+0x26>
    76be:	b97c      	cbnz	r4, 76e0 <z_set_timeout_expiry+0x46>
	__asm__ volatile(
    76c0:	f385 8811 	msr	BASEPRI, r5
    76c4:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    76c8:	2301      	movs	r3, #1
    76ca:	461c      	mov	r4, r3
    76cc:	b97b      	cbnz	r3, 76ee <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
    76ce:	f7fd fa39 	bl	4b44 <next_timeout>
			      || (ticks <= next_to);
    76d2:	f1b0 3fff 	cmp.w	r0, #4294967295
    76d6:	d0ed      	beq.n	76b4 <z_set_timeout_expiry+0x1a>
    76d8:	42b0      	cmp	r0, r6
    76da:	dbec      	blt.n	76b6 <z_set_timeout_expiry+0x1c>
    76dc:	2401      	movs	r4, #1
    76de:	e7ea      	b.n	76b6 <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    76e0:	4639      	mov	r1, r7
    76e2:	42b0      	cmp	r0, r6
    76e4:	bfa8      	it	ge
    76e6:	4630      	movge	r0, r6
    76e8:	f7fb fac6 	bl	2c78 <sys_clock_set_timeout>
    76ec:	e7e8      	b.n	76c0 <z_set_timeout_expiry+0x26>
}
    76ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000076f0 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    76f0:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    76f2:	f7fd fb39 	bl	4d68 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    76f6:	bd08      	pop	{r3, pc}

000076f8 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
    76f8:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
    76fa:	f7fd fb35 	bl	4d68 <sys_clock_tick_get>
}
    76fe:	bd08      	pop	{r3, pc}

00007700 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    7700:	b900      	cbnz	r0, 7704 <z_impl_k_busy_wait+0x4>
    7702:	4770      	bx	lr
{
    7704:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    7706:	f7fe fba2 	bl	5e4e <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    770a:	bd08      	pop	{r3, pc}

0000770c <z_reschedule_unlocked>:
{
    770c:	b508      	push	{r3, lr}
	__asm__ volatile(
    770e:	f04f 0320 	mov.w	r3, #32
    7712:	f3ef 8011 	mrs	r0, BASEPRI
    7716:	f383 8812 	msr	BASEPRI_MAX, r3
    771a:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    771e:	f7ff fe15 	bl	734c <z_reschedule_irqlock>
}
    7722:	bd08      	pop	{r3, pc}

00007724 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    7724:	b510      	push	{r4, lr}
    7726:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
    7728:	f7ff ff82 	bl	7630 <z_abort_timeout>

	if (inactive) {
    772c:	b960      	cbnz	r0, 7748 <z_impl_k_timer_stop+0x24>
		return;
	}

	if (timer->stop_fn != NULL) {
    772e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7730:	b10b      	cbz	r3, 7736 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    7732:	4620      	mov	r0, r4
    7734:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    7736:	f104 0018 	add.w	r0, r4, #24
    773a:	f7ff fef0 	bl	751e <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    773e:	b118      	cbz	r0, 7748 <z_impl_k_timer_stop+0x24>
			z_ready_thread(pending_thread);
    7740:	f7ff fe56 	bl	73f0 <z_ready_thread>
			z_reschedule_unlocked();
    7744:	f7ff ffe2 	bl	770c <z_reschedule_unlocked>
		}
	}
}
    7748:	bd10      	pop	{r4, pc}

0000774a <poller_thread>:
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
    774a:	b108      	cbz	r0, 7750 <poller_thread+0x6>
    774c:	3860      	subs	r0, #96	; 0x60
    774e:	4770      	bx	lr
}
    7750:	4770      	bx	lr

00007752 <signal_poller>:
{
    7752:	b538      	push	{r3, r4, r5, lr}
    7754:	460d      	mov	r5, r1
	struct k_thread *thread = poller_thread(event->poller);
    7756:	6880      	ldr	r0, [r0, #8]
    7758:	f7ff fff7 	bl	774a <poller_thread>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
    775c:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_pending(thread)) {
    775e:	f013 0f02 	tst.w	r3, #2
    7762:	d025      	beq.n	77b0 <signal_poller+0x5e>
    7764:	4604      	mov	r4, r0
	return thread->base.timeout.dticks == _EXPIRED;
    7766:	6a82      	ldr	r2, [r0, #40]	; 0x28
    7768:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	if (z_is_thread_timeout_expired(thread)) {
    776a:	f1b3 3fff 	cmp.w	r3, #4294967295
    776e:	bf08      	it	eq
    7770:	f112 0f02 	cmneq.w	r2, #2
    7774:	d01e      	beq.n	77b4 <signal_poller+0x62>
	z_unpend_thread(thread);
    7776:	f7ff fe19 	bl	73ac <z_unpend_thread>
	arch_thread_return_value_set(thread,
    777a:	2d08      	cmp	r5, #8
    777c:	d00a      	beq.n	7794 <signal_poller+0x42>
    777e:	2300      	movs	r3, #0
    7780:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	uint8_t state = thread->base.thread_state;
    7784:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    7786:	f013 0f1f 	tst.w	r3, #31
    778a:	d108      	bne.n	779e <signal_poller+0x4c>
    778c:	69a3      	ldr	r3, [r4, #24]
    778e:	b123      	cbz	r3, 779a <signal_poller+0x48>
    7790:	2300      	movs	r3, #0
    7792:	e005      	b.n	77a0 <signal_poller+0x4e>
    7794:	f06f 0303 	mvn.w	r3, #3
    7798:	e7f2      	b.n	7780 <signal_poller+0x2e>
    779a:	2301      	movs	r3, #1
    779c:	e000      	b.n	77a0 <signal_poller+0x4e>
    779e:	2300      	movs	r3, #0
	if (!z_is_thread_ready(thread)) {
    77a0:	b90b      	cbnz	r3, 77a6 <signal_poller+0x54>
		return 0;
    77a2:	2000      	movs	r0, #0
    77a4:	e005      	b.n	77b2 <signal_poller+0x60>
	z_ready_thread(thread);
    77a6:	4620      	mov	r0, r4
    77a8:	f7ff fe22 	bl	73f0 <z_ready_thread>
	return 0;
    77ac:	2000      	movs	r0, #0
    77ae:	e000      	b.n	77b2 <signal_poller+0x60>
		return 0;
    77b0:	2000      	movs	r0, #0
}
    77b2:	bd38      	pop	{r3, r4, r5, pc}
		return -EAGAIN;
    77b4:	f06f 000a 	mvn.w	r0, #10
    77b8:	e7fb      	b.n	77b2 <signal_poller+0x60>

000077ba <signal_triggered_work>:

extern int z_work_submit_to_queue(struct k_work_q *queue,
			 struct k_work *work);

static int signal_triggered_work(struct k_poll_event *event, uint32_t status)
{
    77ba:	b570      	push	{r4, r5, r6, lr}
	struct z_poller *poller = event->poller;
    77bc:	6884      	ldr	r4, [r0, #8]
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
    77be:	7823      	ldrb	r3, [r4, #0]
    77c0:	b173      	cbz	r3, 77e0 <signal_triggered_work+0x26>
    77c2:	f854 5c04 	ldr.w	r5, [r4, #-4]
    77c6:	b15d      	cbz	r5, 77e0 <signal_triggered_work+0x26>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
    77c8:	f1a4 0614 	sub.w	r6, r4, #20
    77cc:	f104 0014 	add.w	r0, r4, #20
    77d0:	f7ff ff2e 	bl	7630 <z_abort_timeout>
		twork->poll_result = 0;
    77d4:	2300      	movs	r3, #0
    77d6:	62e3      	str	r3, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
    77d8:	4631      	mov	r1, r6
    77da:	4628      	mov	r0, r5
    77dc:	f000 f880 	bl	78e0 <z_work_submit_to_queue>
	}

	return 0;
}
    77e0:	2000      	movs	r0, #0
    77e2:	bd70      	pop	{r4, r5, r6, pc}

000077e4 <signal_poll_event>:
{
    77e4:	b570      	push	{r4, r5, r6, lr}
    77e6:	4604      	mov	r4, r0
    77e8:	460d      	mov	r5, r1
	struct z_poller *poller = event->poller;
    77ea:	6886      	ldr	r6, [r0, #8]
	if (poller != NULL) {
    77ec:	b1d6      	cbz	r6, 7824 <signal_poll_event+0x40>
		if (poller->mode == MODE_POLL) {
    77ee:	7873      	ldrb	r3, [r6, #1]
    77f0:	2b01      	cmp	r3, #1
    77f2:	d00d      	beq.n	7810 <signal_poll_event+0x2c>
		} else if (poller->mode == MODE_TRIGGERED) {
    77f4:	2b02      	cmp	r3, #2
    77f6:	d012      	beq.n	781e <signal_poll_event+0x3a>
		poller->is_polling = false;
    77f8:	2000      	movs	r0, #0
    77fa:	7030      	strb	r0, [r6, #0]
	event->poller = NULL;
    77fc:	2300      	movs	r3, #0
    77fe:	60a3      	str	r3, [r4, #8]
	event->state |= state;
    7800:	68e3      	ldr	r3, [r4, #12]
    7802:	f3c3 3286 	ubfx	r2, r3, #14, #7
    7806:	432a      	orrs	r2, r5
    7808:	f362 3394 	bfi	r3, r2, #14, #7
    780c:	60e3      	str	r3, [r4, #12]
}
    780e:	bd70      	pop	{r4, r5, r6, pc}
			retcode = signal_poller(event, state);
    7810:	f7ff ff9f 	bl	7752 <signal_poller>
		poller->is_polling = false;
    7814:	2300      	movs	r3, #0
    7816:	7033      	strb	r3, [r6, #0]
		if (retcode < 0) {
    7818:	4298      	cmp	r0, r3
    781a:	daef      	bge.n	77fc <signal_poll_event+0x18>
    781c:	e7f7      	b.n	780e <signal_poll_event+0x2a>
			retcode = signal_triggered_work(event, state);
    781e:	f7ff ffcc 	bl	77ba <signal_triggered_work>
    7822:	e7f7      	b.n	7814 <signal_poll_event+0x30>
	int retcode = 0;
    7824:	2000      	movs	r0, #0
    7826:	e7e9      	b.n	77fc <signal_poll_event+0x18>

00007828 <z_handle_obj_poll_events>:
{
    7828:	b508      	push	{r3, lr}
    782a:	4603      	mov	r3, r0
	return list->head == list;
    782c:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
    782e:	4283      	cmp	r3, r0
    7830:	d008      	beq.n	7844 <z_handle_obj_poll_events+0x1c>
	sys_dnode_t *const prev = node->prev;
    7832:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
    7834:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
    7836:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    7838:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    783a:	2300      	movs	r3, #0
    783c:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
    783e:	6043      	str	r3, [r0, #4]
		(void) signal_poll_event(poll_event, state);
    7840:	f7ff ffd0 	bl	77e4 <signal_poll_event>
}
    7844:	bd08      	pop	{r3, pc}

00007846 <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode)
    7846:	460b      	mov	r3, r1
    7848:	b139      	cbz	r1, 785a <sys_slist_remove+0x14>
	return node->next;
    784a:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
    784c:	6019      	str	r1, [r3, #0]
	return list->tail;
    784e:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
    7850:	428a      	cmp	r2, r1
    7852:	d009      	beq.n	7868 <sys_slist_remove+0x22>
	parent->next = child;
    7854:	2300      	movs	r3, #0
    7856:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    7858:	4770      	bx	lr
	return node->next;
    785a:	6813      	ldr	r3, [r2, #0]
	list->head = node;
    785c:	6003      	str	r3, [r0, #0]
	return list->tail;
    785e:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
    7860:	428a      	cmp	r2, r1
    7862:	d1f7      	bne.n	7854 <sys_slist_remove+0xe>
	list->tail = node;
    7864:	6043      	str	r3, [r0, #4]
}
    7866:	e7f5      	b.n	7854 <sys_slist_remove+0xe>
	list->tail = node;
    7868:	6043      	str	r3, [r0, #4]
}
    786a:	e7f3      	b.n	7854 <sys_slist_remove+0xe>

0000786c <notify_queue_locked>:
	if (queue != NULL) {
    786c:	b130      	cbz	r0, 787c <notify_queue_locked+0x10>
{
    786e:	b508      	push	{r3, lr}
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    7870:	2200      	movs	r2, #0
    7872:	4611      	mov	r1, r2
    7874:	30c0      	adds	r0, #192	; 0xc0
    7876:	f7ff fe96 	bl	75a6 <z_sched_wake>
}
    787a:	bd08      	pop	{r3, pc}
	bool rv = false;
    787c:	2000      	movs	r0, #0
}
    787e:	4770      	bx	lr

00007880 <submit_to_queue_locked>:
{
    7880:	b570      	push	{r4, r5, r6, lr}
    7882:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
    7884:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    7886:	f013 0f02 	tst.w	r3, #2
    788a:	d122      	bne.n	78d2 <submit_to_queue_locked+0x52>
    788c:	4604      	mov	r4, r0
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    788e:	f013 0f04 	tst.w	r3, #4
    7892:	d123      	bne.n	78dc <submit_to_queue_locked+0x5c>
		if (*queuep == NULL) {
    7894:	680b      	ldr	r3, [r1, #0]
    7896:	b1ab      	cbz	r3, 78c4 <submit_to_queue_locked+0x44>
	return (*flagp & BIT(bit)) != 0U;
    7898:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    789a:	f013 0f01 	tst.w	r3, #1
    789e:	d014      	beq.n	78ca <submit_to_queue_locked+0x4a>
			*queuep = work->queue;
    78a0:	68a3      	ldr	r3, [r4, #8]
    78a2:	602b      	str	r3, [r5, #0]
			ret = 2;
    78a4:	2602      	movs	r6, #2
		int rc = queue_submit_locked(*queuep, work);
    78a6:	4621      	mov	r1, r4
    78a8:	6828      	ldr	r0, [r5, #0]
    78aa:	f7fd fb8f 	bl	4fcc <queue_submit_locked>
		if (rc < 0) {
    78ae:	2800      	cmp	r0, #0
    78b0:	db11      	blt.n	78d6 <submit_to_queue_locked+0x56>
	*flagp |= BIT(bit);
    78b2:	68e3      	ldr	r3, [r4, #12]
    78b4:	f043 0304 	orr.w	r3, r3, #4
    78b8:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    78ba:	682b      	ldr	r3, [r5, #0]
    78bc:	60a3      	str	r3, [r4, #8]
	if (ret <= 0) {
    78be:	b136      	cbz	r6, 78ce <submit_to_queue_locked+0x4e>
    78c0:	4630      	mov	r0, r6
	return ret;
    78c2:	e00a      	b.n	78da <submit_to_queue_locked+0x5a>
			*queuep = work->queue;
    78c4:	6883      	ldr	r3, [r0, #8]
    78c6:	600b      	str	r3, [r1, #0]
    78c8:	e7e6      	b.n	7898 <submit_to_queue_locked+0x18>
		ret = 1;
    78ca:	2601      	movs	r6, #1
    78cc:	e7eb      	b.n	78a6 <submit_to_queue_locked+0x26>
    78ce:	4630      	mov	r0, r6
    78d0:	e001      	b.n	78d6 <submit_to_queue_locked+0x56>
		ret = -EBUSY;
    78d2:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
    78d6:	2300      	movs	r3, #0
    78d8:	602b      	str	r3, [r5, #0]
}
    78da:	bd70      	pop	{r4, r5, r6, pc}
	int ret = 0;
    78dc:	2000      	movs	r0, #0
    78de:	e7fa      	b.n	78d6 <submit_to_queue_locked+0x56>

000078e0 <z_work_submit_to_queue>:
{
    78e0:	b510      	push	{r4, lr}
    78e2:	b082      	sub	sp, #8
    78e4:	9001      	str	r0, [sp, #4]
    78e6:	4608      	mov	r0, r1
    78e8:	f04f 0320 	mov.w	r3, #32
    78ec:	f3ef 8411 	mrs	r4, BASEPRI
    78f0:	f383 8812 	msr	BASEPRI_MAX, r3
    78f4:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
    78f8:	a901      	add	r1, sp, #4
    78fa:	f7ff ffc1 	bl	7880 <submit_to_queue_locked>
	__asm__ volatile(
    78fe:	f384 8811 	msr	BASEPRI, r4
    7902:	f3bf 8f6f 	isb	sy
}
    7906:	b002      	add	sp, #8
    7908:	bd10      	pop	{r4, pc}

0000790a <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    790a:	4770      	bx	lr
