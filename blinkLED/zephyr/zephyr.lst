
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	a8 18 00 20 35 17 00 00 41 54 00 00 ed 16 00 00     ... 5...AT......
  10:	ed 16 00 00 ed 16 00 00 ed 16 00 00 ed 16 00 00     ................
	...
  2c:	b1 13 00 00 ed 16 00 00 00 00 00 00 55 13 00 00     ............U...
  3c:	ed 16 00 00                                         ....

00000040 <_irq_vector_table>:
  40:	41 14 00 00 41 14 00 00 41 14 00 00 41 14 00 00     A...A...A...A...
  50:	41 14 00 00 41 14 00 00 41 14 00 00 41 14 00 00     A...A...A...A...
  60:	41 14 00 00 41 14 00 00 41 14 00 00 41 14 00 00     A...A...A...A...
  70:	41 14 00 00 41 14 00 00 41 14 00 00 41 14 00 00     A...A...A...A...
  80:	41 14 00 00 41 14 00 00 41 14 00 00 41 14 00 00     A...A...A...A...
  90:	41 14 00 00 41 14 00 00 41 14 00 00 41 14 00 00     A...A...A...A...
  a0:	41 14 00 00 41 14 00 00 41 14 00 00 41 14 00 00     A...A...A...A...
  b0:	41 14 00 00 41 14 00 00 41 14 00 00 41 14 00 00     A...A...A...A...
  c0:	41 14 00 00 41 14 00 00 41 14 00 00 41 14 00 00     A...A...A...A...
  d0:	41 14 00 00 41 14 00 00 41 14 00 00 41 14 00 00     A...A...A...A...
  e0:	41 14 00 00 41 14 00 00 41 14 00 00 41 14 00 00     A...A...A...A...
  f0:	41 14 00 00 41 14 00 00 41 14 00 00 41 14 00 00     A...A...A...A...
 100:	41 14 00 00 41 14 00 00 41 14 00 00 41 14 00 00     A...A...A...A...
 110:	41 14 00 00 41 14 00 00 41 14 00 00 41 14 00 00     A...A...A...A...
 120:	41 14 00 00 41 14 00 00 41 14 00 00 41 14 00 00     A...A...A...A...
 130:	41 14 00 00 41 14 00 00 41 14 00 00 41 14 00 00     A...A...A...A...
 140:	41 14 00 00 41 14 00 00 41 14 00 00 41 14 00 00     A...A...A...A...
 150:	41 14 00 00                                         A...

Disassembly of section text:

00000154 <__aeabi_uldivmod>:
     154:	b953      	cbnz	r3, 16c <__aeabi_uldivmod+0x18>
     156:	b94a      	cbnz	r2, 16c <__aeabi_uldivmod+0x18>
     158:	2900      	cmp	r1, #0
     15a:	bf08      	it	eq
     15c:	2800      	cmpeq	r0, #0
     15e:	bf1c      	itt	ne
     160:	f04f 31ff 	movne.w	r1, #4294967295
     164:	f04f 30ff 	movne.w	r0, #4294967295
     168:	f000 b80c 	b.w	184 <__aeabi_idiv0>
     16c:	f1ad 0c08 	sub.w	ip, sp, #8
     170:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     174:	f000 f808 	bl	188 <__udivmoddi4>
     178:	f8dd e004 	ldr.w	lr, [sp, #4]
     17c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     180:	b004      	add	sp, #16
     182:	4770      	bx	lr

00000184 <__aeabi_idiv0>:
     184:	4770      	bx	lr
     186:	bf00      	nop

00000188 <__udivmoddi4>:
     188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     18c:	4686      	mov	lr, r0
     18e:	468c      	mov	ip, r1
     190:	4608      	mov	r0, r1
     192:	9e08      	ldr	r6, [sp, #32]
     194:	4615      	mov	r5, r2
     196:	4674      	mov	r4, lr
     198:	4619      	mov	r1, r3
     19a:	2b00      	cmp	r3, #0
     19c:	f040 80c1 	bne.w	322 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa2>
     1a0:	4285      	cmp	r5, r0
     1a2:	fab2 f282 	clz	r2, r2
     1a6:	d945      	bls.n	234 <CONFIG_SRAM_SIZE+0x74>
     1a8:	b14a      	cbz	r2, 1be <__udivmoddi4+0x36>
     1aa:	f1c2 0320 	rsb	r3, r2, #32
     1ae:	fa00 fc02 	lsl.w	ip, r0, r2
     1b2:	4095      	lsls	r5, r2
     1b4:	4094      	lsls	r4, r2
     1b6:	fa2e f303 	lsr.w	r3, lr, r3
     1ba:	ea43 0c0c 	orr.w	ip, r3, ip
     1be:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1c2:	b2a8      	uxth	r0, r5
     1c4:	0c23      	lsrs	r3, r4, #16
     1c6:	fbbc f8fe 	udiv	r8, ip, lr
     1ca:	fb0e cc18 	mls	ip, lr, r8, ip
     1ce:	fb08 f900 	mul.w	r9, r8, r0
     1d2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     1d6:	4599      	cmp	r9, r3
     1d8:	d928      	bls.n	22c <CONFIG_SRAM_SIZE+0x6c>
     1da:	18eb      	adds	r3, r5, r3
     1dc:	f108 37ff 	add.w	r7, r8, #4294967295
     1e0:	d204      	bcs.n	1ec <CONFIG_SRAM_SIZE+0x2c>
     1e2:	4599      	cmp	r9, r3
     1e4:	d902      	bls.n	1ec <CONFIG_SRAM_SIZE+0x2c>
     1e6:	f1a8 0702 	sub.w	r7, r8, #2
     1ea:	442b      	add	r3, r5
     1ec:	eba3 0309 	sub.w	r3, r3, r9
     1f0:	b2a4      	uxth	r4, r4
     1f2:	fbb3 fcfe 	udiv	ip, r3, lr
     1f6:	fb0e 331c 	mls	r3, lr, ip, r3
     1fa:	fb0c f000 	mul.w	r0, ip, r0
     1fe:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     202:	42a0      	cmp	r0, r4
     204:	d914      	bls.n	230 <CONFIG_SRAM_SIZE+0x70>
     206:	192c      	adds	r4, r5, r4
     208:	f10c 33ff 	add.w	r3, ip, #4294967295
     20c:	d204      	bcs.n	218 <CONFIG_SRAM_SIZE+0x58>
     20e:	42a0      	cmp	r0, r4
     210:	d902      	bls.n	218 <CONFIG_SRAM_SIZE+0x58>
     212:	f1ac 0302 	sub.w	r3, ip, #2
     216:	442c      	add	r4, r5
     218:	1a24      	subs	r4, r4, r0
     21a:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
     21e:	b11e      	cbz	r6, 228 <CONFIG_SRAM_SIZE+0x68>
     220:	40d4      	lsrs	r4, r2
     222:	2300      	movs	r3, #0
     224:	6034      	str	r4, [r6, #0]
     226:	6073      	str	r3, [r6, #4]
     228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     22c:	4647      	mov	r7, r8
     22e:	e7dd      	b.n	1ec <CONFIG_SRAM_SIZE+0x2c>
     230:	4663      	mov	r3, ip
     232:	e7f1      	b.n	218 <CONFIG_SRAM_SIZE+0x58>
     234:	bb92      	cbnz	r2, 29c <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1c>
     236:	1b43      	subs	r3, r0, r5
     238:	2101      	movs	r1, #1
     23a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     23e:	b2af      	uxth	r7, r5
     240:	0c20      	lsrs	r0, r4, #16
     242:	fbb3 fcfe 	udiv	ip, r3, lr
     246:	fb0e 331c 	mls	r3, lr, ip, r3
     24a:	fb0c f807 	mul.w	r8, ip, r7
     24e:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     252:	4598      	cmp	r8, r3
     254:	d961      	bls.n	31a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x9a>
     256:	18eb      	adds	r3, r5, r3
     258:	f10c 30ff 	add.w	r0, ip, #4294967295
     25c:	d204      	bcs.n	268 <CONFIG_SRAM_SIZE+0xa8>
     25e:	4598      	cmp	r8, r3
     260:	d902      	bls.n	268 <CONFIG_SRAM_SIZE+0xa8>
     262:	f1ac 0002 	sub.w	r0, ip, #2
     266:	442b      	add	r3, r5
     268:	eba3 0308 	sub.w	r3, r3, r8
     26c:	b2a4      	uxth	r4, r4
     26e:	fbb3 fcfe 	udiv	ip, r3, lr
     272:	fb0e 331c 	mls	r3, lr, ip, r3
     276:	fb0c f707 	mul.w	r7, ip, r7
     27a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     27e:	42a7      	cmp	r7, r4
     280:	d94d      	bls.n	31e <CONFIG_PM_PARTITION_SIZE_PROVISION+0x9e>
     282:	192c      	adds	r4, r5, r4
     284:	f10c 33ff 	add.w	r3, ip, #4294967295
     288:	d204      	bcs.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
     28a:	42a7      	cmp	r7, r4
     28c:	d902      	bls.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
     28e:	f1ac 0302 	sub.w	r3, ip, #2
     292:	442c      	add	r4, r5
     294:	1be4      	subs	r4, r4, r7
     296:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     29a:	e7c0      	b.n	21e <CONFIG_SRAM_SIZE+0x5e>
     29c:	f1c2 0320 	rsb	r3, r2, #32
     2a0:	4095      	lsls	r5, r2
     2a2:	4094      	lsls	r4, r2
     2a4:	fa20 f103 	lsr.w	r1, r0, r3
     2a8:	fa2e f303 	lsr.w	r3, lr, r3
     2ac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     2b0:	4090      	lsls	r0, r2
     2b2:	b2af      	uxth	r7, r5
     2b4:	4303      	orrs	r3, r0
     2b6:	fbb1 fcfe 	udiv	ip, r1, lr
     2ba:	fb0e 101c 	mls	r0, lr, ip, r1
     2be:	0c19      	lsrs	r1, r3, #16
     2c0:	fb0c f807 	mul.w	r8, ip, r7
     2c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     2c8:	4588      	cmp	r8, r1
     2ca:	d922      	bls.n	312 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x92>
     2cc:	1869      	adds	r1, r5, r1
     2ce:	f10c 30ff 	add.w	r0, ip, #4294967295
     2d2:	d204      	bcs.n	2de <CONFIG_PM_PARTITION_SIZE_PROVISION+0x5e>
     2d4:	4588      	cmp	r8, r1
     2d6:	d902      	bls.n	2de <CONFIG_PM_PARTITION_SIZE_PROVISION+0x5e>
     2d8:	f1ac 0002 	sub.w	r0, ip, #2
     2dc:	4429      	add	r1, r5
     2de:	eba1 0108 	sub.w	r1, r1, r8
     2e2:	b29b      	uxth	r3, r3
     2e4:	fbb1 fcfe 	udiv	ip, r1, lr
     2e8:	fb0e 111c 	mls	r1, lr, ip, r1
     2ec:	fb0c f707 	mul.w	r7, ip, r7
     2f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     2f4:	429f      	cmp	r7, r3
     2f6:	d90e      	bls.n	316 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x96>
     2f8:	18eb      	adds	r3, r5, r3
     2fa:	f10c 31ff 	add.w	r1, ip, #4294967295
     2fe:	d204      	bcs.n	30a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8a>
     300:	429f      	cmp	r7, r3
     302:	d902      	bls.n	30a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8a>
     304:	f1ac 0102 	sub.w	r1, ip, #2
     308:	442b      	add	r3, r5
     30a:	1bdb      	subs	r3, r3, r7
     30c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     310:	e793      	b.n	23a <CONFIG_SRAM_SIZE+0x7a>
     312:	4660      	mov	r0, ip
     314:	e7e3      	b.n	2de <CONFIG_PM_PARTITION_SIZE_PROVISION+0x5e>
     316:	4661      	mov	r1, ip
     318:	e7f7      	b.n	30a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8a>
     31a:	4660      	mov	r0, ip
     31c:	e7a4      	b.n	268 <CONFIG_SRAM_SIZE+0xa8>
     31e:	4663      	mov	r3, ip
     320:	e7b8      	b.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
     322:	4283      	cmp	r3, r0
     324:	d906      	bls.n	334 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xb4>
     326:	b916      	cbnz	r6, 32e <CONFIG_PM_PARTITION_SIZE_PROVISION+0xae>
     328:	2100      	movs	r1, #0
     32a:	4608      	mov	r0, r1
     32c:	e77c      	b.n	228 <CONFIG_SRAM_SIZE+0x68>
     32e:	e9c6 e000 	strd	lr, r0, [r6]
     332:	e7f9      	b.n	328 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa8>
     334:	fab3 f783 	clz	r7, r3
     338:	b98f      	cbnz	r7, 35e <CONFIG_PM_PARTITION_SIZE_PROVISION+0xde>
     33a:	4283      	cmp	r3, r0
     33c:	d301      	bcc.n	342 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xc2>
     33e:	4572      	cmp	r2, lr
     340:	d808      	bhi.n	354 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd4>
     342:	ebbe 0402 	subs.w	r4, lr, r2
     346:	eb60 0303 	sbc.w	r3, r0, r3
     34a:	2001      	movs	r0, #1
     34c:	469c      	mov	ip, r3
     34e:	b91e      	cbnz	r6, 358 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd8>
     350:	2100      	movs	r1, #0
     352:	e769      	b.n	228 <CONFIG_SRAM_SIZE+0x68>
     354:	4638      	mov	r0, r7
     356:	e7fa      	b.n	34e <CONFIG_PM_PARTITION_SIZE_PROVISION+0xce>
     358:	e9c6 4c00 	strd	r4, ip, [r6]
     35c:	e7f8      	b.n	350 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd0>
     35e:	f1c7 0c20 	rsb	ip, r7, #32
     362:	40bb      	lsls	r3, r7
     364:	fa0e f507 	lsl.w	r5, lr, r7
     368:	fa22 f40c 	lsr.w	r4, r2, ip
     36c:	fa2e f10c 	lsr.w	r1, lr, ip
     370:	40ba      	lsls	r2, r7
     372:	431c      	orrs	r4, r3
     374:	fa20 f30c 	lsr.w	r3, r0, ip
     378:	40b8      	lsls	r0, r7
     37a:	ea4f 4914 	mov.w	r9, r4, lsr #16
     37e:	4301      	orrs	r1, r0
     380:	fa1f fe84 	uxth.w	lr, r4
     384:	fbb3 f8f9 	udiv	r8, r3, r9
     388:	fb09 3018 	mls	r0, r9, r8, r3
     38c:	0c0b      	lsrs	r3, r1, #16
     38e:	fb08 fa0e 	mul.w	sl, r8, lr
     392:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     396:	459a      	cmp	sl, r3
     398:	d940      	bls.n	41c <CONFIG_FLASH_SIZE+0x1c>
     39a:	18e3      	adds	r3, r4, r3
     39c:	f108 30ff 	add.w	r0, r8, #4294967295
     3a0:	d204      	bcs.n	3ac <CONFIG_PM_PARTITION_SIZE_PROVISION+0x12c>
     3a2:	459a      	cmp	sl, r3
     3a4:	d902      	bls.n	3ac <CONFIG_PM_PARTITION_SIZE_PROVISION+0x12c>
     3a6:	f1a8 0002 	sub.w	r0, r8, #2
     3aa:	4423      	add	r3, r4
     3ac:	eba3 030a 	sub.w	r3, r3, sl
     3b0:	b289      	uxth	r1, r1
     3b2:	fbb3 f8f9 	udiv	r8, r3, r9
     3b6:	fb09 3318 	mls	r3, r9, r8, r3
     3ba:	fb08 fe0e 	mul.w	lr, r8, lr
     3be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     3c2:	458e      	cmp	lr, r1
     3c4:	d92c      	bls.n	420 <CONFIG_FLASH_SIZE+0x20>
     3c6:	1861      	adds	r1, r4, r1
     3c8:	f108 33ff 	add.w	r3, r8, #4294967295
     3cc:	d204      	bcs.n	3d8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x158>
     3ce:	458e      	cmp	lr, r1
     3d0:	d902      	bls.n	3d8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x158>
     3d2:	f1a8 0302 	sub.w	r3, r8, #2
     3d6:	4421      	add	r1, r4
     3d8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     3dc:	eba1 010e 	sub.w	r1, r1, lr
     3e0:	fba0 9802 	umull	r9, r8, r0, r2
     3e4:	4541      	cmp	r1, r8
     3e6:	46ce      	mov	lr, r9
     3e8:	4643      	mov	r3, r8
     3ea:	d302      	bcc.n	3f2 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x172>
     3ec:	d106      	bne.n	3fc <CONFIG_PM_PARTITION_SIZE_PROVISION+0x17c>
     3ee:	454d      	cmp	r5, r9
     3f0:	d204      	bcs.n	3fc <CONFIG_PM_PARTITION_SIZE_PROVISION+0x17c>
     3f2:	3801      	subs	r0, #1
     3f4:	ebb9 0e02 	subs.w	lr, r9, r2
     3f8:	eb68 0304 	sbc.w	r3, r8, r4
     3fc:	2e00      	cmp	r6, #0
     3fe:	d0a7      	beq.n	350 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd0>
     400:	ebb5 020e 	subs.w	r2, r5, lr
     404:	eb61 0103 	sbc.w	r1, r1, r3
     408:	fa01 fc0c 	lsl.w	ip, r1, ip
     40c:	fa22 f307 	lsr.w	r3, r2, r7
     410:	40f9      	lsrs	r1, r7
     412:	ea4c 0303 	orr.w	r3, ip, r3
     416:	e9c6 3100 	strd	r3, r1, [r6]
     41a:	e799      	b.n	350 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd0>
     41c:	4640      	mov	r0, r8
     41e:	e7c5      	b.n	3ac <CONFIG_PM_PARTITION_SIZE_PROVISION+0x12c>
     420:	4643      	mov	r3, r8
     422:	e7d9      	b.n	3d8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x158>

00000424 <main>:
static const struct gpio_dt_spec led = GPIO_DT_SPEC_GET(LED0_NODE, gpios);
static const struct gpio_dt_spec led_1 = GPIO_DT_SPEC_GET(DT_ALIAS(led1), gpios);
static const struct gpio_dt_spec button = GPIO_DT_SPEC_GET(DT_ALIAS(sw0), gpios);

void main(void)
{
     424:	b510      	push	{r4, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
     426:	481d      	ldr	r0, [pc, #116]	; (49c <main+0x78>)
     428:	f006 f80d 	bl	6446 <z_device_is_ready>
	int ret;

	if (!device_is_ready(led.port)) {
     42c:	b900      	cbnz	r0, 430 <main+0xc>
				return;
			}
		}
		k_msleep(SLEEP_TIME_MS);
	}
}
     42e:	bd10      	pop	{r4, pc}
     430:	481a      	ldr	r0, [pc, #104]	; (49c <main+0x78>)
     432:	f006 f808 	bl	6446 <z_device_is_ready>
	if(!device_is_ready(led_1.port)){
     436:	2800      	cmp	r0, #0
     438:	d0f9      	beq.n	42e <main+0xa>
     43a:	4818      	ldr	r0, [pc, #96]	; (49c <main+0x78>)
     43c:	f006 f803 	bl	6446 <z_device_is_ready>
	if(!device_is_ready(button.port)){
     440:	2800      	cmp	r0, #0
     442:	d0f4      	beq.n	42e <main+0xa>
	ret = gpio_pin_configure_dt(&led, GPIO_OUTPUT_ACTIVE);
     444:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
     448:	4815      	ldr	r0, [pc, #84]	; (4a0 <main+0x7c>)
     44a:	f004 fb8f 	bl	4b6c <gpio_pin_configure_dt>
	if (ret < 0) {
     44e:	2800      	cmp	r0, #0
     450:	dbed      	blt.n	42e <main+0xa>
	ret = gpio_pin_configure_dt(&led_1, GPIO_OUTPUT_ACTIVE);
     452:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
     456:	4813      	ldr	r0, [pc, #76]	; (4a4 <main+0x80>)
     458:	f004 fb88 	bl	4b6c <gpio_pin_configure_dt>
	if(ret < 0){
     45c:	2800      	cmp	r0, #0
     45e:	dbe6      	blt.n	42e <main+0xa>
	ret = gpio_pin_configure_dt(&button, GPIO_INPUT);
     460:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     464:	4810      	ldr	r0, [pc, #64]	; (4a8 <main+0x84>)
     466:	f004 fb81 	bl	4b6c <gpio_pin_configure_dt>
	if(ret < 0){
     46a:	2800      	cmp	r0, #0
     46c:	da04      	bge.n	478 <main+0x54>
     46e:	e7de      	b.n	42e <main+0xa>
		k_msleep(SLEEP_TIME_MS);
     470:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     474:	f004 fbab 	bl	4bce <k_msleep>
 * @param spec GPIO specification from devicetree
 * @return a value from gpio_pin_get()
 */
static inline int gpio_pin_get_dt(const struct gpio_dt_spec *spec)
{
	return gpio_pin_get(spec->port, spec->pin);
     478:	2117      	movs	r1, #23
     47a:	4808      	ldr	r0, [pc, #32]	; (49c <main+0x78>)
     47c:	f004 fb8d 	bl	4b9a <gpio_pin_get>
     480:	4604      	mov	r4, r0
		ret = gpio_pin_toggle_dt(&led);
     482:	4807      	ldr	r0, [pc, #28]	; (4a0 <main+0x7c>)
     484:	f004 fb99 	bl	4bba <gpio_pin_toggle_dt>
		if (ret < 0) {
     488:	2800      	cmp	r0, #0
     48a:	dbd0      	blt.n	42e <main+0xa>
		if(val){
     48c:	2c00      	cmp	r4, #0
     48e:	d0ef      	beq.n	470 <main+0x4c>
			ret = gpio_pin_toggle_dt(&led_1);
     490:	4804      	ldr	r0, [pc, #16]	; (4a4 <main+0x80>)
     492:	f004 fb92 	bl	4bba <gpio_pin_toggle_dt>
			if(ret < 0){
     496:	2800      	cmp	r0, #0
     498:	daea      	bge.n	470 <main+0x4c>
     49a:	e7c8      	b.n	42e <main+0xa>
     49c:	0000696c 	.word	0x0000696c
     4a0:	00006c48 	.word	0x00006c48
     4a4:	00006c40 	.word	0x00006c40
     4a8:	00006c38 	.word	0x00006c38

000004ac <char_out>:

	return c;
}

static int char_out(int c, void *ctx_p)
{
     4ac:	b508      	push	{r3, lr}
	(void) ctx_p;
	return _char_out(c);
     4ae:	4b02      	ldr	r3, [pc, #8]	; (4b8 <char_out+0xc>)
     4b0:	681b      	ldr	r3, [r3, #0]
     4b2:	4798      	blx	r3
}
     4b4:	bd08      	pop	{r3, pc}
     4b6:	bf00      	nop
     4b8:	20000000 	.word	0x20000000

000004bc <__printk_hook_install>:
	_char_out = fn;
     4bc:	4b01      	ldr	r3, [pc, #4]	; (4c4 <__printk_hook_install+0x8>)
     4be:	6018      	str	r0, [r3, #0]
}
     4c0:	4770      	bx	lr
     4c2:	bf00      	nop
     4c4:	20000000 	.word	0x20000000

000004c8 <vprintk>:

void vprintk(const char *fmt, va_list ap)
{
     4c8:	b500      	push	{lr}
     4ca:	b083      	sub	sp, #12
     4cc:	4602      	mov	r2, r0
     4ce:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
     4d0:	2100      	movs	r1, #0
     4d2:	9100      	str	r1, [sp, #0]
     4d4:	4802      	ldr	r0, [pc, #8]	; (4e0 <vprintk+0x18>)
     4d6:	f000 f91d 	bl	714 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
     4da:	b003      	add	sp, #12
     4dc:	f85d fb04 	ldr.w	pc, [sp], #4
     4e0:	000004ad 	.word	0x000004ad

000004e4 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     4e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     4e8:	b083      	sub	sp, #12
     4ea:	4604      	mov	r4, r0
     4ec:	4608      	mov	r0, r1
     4ee:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     4f0:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     4f2:	f013 0f08 	tst.w	r3, #8
     4f6:	d105      	bne.n	504 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c>
     4f8:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
     4fc:	2300      	movs	r3, #0
     4fe:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
     500:	9301      	str	r3, [sp, #4]
}
     502:	e055      	b.n	5b0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc8>
		if (evt == EVT_COMPLETE) {
     504:	2901      	cmp	r1, #1
     506:	d009      	beq.n	51c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x34>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     508:	f043 0320 	orr.w	r3, r3, #32
     50c:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     50e:	f385 8811 	msr	BASEPRI, r5
     512:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     516:	b003      	add	sp, #12
     518:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     51c:	f043 0310 	orr.w	r3, r3, #16
     520:	8323      	strh	r3, [r4, #24]
     522:	e7f4      	b.n	50e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x26>
			evt = process_recheck(mgr);
     524:	4620      	mov	r0, r4
     526:	f004 fbac 	bl	4c82 <process_recheck>
     52a:	e043      	b.n	5b4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xcc>
			res = mgr->last_res;
     52c:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
     530:	464a      	mov	r2, r9
     532:	4669      	mov	r1, sp
     534:	4620      	mov	r0, r4
     536:	f004 fbbd 	bl	4cb4 <process_complete>
		onoff_transition_fn transit = NULL;
     53a:	f04f 0800 	mov.w	r8, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     53e:	8b23      	ldrh	r3, [r4, #24]
     540:	f003 0707 	and.w	r7, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     544:	42b7      	cmp	r7, r6
     546:	d069      	beq.n	61c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x134>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     548:	68a2      	ldr	r2, [r4, #8]
     54a:	2a00      	cmp	r2, #0
     54c:	d066      	beq.n	61c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x134>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     54e:	2201      	movs	r2, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     550:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
     554:	8323      	strh	r3, [r4, #24]
     556:	f385 8811 	msr	BASEPRI, r5
     55a:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     55e:	2a00      	cmp	r2, #0
     560:	d164      	bne.n	62c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x144>
     562:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
     564:	b12b      	cbz	r3, 572 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8a>
				notify_all(mgr, &clients, state, res);
     566:	464b      	mov	r3, r9
     568:	463a      	mov	r2, r7
     56a:	4669      	mov	r1, sp
     56c:	4620      	mov	r0, r4
     56e:	f004 fc1a 	bl	4da6 <notify_all>
			if (transit != NULL) {
     572:	f1b8 0f00 	cmp.w	r8, #0
     576:	d002      	beq.n	57e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x96>
				transit(mgr, transition_complete);
     578:	4934      	ldr	r1, [pc, #208]	; (64c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x164>)
     57a:	4620      	mov	r0, r4
     57c:	47c0      	blx	r8
	__asm__ volatile(
     57e:	f04f 0320 	mov.w	r3, #32
     582:	f3ef 8511 	mrs	r5, BASEPRI
     586:	f383 8812 	msr	BASEPRI_MAX, r3
     58a:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     58e:	8b23      	ldrh	r3, [r4, #24]
     590:	f023 0308 	bic.w	r3, r3, #8
     594:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     596:	8b23      	ldrh	r3, [r4, #24]
     598:	f013 0f10 	tst.w	r3, #16
     59c:	d04c      	beq.n	638 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x150>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     59e:	f023 0310 	bic.w	r3, r3, #16
     5a2:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
     5a4:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     5a6:	8b26      	ldrh	r6, [r4, #24]
     5a8:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
     5ac:	2800      	cmp	r0, #0
     5ae:	d0ae      	beq.n	50e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x26>
		if (evt == EVT_RECHECK) {
     5b0:	2802      	cmp	r0, #2
     5b2:	d0b7      	beq.n	524 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x3c>
		if (evt == EVT_NOP) {
     5b4:	2800      	cmp	r0, #0
     5b6:	d0aa      	beq.n	50e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x26>
		if (evt == EVT_COMPLETE) {
     5b8:	3801      	subs	r0, #1
     5ba:	2804      	cmp	r0, #4
     5bc:	d82a      	bhi.n	614 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12c>
     5be:	a301      	add	r3, pc, #4	; (adr r3, 5c4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xdc>)
     5c0:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
     5c4:	0000052d 	.word	0x0000052d
     5c8:	00000615 	.word	0x00000615
     5cc:	000005d9 	.word	0x000005d9
     5d0:	000005ed 	.word	0x000005ed
     5d4:	00000601 	.word	0x00000601
			transit = mgr->transitions->start;
     5d8:	6923      	ldr	r3, [r4, #16]
     5da:	f8d3 8000 	ldr.w	r8, [r3]
			set_state(mgr, ONOFF_STATE_TO_ON);
     5de:	2106      	movs	r1, #6
     5e0:	4620      	mov	r0, r4
     5e2:	f004 fb24 	bl	4c2e <set_state>
		res = 0;
     5e6:	f04f 0900 	mov.w	r9, #0
     5ea:	e7a8      	b.n	53e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x56>
			transit = mgr->transitions->stop;
     5ec:	6923      	ldr	r3, [r4, #16]
     5ee:	f8d3 8004 	ldr.w	r8, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
     5f2:	2104      	movs	r1, #4
     5f4:	4620      	mov	r0, r4
     5f6:	f004 fb1a 	bl	4c2e <set_state>
		res = 0;
     5fa:	f04f 0900 	mov.w	r9, #0
     5fe:	e79e      	b.n	53e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x56>
			transit = mgr->transitions->reset;
     600:	6923      	ldr	r3, [r4, #16]
     602:	f8d3 8008 	ldr.w	r8, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
     606:	2105      	movs	r1, #5
     608:	4620      	mov	r0, r4
     60a:	f004 fb10 	bl	4c2e <set_state>
		res = 0;
     60e:	f04f 0900 	mov.w	r9, #0
     612:	e794      	b.n	53e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x56>
		if (evt == EVT_NOP) {
     614:	f04f 0800 	mov.w	r8, #0
     618:	46c1      	mov	r9, r8
     61a:	e790      	b.n	53e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x56>
     61c:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
     61e:	b10a      	cbz	r2, 624 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x13c>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     620:	2200      	movs	r2, #0
     622:	e795      	b.n	550 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x68>
		    || (transit != NULL)) {
     624:	f1b8 0f00 	cmp.w	r8, #0
     628:	d192      	bne.n	550 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x68>
     62a:	e7b4      	b.n	596 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xae>
				notify_monitors(mgr, state, res);
     62c:	464a      	mov	r2, r9
     62e:	4639      	mov	r1, r7
     630:	4620      	mov	r0, r4
     632:	f004 fb04 	bl	4c3e <notify_monitors>
     636:	e794      	b.n	562 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x7a>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     638:	f013 0f20 	tst.w	r3, #32
     63c:	d004      	beq.n	648 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x160>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     63e:	f023 0320 	bic.w	r3, r3, #32
     642:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
     644:	2002      	movs	r0, #2
     646:	e7ae      	b.n	5a6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xbe>
		evt = EVT_NOP;
     648:	2000      	movs	r0, #0
     64a:	e7ac      	b.n	5a6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xbe>
     64c:	00004dd5 	.word	0x00004dd5

00000650 <extract_flags>:
 *
 * @return a pointer the first character that follows the flags.
 */
static inline const char *extract_flags(struct conversion *conv,
					const char *sp)
{
     650:	4684      	mov	ip, r0
     652:	4608      	mov	r0, r1
	bool loop = true;
     654:	2201      	movs	r2, #1
     656:	e026      	b.n	6a6 <extract_flags+0x56>

	do {
		switch (*sp) {
		case '-':
			conv->flag_dash = true;
     658:	f89c 3000 	ldrb.w	r3, [ip]
     65c:	f043 0304 	orr.w	r3, r3, #4
     660:	f88c 3000 	strb.w	r3, [ip]
			conv->flag_zero = true;
			break;
		default:
			loop = false;
		}
		if (loop) {
     664:	b1f2      	cbz	r2, 6a4 <extract_flags+0x54>
			++sp;
     666:	3001      	adds	r0, #1
     668:	e01c      	b.n	6a4 <extract_flags+0x54>
			conv->flag_plus = true;
     66a:	f89c 3000 	ldrb.w	r3, [ip]
     66e:	f043 0308 	orr.w	r3, r3, #8
     672:	f88c 3000 	strb.w	r3, [ip]
			break;
     676:	e7f5      	b.n	664 <extract_flags+0x14>
			conv->flag_space = true;
     678:	f89c 3000 	ldrb.w	r3, [ip]
     67c:	f043 0310 	orr.w	r3, r3, #16
     680:	f88c 3000 	strb.w	r3, [ip]
			break;
     684:	e7ee      	b.n	664 <extract_flags+0x14>
			conv->flag_hash = true;
     686:	f89c 3000 	ldrb.w	r3, [ip]
     68a:	f043 0320 	orr.w	r3, r3, #32
     68e:	f88c 3000 	strb.w	r3, [ip]
			break;
     692:	e7e7      	b.n	664 <extract_flags+0x14>
			conv->flag_zero = true;
     694:	f89c 3000 	ldrb.w	r3, [ip]
     698:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     69c:	f88c 3000 	strb.w	r3, [ip]
			break;
     6a0:	e7e0      	b.n	664 <extract_flags+0x14>
		switch (*sp) {
     6a2:	2200      	movs	r2, #0
		}
	} while (loop);
     6a4:	b342      	cbz	r2, 6f8 <extract_flags+0xa8>
		switch (*sp) {
     6a6:	7803      	ldrb	r3, [r0, #0]
     6a8:	3b20      	subs	r3, #32
     6aa:	2b10      	cmp	r3, #16
     6ac:	d8f9      	bhi.n	6a2 <extract_flags+0x52>
     6ae:	a101      	add	r1, pc, #4	; (adr r1, 6b4 <extract_flags+0x64>)
     6b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
     6b4:	00000679 	.word	0x00000679
     6b8:	000006a3 	.word	0x000006a3
     6bc:	000006a3 	.word	0x000006a3
     6c0:	00000687 	.word	0x00000687
     6c4:	000006a3 	.word	0x000006a3
     6c8:	000006a3 	.word	0x000006a3
     6cc:	000006a3 	.word	0x000006a3
     6d0:	000006a3 	.word	0x000006a3
     6d4:	000006a3 	.word	0x000006a3
     6d8:	000006a3 	.word	0x000006a3
     6dc:	000006a3 	.word	0x000006a3
     6e0:	0000066b 	.word	0x0000066b
     6e4:	000006a3 	.word	0x000006a3
     6e8:	00000659 	.word	0x00000659
     6ec:	000006a3 	.word	0x000006a3
     6f0:	000006a3 	.word	0x000006a3
     6f4:	00000695 	.word	0x00000695

	/* zero && dash => !zero */
	if (conv->flag_zero && conv->flag_dash) {
     6f8:	f89c 3000 	ldrb.w	r3, [ip]
     6fc:	f003 0344 	and.w	r3, r3, #68	; 0x44
     700:	2b44      	cmp	r3, #68	; 0x44
     702:	d000      	beq.n	706 <extract_flags+0xb6>
	}

	/* space && plus => !plus, handled in emitter code */

	return sp;
}
     704:	4770      	bx	lr
		conv->flag_zero = false;
     706:	f89c 3000 	ldrb.w	r3, [ip]
     70a:	f36f 1386 	bfc	r3, #6, #1
     70e:	f88c 3000 	strb.w	r3, [ip]
     712:	e7f7      	b.n	704 <extract_flags+0xb4>

00000714 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
     714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     718:	b091      	sub	sp, #68	; 0x44
     71a:	4606      	mov	r6, r0
     71c:	460d      	mov	r5, r1
     71e:	4691      	mov	r9, r2
     720:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     722:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     724:	f899 0000 	ldrb.w	r0, [r9]
     728:	2800      	cmp	r0, #0
     72a:	f000 82b9 	beq.w	ca0 <CONFIG_ISR_STACK_SIZE+0x4a0>
		if (*fp != '%') {
     72e:	2825      	cmp	r0, #37	; 0x25
     730:	d008      	beq.n	744 <z_cbvprintf_impl+0x30>
			OUTC(*fp++);
     732:	f109 0901 	add.w	r9, r9, #1
     736:	4629      	mov	r1, r5
     738:	47b0      	blx	r6
     73a:	2800      	cmp	r0, #0
     73c:	f2c0 82b1 	blt.w	ca2 <CONFIG_ISR_STACK_SIZE+0x4a2>
     740:	3401      	adds	r4, #1
			continue;
     742:	e7ef      	b.n	724 <z_cbvprintf_impl+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
     744:	2300      	movs	r3, #0
     746:	9304      	str	r3, [sp, #16]
     748:	9305      	str	r3, [sp, #20]
     74a:	9306      	str	r3, [sp, #24]
     74c:	9307      	str	r3, [sp, #28]
     74e:	9308      	str	r3, [sp, #32]
     750:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
     752:	4649      	mov	r1, r9
     754:	a806      	add	r0, sp, #24
     756:	f004 fd59 	bl	520c <extract_conversion>
     75a:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
     75c:	f89d 3019 	ldrb.w	r3, [sp, #25]
     760:	f013 0f01 	tst.w	r3, #1
     764:	f000 8097 	beq.w	896 <CONFIG_ISR_STACK_SIZE+0x96>
			width = va_arg(ap, int);
     768:	9b03      	ldr	r3, [sp, #12]
     76a:	1d1a      	adds	r2, r3, #4
     76c:	9203      	str	r2, [sp, #12]
     76e:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
     770:	2f00      	cmp	r7, #0
     772:	f2c0 8088 	blt.w	886 <CONFIG_ISR_STACK_SIZE+0x86>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
     776:	f89d 3019 	ldrb.w	r3, [sp, #25]
     77a:	f013 0f04 	tst.w	r3, #4
     77e:	f000 809c 	beq.w	8ba <CONFIG_ISR_STACK_SIZE+0xba>
			int arg = va_arg(ap, int);
     782:	9b03      	ldr	r3, [sp, #12]
     784:	1d1a      	adds	r2, r3, #4
     786:	9203      	str	r2, [sp, #12]
     788:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
     78c:	f1ba 0f00 	cmp.w	sl, #0
     790:	f2c0 808a 	blt.w	8a8 <CONFIG_ISR_STACK_SIZE+0xa8>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
     794:	2300      	movs	r3, #0
     796:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
     798:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
     79a:	f89d 301a 	ldrb.w	r3, [sp, #26]
     79e:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
     7a2:	f89d 1019 	ldrb.w	r1, [sp, #25]
     7a6:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
     7aa:	2b01      	cmp	r3, #1
     7ac:	f000 808e 	beq.w	8cc <CONFIG_ISR_STACK_SIZE+0xcc>
			if (length_mod == LENGTH_HH) {
				value->sint = (signed char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
     7b0:	2b02      	cmp	r3, #2
     7b2:	f000 80d3 	beq.w	95c <CONFIG_ISR_STACK_SIZE+0x15c>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
     7b6:	2b04      	cmp	r3, #4
     7b8:	f000 8124 	beq.w	a04 <CONFIG_ISR_STACK_SIZE+0x204>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
     7bc:	2b03      	cmp	r3, #3
     7be:	f000 813b 	beq.w	a38 <CONFIG_ISR_STACK_SIZE+0x238>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
     7c2:	f89d 8018 	ldrb.w	r8, [sp, #24]
     7c6:	f018 0b03 	ands.w	fp, r8, #3
     7ca:	f040 813b 	bne.w	a44 <CONFIG_ISR_STACK_SIZE+0x244>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
     7ce:	f89d 301b 	ldrb.w	r3, [sp, #27]
     7d2:	3b25      	subs	r3, #37	; 0x25
     7d4:	2b53      	cmp	r3, #83	; 0x53
     7d6:	f200 81ca 	bhi.w	b6e <CONFIG_ISR_STACK_SIZE+0x36e>
     7da:	e8df f013 	tbh	[pc, r3, lsl #1]
     7de:	0140      	.short	0x0140
     7e0:	01c801c8 	.word	0x01c801c8
     7e4:	01c801c8 	.word	0x01c801c8
     7e8:	01c801c8 	.word	0x01c801c8
     7ec:	01c801c8 	.word	0x01c801c8
     7f0:	01c801c8 	.word	0x01c801c8
     7f4:	01c801c8 	.word	0x01c801c8
     7f8:	01c801c8 	.word	0x01c801c8
     7fc:	01c801c8 	.word	0x01c801c8
     800:	01c801c8 	.word	0x01c801c8
     804:	01c801c8 	.word	0x01c801c8
     808:	01c801c8 	.word	0x01c801c8
     80c:	01c801c8 	.word	0x01c801c8
     810:	01c801c8 	.word	0x01c801c8
     814:	01c801c8 	.word	0x01c801c8
     818:	01c801c8 	.word	0x01c801c8
     81c:	01c801c8 	.word	0x01c801c8
     820:	01c801c8 	.word	0x01c801c8
     824:	01c801c8 	.word	0x01c801c8
     828:	01c801c8 	.word	0x01c801c8
     82c:	01c801c8 	.word	0x01c801c8
     830:	01c801c8 	.word	0x01c801c8
     834:	01c801c8 	.word	0x01c801c8
     838:	01c801c8 	.word	0x01c801c8
     83c:	01c801c8 	.word	0x01c801c8
     840:	01c801c8 	.word	0x01c801c8
     844:	01c80181 	.word	0x01c80181
     848:	01c801c8 	.word	0x01c801c8
     84c:	01c801c8 	.word	0x01c801c8
     850:	01c801c8 	.word	0x01c801c8
     854:	01c801c8 	.word	0x01c801c8
     858:	015e01c8 	.word	0x015e01c8
     85c:	01c80167 	.word	0x01c80167
     860:	01c801c8 	.word	0x01c801c8
     864:	016701c8 	.word	0x016701c8
     868:	01c801c8 	.word	0x01c801c8
     86c:	01c801c8 	.word	0x01c801c8
     870:	018101bd 	.word	0x018101bd
     874:	01c801a1 	.word	0x01c801a1
     878:	014d01c8 	.word	0x014d01c8
     87c:	018101c8 	.word	0x018101c8
     880:	01c801c8 	.word	0x01c801c8
     884:	0181      	.short	0x0181
				conv->flag_dash = true;
     886:	f89d 3018 	ldrb.w	r3, [sp, #24]
     88a:	f043 0304 	orr.w	r3, r3, #4
     88e:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
     892:	427f      	negs	r7, r7
     894:	e76f      	b.n	776 <z_cbvprintf_impl+0x62>
		} else if (conv->width_present) {
     896:	f99d 3018 	ldrsb.w	r3, [sp, #24]
     89a:	2b00      	cmp	r3, #0
     89c:	db02      	blt.n	8a4 <CONFIG_ISR_STACK_SIZE+0xa4>
		int width = -1;
     89e:	f04f 37ff 	mov.w	r7, #4294967295
     8a2:	e768      	b.n	776 <z_cbvprintf_impl+0x62>
			width = conv->width_value;
     8a4:	9f07      	ldr	r7, [sp, #28]
     8a6:	e766      	b.n	776 <z_cbvprintf_impl+0x62>
				conv->prec_present = false;
     8a8:	f89d 3019 	ldrb.w	r3, [sp, #25]
     8ac:	f36f 0341 	bfc	r3, #1, #1
     8b0:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
     8b4:	f04f 3aff 	mov.w	sl, #4294967295
     8b8:	e76c      	b.n	794 <z_cbvprintf_impl+0x80>
		} else if (conv->prec_present) {
     8ba:	f013 0f02 	tst.w	r3, #2
     8be:	d002      	beq.n	8c6 <CONFIG_ISR_STACK_SIZE+0xc6>
			precision = conv->prec_value;
     8c0:	f8dd a020 	ldr.w	sl, [sp, #32]
     8c4:	e766      	b.n	794 <z_cbvprintf_impl+0x80>
		int precision = -1;
     8c6:	f04f 3aff 	mov.w	sl, #4294967295
     8ca:	e763      	b.n	794 <z_cbvprintf_impl+0x80>
			switch (length_mod) {
     8cc:	1ecb      	subs	r3, r1, #3
     8ce:	2b04      	cmp	r3, #4
     8d0:	d804      	bhi.n	8dc <CONFIG_ISR_STACK_SIZE+0xdc>
     8d2:	e8df f003 	tbb	[pc, r3]
     8d6:	1d0b      	.short	0x1d0b
     8d8:	3529      	.short	0x3529
     8da:	35          	.byte	0x35
     8db:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
     8dc:	9b03      	ldr	r3, [sp, #12]
     8de:	1d1a      	adds	r2, r3, #4
     8e0:	9203      	str	r2, [sp, #12]
     8e2:	681b      	ldr	r3, [r3, #0]
     8e4:	17da      	asrs	r2, r3, #31
     8e6:	9304      	str	r3, [sp, #16]
     8e8:	9205      	str	r2, [sp, #20]
				break;
     8ea:	e006      	b.n	8fa <CONFIG_ISR_STACK_SIZE+0xfa>
					value->sint = va_arg(ap, long);
     8ec:	9b03      	ldr	r3, [sp, #12]
     8ee:	1d1a      	adds	r2, r3, #4
     8f0:	9203      	str	r2, [sp, #12]
     8f2:	681b      	ldr	r3, [r3, #0]
     8f4:	17da      	asrs	r2, r3, #31
     8f6:	9304      	str	r3, [sp, #16]
     8f8:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
     8fa:	2901      	cmp	r1, #1
     8fc:	d028      	beq.n	950 <CONFIG_ISR_STACK_SIZE+0x150>
			} else if (length_mod == LENGTH_H) {
     8fe:	2902      	cmp	r1, #2
     900:	f47f af5f 	bne.w	7c2 <z_cbvprintf_impl+0xae>
				value->sint = (short)value->sint;
     904:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
     908:	17da      	asrs	r2, r3, #31
     90a:	9304      	str	r3, [sp, #16]
     90c:	9205      	str	r2, [sp, #20]
     90e:	e758      	b.n	7c2 <z_cbvprintf_impl+0xae>
					(sint_value_type)va_arg(ap, long long);
     910:	9b03      	ldr	r3, [sp, #12]
     912:	3307      	adds	r3, #7
     914:	f023 0307 	bic.w	r3, r3, #7
     918:	f103 0208 	add.w	r2, r3, #8
     91c:	9203      	str	r2, [sp, #12]
     91e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
     922:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
     926:	e7e8      	b.n	8fa <CONFIG_ISR_STACK_SIZE+0xfa>
					(sint_value_type)va_arg(ap, intmax_t);
     928:	9b03      	ldr	r3, [sp, #12]
     92a:	3307      	adds	r3, #7
     92c:	f023 0307 	bic.w	r3, r3, #7
     930:	f103 0208 	add.w	r2, r3, #8
     934:	9203      	str	r2, [sp, #12]
     936:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
     93a:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
     93e:	e7dc      	b.n	8fa <CONFIG_ISR_STACK_SIZE+0xfa>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     940:	9b03      	ldr	r3, [sp, #12]
     942:	1d1a      	adds	r2, r3, #4
     944:	9203      	str	r2, [sp, #12]
     946:	681b      	ldr	r3, [r3, #0]
     948:	17da      	asrs	r2, r3, #31
				value->sint =
     94a:	9304      	str	r3, [sp, #16]
     94c:	9205      	str	r2, [sp, #20]
				break;
     94e:	e7d4      	b.n	8fa <CONFIG_ISR_STACK_SIZE+0xfa>
				value->sint = (signed char)value->sint;
     950:	f99d 3010 	ldrsb.w	r3, [sp, #16]
     954:	17da      	asrs	r2, r3, #31
     956:	9304      	str	r3, [sp, #16]
     958:	9205      	str	r2, [sp, #20]
     95a:	e732      	b.n	7c2 <z_cbvprintf_impl+0xae>
			switch (length_mod) {
     95c:	1ecb      	subs	r3, r1, #3
     95e:	2b04      	cmp	r3, #4
     960:	d804      	bhi.n	96c <CONFIG_ISR_STACK_SIZE+0x16c>
     962:	e8df f003 	tbb	[pc, r3]
     966:	1f0b      	.short	0x1f0b
     968:	4135      	.short	0x4135
     96a:	41          	.byte	0x41
     96b:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
     96c:	9b03      	ldr	r3, [sp, #12]
     96e:	1d1a      	adds	r2, r3, #4
     970:	9203      	str	r2, [sp, #12]
     972:	681b      	ldr	r3, [r3, #0]
     974:	9304      	str	r3, [sp, #16]
     976:	2300      	movs	r3, #0
     978:	9305      	str	r3, [sp, #20]
				break;
     97a:	e01e      	b.n	9ba <CONFIG_ISR_STACK_SIZE+0x1ba>
				    && (conv->specifier == 'c')) {
     97c:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
     980:	2b63      	cmp	r3, #99	; 0x63
     982:	d007      	beq.n	994 <CONFIG_ISR_STACK_SIZE+0x194>
					value->uint = va_arg(ap, unsigned long);
     984:	9b03      	ldr	r3, [sp, #12]
     986:	1d1a      	adds	r2, r3, #4
     988:	9203      	str	r2, [sp, #12]
     98a:	681b      	ldr	r3, [r3, #0]
     98c:	9304      	str	r3, [sp, #16]
     98e:	2300      	movs	r3, #0
     990:	9305      	str	r3, [sp, #20]
     992:	e012      	b.n	9ba <CONFIG_ISR_STACK_SIZE+0x1ba>
					value->uint = (wchar_t)va_arg(ap,
     994:	9b03      	ldr	r3, [sp, #12]
     996:	1d1a      	adds	r2, r3, #4
     998:	9203      	str	r2, [sp, #12]
     99a:	681b      	ldr	r3, [r3, #0]
     99c:	9304      	str	r3, [sp, #16]
     99e:	2300      	movs	r3, #0
     9a0:	9305      	str	r3, [sp, #20]
     9a2:	e00a      	b.n	9ba <CONFIG_ISR_STACK_SIZE+0x1ba>
					(uint_value_type)va_arg(ap,
     9a4:	9b03      	ldr	r3, [sp, #12]
     9a6:	3307      	adds	r3, #7
     9a8:	f023 0307 	bic.w	r3, r3, #7
     9ac:	f103 0208 	add.w	r2, r3, #8
     9b0:	9203      	str	r2, [sp, #12]
     9b2:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
     9b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
     9ba:	2901      	cmp	r1, #1
     9bc:	d01c      	beq.n	9f8 <CONFIG_ISR_STACK_SIZE+0x1f8>
			} else if (length_mod == LENGTH_H) {
     9be:	2902      	cmp	r1, #2
     9c0:	f47f aeff 	bne.w	7c2 <z_cbvprintf_impl+0xae>
				value->uint = (unsigned short)value->uint;
     9c4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
     9c8:	9304      	str	r3, [sp, #16]
     9ca:	2300      	movs	r3, #0
     9cc:	9305      	str	r3, [sp, #20]
     9ce:	e6f8      	b.n	7c2 <z_cbvprintf_impl+0xae>
					(uint_value_type)va_arg(ap,
     9d0:	9b03      	ldr	r3, [sp, #12]
     9d2:	3307      	adds	r3, #7
     9d4:	f023 0307 	bic.w	r3, r3, #7
     9d8:	f103 0208 	add.w	r2, r3, #8
     9dc:	9203      	str	r2, [sp, #12]
     9de:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
     9e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
     9e6:	e7e8      	b.n	9ba <CONFIG_ISR_STACK_SIZE+0x1ba>
					(uint_value_type)va_arg(ap, size_t);
     9e8:	9b03      	ldr	r3, [sp, #12]
     9ea:	1d1a      	adds	r2, r3, #4
     9ec:	9203      	str	r2, [sp, #12]
     9ee:	681b      	ldr	r3, [r3, #0]
				value->uint =
     9f0:	9304      	str	r3, [sp, #16]
     9f2:	2300      	movs	r3, #0
     9f4:	9305      	str	r3, [sp, #20]
				break;
     9f6:	e7e0      	b.n	9ba <CONFIG_ISR_STACK_SIZE+0x1ba>
				value->uint = (unsigned char)value->uint;
     9f8:	f89d 3010 	ldrb.w	r3, [sp, #16]
     9fc:	9304      	str	r3, [sp, #16]
     9fe:	2300      	movs	r3, #0
     a00:	9305      	str	r3, [sp, #20]
     a02:	e6de      	b.n	7c2 <z_cbvprintf_impl+0xae>
			if (length_mod == LENGTH_UPPER_L) {
     a04:	2908      	cmp	r1, #8
     a06:	d00b      	beq.n	a20 <CONFIG_ISR_STACK_SIZE+0x220>
				value->dbl = va_arg(ap, double);
     a08:	9b03      	ldr	r3, [sp, #12]
     a0a:	3307      	adds	r3, #7
     a0c:	f023 0307 	bic.w	r3, r3, #7
     a10:	f103 0208 	add.w	r2, r3, #8
     a14:	9203      	str	r2, [sp, #12]
     a16:	e9d3 2300 	ldrd	r2, r3, [r3]
     a1a:	e9cd 2304 	strd	r2, r3, [sp, #16]
     a1e:	e6d0      	b.n	7c2 <z_cbvprintf_impl+0xae>
				value->ldbl = va_arg(ap, long double);
     a20:	9b03      	ldr	r3, [sp, #12]
     a22:	3307      	adds	r3, #7
     a24:	f023 0307 	bic.w	r3, r3, #7
     a28:	f103 0208 	add.w	r2, r3, #8
     a2c:	9203      	str	r2, [sp, #12]
     a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
     a32:	e9cd 2304 	strd	r2, r3, [sp, #16]
     a36:	e6c4      	b.n	7c2 <z_cbvprintf_impl+0xae>
			value->ptr = va_arg(ap, void *);
     a38:	9b03      	ldr	r3, [sp, #12]
     a3a:	1d1a      	adds	r2, r3, #4
     a3c:	9203      	str	r2, [sp, #12]
     a3e:	681b      	ldr	r3, [r3, #0]
     a40:	9304      	str	r3, [sp, #16]
     a42:	e6be      	b.n	7c2 <z_cbvprintf_impl+0xae>
			OUTS(sp, fp);
     a44:	9f02      	ldr	r7, [sp, #8]
     a46:	463b      	mov	r3, r7
     a48:	464a      	mov	r2, r9
     a4a:	4629      	mov	r1, r5
     a4c:	4630      	mov	r0, r6
     a4e:	f004 fc83 	bl	5358 <outs>
     a52:	2800      	cmp	r0, #0
     a54:	f2c0 8125 	blt.w	ca2 <CONFIG_ISR_STACK_SIZE+0x4a2>
     a58:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
     a5a:	46b9      	mov	r9, r7
			continue;
     a5c:	e662      	b.n	724 <z_cbvprintf_impl+0x10>
		case '%':
			OUTC('%');
     a5e:	4629      	mov	r1, r5
     a60:	2025      	movs	r0, #37	; 0x25
     a62:	47b0      	blx	r6
     a64:	2800      	cmp	r0, #0
     a66:	f2c0 811c 	blt.w	ca2 <CONFIG_ISR_STACK_SIZE+0x4a2>
     a6a:	3401      	adds	r4, #1
		char sign = 0;
     a6c:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
     a6e:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
     a72:	f04f 0900 	mov.w	r9, #0
			break;
     a76:	e07f      	b.n	b78 <CONFIG_ISR_STACK_SIZE+0x378>
		case 's': {
			bps = (const char *)value->ptr;
     a78:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
     a7c:	f1ba 0f00 	cmp.w	sl, #0
     a80:	db07      	blt.n	a92 <CONFIG_ISR_STACK_SIZE+0x292>
				len = strnlen(bps, precision);
     a82:	4651      	mov	r1, sl
     a84:	4648      	mov	r0, r9
     a86:	f004 fda7 	bl	55d8 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
     a8a:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
     a8e:	46d8      	mov	r8, fp
			precision = -1;

			break;
     a90:	e072      	b.n	b78 <CONFIG_ISR_STACK_SIZE+0x378>
				len = strlen(bps);
     a92:	4648      	mov	r0, r9
     a94:	f004 fd97 	bl	55c6 <strlen>
     a98:	e7f7      	b.n	a8a <CONFIG_ISR_STACK_SIZE+0x28a>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     a9a:	9b04      	ldr	r3, [sp, #16]
     a9c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
     aa0:	46d8      	mov	r8, fp
			bpe = buf + 1;
     aa2:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
     aa6:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
     aaa:	e065      	b.n	b78 <CONFIG_ISR_STACK_SIZE+0x378>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
     aac:	f018 0f08 	tst.w	r8, #8
     ab0:	d105      	bne.n	abe <CONFIG_ISR_STACK_SIZE+0x2be>
				sign = '+';
			} else if (conv->flag_space) {
     ab2:	f018 0810 	ands.w	r8, r8, #16
     ab6:	d004      	beq.n	ac2 <CONFIG_ISR_STACK_SIZE+0x2c2>
				sign = ' ';
     ab8:	f04f 0820 	mov.w	r8, #32
     abc:	e001      	b.n	ac2 <CONFIG_ISR_STACK_SIZE+0x2c2>
				sign = '+';
     abe:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
     ac2:	9a04      	ldr	r2, [sp, #16]
     ac4:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
     ac6:	2b00      	cmp	r3, #0
     ac8:	db02      	blt.n	ad0 <CONFIG_ISR_STACK_SIZE+0x2d0>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
     aca:	9204      	str	r2, [sp, #16]
     acc:	9305      	str	r3, [sp, #20]
     ace:	e008      	b.n	ae2 <CONFIG_ISR_STACK_SIZE+0x2e2>
				value->uint = (uint_value_type)-sint;
     ad0:	4252      	negs	r2, r2
     ad2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     ad6:	9204      	str	r2, [sp, #16]
     ad8:	9305      	str	r3, [sp, #20]
				sign = '-';
     ada:	f04f 082d 	mov.w	r8, #45	; 0x2d
     ade:	e000      	b.n	ae2 <CONFIG_ISR_STACK_SIZE+0x2e2>
		switch (conv->specifier) {
     ae0:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
     ae2:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
     ae6:	9300      	str	r3, [sp, #0]
     ae8:	ab0a      	add	r3, sp, #40	; 0x28
     aea:	aa06      	add	r2, sp, #24
     aec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
     af0:	f004 fbc3 	bl	527a <encode_uint>
     af4:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
     af6:	f1ba 0f00 	cmp.w	sl, #0
     afa:	db6c      	blt.n	bd6 <CONFIG_ISR_STACK_SIZE+0x3d6>
				size_t len = bpe - bps;
     afc:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
     b00:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
     b04:	f89d 2018 	ldrb.w	r2, [sp, #24]
     b08:	f36f 1286 	bfc	r2, #6, #1
     b0c:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
     b10:	459a      	cmp	sl, r3
     b12:	d963      	bls.n	bdc <CONFIG_ISR_STACK_SIZE+0x3dc>
					conv->pad0_value = precision - (int)len;
     b14:	ebaa 0303 	sub.w	r3, sl, r3
     b18:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
     b1a:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
     b1e:	e02b      	b.n	b78 <CONFIG_ISR_STACK_SIZE+0x378>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
     b20:	9804      	ldr	r0, [sp, #16]
     b22:	b928      	cbnz	r0, b30 <CONFIG_ISR_STACK_SIZE+0x330>
		char sign = 0;
     b24:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
     b26:	f8df a180 	ldr.w	sl, [pc, #384]	; ca8 <CONFIG_ISR_STACK_SIZE+0x4a8>
			bps = "(nil)";
     b2a:	f1aa 0905 	sub.w	r9, sl, #5
     b2e:	e023      	b.n	b78 <CONFIG_ISR_STACK_SIZE+0x378>
				bps = encode_uint((uintptr_t)value->ptr, conv,
     b30:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
     b34:	9300      	str	r3, [sp, #0]
     b36:	ab0a      	add	r3, sp, #40	; 0x28
     b38:	aa06      	add	r2, sp, #24
     b3a:	2100      	movs	r1, #0
     b3c:	f004 fb9d 	bl	527a <encode_uint>
     b40:	4681      	mov	r9, r0
				conv->altform_0c = true;
     b42:	f89d 301a 	ldrb.w	r3, [sp, #26]
     b46:	f043 0310 	orr.w	r3, r3, #16
     b4a:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
     b4e:	2378      	movs	r3, #120	; 0x78
     b50:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
     b54:	46d8      	mov	r8, fp
				goto prec_int_pad0;
     b56:	e7ce      	b.n	af6 <CONFIG_ISR_STACK_SIZE+0x2f6>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
     b58:	4622      	mov	r2, r4
     b5a:	9904      	ldr	r1, [sp, #16]
     b5c:	a806      	add	r0, sp, #24
     b5e:	f004 fbdc 	bl	531a <store_count>
		char sign = 0;
     b62:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
     b64:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
     b68:	f04f 0900 	mov.w	r9, #0
			}

			break;
     b6c:	e004      	b.n	b78 <CONFIG_ISR_STACK_SIZE+0x378>
		switch (conv->specifier) {
     b6e:	46d8      	mov	r8, fp
     b70:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
     b74:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
     b78:	f1b9 0f00 	cmp.w	r9, #0
     b7c:	f000 808d 	beq.w	c9a <CONFIG_ISR_STACK_SIZE+0x49a>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
     b80:	ebaa 0309 	sub.w	r3, sl, r9
		int pad_len = 0;

		if (sign != 0) {
     b84:	f1b8 0f00 	cmp.w	r8, #0
     b88:	d000      	beq.n	b8c <CONFIG_ISR_STACK_SIZE+0x38c>
			nj_len += 1U;
     b8a:	3301      	adds	r3, #1
		}

		if (conv->altform_0c) {
     b8c:	f89d 201a 	ldrb.w	r2, [sp, #26]
     b90:	f012 0f10 	tst.w	r2, #16
     b94:	d025      	beq.n	be2 <CONFIG_ISR_STACK_SIZE+0x3e2>
			nj_len += 2U;
     b96:	3302      	adds	r3, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
     b98:	9907      	ldr	r1, [sp, #28]
     b9a:	440b      	add	r3, r1
		if (conv->pad_fp) {
     b9c:	f012 0f40 	tst.w	r2, #64	; 0x40
     ba0:	d001      	beq.n	ba6 <CONFIG_ISR_STACK_SIZE+0x3a6>
			nj_len += conv->pad0_pre_exp;
     ba2:	9a08      	ldr	r2, [sp, #32]
     ba4:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
     ba6:	2f00      	cmp	r7, #0
     ba8:	dd31      	ble.n	c0e <CONFIG_ISR_STACK_SIZE+0x40e>
			width -= (int)nj_len;
     baa:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
     bac:	f89d 3018 	ldrb.w	r3, [sp, #24]
     bb0:	f013 0f04 	tst.w	r3, #4
     bb4:	d12b      	bne.n	c0e <CONFIG_ISR_STACK_SIZE+0x40e>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
     bb6:	f013 0f40 	tst.w	r3, #64	; 0x40
     bba:	d017      	beq.n	bec <CONFIG_ISR_STACK_SIZE+0x3ec>
					if (sign != 0) {
     bbc:	f1b8 0f00 	cmp.w	r8, #0
     bc0:	d017      	beq.n	bf2 <CONFIG_ISR_STACK_SIZE+0x3f2>
						OUTC(sign);
     bc2:	4629      	mov	r1, r5
     bc4:	4640      	mov	r0, r8
     bc6:	47b0      	blx	r6
     bc8:	2800      	cmp	r0, #0
     bca:	db6a      	blt.n	ca2 <CONFIG_ISR_STACK_SIZE+0x4a2>
     bcc:	3401      	adds	r4, #1
						sign = 0;
     bce:	46d8      	mov	r8, fp
					}
					pad = '0';
     bd0:	f04f 0b30 	mov.w	fp, #48	; 0x30
     bd4:	e00f      	b.n	bf6 <CONFIG_ISR_STACK_SIZE+0x3f6>
		const char *bpe = buf + sizeof(buf);
     bd6:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
     bda:	e7cd      	b.n	b78 <CONFIG_ISR_STACK_SIZE+0x378>
     bdc:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
     be0:	e7ca      	b.n	b78 <CONFIG_ISR_STACK_SIZE+0x378>
		} else if (conv->altform_0) {
     be2:	f012 0f08 	tst.w	r2, #8
     be6:	d0d7      	beq.n	b98 <CONFIG_ISR_STACK_SIZE+0x398>
			nj_len += 1U;
     be8:	3301      	adds	r3, #1
     bea:	e7d5      	b.n	b98 <CONFIG_ISR_STACK_SIZE+0x398>
				char pad = ' ';
     bec:	f04f 0b20 	mov.w	fp, #32
     bf0:	e001      	b.n	bf6 <CONFIG_ISR_STACK_SIZE+0x3f6>
					pad = '0';
     bf2:	f04f 0b30 	mov.w	fp, #48	; 0x30
     bf6:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
     bf8:	1e5f      	subs	r7, r3, #1
     bfa:	2b00      	cmp	r3, #0
     bfc:	dd07      	ble.n	c0e <CONFIG_ISR_STACK_SIZE+0x40e>
					OUTC(pad);
     bfe:	4629      	mov	r1, r5
     c00:	4658      	mov	r0, fp
     c02:	47b0      	blx	r6
     c04:	2800      	cmp	r0, #0
     c06:	db4c      	blt.n	ca2 <CONFIG_ISR_STACK_SIZE+0x4a2>
     c08:	3401      	adds	r4, #1
				while (width-- > 0) {
     c0a:	463b      	mov	r3, r7
     c0c:	e7f4      	b.n	bf8 <CONFIG_ISR_STACK_SIZE+0x3f8>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
     c0e:	f1b8 0f00 	cmp.w	r8, #0
     c12:	d005      	beq.n	c20 <CONFIG_ISR_STACK_SIZE+0x420>
			OUTC(sign);
     c14:	4629      	mov	r1, r5
     c16:	4640      	mov	r0, r8
     c18:	47b0      	blx	r6
     c1a:	2800      	cmp	r0, #0
     c1c:	db41      	blt.n	ca2 <CONFIG_ISR_STACK_SIZE+0x4a2>
     c1e:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
     c20:	f89d 301a 	ldrb.w	r3, [sp, #26]
     c24:	f3c3 1200 	ubfx	r2, r3, #4, #1
     c28:	f3c3 03c0 	ubfx	r3, r3, #3, #1
     c2c:	431a      	orrs	r2, r3
     c2e:	d005      	beq.n	c3c <CONFIG_ISR_STACK_SIZE+0x43c>
				OUTC('0');
     c30:	4629      	mov	r1, r5
     c32:	2030      	movs	r0, #48	; 0x30
     c34:	47b0      	blx	r6
     c36:	2800      	cmp	r0, #0
     c38:	db33      	blt.n	ca2 <CONFIG_ISR_STACK_SIZE+0x4a2>
     c3a:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
     c3c:	f89d 301a 	ldrb.w	r3, [sp, #26]
     c40:	f013 0f10 	tst.w	r3, #16
     c44:	d006      	beq.n	c54 <CONFIG_ISR_STACK_SIZE+0x454>
				OUTC(conv->specifier);
     c46:	4629      	mov	r1, r5
     c48:	f89d 001b 	ldrb.w	r0, [sp, #27]
     c4c:	47b0      	blx	r6
     c4e:	2800      	cmp	r0, #0
     c50:	db27      	blt.n	ca2 <CONFIG_ISR_STACK_SIZE+0x4a2>
     c52:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
     c54:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
     c56:	f103 38ff 	add.w	r8, r3, #4294967295
     c5a:	2b00      	cmp	r3, #0
     c5c:	dd07      	ble.n	c6e <CONFIG_ISR_STACK_SIZE+0x46e>
				OUTC('0');
     c5e:	4629      	mov	r1, r5
     c60:	2030      	movs	r0, #48	; 0x30
     c62:	47b0      	blx	r6
     c64:	2800      	cmp	r0, #0
     c66:	db1c      	blt.n	ca2 <CONFIG_ISR_STACK_SIZE+0x4a2>
     c68:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
     c6a:	4643      	mov	r3, r8
     c6c:	e7f3      	b.n	c56 <CONFIG_ISR_STACK_SIZE+0x456>
			}

			OUTS(bps, bpe);
     c6e:	4653      	mov	r3, sl
     c70:	464a      	mov	r2, r9
     c72:	4629      	mov	r1, r5
     c74:	4630      	mov	r0, r6
     c76:	f004 fb6f 	bl	5358 <outs>
     c7a:	2800      	cmp	r0, #0
     c7c:	db11      	blt.n	ca2 <CONFIG_ISR_STACK_SIZE+0x4a2>
     c7e:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
     c80:	2f00      	cmp	r7, #0
     c82:	dd07      	ble.n	c94 <CONFIG_ISR_STACK_SIZE+0x494>
			OUTC(' ');
     c84:	4629      	mov	r1, r5
     c86:	2020      	movs	r0, #32
     c88:	47b0      	blx	r6
     c8a:	2800      	cmp	r0, #0
     c8c:	db09      	blt.n	ca2 <CONFIG_ISR_STACK_SIZE+0x4a2>
     c8e:	3401      	adds	r4, #1
			--width;
     c90:	3f01      	subs	r7, #1
     c92:	e7f5      	b.n	c80 <CONFIG_ISR_STACK_SIZE+0x480>
		fp = extract_conversion(conv, sp);
     c94:	f8dd 9008 	ldr.w	r9, [sp, #8]
     c98:	e544      	b.n	724 <z_cbvprintf_impl+0x10>
     c9a:	f8dd 9008 	ldr.w	r9, [sp, #8]
     c9e:	e541      	b.n	724 <z_cbvprintf_impl+0x10>
		}
	}

	return count;
     ca0:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
     ca2:	b011      	add	sp, #68	; 0x44
     ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     ca8:	00006c55 	.word	0x00006c55

00000cac <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
     cac:	b508      	push	{r3, lr}
     cae:	f04f 0220 	mov.w	r2, #32
     cb2:	f3ef 8311 	mrs	r3, BASEPRI
     cb6:	f382 8812 	msr	BASEPRI_MAX, r2
     cba:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
     cbe:	f004 fbf2 	bl	54a6 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
     cc2:	4803      	ldr	r0, [pc, #12]	; (cd0 <sys_reboot+0x24>)
     cc4:	f003 ff9b 	bl	4bfe <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
     cc8:	f000 fac0 	bl	124c <arch_cpu_idle>
     ccc:	e7fc      	b.n	cc8 <sys_reboot+0x1c>
     cce:	bf00      	nop
     cd0:	00006c58 	.word	0x00006c58

00000cd4 <nrfx_coredep_delay_us>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
     cd4:	b168      	cbz	r0, cf2 <nrfx_coredep_delay_us+0x1e>
{
     cd6:	b508      	push	{r3, lr}
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
     cd8:	4a06      	ldr	r2, [pc, #24]	; (cf4 <nrfx_coredep_delay_us+0x20>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
     cda:	4b07      	ldr	r3, [pc, #28]	; (cf8 <nrfx_coredep_delay_us+0x24>)
     cdc:	681b      	ldr	r3, [r3, #0]
     cde:	4907      	ldr	r1, [pc, #28]	; (cfc <nrfx_coredep_delay_us+0x28>)
     ce0:	fba1 1303 	umull	r1, r3, r1, r3
     ce4:	0c9b      	lsrs	r3, r3, #18
    delay_cycles(cycles);
     ce6:	fb00 f003 	mul.w	r0, r0, r3
     cea:	f042 0301 	orr.w	r3, r2, #1
     cee:	4798      	blx	r3
}
     cf0:	bd08      	pop	{r3, pc}
     cf2:	4770      	bx	lr
     cf4:	00006c30 	.word	0x00006c30
     cf8:	20000048 	.word	0x20000048
     cfc:	431bde83 	.word	0x431bde83

00000d00 <nordicsemi_nrf53_init>:
     d00:	f04f 0320 	mov.w	r3, #32
     d04:	f3ef 8c11 	mrs	ip, BASEPRI
     d08:	f383 8812 	msr	BASEPRI_MAX, r3
     d0c:	f3bf 8f6f 	isb	sy

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_cache_enable(NRF_CACHE_Type * p_reg)
{
    p_reg->ENABLE = CACHE_ENABLE_ENABLE_Enabled;
     d10:	2101      	movs	r1, #1
     d12:	4b12      	ldr	r3, [pc, #72]	; (d5c <nordicsemi_nrf53_init+0x5c>)
     d14:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
     d18:	4a11      	ldr	r2, [pc, #68]	; (d60 <nordicsemi_nrf53_init+0x60>)
     d1a:	2302      	movs	r3, #2
     d1c:	f8c2 36d0 	str.w	r3, [r2, #1744]	; 0x6d0

#if NRF_GPIO_HAS_SEL
NRF_STATIC_INLINE void nrf_gpio_pin_control_select(uint32_t pin_number, nrf_gpio_pin_sel_t ctrl)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
     d20:	4810      	ldr	r0, [pc, #64]	; (d64 <nordicsemi_nrf53_init+0x64>)
     d22:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
     d26:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (ctrl << GPIO_PIN_CNF_MCUSEL_Pos);
     d2a:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
     d2e:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
     d32:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
     d36:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (ctrl << GPIO_PIN_CNF_MCUSEL_Pos);
     d3a:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
     d3e:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
     d42:	f8c2 1704 	str.w	r1, [r2, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
     d46:	f8c2 1904 	str.w	r1, [r2, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
     d4a:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
	__asm__ volatile(
     d4e:	f38c 8811 	msr	BASEPRI, ip
     d52:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     d56:	2000      	movs	r0, #0
     d58:	4770      	bx	lr
     d5a:	bf00      	nop
     d5c:	50001000 	.word	0x50001000
     d60:	50004000 	.word	0x50004000
     d64:	50842500 	.word	0x50842500

00000d68 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
     d68:	2806      	cmp	r0, #6
     d6a:	d000      	beq.n	d6e <pm_state_set+0x6>
     d6c:	4770      	bx	lr
{
     d6e:	b508      	push	{r3, lr}
	case PM_STATE_SOFT_OFF:
		nrf_regulators_system_off(NRF_REGULATORS);
     d70:	4801      	ldr	r0, [pc, #4]	; (d78 <pm_state_set+0x10>)
     d72:	f004 fb10 	bl	5396 <nrf_regulators_system_off>
     d76:	bf00      	nop
     d78:	50004000 	.word	0x50004000

00000d7c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
     d7c:	f001 be86 	b.w	2a8c <SystemInit>

00000d80 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
     d80:	b570      	push	{r4, r5, r6, lr}
     d82:	4605      	mov	r5, r0
	__asm__ volatile(
     d84:	f04f 0320 	mov.w	r3, #32
     d88:	f3ef 8611 	mrs	r6, BASEPRI
     d8c:	f383 8812 	msr	BASEPRI_MAX, r3
     d90:	f3bf 8f6f 	isb	sy
     d94:	4b0e      	ldr	r3, [pc, #56]	; (dd0 <pm_state_notify+0x50>)
     d96:	681c      	ldr	r4, [r3, #0]
     d98:	e00d      	b.n	db6 <pm_state_notify+0x36>
	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
		if (entering_state) {
			callback = notifier->state_entry;
		} else {
			callback = notifier->state_exit;
     d9a:	68a2      	ldr	r2, [r4, #8]
		}

		if (callback) {
     d9c:	b13a      	cbz	r2, dae <pm_state_notify+0x2e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
     d9e:	4b0d      	ldr	r3, [pc, #52]	; (dd4 <pm_state_notify+0x54>)
     da0:	7d1b      	ldrb	r3, [r3, #20]
     da2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     da6:	490c      	ldr	r1, [pc, #48]	; (dd8 <pm_state_notify+0x58>)
     da8:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
     dac:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
     dae:	4623      	mov	r3, r4
	return node->next;
     db0:	6824      	ldr	r4, [r4, #0]
     db2:	b104      	cbz	r4, db6 <pm_state_notify+0x36>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
     db4:	b123      	cbz	r3, dc0 <pm_state_notify+0x40>
     db6:	b12c      	cbz	r4, dc4 <pm_state_notify+0x44>
		if (entering_state) {
     db8:	2d00      	cmp	r5, #0
     dba:	d0ee      	beq.n	d9a <pm_state_notify+0x1a>
			callback = notifier->state_entry;
     dbc:	6862      	ldr	r2, [r4, #4]
     dbe:	e7ed      	b.n	d9c <pm_state_notify+0x1c>
     dc0:	461c      	mov	r4, r3
     dc2:	e7f8      	b.n	db6 <pm_state_notify+0x36>
	__asm__ volatile(
     dc4:	f386 8811 	msr	BASEPRI, r6
     dc8:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
     dcc:	bd70      	pop	{r4, r5, r6, pc}
     dce:	bf00      	nop
     dd0:	20000330 	.word	0x20000330
     dd4:	20000950 	.word	0x20000950
     dd8:	20000324 	.word	0x20000324

00000ddc <pm_exit_pos_ops>:
{
     ddc:	b508      	push	{r3, lr}
	if (pm_state_exit_post_ops != NULL) {
     dde:	4b06      	ldr	r3, [pc, #24]	; (df8 <pm_exit_pos_ops+0x1c>)
     de0:	b123      	cbz	r3, dec <pm_exit_pos_ops+0x10>
		pm_state_exit_post_ops(info->state, info->substate_id);
     de2:	7841      	ldrb	r1, [r0, #1]
     de4:	7800      	ldrb	r0, [r0, #0]
     de6:	f004 fadd 	bl	53a4 <pm_state_exit_post_ops>
}
     dea:	bd08      	pop	{r3, pc}
     dec:	2300      	movs	r3, #0
     dee:	f383 8811 	msr	BASEPRI, r3
     df2:	f3bf 8f6f 	isb	sy
     df6:	e7f8      	b.n	dea <pm_exit_pos_ops+0xe>
     df8:	000053a5 	.word	0x000053a5

00000dfc <pm_system_resume>:

void pm_system_resume(void)
{
     dfc:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
     dfe:	4b0e      	ldr	r3, [pc, #56]	; (e38 <pm_system_resume+0x3c>)
     e00:	7d1c      	ldrb	r4, [r3, #20]
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
     e02:	4621      	mov	r1, r4
     e04:	480d      	ldr	r0, [pc, #52]	; (e3c <pm_system_resume+0x40>)
     e06:	f004 fad3 	bl	53b0 <atomic_test_and_clear_bit>
     e0a:	b900      	cbnz	r0, e0e <pm_system_resume+0x12>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
			0, 0};
	}
}
     e0c:	bd70      	pop	{r4, r5, r6, pc}
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
     e0e:	0065      	lsls	r5, r4, #1
     e10:	eb04 0044 	add.w	r0, r4, r4, lsl #1
     e14:	4e0a      	ldr	r6, [pc, #40]	; (e40 <pm_system_resume+0x44>)
     e16:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     e1a:	f7ff ffdf 	bl	ddc <pm_exit_pos_ops>
		pm_state_notify(false);
     e1e:	2000      	movs	r0, #0
     e20:	f7ff ffae 	bl	d80 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
     e24:	192b      	adds	r3, r5, r4
     e26:	0099      	lsls	r1, r3, #2
     e28:	eb06 0383 	add.w	r3, r6, r3, lsl #2
     e2c:	2200      	movs	r2, #0
     e2e:	5072      	str	r2, [r6, r1]
     e30:	605a      	str	r2, [r3, #4]
     e32:	609a      	str	r2, [r3, #8]
}
     e34:	e7ea      	b.n	e0c <pm_system_resume+0x10>
     e36:	bf00      	nop
     e38:	20000950 	.word	0x20000950
     e3c:	20000338 	.word	0x20000338
     e40:	20000324 	.word	0x20000324

00000e44 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
     e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     e46:	4605      	mov	r5, r0
	uint8_t id = CURRENT_CPU;
     e48:	4b38      	ldr	r3, [pc, #224]	; (f2c <pm_system_suspend+0xe8>)
     e4a:	7d1c      	ldrb	r4, [r3, #20]
	__asm__ volatile(
     e4c:	f04f 0320 	mov.w	r3, #32
     e50:	f3ef 8611 	mrs	r6, BASEPRI
     e54:	f383 8812 	msr	BASEPRI_MAX, r3
     e58:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
     e5c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
     e60:	4b33      	ldr	r3, [pc, #204]	; (f30 <pm_system_suspend+0xec>)
     e62:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
     e66:	2b00      	cmp	r3, #0
     e68:	d039      	beq.n	ede <pm_system_suspend+0x9a>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
     e6a:	4b32      	ldr	r3, [pc, #200]	; (f34 <pm_system_suspend+0xf0>)
     e6c:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
     e70:	4f2f      	ldr	r7, [pc, #188]	; (f30 <pm_system_suspend+0xec>)
     e72:	ea4f 0e82 	mov.w	lr, r2, lsl #2
     e76:	eb07 0382 	add.w	r3, r7, r2, lsl #2
     e7a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
     e7e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
     e82:	2300      	movs	r3, #0
     e84:	f807 300e 	strb.w	r3, [r7, lr]
	__asm__ volatile(
     e88:	f386 8811 	msr	BASEPRI, r6
     e8c:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
     e90:	eb04 0344 	add.w	r3, r4, r4, lsl #1
     e94:	4a27      	ldr	r2, [pc, #156]	; (f34 <pm_system_suspend+0xf0>)
     e96:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
     e9a:	2b00      	cmp	r3, #0
     e9c:	d044      	beq.n	f28 <pm_system_suspend+0xe4>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
     e9e:	f1b5 3fff 	cmp.w	r5, #4294967295
     ea2:	d12b      	bne.n	efc <pm_system_suspend+0xb8>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
     ea4:	f002 ffd8 	bl	3e58 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
     ea8:	2001      	movs	r0, #1
     eaa:	f7ff ff69 	bl	d80 <pm_state_notify>
	atomic_set_bit(z_post_ops_required, id);
     eae:	4621      	mov	r1, r4
     eb0:	4821      	ldr	r0, [pc, #132]	; (f38 <pm_system_suspend+0xf4>)
     eb2:	f004 fa95 	bl	53e0 <atomic_set_bit>
	if (pm_state_set != NULL) {
     eb6:	4b21      	ldr	r3, [pc, #132]	; (f3c <pm_system_suspend+0xf8>)
     eb8:	b15b      	cbz	r3, ed2 <pm_system_suspend+0x8e>
		pm_state_set(info->state, info->substate_id);
     eba:	4a1e      	ldr	r2, [pc, #120]	; (f34 <pm_system_suspend+0xf0>)
     ebc:	eb04 0344 	add.w	r3, r4, r4, lsl #1
     ec0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     ec4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
     ec8:	7859      	ldrb	r1, [r3, #1]
     eca:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
     ece:	f7ff ff4b 	bl	d68 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
     ed2:	f7ff ff93 	bl	dfc <pm_system_resume>
	k_sched_unlock();
     ed6:	f003 f9c1 	bl	425c <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
     eda:	2001      	movs	r0, #1
}
     edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		info = pm_policy_next_state(id, ticks);
     ede:	4601      	mov	r1, r0
     ee0:	4620      	mov	r0, r4
     ee2:	f000 f831 	bl	f48 <pm_policy_next_state>
		if (info != NULL) {
     ee6:	2800      	cmp	r0, #0
     ee8:	d0ce      	beq.n	e88 <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
     eea:	eb04 0144 	add.w	r1, r4, r4, lsl #1
     eee:	4b11      	ldr	r3, [pc, #68]	; (f34 <pm_system_suspend+0xf0>)
     ef0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
     ef4:	c807      	ldmia	r0, {r0, r1, r2}
     ef6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
     efa:	e7c5      	b.n	e88 <pm_system_suspend+0x44>
		     k_us_to_ticks_ceil32(
     efc:	eb04 0244 	add.w	r2, r4, r4, lsl #1
     f00:	4b0c      	ldr	r3, [pc, #48]	; (f34 <pm_system_suspend+0xf0>)
     f02:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     f06:	6898      	ldr	r0, [r3, #8]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
     f08:	0c41      	lsrs	r1, r0, #17
     f0a:	03c0      	lsls	r0, r0, #15
     f0c:	4b0c      	ldr	r3, [pc, #48]	; (f40 <pm_system_suspend+0xfc>)
     f0e:	18c0      	adds	r0, r0, r3
     f10:	4a0c      	ldr	r2, [pc, #48]	; (f44 <pm_system_suspend+0x100>)
     f12:	f04f 0300 	mov.w	r3, #0
     f16:	f141 0100 	adc.w	r1, r1, #0
     f1a:	f7ff f91b 	bl	154 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
     f1e:	2101      	movs	r1, #1
     f20:	1a28      	subs	r0, r5, r0
     f22:	f005 fca8 	bl	6876 <z_set_timeout_expiry>
     f26:	e7bd      	b.n	ea4 <pm_system_suspend+0x60>
		return false;
     f28:	2000      	movs	r0, #0
     f2a:	e7d7      	b.n	edc <pm_system_suspend+0x98>
     f2c:	20000950 	.word	0x20000950
     f30:	20000318 	.word	0x20000318
     f34:	20000324 	.word	0x20000324
     f38:	20000338 	.word	0x20000338
     f3c:	00000d69 	.word	0x00000d69
     f40:	000f423f 	.word	0x000f423f
     f44:	000f4240 	.word	0x000f4240

00000f48 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
     f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     f4c:	b082      	sub	sp, #8
     f4e:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
     f50:	a901      	add	r1, sp, #4
     f52:	f000 f845 	bl	fe0 <pm_state_cpu_get_all>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
     f56:	1e44      	subs	r4, r0, #1
     f58:	b224      	sxth	r4, r4
     f5a:	e007      	b.n	f6c <pm_policy_next_state+0x24>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
		    (exit_latency >= max_latency_ticks)) {
			continue;
		}

		if ((ticks == K_TICKS_FOREVER) ||
     f5c:	f1b6 3fff 	cmp.w	r6, #4294967295
     f60:	d033      	beq.n	fca <pm_policy_next_state+0x82>
		    (ticks >= (min_residency + exit_latency))) {
     f62:	4480      	add	r8, r0
		if ((ticks == K_TICKS_FOREVER) ||
     f64:	45b0      	cmp	r8, r6
     f66:	d930      	bls.n	fca <pm_policy_next_state+0x82>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
     f68:	3c01      	subs	r4, #1
     f6a:	b224      	sxth	r4, r4
     f6c:	2c00      	cmp	r4, #0
     f6e:	db2b      	blt.n	fc8 <pm_policy_next_state+0x80>
		const struct pm_state_info *state = &cpu_states[i];
     f70:	9b01      	ldr	r3, [sp, #4]
     f72:	eb04 0244 	add.w	r2, r4, r4, lsl #1
     f76:	eb03 0582 	add.w	r5, r3, r2, lsl #2
		if (pm_policy_state_lock_is_active(state->state, state->substate_id)) {
     f7a:	7869      	ldrb	r1, [r5, #1]
     f7c:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
     f80:	f004 fa3d 	bl	53fe <pm_policy_state_lock_is_active>
     f84:	2800      	cmp	r0, #0
     f86:	d1ef      	bne.n	f68 <pm_policy_next_state+0x20>
		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
     f88:	6868      	ldr	r0, [r5, #4]
     f8a:	0c41      	lsrs	r1, r0, #17
     f8c:	03c0      	lsls	r0, r0, #15
     f8e:	4f11      	ldr	r7, [pc, #68]	; (fd4 <pm_policy_next_state+0x8c>)
     f90:	19c0      	adds	r0, r0, r7
     f92:	4a11      	ldr	r2, [pc, #68]	; (fd8 <pm_policy_next_state+0x90>)
     f94:	f04f 0300 	mov.w	r3, #0
     f98:	f141 0100 	adc.w	r1, r1, #0
     f9c:	f7ff f8da 	bl	154 <__aeabi_uldivmod>
     fa0:	4680      	mov	r8, r0
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);
     fa2:	68ab      	ldr	r3, [r5, #8]
     fa4:	0c59      	lsrs	r1, r3, #17
     fa6:	03db      	lsls	r3, r3, #15
     fa8:	19d8      	adds	r0, r3, r7
     faa:	4a0b      	ldr	r2, [pc, #44]	; (fd8 <pm_policy_next_state+0x90>)
     fac:	f04f 0300 	mov.w	r3, #0
     fb0:	f141 0100 	adc.w	r1, r1, #0
     fb4:	f7ff f8ce 	bl	154 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
     fb8:	4b08      	ldr	r3, [pc, #32]	; (fdc <pm_policy_next_state+0x94>)
     fba:	681b      	ldr	r3, [r3, #0]
     fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
     fc0:	d0cc      	beq.n	f5c <pm_policy_next_state+0x14>
     fc2:	4283      	cmp	r3, r0
     fc4:	d8ca      	bhi.n	f5c <pm_policy_next_state+0x14>
     fc6:	e7cf      	b.n	f68 <pm_policy_next_state+0x20>
			return state;
		}
	}

	return NULL;
     fc8:	2500      	movs	r5, #0
}
     fca:	4628      	mov	r0, r5
     fcc:	b002      	add	sp, #8
     fce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     fd2:	bf00      	nop
     fd4:	000f423f 	.word	0x000f423f
     fd8:	000f4240 	.word	0x000f4240
     fdc:	20000004 	.word	0x20000004

00000fe0 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
     fe0:	b908      	cbnz	r0, fe6 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
     fe2:	4b02      	ldr	r3, [pc, #8]	; (fec <pm_state_cpu_get_all+0xc>)
     fe4:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
     fe6:	2000      	movs	r0, #0
     fe8:	4770      	bx	lr
     fea:	bf00      	nop
     fec:	00006c84 	.word	0x00006c84

00000ff0 <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
     ff0:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
     ff2:	4802      	ldr	r0, [pc, #8]	; (ffc <nrf_cc3xx_platform_abort_init+0xc>)
     ff4:	f003 fc50 	bl	4898 <nrf_cc3xx_platform_set_abort>
}
     ff8:	bd08      	pop	{r3, pc}
     ffa:	bf00      	nop
     ffc:	00006c84 	.word	0x00006c84

00001000 <mutex_flags_unknown>:
                    NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_HW_MUTEX :
                    NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID
};

static bool mutex_flags_unknown(uint32_t flags){
    switch(flags){
    1000:	f5b0 0f68 	cmp.w	r0, #15204352	; 0xe80000
    1004:	d017      	beq.n	1036 <mutex_flags_unknown+0x36>
    1006:	d80c      	bhi.n	1022 <mutex_flags_unknown+0x22>
    1008:	f640 63ba 	movw	r3, #3770	; 0xeba
    100c:	4298      	cmp	r0, r3
    100e:	d014      	beq.n	103a <mutex_flags_unknown+0x3a>
    1010:	f5b0 3f68 	cmp.w	r0, #237568	; 0x3a000
    1014:	d013      	beq.n	103e <mutex_flags_unknown+0x3e>
    1016:	283a      	cmp	r0, #58	; 0x3a
    1018:	d001      	beq.n	101e <mutex_flags_unknown+0x1e>
        case NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID:
        case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_HW_MUTEX:
        case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
            return false;
        default:
            return true;
    101a:	2001      	movs	r0, #1
    101c:	4770      	bx	lr
    switch(flags){
    101e:	2000      	movs	r0, #0
    1020:	4770      	bx	lr
    1022:	4b09      	ldr	r3, [pc, #36]	; (1048 <mutex_flags_unknown+0x48>)
    1024:	4298      	cmp	r0, r3
    1026:	d00c      	beq.n	1042 <mutex_flags_unknown+0x42>
    1028:	4b08      	ldr	r3, [pc, #32]	; (104c <mutex_flags_unknown+0x4c>)
    102a:	4298      	cmp	r0, r3
    102c:	d001      	beq.n	1032 <mutex_flags_unknown+0x32>
            return true;
    102e:	2001      	movs	r0, #1
    }
}
    1030:	4770      	bx	lr
    switch(flags){
    1032:	2000      	movs	r0, #0
    1034:	4770      	bx	lr
    1036:	2000      	movs	r0, #0
    1038:	4770      	bx	lr
    103a:	2000      	movs	r0, #0
    103c:	4770      	bx	lr
    103e:	2000      	movs	r0, #0
    1040:	4770      	bx	lr
    1042:	2000      	movs	r0, #0
    1044:	4770      	bx	lr
    1046:	bf00      	nop
    1048:	3a00003a 	.word	0x3a00003a
    104c:	a95c5f2c 	.word	0xa95c5f2c

00001050 <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    1050:	b328      	cbz	r0, 109e <mutex_unlock_platform+0x4e>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1052:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    1054:	6843      	ldr	r3, [r0, #4]
    1056:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    105a:	d00a      	beq.n	1072 <mutex_unlock_platform+0x22>
    105c:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    1060:	d014      	beq.n	108c <mutex_unlock_platform+0x3c>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1062:	4912      	ldr	r1, [pc, #72]	; (10ac <mutex_unlock_platform+0x5c>)
    1064:	428b      	cmp	r3, r1
    1066:	d01f      	beq.n	10a8 <mutex_unlock_platform+0x58>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    1068:	6800      	ldr	r0, [r0, #0]
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    106a:	f002 fdd9 	bl	3c20 <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    106e:	2000      	movs	r0, #0
    1070:	e014      	b.n	109c <mutex_unlock_platform+0x4c>
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
    1072:	6803      	ldr	r3, [r0, #0]
 * @return true if @a new_value is written, false otherwise.
 */
static inline bool atomic_cas(atomic_t *target, atomic_val_t old_value,
			  atomic_val_t new_value)
{
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    1074:	2200      	movs	r2, #0
    1076:	e8d3 1fef 	ldaex	r1, [r3]
    107a:	2901      	cmp	r1, #1
    107c:	d103      	bne.n	1086 <mutex_unlock_platform+0x36>
    107e:	e8c3 2fe0 	stlex	r0, r2, [r3]
    1082:	2800      	cmp	r0, #0
    1084:	d1f7      	bne.n	1076 <mutex_unlock_platform+0x26>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1086:	d10d      	bne.n	10a4 <mutex_unlock_platform+0x54>
    1088:	4610      	mov	r0, r2
    108a:	e007      	b.n	109c <mutex_unlock_platform+0x4c>
        nrf_mutex_unlock(NRF_MUTEX, *((uint8_t *)mutex->mutex));
    108c:	6803      	ldr	r3, [r0, #0]
    108e:	781b      	ldrb	r3, [r3, #0]
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
}

NRF_STATIC_INLINE void nrf_mutex_unlock(NRF_MUTEX_Type * p_reg, uint8_t mutex)
{
    p_reg->MUTEX[mutex] = MUTEX_MUTEX_MUTEX_Unlocked;
    1090:	f503 7380 	add.w	r3, r3, #256	; 0x100
    1094:	2000      	movs	r0, #0
    1096:	4a06      	ldr	r2, [pc, #24]	; (10b0 <mutex_unlock_platform+0x60>)
    1098:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    }
}
    109c:	bd08      	pop	{r3, pc}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    109e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    10a2:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
    10a4:	4803      	ldr	r0, [pc, #12]	; (10b4 <mutex_unlock_platform+0x64>)
    10a6:	e7f9      	b.n	109c <mutex_unlock_platform+0x4c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    10a8:	4803      	ldr	r0, [pc, #12]	; (10b8 <mutex_unlock_platform+0x68>)
    10aa:	e7f7      	b.n	109c <mutex_unlock_platform+0x4c>
    10ac:	a95c5f2c 	.word	0xa95c5f2c
    10b0:	50030000 	.word	0x50030000
    10b4:	ffff8fe9 	.word	0xffff8fe9
    10b8:	ffff8fea 	.word	0xffff8fea

000010bc <mutex_lock_platform>:
    if(mutex == NULL) {
    10bc:	b388      	cbz	r0, 1122 <mutex_lock_platform+0x66>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    10be:	b508      	push	{r3, lr}
    switch (mutex->flags) {
    10c0:	6843      	ldr	r3, [r0, #4]
    10c2:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    10c6:	d00f      	beq.n	10e8 <mutex_lock_platform+0x2c>
    10c8:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    10cc:	d019      	beq.n	1102 <mutex_lock_platform+0x46>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    10ce:	4916      	ldr	r1, [pc, #88]	; (1128 <mutex_lock_platform+0x6c>)
    10d0:	428b      	cmp	r3, r1
    10d2:	d024      	beq.n	111e <mutex_lock_platform+0x62>
        p_mutex = (struct k_mutex *)mutex->mutex;
    10d4:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    10d6:	f04f 32ff 	mov.w	r2, #4294967295
    10da:	f04f 33ff 	mov.w	r3, #4294967295
    10de:	f002 fd1b 	bl	3b18 <z_impl_k_mutex_lock>
        if (ret == 0) {
    10e2:	b168      	cbz	r0, 1100 <mutex_lock_platform+0x44>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
    10e4:	4811      	ldr	r0, [pc, #68]	; (112c <mutex_lock_platform+0x70>)
    10e6:	e00b      	b.n	1100 <mutex_lock_platform+0x44>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
    10e8:	6803      	ldr	r3, [r0, #0]
    10ea:	2201      	movs	r2, #1
    10ec:	e8d3 1fef 	ldaex	r1, [r3]
    10f0:	2900      	cmp	r1, #0
    10f2:	d103      	bne.n	10fc <mutex_lock_platform+0x40>
    10f4:	e8c3 2fe0 	stlex	r0, r2, [r3]
    10f8:	2800      	cmp	r0, #0
    10fa:	d1f7      	bne.n	10ec <mutex_lock_platform+0x30>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    10fc:	d10b      	bne.n	1116 <mutex_lock_platform+0x5a>
    10fe:	2000      	movs	r0, #0
}
    1100:	bd08      	pop	{r3, pc}
        return nrf_mutex_lock(NRF_MUTEX, *((uint8_t *)mutex->mutex)) ?
    1102:	6803      	ldr	r3, [r0, #0]
    1104:	781b      	ldrb	r3, [r3, #0]
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
    1106:	f503 7380 	add.w	r3, r3, #256	; 0x100
    110a:	4a09      	ldr	r2, [pc, #36]	; (1130 <mutex_lock_platform+0x74>)
    110c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1110:	b91b      	cbnz	r3, 111a <mutex_lock_platform+0x5e>
    1112:	2000      	movs	r0, #0
    1114:	e7f4      	b.n	1100 <mutex_lock_platform+0x44>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1116:	4805      	ldr	r0, [pc, #20]	; (112c <mutex_lock_platform+0x70>)
    1118:	e7f2      	b.n	1100 <mutex_lock_platform+0x44>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    111a:	4804      	ldr	r0, [pc, #16]	; (112c <mutex_lock_platform+0x70>)
    111c:	e7f0      	b.n	1100 <mutex_lock_platform+0x44>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    111e:	4805      	ldr	r0, [pc, #20]	; (1134 <mutex_lock_platform+0x78>)
    1120:	e7ee      	b.n	1100 <mutex_lock_platform+0x44>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1122:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    1126:	4770      	bx	lr
    1128:	a95c5f2c 	.word	0xa95c5f2c
    112c:	ffff8fe9 	.word	0xffff8fe9
    1130:	50030000 	.word	0x50030000
    1134:	ffff8fea 	.word	0xffff8fea

00001138 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1138:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    113a:	4604      	mov	r4, r0
    113c:	b1a8      	cbz	r0, 116a <mutex_free_platform+0x32>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    113e:	6863      	ldr	r3, [r4, #4]
    1140:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    1144:	d010      	beq.n	1168 <mutex_free_platform+0x30>
    1146:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    114a:	d00d      	beq.n	1168 <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    114c:	4a0c      	ldr	r2, [pc, #48]	; (1180 <mutex_free_platform+0x48>)
    114e:	4293      	cmp	r3, r2
    1150:	d00a      	beq.n	1168 <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    1152:	f413 6f68 	tst.w	r3, #3712	; 0xe80
    1156:	d00d      	beq.n	1174 <mutex_free_platform+0x3c>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    1158:	4621      	mov	r1, r4
    115a:	480a      	ldr	r0, [pc, #40]	; (1184 <mutex_free_platform+0x4c>)
    115c:	f005 f9ca 	bl	64f4 <k_mem_slab_free>
        mutex->mutex = NULL;
    1160:	2300      	movs	r3, #0
    1162:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    1164:	4b06      	ldr	r3, [pc, #24]	; (1180 <mutex_free_platform+0x48>)
    1166:	6063      	str	r3, [r4, #4]
}
    1168:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    116a:	4b07      	ldr	r3, [pc, #28]	; (1188 <mutex_free_platform+0x50>)
    116c:	685b      	ldr	r3, [r3, #4]
    116e:	4807      	ldr	r0, [pc, #28]	; (118c <mutex_free_platform+0x54>)
    1170:	4798      	blx	r3
    1172:	e7e4      	b.n	113e <mutex_free_platform+0x6>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1174:	2214      	movs	r2, #20
    1176:	2100      	movs	r1, #0
    1178:	6820      	ldr	r0, [r4, #0]
    117a:	f004 fa66 	bl	564a <memset>
    117e:	e7f1      	b.n	1164 <mutex_free_platform+0x2c>
    1180:	a95c5f2c 	.word	0xa95c5f2c
    1184:	2000083c 	.word	0x2000083c
    1188:	200000d4 	.word	0x200000d4
    118c:	00006c8c 	.word	0x00006c8c

00001190 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1190:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    1192:	4604      	mov	r4, r0
    1194:	b368      	cbz	r0, 11f2 <mutex_init_platform+0x62>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    1196:	6860      	ldr	r0, [r4, #4]
    1198:	f5b0 3f68 	cmp.w	r0, #237568	; 0x3a000
    119c:	d028      	beq.n	11f0 <mutex_init_platform+0x60>
    119e:	f5b0 0f68 	cmp.w	r0, #15204352	; 0xe80000
    11a2:	d025      	beq.n	11f0 <mutex_init_platform+0x60>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
    11a4:	4b17      	ldr	r3, [pc, #92]	; (1204 <mutex_init_platform+0x74>)
    11a6:	4298      	cmp	r0, r3
    11a8:	d028      	beq.n	11fc <mutex_init_platform+0x6c>
        mutex_flags_unknown(mutex->flags)) {
    11aa:	f7ff ff29 	bl	1000 <mutex_flags_unknown>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
    11ae:	b1c0      	cbz	r0, 11e2 <mutex_init_platform+0x52>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    11b0:	f04f 32ff 	mov.w	r2, #4294967295
    11b4:	f04f 33ff 	mov.w	r3, #4294967295
    11b8:	4621      	mov	r1, r4
    11ba:	4813      	ldr	r0, [pc, #76]	; (1208 <mutex_init_platform+0x78>)
    11bc:	f002 fb7e 	bl	38bc <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    11c0:	b908      	cbnz	r0, 11c6 <mutex_init_platform+0x36>
    11c2:	6823      	ldr	r3, [r4, #0]
    11c4:	b91b      	cbnz	r3, 11ce <mutex_init_platform+0x3e>
            platform_abort_apis.abort_fn(
    11c6:	4b11      	ldr	r3, [pc, #68]	; (120c <mutex_init_platform+0x7c>)
    11c8:	685b      	ldr	r3, [r3, #4]
    11ca:	4811      	ldr	r0, [pc, #68]	; (1210 <mutex_init_platform+0x80>)
    11cc:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    11ce:	2214      	movs	r2, #20
    11d0:	2100      	movs	r1, #0
    11d2:	6820      	ldr	r0, [r4, #0]
    11d4:	f004 fa39 	bl	564a <memset>
        mutex->flags = 0;
    11d8:	2300      	movs	r3, #0
    11da:	6063      	str	r3, [r4, #4]
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    11dc:	f44f 6368 	mov.w	r3, #3712	; 0xe80
    11e0:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    11e2:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    11e4:	f005 f9f2 	bl	65cc <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    11e8:	6863      	ldr	r3, [r4, #4]
    11ea:	f043 033a 	orr.w	r3, r3, #58	; 0x3a
    11ee:	6063      	str	r3, [r4, #4]
}
    11f0:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    11f2:	4b06      	ldr	r3, [pc, #24]	; (120c <mutex_init_platform+0x7c>)
    11f4:	685b      	ldr	r3, [r3, #4]
    11f6:	4807      	ldr	r0, [pc, #28]	; (1214 <mutex_init_platform+0x84>)
    11f8:	4798      	blx	r3
    11fa:	e7cc      	b.n	1196 <mutex_init_platform+0x6>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
    11fc:	6823      	ldr	r3, [r4, #0]
    11fe:	2b00      	cmp	r3, #0
    1200:	d1d3      	bne.n	11aa <mutex_init_platform+0x1a>
    1202:	e7d5      	b.n	11b0 <mutex_init_platform+0x20>
    1204:	a95c5f2c 	.word	0xa95c5f2c
    1208:	2000083c 	.word	0x2000083c
    120c:	200000d4 	.word	0x200000d4
    1210:	00006cb4 	.word	0x00006cb4
    1214:	00006c8c 	.word	0x00006c8c

00001218 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    1218:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    121a:	2340      	movs	r3, #64	; 0x40
    121c:	2214      	movs	r2, #20
    121e:	4904      	ldr	r1, [pc, #16]	; (1230 <nrf_cc3xx_platform_mutex_init+0x18>)
    1220:	4804      	ldr	r0, [pc, #16]	; (1234 <nrf_cc3xx_platform_mutex_init+0x1c>)
    1222:	f005 f959 	bl	64d8 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    1226:	4904      	ldr	r1, [pc, #16]	; (1238 <nrf_cc3xx_platform_mutex_init+0x20>)
    1228:	4804      	ldr	r0, [pc, #16]	; (123c <nrf_cc3xx_platform_mutex_init+0x24>)
    122a:	f003 fba7 	bl	497c <nrf_cc3xx_platform_set_mutexes>
}
    122e:	bd08      	pop	{r3, pc}
    1230:	2000033c 	.word	0x2000033c
    1234:	2000083c 	.word	0x2000083c
    1238:	00006ce4 	.word	0x00006ce4
    123c:	00006cf8 	.word	0x00006cf8

00001240 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    1240:	4901      	ldr	r1, [pc, #4]	; (1248 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    1242:	2210      	movs	r2, #16
	str	r2, [r1]
    1244:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    1246:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    1248:	e000ed10 	.word	0xe000ed10

0000124c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    124c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    124e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    1250:	f380 8811 	msr	BASEPRI, r0
	isb
    1254:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    1258:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    125c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    125e:	b662      	cpsie	i
	isb
    1260:	f3bf 8f6f 	isb	sy

	bx	lr
    1264:	4770      	bx	lr
    1266:	bf00      	nop

00001268 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    1268:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    126a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    126c:	f381 8811 	msr	BASEPRI, r1

	wfe
    1270:	bf20      	wfe

	msr	BASEPRI, r0
    1272:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    1276:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    1278:	4770      	bx	lr
    127a:	bf00      	nop

0000127c <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    127c:	2800      	cmp	r0, #0
    127e:	db07      	blt.n	1290 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1280:	f000 021f 	and.w	r2, r0, #31
    1284:	0940      	lsrs	r0, r0, #5
    1286:	2301      	movs	r3, #1
    1288:	4093      	lsls	r3, r2
    128a:	4a02      	ldr	r2, [pc, #8]	; (1294 <__NVIC_EnableIRQ+0x18>)
    128c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
    1290:	4770      	bx	lr
    1292:	bf00      	nop
    1294:	e000e100 	.word	0xe000e100

00001298 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    1298:	2800      	cmp	r0, #0
    129a:	db08      	blt.n	12ae <__NVIC_SetPriority+0x16>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    129c:	0149      	lsls	r1, r1, #5
    129e:	b2c9      	uxtb	r1, r1
    12a0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
    12a4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
    12a8:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
    12ac:	4770      	bx	lr
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    12ae:	f000 000f 	and.w	r0, r0, #15
    12b2:	0149      	lsls	r1, r1, #5
    12b4:	b2c9      	uxtb	r1, r1
    12b6:	4b01      	ldr	r3, [pc, #4]	; (12bc <__NVIC_SetPriority+0x24>)
    12b8:	5419      	strb	r1, [r3, r0]
  }
}
    12ba:	4770      	bx	lr
    12bc:	e000ed14 	.word	0xe000ed14

000012c0 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    12c0:	0942      	lsrs	r2, r0, #5
    12c2:	4b05      	ldr	r3, [pc, #20]	; (12d8 <arch_irq_is_enabled+0x18>)
    12c4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    12c8:	f000 001f 	and.w	r0, r0, #31
    12cc:	2301      	movs	r3, #1
    12ce:	fa03 f000 	lsl.w	r0, r3, r0
}
    12d2:	4010      	ands	r0, r2
    12d4:	4770      	bx	lr
    12d6:	bf00      	nop
    12d8:	e000e100 	.word	0xe000e100

000012dc <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    12dc:	bf30      	wfi
    b z_SysNmiOnReset
    12de:	f7ff bffd 	b.w	12dc <z_SysNmiOnReset>
    12e2:	bf00      	nop

000012e4 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    12e4:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    12e6:	4b0b      	ldr	r3, [pc, #44]	; (1314 <z_arm_prep_c+0x30>)
    12e8:	4a0b      	ldr	r2, [pc, #44]	; (1318 <z_arm_prep_c+0x34>)
    12ea:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    12ee:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    12f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    12f4:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    12f8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    12fc:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    1300:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    1304:	f002 fa26 	bl	3754 <z_bss_zero>
	z_data_copy();
    1308:	f003 f900 	bl	450c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    130c:	f000 f9f8 	bl	1700 <z_arm_interrupt_init>
	z_cstart();
    1310:	f002 fa7c 	bl	380c <z_cstart>
    1314:	e000ed00 	.word	0xe000ed00
    1318:	00000000 	.word	0x00000000

0000131c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    131c:	4a0a      	ldr	r2, [pc, #40]	; (1348 <arch_swap+0x2c>)
    131e:	6893      	ldr	r3, [r2, #8]
    1320:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
    1324:	4909      	ldr	r1, [pc, #36]	; (134c <arch_swap+0x30>)
    1326:	6809      	ldr	r1, [r1, #0]
    1328:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    132c:	4908      	ldr	r1, [pc, #32]	; (1350 <arch_swap+0x34>)
    132e:	684b      	ldr	r3, [r1, #4]
    1330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1334:	604b      	str	r3, [r1, #4]
    1336:	2300      	movs	r3, #0
    1338:	f383 8811 	msr	BASEPRI, r3
    133c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1340:	6893      	ldr	r3, [r2, #8]
}
    1342:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    1346:	4770      	bx	lr
    1348:	20000950 	.word	0x20000950
    134c:	00006e50 	.word	0x00006e50
    1350:	e000ed00 	.word	0xe000ed00

00001354 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1354:	4914      	ldr	r1, [pc, #80]	; (13a8 <z_arm_pendsv+0x54>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1356:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1358:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    135c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    135e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    1362:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1366:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    1368:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    136c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    1370:	4f0e      	ldr	r7, [pc, #56]	; (13ac <z_arm_pendsv+0x58>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1372:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    1376:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    1378:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    137a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    137c:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
    1380:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1382:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    1386:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    138a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    138e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    1392:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    1396:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    139a:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    139c:	f004 f856 	bl	544c <configure_builtin_stack_guard>
    pop {r2, lr}
    13a0:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    13a4:	4770      	bx	lr
    13a6:	0000      	.short	0x0000
    ldr r1, =_kernel
    13a8:	20000950 	.word	0x20000950
    ldr v4, =_SCS_ICSR
    13ac:	e000ed04 	.word	0xe000ed04

000013b0 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    13b0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    13b4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    13b6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    13ba:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    13be:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    13c0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    13c4:	2902      	cmp	r1, #2
    beq _oops
    13c6:	d0ff      	beq.n	13c8 <_oops>

000013c8 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    13c8:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    13ca:	f004 f822 	bl	5412 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    13ce:	bd01      	pop	{r0, pc}

000013d0 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    13d0:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    13d2:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    13d6:	490e      	ldr	r1, [pc, #56]	; (1410 <arch_new_thread+0x40>)
    13d8:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    13dc:	f021 0101 	bic.w	r1, r1, #1
    13e0:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    13e4:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    13e8:	9b01      	ldr	r3, [sp, #4]
    13ea:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    13ee:	9b02      	ldr	r3, [sp, #8]
    13f0:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    13f4:	9b03      	ldr	r3, [sp, #12]
    13f6:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    13fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    13fe:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe = (struct __basic_sf *)
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
    1402:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    1404:	2300      	movs	r3, #0
    1406:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    140a:	bc10      	pop	{r4}
    140c:	4770      	bx	lr
    140e:	bf00      	nop
    1410:	00004c1b 	.word	0x00004c1b

00001414 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    1414:	4b09      	ldr	r3, [pc, #36]	; (143c <arch_switch_to_main_thread+0x28>)
    1416:	6098      	str	r0, [r3, #8]
#endif

#if defined(CONFIG_BUILTIN_STACK_GUARD)
	/* Set PSPLIM register for built-in stack guarding of main thread. */
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
	__set_PSPLIM(main_thread->stack_info.start);
    1418:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    141c:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    1420:	4610      	mov	r0, r2
    1422:	f381 8809 	msr	PSP, r1
    1426:	2100      	movs	r1, #0
    1428:	b663      	cpsie	if
    142a:	f381 8811 	msr	BASEPRI, r1
    142e:	f3bf 8f6f 	isb	sy
    1432:	2200      	movs	r2, #0
    1434:	2300      	movs	r3, #0
    1436:	f003 fbf0 	bl	4c1a <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    143a:	bf00      	nop
    143c:	20000950 	.word	0x20000950

00001440 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1440:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    1442:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1444:	4a0b      	ldr	r2, [pc, #44]	; (1474 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1446:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    1448:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    144a:	bf1e      	ittt	ne
	movne	r1, #0
    144c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    144e:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    1450:	f005 f8a0 	blne	6594 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1454:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    1456:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    145a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    145e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    1462:	4905      	ldr	r1, [pc, #20]	; (1478 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1464:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1466:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    1468:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    146a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    146e:	4903      	ldr	r1, [pc, #12]	; (147c <_isr_wrapper+0x3c>)
	bx r1
    1470:	4708      	bx	r1
    1472:	0000      	.short	0x0000
	ldr r2, =_kernel
    1474:	20000950 	.word	0x20000950
	ldr r1, =_sw_isr_table
    1478:	0000699c 	.word	0x0000699c
	ldr r1, =z_arm_int_exit
    147c:	00001481 	.word	0x00001481

00001480 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    1480:	4b04      	ldr	r3, [pc, #16]	; (1494 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    1482:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    1484:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    1486:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    1488:	d003      	beq.n	1492 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    148a:	4903      	ldr	r1, [pc, #12]	; (1498 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    148c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    1490:	600a      	str	r2, [r1, #0]

00001492 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    1492:	4770      	bx	lr
	ldr r3, =_kernel
    1494:	20000950 	.word	0x20000950
	ldr r1, =_SCS_ICSR
    1498:	e000ed04 	.word	0xe000ed04

0000149c <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    149c:	b510      	push	{r4, lr}
    149e:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    14a0:	4b18      	ldr	r3, [pc, #96]	; (1504 <mem_manage_fault+0x68>)
    14a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    14a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    14a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    14a8:	f013 0f02 	tst.w	r3, #2
    14ac:	d00b      	beq.n	14c6 <mem_manage_fault+0x2a>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    14ae:	4b15      	ldr	r3, [pc, #84]	; (1504 <mem_manage_fault+0x68>)
    14b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    14b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    14b4:	f013 0f80 	tst.w	r3, #128	; 0x80
    14b8:	d005      	beq.n	14c6 <mem_manage_fault+0x2a>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    14ba:	b121      	cbz	r1, 14c6 <mem_manage_fault+0x2a>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    14bc:	4a11      	ldr	r2, [pc, #68]	; (1504 <mem_manage_fault+0x68>)
    14be:	6a93      	ldr	r3, [r2, #40]	; 0x28
    14c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    14c4:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    14c6:	4b0f      	ldr	r3, [pc, #60]	; (1504 <mem_manage_fault+0x68>)
    14c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    14ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    14cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    14ce:	f013 0f10 	tst.w	r3, #16
    14d2:	d101      	bne.n	14d8 <mem_manage_fault+0x3c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    14d4:	4b0b      	ldr	r3, [pc, #44]	; (1504 <mem_manage_fault+0x68>)
    14d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    14d8:	4b0a      	ldr	r3, [pc, #40]	; (1504 <mem_manage_fault+0x68>)
    14da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    14dc:	f013 0f20 	tst.w	r3, #32
    14e0:	d004      	beq.n	14ec <mem_manage_fault+0x50>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    14e2:	4a08      	ldr	r2, [pc, #32]	; (1504 <mem_manage_fault+0x68>)
    14e4:	6a53      	ldr	r3, [r2, #36]	; 0x24
    14e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    14ea:	6253      	str	r3, [r2, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    14ec:	4a05      	ldr	r2, [pc, #20]	; (1504 <mem_manage_fault+0x68>)
    14ee:	6a93      	ldr	r3, [r2, #40]	; 0x28
    14f0:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    14f4:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    14f6:	2101      	movs	r1, #1
    14f8:	f003 ffad 	bl	5456 <memory_fault_recoverable>
    14fc:	7020      	strb	r0, [r4, #0]

	return reason;
}
    14fe:	2000      	movs	r0, #0
    1500:	bd10      	pop	{r4, pc}
    1502:	bf00      	nop
    1504:	e000ed00 	.word	0xe000ed00

00001508 <bus_fault>:
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
    1508:	b510      	push	{r4, lr}
    150a:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    150c:	4b12      	ldr	r3, [pc, #72]	; (1558 <bus_fault+0x50>)
    150e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1510:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1514:	f413 7f00 	tst.w	r3, #512	; 0x200
    1518:	d00b      	beq.n	1532 <bus_fault+0x2a>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    151a:	4b0f      	ldr	r3, [pc, #60]	; (1558 <bus_fault+0x50>)
    151c:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    151e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1520:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1524:	d005      	beq.n	1532 <bus_fault+0x2a>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    1526:	b121      	cbz	r1, 1532 <bus_fault+0x2a>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1528:	4a0b      	ldr	r2, [pc, #44]	; (1558 <bus_fault+0x50>)
    152a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    152c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    1530:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1532:	4b09      	ldr	r3, [pc, #36]	; (1558 <bus_fault+0x50>)
    1534:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1538:	f413 7f80 	tst.w	r3, #256	; 0x100
    153c:	d101      	bne.n	1542 <bus_fault+0x3a>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    153e:	4b06      	ldr	r3, [pc, #24]	; (1558 <bus_fault+0x50>)
    1540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1542:	4a05      	ldr	r2, [pc, #20]	; (1558 <bus_fault+0x50>)
    1544:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1546:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    154a:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    154c:	2101      	movs	r1, #1
    154e:	f003 ff82 	bl	5456 <memory_fault_recoverable>
    1552:	7020      	strb	r0, [r4, #0]

	return reason;
}
    1554:	2000      	movs	r0, #0
    1556:	bd10      	pop	{r4, pc}
    1558:	e000ed00 	.word	0xe000ed00

0000155c <usage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    155c:	4b0a      	ldr	r3, [pc, #40]	; (1588 <usage_fault+0x2c>)
    155e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1560:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    1562:	6a98      	ldr	r0, [r3, #40]	; 0x28
    1564:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
    1568:	d10b      	bne.n	1582 <usage_fault+0x26>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    156a:	4b07      	ldr	r3, [pc, #28]	; (1588 <usage_fault+0x2c>)
    156c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    156e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1570:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1572:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1574:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1576:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    157a:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    157e:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    1580:	4770      	bx	lr
		reason = K_ERR_STACK_CHK_FAIL;
    1582:	2002      	movs	r0, #2
    1584:	e7f1      	b.n	156a <usage_fault+0xe>
    1586:	bf00      	nop
    1588:	e000ed00 	.word	0xe000ed00

0000158c <z_arm_is_synchronous_svc>:
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

static inline bool z_arm_is_synchronous_svc(z_arch_esf_t *esf)
{
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    158c:	6981      	ldr	r1, [r0, #24]
	/* Note: ARMv6-M does not support CCR.BFHFNMIGN so this access
	 * could generate a fault if the pc was invalid.
	 */
	uint16_t fault_insn = *(ret_addr - 1);
#else
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    158e:	4b0d      	ldr	r3, [pc, #52]	; (15c4 <z_arm_is_synchronous_svc+0x38>)
    1590:	695a      	ldr	r2, [r3, #20]
    1592:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    1596:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    1598:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    159c:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();

	uint16_t fault_insn = *(ret_addr - 1);
    15a0:	f831 1c02 	ldrh.w	r1, [r1, #-2]

	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    15a4:	695a      	ldr	r2, [r3, #20]
    15a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    15aa:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    15ac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    15b0:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
#endif /* ARMV6_M_ARMV8_M_BASELINE && !ARMV8_M_BASELINE */

	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    15b4:	f64d 7302 	movw	r3, #57090	; 0xdf02
    15b8:	4299      	cmp	r1, r3
    15ba:	d001      	beq.n	15c0 <z_arm_is_synchronous_svc+0x34>
		((fault_insn & 0x00ff) == _SVC_CALL_RUNTIME_EXCEPT)) {
		return true;
	}
#undef _SVC_OPCODE
	return false;
    15bc:	2000      	movs	r0, #0
    15be:	4770      	bx	lr
		return true;
    15c0:	2001      	movs	r0, #1
}
    15c2:	4770      	bx	lr
    15c4:	e000ed00 	.word	0xe000ed00

000015c8 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
    15c8:	b538      	push	{r3, r4, r5, lr}
    15ca:	4605      	mov	r5, r0
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
    15cc:	2300      	movs	r3, #0
    15ce:	700b      	strb	r3, [r1, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    15d0:	4b1a      	ldr	r3, [pc, #104]	; (163c <hard_fault+0x74>)
    15d2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    15d4:	f010 0002 	ands.w	r0, r0, #2
    15d8:	d12d      	bne.n	1636 <hard_fault+0x6e>
    15da:	460c      	mov	r4, r1
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    15dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    15de:	2b00      	cmp	r3, #0
    15e0:	db2a      	blt.n	1638 <hard_fault+0x70>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    15e2:	4b16      	ldr	r3, [pc, #88]	; (163c <hard_fault+0x74>)
    15e4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    15e6:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
    15ea:	d025      	beq.n	1638 <hard_fault+0x70>
		PR_EXC("  Fault escalation (see below)");
		if (z_arm_is_synchronous_svc(esf)) {
    15ec:	4628      	mov	r0, r5
    15ee:	f7ff ffcd 	bl	158c <z_arm_is_synchronous_svc>
    15f2:	b108      	cbz	r0, 15f8 <hard_fault+0x30>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
			reason = esf->basic.r0;
    15f4:	6828      	ldr	r0, [r5, #0]
    15f6:	e01f      	b.n	1638 <hard_fault+0x70>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    15f8:	4b10      	ldr	r3, [pc, #64]	; (163c <hard_fault+0x74>)
    15fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    15fc:	f013 0fff 	tst.w	r3, #255	; 0xff
    1600:	d10d      	bne.n	161e <hard_fault+0x56>
			reason = mem_manage_fault(esf, 1, recoverable);
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    1602:	4b0e      	ldr	r3, [pc, #56]	; (163c <hard_fault+0x74>)
    1604:	6a98      	ldr	r0, [r3, #40]	; 0x28
    1606:	f410 407f 	ands.w	r0, r0, #65280	; 0xff00
    160a:	d10e      	bne.n	162a <hard_fault+0x62>
			reason = bus_fault(esf, 1, recoverable);
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    160c:	4b0b      	ldr	r3, [pc, #44]	; (163c <hard_fault+0x74>)
    160e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1610:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    1614:	d310      	bcc.n	1638 <hard_fault+0x70>
			reason = usage_fault(esf);
    1616:	4628      	mov	r0, r5
    1618:	f7ff ffa0 	bl	155c <usage_fault>
    161c:	e00c      	b.n	1638 <hard_fault+0x70>
			reason = mem_manage_fault(esf, 1, recoverable);
    161e:	4622      	mov	r2, r4
    1620:	2101      	movs	r1, #1
    1622:	4628      	mov	r0, r5
    1624:	f7ff ff3a 	bl	149c <mem_manage_fault>
    1628:	e006      	b.n	1638 <hard_fault+0x70>
			reason = bus_fault(esf, 1, recoverable);
    162a:	4622      	mov	r2, r4
    162c:	2101      	movs	r1, #1
    162e:	4628      	mov	r0, r5
    1630:	f7ff ff6a 	bl	1508 <bus_fault>
    1634:	e000      	b.n	1638 <hard_fault+0x70>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1636:	2000      	movs	r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
    1638:	bd38      	pop	{r3, r4, r5, pc}
    163a:	bf00      	nop
    163c:	e000ed00 	.word	0xe000ed00

00001640 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    1640:	b570      	push	{r4, r5, r6, lr}
    1642:	b08a      	sub	sp, #40	; 0x28
    1644:	460c      	mov	r4, r1
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1646:	4b22      	ldr	r3, [pc, #136]	; (16d0 <z_arm_fault+0x90>)
    1648:	6859      	ldr	r1, [r3, #4]
    164a:	f3c1 0108 	ubfx	r1, r1, #0, #9
    164e:	2300      	movs	r3, #0
    1650:	f383 8811 	msr	BASEPRI, r3
    1654:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    1658:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    165c:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    1660:	d115      	bne.n	168e <z_arm_fault+0x4e>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    1662:	f002 030c 	and.w	r3, r2, #12
    1666:	2b08      	cmp	r3, #8
    1668:	d014      	beq.n	1694 <z_arm_fault+0x54>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    166a:	f012 0f08 	tst.w	r2, #8
    166e:	d00b      	beq.n	1688 <z_arm_fault+0x48>
	*nested_exc = false;
    1670:	2600      	movs	r6, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    1672:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    1676:	4620      	mov	r0, r4
    1678:	f003 fef2 	bl	5460 <fault_handle>
    167c:	4605      	mov	r5, r0
	if (recoverable) {
    167e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    1682:	b153      	cbz	r3, 169a <z_arm_fault+0x5a>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    1684:	b00a      	add	sp, #40	; 0x28
    1686:	bd70      	pop	{r4, r5, r6, pc}
			ptr_esf = (z_arch_esf_t *)msp;
    1688:	4604      	mov	r4, r0
			*nested_exc = true;
    168a:	2601      	movs	r6, #1
    168c:	e7f1      	b.n	1672 <z_arm_fault+0x32>
	*nested_exc = false;
    168e:	2600      	movs	r6, #0
		return NULL;
    1690:	4634      	mov	r4, r6
    1692:	e7ee      	b.n	1672 <z_arm_fault+0x32>
	*nested_exc = false;
    1694:	2600      	movs	r6, #0
		return NULL;
    1696:	4634      	mov	r4, r6
    1698:	e7eb      	b.n	1672 <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    169a:	2220      	movs	r2, #32
    169c:	4621      	mov	r1, r4
    169e:	a801      	add	r0, sp, #4
    16a0:	f003 ffa4 	bl	55ec <memcpy>
	if (nested_exc) {
    16a4:	b14e      	cbz	r6, 16ba <z_arm_fault+0x7a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    16a6:	9b08      	ldr	r3, [sp, #32]
    16a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
    16ac:	b95a      	cbnz	r2, 16c6 <z_arm_fault+0x86>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    16ae:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    16b2:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    16b6:	9308      	str	r3, [sp, #32]
    16b8:	e005      	b.n	16c6 <z_arm_fault+0x86>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    16ba:	9b08      	ldr	r3, [sp, #32]
    16bc:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    16c0:	f023 0301 	bic.w	r3, r3, #1
    16c4:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
    16c6:	a901      	add	r1, sp, #4
    16c8:	4628      	mov	r0, r5
    16ca:	f003 fe9e 	bl	540a <z_arm_fatal_error>
    16ce:	e7d9      	b.n	1684 <z_arm_fault+0x44>
    16d0:	e000ed00 	.word	0xe000ed00

000016d4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    16d4:	4b04      	ldr	r3, [pc, #16]	; (16e8 <z_arm_fault_init+0x14>)
    16d6:	695a      	ldr	r2, [r3, #20]
    16d8:	f042 0210 	orr.w	r2, r2, #16
    16dc:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    16de:	695a      	ldr	r2, [r3, #20]
    16e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    16e4:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    16e6:	4770      	bx	lr
    16e8:	e000ed00 	.word	0xe000ed00

000016ec <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    16ec:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    16f0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    16f4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    16f6:	4672      	mov	r2, lr
	bl z_arm_fault
    16f8:	f7ff ffa2 	bl	1640 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    16fc:	bd01      	pop	{r0, pc}
    16fe:	bf00      	nop

00001700 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    1700:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1702:	e007      	b.n	1714 <z_arm_interrupt_init+0x14>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1704:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    1708:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    170c:	2120      	movs	r1, #32
    170e:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    1712:	3201      	adds	r2, #1
    1714:	2a44      	cmp	r2, #68	; 0x44
    1716:	dc09      	bgt.n	172c <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    1718:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    171a:	2b00      	cmp	r3, #0
    171c:	daf2      	bge.n	1704 <z_arm_interrupt_init+0x4>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    171e:	f003 030f 	and.w	r3, r3, #15
    1722:	4903      	ldr	r1, [pc, #12]	; (1730 <z_arm_interrupt_init+0x30>)
    1724:	4419      	add	r1, r3
    1726:	2320      	movs	r3, #32
    1728:	760b      	strb	r3, [r1, #24]
    172a:	e7f2      	b.n	1712 <z_arm_interrupt_init+0x12>
	}
}
    172c:	4770      	bx	lr
    172e:	bf00      	nop
    1730:	e000ecfc 	.word	0xe000ecfc

00001734 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_DEBUG_THREAD_INFO)
    /* Clear z_sys_post_kernel flag for RTOS aware debuggers */
    movs.n r0, #0
    1734:	2000      	movs	r0, #0
    ldr r1, =z_sys_post_kernel
    1736:	4915      	ldr	r1, [pc, #84]	; (178c <__start+0x58>)
    strb r0, [r1]
    1738:	7008      	strb	r0, [r1, #0]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    173a:	2000      	movs	r0, #0
    msr CONTROL, r0
    173c:	f380 8814 	msr	CONTROL, r0
    isb
    1740:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    1744:	2000      	movs	r0, #0
    msr MSPLIM, r0
    1746:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    174a:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    174e:	f7ff fb15 	bl	d7c <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    1752:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    1754:	490e      	ldr	r1, [pc, #56]	; (1790 <__start+0x5c>)
    str r0, [r1]
    1756:	6008      	str	r0, [r1, #0]
    dsb
    1758:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    175c:	480d      	ldr	r0, [pc, #52]	; (1794 <__start+0x60>)
    msr msp, r0
    175e:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    1762:	f000 f841 	bl	17e8 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1766:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1768:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    176c:	480a      	ldr	r0, [pc, #40]	; (1798 <__start+0x64>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    176e:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    1772:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1774:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    1778:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    177c:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    177e:	4308      	orrs	r0, r1
    msr CONTROL, r0
    1780:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    1784:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    1788:	f7ff fdac 	bl	12e4 <z_arm_prep_c>
    ldr r1, =z_sys_post_kernel
    178c:	20000b67 	.word	0x20000b67
    ldr r1, =_SCS_MPU_CTRL
    1790:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1794:	200018a8 	.word	0x200018a8
    ldr r0, =z_interrupt_stacks
    1798:	20000b68 	.word	0x20000b68

0000179c <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
    179c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    17a0:	4905      	ldr	r1, [pc, #20]	; (17b8 <__NVIC_SystemReset+0x1c>)
    17a2:	68ca      	ldr	r2, [r1, #12]
    17a4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    17a8:	4b04      	ldr	r3, [pc, #16]	; (17bc <__NVIC_SystemReset+0x20>)
    17aa:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    17ac:	60cb      	str	r3, [r1, #12]
    17ae:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    17b2:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    17b4:	e7fd      	b.n	17b2 <__NVIC_SystemReset+0x16>
    17b6:	bf00      	nop
    17b8:	e000ed00 	.word	0xe000ed00
    17bc:	05fa0004 	.word	0x05fa0004

000017c0 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    17c0:	4b08      	ldr	r3, [pc, #32]	; (17e4 <z_arm_clear_arm_mpu_config+0x24>)
    17c2:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
	int num_regions =
    17c6:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    17ca:	2300      	movs	r3, #0
    17cc:	e006      	b.n	17dc <z_arm_clear_arm_mpu_config+0x1c>
* \param mpu Pointer to MPU to be used.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
    17ce:	4a05      	ldr	r2, [pc, #20]	; (17e4 <z_arm_clear_arm_mpu_config+0x24>)
    17d0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  mpu->RLAR = 0U;
    17d4:	2100      	movs	r1, #0
    17d6:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    17da:	3301      	adds	r3, #1
    17dc:	4283      	cmp	r3, r0
    17de:	dbf6      	blt.n	17ce <z_arm_clear_arm_mpu_config+0xe>
		ARM_MPU_ClrRegion(i);
	}
}
    17e0:	4770      	bx	lr
    17e2:	bf00      	nop
    17e4:	e000ed00 	.word	0xe000ed00

000017e8 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    17e8:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    17ea:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    17ec:	2400      	movs	r4, #0
    17ee:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    17f2:	f7ff ffe5 	bl	17c0 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    17f6:	4623      	mov	r3, r4
    17f8:	e008      	b.n	180c <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    17fa:	f103 0120 	add.w	r1, r3, #32
    17fe:	4a0e      	ldr	r2, [pc, #56]	; (1838 <z_arm_init_arch_hw_at_boot+0x50>)
    1800:	f04f 30ff 	mov.w	r0, #4294967295
    1804:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    1808:	3301      	adds	r3, #1
    180a:	b2db      	uxtb	r3, r3
    180c:	2b0f      	cmp	r3, #15
    180e:	d9f4      	bls.n	17fa <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    1810:	2300      	movs	r3, #0
    1812:	e008      	b.n	1826 <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    1814:	f103 0160 	add.w	r1, r3, #96	; 0x60
    1818:	4a07      	ldr	r2, [pc, #28]	; (1838 <z_arm_init_arch_hw_at_boot+0x50>)
    181a:	f04f 30ff 	mov.w	r0, #4294967295
    181e:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    1822:	3301      	adds	r3, #1
    1824:	b2db      	uxtb	r3, r3
    1826:	2b0f      	cmp	r3, #15
    1828:	d9f4      	bls.n	1814 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    182a:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    182c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1830:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    1834:	bd10      	pop	{r4, pc}
    1836:	bf00      	nop
    1838:	e000e100 	.word	0xe000e100

0000183c <z_impl_k_thread_abort>:
#include <kswap.h>
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    183c:	b508      	push	{r3, lr}
	if (_current == thread) {
    183e:	4b0a      	ldr	r3, [pc, #40]	; (1868 <z_impl_k_thread_abort+0x2c>)
    1840:	689b      	ldr	r3, [r3, #8]
    1842:	4283      	cmp	r3, r0
    1844:	d002      	beq.n	184c <z_impl_k_thread_abort+0x10>
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
		}
	}

	z_thread_abort(thread);
    1846:	f002 fe29 	bl	449c <z_thread_abort>
}
    184a:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    184c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    1850:	2b00      	cmp	r3, #0
    1852:	d0f8      	beq.n	1846 <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1854:	4b05      	ldr	r3, [pc, #20]	; (186c <z_impl_k_thread_abort+0x30>)
    1856:	685a      	ldr	r2, [r3, #4]
    1858:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    185c:	605a      	str	r2, [r3, #4]
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    185e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    1860:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    1864:	625a      	str	r2, [r3, #36]	; 0x24
    1866:	e7ee      	b.n	1846 <z_impl_k_thread_abort+0xa>
    1868:	20000950 	.word	0x20000950
    186c:	e000ed00 	.word	0xe000ed00

00001870 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    1870:	b510      	push	{r4, lr}
    1872:	b084      	sub	sp, #16
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    1874:	4c0a      	ldr	r4, [pc, #40]	; (18a0 <z_arm_configure_static_mpu_regions+0x30>)
    1876:	4623      	mov	r3, r4
    1878:	4a0a      	ldr	r2, [pc, #40]	; (18a4 <z_arm_configure_static_mpu_regions+0x34>)
    187a:	2101      	movs	r1, #1
    187c:	480a      	ldr	r0, [pc, #40]	; (18a8 <z_arm_configure_static_mpu_regions+0x38>)
    187e:	f003 fe80 	bl	5582 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    1882:	2300      	movs	r3, #0
    1884:	9301      	str	r3, [sp, #4]
    1886:	9302      	str	r3, [sp, #8]
    1888:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    188a:	4b08      	ldr	r3, [pc, #32]	; (18ac <z_arm_configure_static_mpu_regions+0x3c>)
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    188c:	9301      	str	r3, [sp, #4]
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    188e:	1ae4      	subs	r4, r4, r3
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    1890:	9402      	str	r4, [sp, #8]
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    1892:	2101      	movs	r1, #1
    1894:	a801      	add	r0, sp, #4
    1896:	f003 fe78 	bl	558a <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    189a:	b004      	add	sp, #16
    189c:	bd10      	pop	{r4, pc}
    189e:	bf00      	nop
    18a0:	20070000 	.word	0x20070000
    18a4:	20000000 	.word	0x20000000
    18a8:	00006d08 	.word	0x00006d08
    18ac:	20000190 	.word	0x20000190

000018b0 <mpu_init>:
static struct dynamic_region_info dyn_reg_info[MPU_DYNAMIC_REGION_AREAS_NUM];
#if defined(CONFIG_CPU_CORTEX_M23) || defined(CONFIG_CPU_CORTEX_M33) || \
	defined(CONFIG_CPU_CORTEX_M55)
static inline void mpu_set_mair0(uint32_t mair0)
{
	MPU->MAIR0 = mair0;
    18b0:	4b02      	ldr	r3, [pc, #8]	; (18bc <mpu_init+0xc>)
    18b2:	4a03      	ldr	r2, [pc, #12]	; (18c0 <mpu_init+0x10>)
    18b4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
{
	/* Configure the cache-ability attributes for all the
	 * different types of memory regions.
	 */
	mpu_set_mair0(MPU_MAIR_ATTRS);
}
    18b8:	4770      	bx	lr
    18ba:	bf00      	nop
    18bc:	e000ed00 	.word	0xe000ed00
    18c0:	0044ffaa 	.word	0x0044ffaa

000018c4 <mpu_set_region>:
	MPU->RNR = rnr;
    18c4:	4b03      	ldr	r3, [pc, #12]	; (18d4 <mpu_set_region+0x10>)
    18c6:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	MPU->RBAR = rbar;
    18ca:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
	MPU->RLAR = rlar;
    18ce:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
static void mpu_set_region(uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
	mpu_set_rnr(rnr);
	mpu_set_rbar(rbar);
	mpu_set_rlar(rlar);
}
    18d2:	4770      	bx	lr
    18d4:	e000ed00 	.word	0xe000ed00

000018d8 <mpu_region_get_conf>:
	MPU->RNR = rnr;
    18d8:	4b0e      	ldr	r3, [pc, #56]	; (1914 <mpu_region_get_conf+0x3c>)
    18da:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
    18de:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	return MPU->RBAR;
    18e2:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
static inline void mpu_region_get_access_attr(const uint32_t index,
	arm_mpu_region_attr_t *attr)
{
	mpu_set_rnr(index);

	attr->rbar = mpu_get_rbar() &
    18e6:	7a0a      	ldrb	r2, [r1, #8]
    18e8:	f360 0204 	bfi	r2, r0, #0, #5
    18ec:	720a      	strb	r2, [r1, #8]
	return MPU->RLAR;
    18ee:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    18f2:	f3c2 0242 	ubfx	r2, r2, #1, #3
    18f6:	7a08      	ldrb	r0, [r1, #8]
    18f8:	f362 1047 	bfi	r0, r2, #5, #3
    18fc:	7208      	strb	r0, [r1, #8]
	return MPU->RBAR;
    18fe:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
	 * - Access Permissions
	 */
	mpu_region_get_access_attr(index, &region_conf->attr);

	/* Region base address */
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    1902:	f022 021f 	bic.w	r2, r2, #31
    1906:	600a      	str	r2, [r1, #0]
	return MPU->RLAR;
    1908:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0

	/* Region limit address */
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
    190c:	f023 031f 	bic.w	r3, r3, #31
    1910:	60cb      	str	r3, [r1, #12]
}
    1912:	4770      	bx	lr
    1914:	e000ed00 	.word	0xe000ed00

00001918 <mpu_configure_regions_and_partition>:
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    1918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    191c:	b087      	sub	sp, #28
    191e:	4681      	mov	r9, r0
    1920:	9100      	str	r1, [sp, #0]
    1922:	9301      	str	r3, [sp, #4]
	int i;
	int reg_index = start_reg_index;
    1924:	4614      	mov	r4, r2

	for (i = 0; i < regions_num; i++) {
    1926:	2700      	movs	r7, #0
    1928:	e034      	b.n	1994 <mpu_configure_regions_and_partition+0x7c>
		 */
		uint32_t u_reg_base = mpu_region_get_base(u_reg_index);
		uint32_t u_reg_last = mpu_region_get_last_addr(u_reg_index);
		uint32_t reg_last = regions[i].start + regions[i].size - 1;

		if ((regions[i].start == u_reg_base) &&
    192a:	45d8      	cmp	r8, fp
    192c:	d165      	bne.n	19fa <mpu_configure_regions_and_partition+0xe2>
			 * underlying region. In this case we simply
			 * update the partition attributes of the
			 * underlying region with those of the new
			 * region.
			 */
			mpu_configure_region(u_reg_index, &regions[i]);
    192e:	4629      	mov	r1, r5
    1930:	b2c0      	uxtb	r0, r0
    1932:	f003 fdf6 	bl	5522 <mpu_configure_region>
    1936:	e02c      	b.n	1992 <mpu_configure_regions_and_partition+0x7a>
	MPU->RNR = rnr;
    1938:	4a58      	ldr	r2, [pc, #352]	; (1a9c <mpu_configure_regions_and_partition+0x184>)
    193a:	f8c2 6098 	str.w	r6, [r2, #152]	; 0x98
	return MPU->RBAR;
    193e:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
    1942:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
    1946:	f021 011f 	bic.w	r1, r1, #31
    194a:	430b      	orrs	r3, r1
	MPU->RBAR = rbar;
    194c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
			 */
			mpu_region_set_base(u_reg_index,
				regions[i].start + regions[i].size);

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    1950:	4629      	mov	r1, r5
    1952:	b2e0      	uxtb	r0, r4
    1954:	f003 fde5 	bl	5522 <mpu_configure_region>
    1958:	4604      	mov	r4, r0

			if (reg_index == -EINVAL) {
    195a:	f110 0f16 	cmn.w	r0, #22
    195e:	f000 8096 	beq.w	1a8e <mpu_configure_regions_and_partition+0x176>
				return reg_index;
			}

			reg_index++;
    1962:	3401      	adds	r4, #1
    1964:	e015      	b.n	1992 <mpu_configure_regions_and_partition+0x7a>
			 * underlying region; the end of the underlying
			 * region needs to be set to the start of the
			 * new region.
			 */
			mpu_region_set_limit(u_reg_index,
				regions[i].start - 1);
    1966:	3b01      	subs	r3, #1
	MPU->RNR = rnr;
    1968:	494c      	ldr	r1, [pc, #304]	; (1a9c <mpu_configure_regions_and_partition+0x184>)
    196a:	f8c1 6098 	str.w	r6, [r1, #152]	; 0x98
	return MPU->RLAR;
    196e:	f8d1 20a0 	ldr.w	r2, [r1, #160]	; 0xa0
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    1972:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    1976:	f023 031f 	bic.w	r3, r3, #31
    197a:	4313      	orrs	r3, r2
	MPU->RLAR = rlar;
    197c:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    1980:	4629      	mov	r1, r5
    1982:	b2e0      	uxtb	r0, r4
    1984:	f003 fdcd 	bl	5522 <mpu_configure_region>
    1988:	4604      	mov	r4, r0

			if (reg_index == -EINVAL) {
    198a:	f110 0f16 	cmn.w	r0, #22
    198e:	d07e      	beq.n	1a8e <mpu_configure_regions_and_partition+0x176>
				return reg_index;
			}

			reg_index++;
    1990:	3401      	adds	r4, #1
	for (i = 0; i < regions_num; i++) {
    1992:	3701      	adds	r7, #1
    1994:	9b00      	ldr	r3, [sp, #0]
    1996:	429f      	cmp	r7, r3
    1998:	da79      	bge.n	1a8e <mpu_configure_regions_and_partition+0x176>
		if (regions[i].size == 0U) {
    199a:	eb07 0547 	add.w	r5, r7, r7, lsl #1
    199e:	ea4f 0a85 	mov.w	sl, r5, lsl #2
    19a2:	eb09 0585 	add.w	r5, r9, r5, lsl #2
    19a6:	686e      	ldr	r6, [r5, #4]
    19a8:	2e00      	cmp	r6, #0
    19aa:	d0f2      	beq.n	1992 <mpu_configure_regions_and_partition+0x7a>
		if (do_sanity_check &&
    19ac:	9b01      	ldr	r3, [sp, #4]
    19ae:	b123      	cbz	r3, 19ba <mpu_configure_regions_and_partition+0xa2>
			(!mpu_partition_is_valid(&regions[i]))) {
    19b0:	4628      	mov	r0, r5
    19b2:	f003 fd99 	bl	54e8 <mpu_partition_is_valid>
		if (do_sanity_check &&
    19b6:	2800      	cmp	r0, #0
    19b8:	d065      	beq.n	1a86 <mpu_configure_regions_and_partition+0x16e>
			get_region_index(regions[i].start, regions[i].size);
    19ba:	4631      	mov	r1, r6
    19bc:	f859 000a 	ldr.w	r0, [r9, sl]
    19c0:	f003 fdce 	bl	5560 <get_region_index>
    19c4:	4606      	mov	r6, r0
		if ((u_reg_index == -EINVAL) ||
    19c6:	f110 0f16 	cmn.w	r0, #22
    19ca:	d05f      	beq.n	1a8c <mpu_configure_regions_and_partition+0x174>
    19cc:	42a0      	cmp	r0, r4
    19ce:	da62      	bge.n	1a96 <mpu_configure_regions_and_partition+0x17e>
	MPU->RNR = rnr;
    19d0:	4b32      	ldr	r3, [pc, #200]	; (1a9c <mpu_configure_regions_and_partition+0x184>)
    19d2:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	return MPU->RBAR;
    19d6:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    19da:	f022 021f 	bic.w	r2, r2, #31
	MPU->RNR = rnr;
    19de:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	return MPU->RLAR;
    19e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    19e6:	f043 081f 	orr.w	r8, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    19ea:	f859 300a 	ldr.w	r3, [r9, sl]
    19ee:	6869      	ldr	r1, [r5, #4]
    19f0:	4419      	add	r1, r3
    19f2:	f101 3bff 	add.w	fp, r1, #4294967295
		if ((regions[i].start == u_reg_base) &&
    19f6:	429a      	cmp	r2, r3
    19f8:	d097      	beq.n	192a <mpu_configure_regions_and_partition+0x12>
		} else if (regions[i].start == u_reg_base) {
    19fa:	429a      	cmp	r2, r3
    19fc:	d09c      	beq.n	1938 <mpu_configure_regions_and_partition+0x20>
		} else if (reg_last == u_reg_last) {
    19fe:	45d8      	cmp	r8, fp
    1a00:	d0b1      	beq.n	1966 <mpu_configure_regions_and_partition+0x4e>
			/* The new regions lies strictly inside the
			 * underlying region, which needs to split
			 * into two regions.
			 */
			mpu_region_set_limit(u_reg_index,
				regions[i].start - 1);
    1a02:	3b01      	subs	r3, #1
	MPU->RNR = rnr;
    1a04:	4925      	ldr	r1, [pc, #148]	; (1a9c <mpu_configure_regions_and_partition+0x184>)
    1a06:	f8c1 6098 	str.w	r6, [r1, #152]	; 0x98
	return MPU->RLAR;
    1a0a:	f8d1 20a0 	ldr.w	r2, [r1, #160]	; 0xa0
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    1a0e:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    1a12:	f023 031f 	bic.w	r3, r3, #31
    1a16:	4313      	orrs	r3, r2
	MPU->RLAR = rlar;
    1a18:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    1a1c:	4629      	mov	r1, r5
    1a1e:	b2e0      	uxtb	r0, r4
    1a20:	f003 fd7f 	bl	5522 <mpu_configure_region>
    1a24:	4604      	mov	r4, r0

			if (reg_index == -EINVAL) {
    1a26:	f110 0f16 	cmn.w	r0, #22
    1a2a:	d030      	beq.n	1a8e <mpu_configure_regions_and_partition+0x176>
				return reg_index;
			}
			reg_index++;
    1a2c:	3001      	adds	r0, #1
	MPU->RNR = rnr;
    1a2e:	4b1b      	ldr	r3, [pc, #108]	; (1a9c <mpu_configure_regions_and_partition+0x184>)
    1a30:	f8c3 6098 	str.w	r6, [r3, #152]	; 0x98
	return MPU->RBAR;
    1a34:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    1a38:	f89d 2010 	ldrb.w	r2, [sp, #16]
    1a3c:	f361 0204 	bfi	r2, r1, #0, #5
    1a40:	f88d 2010 	strb.w	r2, [sp, #16]
	return MPU->RLAR;
    1a44:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    1a48:	f3c3 0342 	ubfx	r3, r3, #1, #3
    1a4c:	b2d2      	uxtb	r2, r2
    1a4e:	f363 1247 	bfi	r2, r3, #5, #3
    1a52:	f88d 2010 	strb.w	r2, [sp, #16]
			 */
			struct arm_mpu_region fill_region;

			mpu_region_get_access_attr(u_reg_index,
				&fill_region.attr);
			fill_region.base = regions[i].start +
    1a56:	f859 300a 	ldr.w	r3, [r9, sl]
				regions[i].size;
    1a5a:	686a      	ldr	r2, [r5, #4]
			fill_region.base = regions[i].start +
    1a5c:	4413      	add	r3, r2
    1a5e:	9302      	str	r3, [sp, #8]
			fill_region.attr.r_limit =
			REGION_LIMIT_ADDR((regions[i].start +
    1a60:	f023 031f 	bic.w	r3, r3, #31
    1a64:	eba8 080b 	sub.w	r8, r8, fp
    1a68:	4443      	add	r3, r8
    1a6a:	3b01      	subs	r3, #1
    1a6c:	f023 031f 	bic.w	r3, r3, #31
			fill_region.attr.r_limit =
    1a70:	9305      	str	r3, [sp, #20]
				regions[i].size), (u_reg_last - reg_last));

			reg_index =
				region_allocate_and_init(reg_index,
    1a72:	a902      	add	r1, sp, #8
    1a74:	b2c0      	uxtb	r0, r0
    1a76:	f003 fd49 	bl	550c <region_allocate_and_init>
    1a7a:	4604      	mov	r4, r0
					(const struct arm_mpu_region *)
						&fill_region);

			if (reg_index == -EINVAL) {
    1a7c:	f110 0f16 	cmn.w	r0, #22
    1a80:	d005      	beq.n	1a8e <mpu_configure_regions_and_partition+0x176>
				return reg_index;
			}

			reg_index++;
    1a82:	3401      	adds	r4, #1
    1a84:	e785      	b.n	1992 <mpu_configure_regions_and_partition+0x7a>
			return -EINVAL;
    1a86:	f06f 0415 	mvn.w	r4, #21
    1a8a:	e000      	b.n	1a8e <mpu_configure_regions_and_partition+0x176>
			return -EINVAL;
    1a8c:	4604      	mov	r4, r0
		}
	}

	return reg_index;
}
    1a8e:	4620      	mov	r0, r4
    1a90:	b007      	add	sp, #28
    1a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
    1a96:	f06f 0415 	mvn.w	r4, #21
    1a9a:	e7f8      	b.n	1a8e <mpu_configure_regions_and_partition+0x176>
    1a9c:	e000ed00 	.word	0xe000ed00

00001aa0 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    1aa0:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    1aa2:	4c03      	ldr	r4, [pc, #12]	; (1ab0 <mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    1aa4:	2301      	movs	r3, #1
    1aa6:	7822      	ldrb	r2, [r4, #0]
    1aa8:	f7ff ff36 	bl	1918 <mpu_configure_regions_and_partition>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    1aac:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    1aae:	bd10      	pop	{r4, pc}
    1ab0:	20000b64 	.word	0x20000b64

00001ab4 <mpu_mark_areas_for_dynamic_regions>:
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
		const struct z_arm_mpu_partition dyn_region_areas[],
		const uint8_t dyn_region_areas_num)
{
    1ab4:	b570      	push	{r4, r5, r6, lr}
    1ab6:	4605      	mov	r5, r0
    1ab8:	460e      	mov	r6, r1
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    1aba:	2400      	movs	r4, #0
    1abc:	e000      	b.n	1ac0 <mpu_mark_areas_for_dynamic_regions+0xc>
    1abe:	3401      	adds	r4, #1
    1ac0:	42a6      	cmp	r6, r4
    1ac2:	dd1e      	ble.n	1b02 <mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    1ac4:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    1ac8:	009a      	lsls	r2, r3, #2
    1aca:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    1ace:	6859      	ldr	r1, [r3, #4]
    1ad0:	2900      	cmp	r1, #0
    1ad2:	d0f4      	beq.n	1abe <mpu_mark_areas_for_dynamic_regions+0xa>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    1ad4:	58a8      	ldr	r0, [r5, r2]
    1ad6:	f003 fd43 	bl	5560 <get_region_index>
		dyn_reg_info[i].index =
    1ada:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    1ade:	4a0b      	ldr	r2, [pc, #44]	; (1b0c <mpu_mark_areas_for_dynamic_regions+0x58>)
    1ae0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    1ae4:	f110 0f16 	cmn.w	r0, #22
    1ae8:	d00c      	beq.n	1b04 <mpu_mark_areas_for_dynamic_regions+0x50>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    1aea:	4b09      	ldr	r3, [pc, #36]	; (1b10 <mpu_mark_areas_for_dynamic_regions+0x5c>)
    1aec:	781b      	ldrb	r3, [r3, #0]
    1aee:	4298      	cmp	r0, r3
    1af0:	da09      	bge.n	1b06 <mpu_mark_areas_for_dynamic_regions+0x52>

			return -EINVAL;
		}

		/* Store default configuration */
		mpu_region_get_conf(dyn_reg_info[i].index,
    1af2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    1af6:	eb02 0183 	add.w	r1, r2, r3, lsl #2
    1afa:	3104      	adds	r1, #4
    1afc:	f7ff feec 	bl	18d8 <mpu_region_get_conf>
    1b00:	e7dd      	b.n	1abe <mpu_mark_areas_for_dynamic_regions+0xa>
			&dyn_reg_info[i].region_conf);
	}

	return 0;
    1b02:	2000      	movs	r0, #0
}
    1b04:	bd70      	pop	{r4, r5, r6, pc}
			return -EINVAL;
    1b06:	f06f 0015 	mvn.w	r0, #21
    1b0a:	e7fb      	b.n	1b04 <mpu_mark_areas_for_dynamic_regions+0x50>
    1b0c:	20000858 	.word	0x20000858
    1b10:	20000b64 	.word	0x20000b64

00001b14 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    1b14:	4b04      	ldr	r3, [pc, #16]	; (1b28 <arm_core_mpu_enable+0x14>)
    1b16:	2205      	movs	r2, #5
    1b18:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    1b1c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1b20:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    1b24:	4770      	bx	lr
    1b26:	bf00      	nop
    1b28:	e000ed00 	.word	0xe000ed00

00001b2c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    1b2c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    1b30:	4b02      	ldr	r3, [pc, #8]	; (1b3c <arm_core_mpu_disable+0x10>)
    1b32:	2200      	movs	r2, #0
    1b34:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    1b38:	4770      	bx	lr
    1b3a:	bf00      	nop
    1b3c:	e000ed00 	.word	0xe000ed00

00001b40 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    1b40:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    1b42:	4b0e      	ldr	r3, [pc, #56]	; (1b7c <z_arm_mpu_init+0x3c>)
    1b44:	681d      	ldr	r5, [r3, #0]
    1b46:	2d08      	cmp	r5, #8
    1b48:	d815      	bhi.n	1b76 <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    1b4a:	f7ff ffef 	bl	1b2c <arm_core_mpu_disable>
	}
#endif
#endif /* CONFIG_NOCACHE_MEMORY */

	/* Architecture-specific configuration */
	mpu_init();
    1b4e:	f7ff feaf 	bl	18b0 <mpu_init>

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1b52:	2400      	movs	r4, #0
    1b54:	e007      	b.n	1b66 <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    1b56:	4b09      	ldr	r3, [pc, #36]	; (1b7c <z_arm_mpu_init+0x3c>)
    1b58:	6859      	ldr	r1, [r3, #4]
    1b5a:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    1b5e:	4620      	mov	r0, r4
    1b60:	f003 fcae 	bl	54c0 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1b64:	3401      	adds	r4, #1
    1b66:	42a5      	cmp	r5, r4
    1b68:	d8f5      	bhi.n	1b56 <z_arm_mpu_init+0x16>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    1b6a:	4b05      	ldr	r3, [pc, #20]	; (1b80 <z_arm_mpu_init+0x40>)
    1b6c:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    1b6e:	f7ff ffd1 	bl	1b14 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    1b72:	2000      	movs	r0, #0
}
    1b74:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    1b76:	f04f 30ff 	mov.w	r0, #4294967295
    1b7a:	e7fb      	b.n	1b74 <z_arm_mpu_init+0x34>
    1b7c:	00006d14 	.word	0x00006d14
    1b80:	20000b64 	.word	0x20000b64

00001b84 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    1b84:	4b01      	ldr	r3, [pc, #4]	; (1b8c <__stdout_hook_install+0x8>)
    1b86:	6018      	str	r0, [r3, #0]
}
    1b88:	4770      	bx	lr
    1b8a:	bf00      	nop
    1b8c:	20000028 	.word	0x20000028

00001b90 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    1b90:	4800      	ldr	r0, [pc, #0]	; (1b94 <get_hf_flags+0x4>)
    1b92:	4770      	bx	lr
    1b94:	200008f8 	.word	0x200008f8

00001b98 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    1b98:	4b03      	ldr	r3, [pc, #12]	; (1ba8 <get_subsys+0x10>)
    1b9a:	1ac0      	subs	r0, r0, r3
    1b9c:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
    1b9e:	4b03      	ldr	r3, [pc, #12]	; (1bac <get_subsys+0x14>)
    1ba0:	fb03 f000 	mul.w	r0, r3, r0
    1ba4:	4770      	bx	lr
    1ba6:	bf00      	nop
    1ba8:	20000880 	.word	0x20000880
    1bac:	b6db6db7 	.word	0xb6db6db7

00001bb0 <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1bb0:	b538      	push	{r3, r4, r5, lr}
    1bb2:	4605      	mov	r5, r0
    1bb4:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1bb6:	f7ff ffef 	bl	1b98 <get_subsys>
    1bba:	4601      	mov	r1, r0
    1bbc:	2240      	movs	r2, #64	; 0x40
    1bbe:	4803      	ldr	r0, [pc, #12]	; (1bcc <onoff_stop+0x1c>)
    1bc0:	f003 fe13 	bl	57ea <stop>
    1bc4:	4601      	mov	r1, r0
	notify(mgr, res);
    1bc6:	4628      	mov	r0, r5
    1bc8:	47a0      	blx	r4
}
    1bca:	bd38      	pop	{r3, r4, r5, pc}
    1bcc:	0000693c 	.word	0x0000693c

00001bd0 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1bd0:	b530      	push	{r4, r5, lr}
    1bd2:	b083      	sub	sp, #12
    1bd4:	4605      	mov	r5, r0
    1bd6:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1bd8:	f7ff ffde 	bl	1b98 <get_subsys>
    1bdc:	4601      	mov	r1, r0
    1bde:	2340      	movs	r3, #64	; 0x40
    1be0:	9300      	str	r3, [sp, #0]
    1be2:	4623      	mov	r3, r4
    1be4:	4a05      	ldr	r2, [pc, #20]	; (1bfc <onoff_start+0x2c>)
    1be6:	4806      	ldr	r0, [pc, #24]	; (1c00 <onoff_start+0x30>)
    1be8:	f003 fe19 	bl	581e <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    1bec:	1e01      	subs	r1, r0, #0
    1bee:	db01      	blt.n	1bf4 <onoff_start+0x24>
		notify(mgr, err);
	}
}
    1bf0:	b003      	add	sp, #12
    1bf2:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    1bf4:	4628      	mov	r0, r5
    1bf6:	47a0      	blx	r4
}
    1bf8:	e7fa      	b.n	1bf0 <onoff_start+0x20>
    1bfa:	bf00      	nop
    1bfc:	00005867 	.word	0x00005867
    1c00:	0000693c 	.word	0x0000693c

00001c04 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    1c04:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    1c06:	2805      	cmp	r0, #5
    1c08:	d815      	bhi.n	1c36 <clock_event_handler+0x32>
    1c0a:	e8df f000 	tbb	[pc, r0]
    1c0e:	1a03      	.short	0x1a03
    1c10:	10151414 	.word	0x10151414
	case NRFX_CLOCK_EVT_HFCLK_STARTED:
	{
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    1c14:	2100      	movs	r1, #0
    1c16:	480d      	ldr	r0, [pc, #52]	; (1c4c <clock_event_handler+0x48>)
    1c18:	f003 fd72 	bl	5700 <get_sub_data>

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    1c1c:	6883      	ldr	r3, [r0, #8]
    1c1e:	f013 0f07 	tst.w	r3, #7
    1c22:	d108      	bne.n	1c36 <clock_event_handler+0x32>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    1c24:	2100      	movs	r1, #0
    1c26:	4809      	ldr	r0, [pc, #36]	; (1c4c <clock_event_handler+0x48>)
    1c28:	f003 fdcd 	bl	57c6 <clkstarted_handle>
    1c2c:	e003      	b.n	1c36 <clock_event_handler+0x32>

		break;
	}
#if NRF_CLOCK_HAS_HFCLK192M
	case NRFX_CLOCK_EVT_HFCLK192M_STARTED:
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
    1c2e:	2102      	movs	r1, #2
    1c30:	4806      	ldr	r0, [pc, #24]	; (1c4c <clock_event_handler+0x48>)
    1c32:	f003 fdc8 	bl	57c6 <clkstarted_handle>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
    1c36:	bd08      	pop	{r3, pc}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
    1c38:	2103      	movs	r1, #3
    1c3a:	4804      	ldr	r0, [pc, #16]	; (1c4c <clock_event_handler+0x48>)
    1c3c:	f003 fdc3 	bl	57c6 <clkstarted_handle>
		break;
    1c40:	e7f9      	b.n	1c36 <clock_event_handler+0x32>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    1c42:	2101      	movs	r1, #1
    1c44:	4801      	ldr	r0, [pc, #4]	; (1c4c <clock_event_handler+0x48>)
    1c46:	f003 fdbe 	bl	57c6 <clkstarted_handle>
}
    1c4a:	e7f4      	b.n	1c36 <clock_event_handler+0x32>
    1c4c:	0000693c 	.word	0x0000693c

00001c50 <generic_hfclk_start>:
{
    1c50:	b510      	push	{r4, lr}
    1c52:	b082      	sub	sp, #8
	__asm__ volatile(
    1c54:	f04f 0320 	mov.w	r3, #32
    1c58:	f3ef 8411 	mrs	r4, BASEPRI
    1c5c:	f383 8812 	msr	BASEPRI_MAX, r3
    1c60:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    1c64:	4a14      	ldr	r2, [pc, #80]	; (1cb8 <generic_hfclk_start+0x68>)
    1c66:	6813      	ldr	r3, [r2, #0]
    1c68:	f043 0102 	orr.w	r1, r3, #2
    1c6c:	6011      	str	r1, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    1c6e:	f013 0f01 	tst.w	r3, #1
    1c72:	d109      	bne.n	1c88 <generic_hfclk_start+0x38>
	bool already_started = false;
    1c74:	2300      	movs	r3, #0
	__asm__ volatile(
    1c76:	f384 8811 	msr	BASEPRI, r4
    1c7a:	f3bf 8f6f 	isb	sy
	if (already_started) {
    1c7e:	b9b3      	cbnz	r3, 1cae <generic_hfclk_start+0x5e>
	hfclk_start();
    1c80:	f003 fdf9 	bl	5876 <hfclk_start>
}
    1c84:	b002      	add	sp, #8
    1c86:	bd10      	pop	{r4, pc}
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
    1c88:	f10d 0207 	add.w	r2, sp, #7
    1c8c:	2101      	movs	r1, #1
    1c8e:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
    1c92:	f003 fcfb 	bl	568c <nrf_clock_is_running>
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    1c96:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1c9a:	2b01      	cmp	r3, #1
    1c9c:	d001      	beq.n	1ca2 <generic_hfclk_start+0x52>
	bool already_started = false;
    1c9e:	2300      	movs	r3, #0
    1ca0:	e7e9      	b.n	1c76 <generic_hfclk_start+0x26>
			set_on_state(get_hf_flags());
    1ca2:	f7ff ff75 	bl	1b90 <get_hf_flags>
    1ca6:	f003 fd7b 	bl	57a0 <set_on_state>
			already_started = true;
    1caa:	2301      	movs	r3, #1
    1cac:	e7e3      	b.n	1c76 <generic_hfclk_start+0x26>
		clkstarted_handle(CLOCK_DEVICE,
    1cae:	2100      	movs	r1, #0
    1cb0:	4802      	ldr	r0, [pc, #8]	; (1cbc <generic_hfclk_start+0x6c>)
    1cb2:	f003 fd88 	bl	57c6 <clkstarted_handle>
		return;
    1cb6:	e7e5      	b.n	1c84 <generic_hfclk_start+0x34>
    1cb8:	20000920 	.word	0x20000920
    1cbc:	0000693c 	.word	0x0000693c

00001cc0 <generic_hfclk_stop>:
{
    1cc0:	b508      	push	{r3, lr}
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1cc2:	4b08      	ldr	r3, [pc, #32]	; (1ce4 <generic_hfclk_stop+0x24>)
    1cc4:	e8d3 2fef 	ldaex	r2, [r3]
    1cc8:	f022 0102 	bic.w	r1, r2, #2
    1ccc:	e8c3 1fe0 	stlex	r0, r1, [r3]
    1cd0:	2800      	cmp	r0, #0
    1cd2:	d1f7      	bne.n	1cc4 <generic_hfclk_stop+0x4>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    1cd4:	f012 0f01 	tst.w	r2, #1
    1cd8:	d000      	beq.n	1cdc <generic_hfclk_stop+0x1c>
}
    1cda:	bd08      	pop	{r3, pc}
	hfclk_stop();
    1cdc:	f003 fddf 	bl	589e <hfclk_stop>
    1ce0:	e7fb      	b.n	1cda <generic_hfclk_stop+0x1a>
    1ce2:	bf00      	nop
    1ce4:	20000920 	.word	0x20000920

00001ce8 <lfclk_spinwait>:
{
    1ce8:	b570      	push	{r4, r5, r6, lr}
    1cea:	b082      	sub	sp, #8
    1cec:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    1cee:	2801      	cmp	r0, #1
    1cf0:	d107      	bne.n	1d02 <lfclk_spinwait+0x1a>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    1cf2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1cf6:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    1cfa:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    1cfe:	2b02      	cmp	r3, #2
    1d00:	d037      	beq.n	1d72 <lfclk_spinwait+0x8a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    1d02:	f004 fc32 	bl	656a <k_is_in_isr>
    1d06:	4604      	mov	r4, r0
    1d08:	b910      	cbnz	r0, 1d10 <lfclk_spinwait+0x28>
	return !z_sys_post_kernel;
    1d0a:	4b2b      	ldr	r3, [pc, #172]	; (1db8 <lfclk_spinwait+0xd0>)
    1d0c:	781b      	ldrb	r3, [r3, #0]
    1d0e:	b97b      	cbnz	r3, 1d30 <lfclk_spinwait+0x48>
	__asm__ volatile(
    1d10:	f04f 0320 	mov.w	r3, #32
    1d14:	f3ef 8611 	mrs	r6, BASEPRI
    1d18:	f383 8812 	msr	BASEPRI_MAX, r3
    1d1c:	f3bf 8f6f 	isb	sy
    1d20:	2401      	movs	r4, #1
	if (!isr_mode) {
    1d22:	b994      	cbnz	r4, 1d4a <lfclk_spinwait+0x62>
    p_reg->INTENCLR = mask;
    1d24:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1d28:	2202      	movs	r2, #2
    1d2a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    1d2e:	e00c      	b.n	1d4a <lfclk_spinwait+0x62>
	int key = isr_mode ? irq_lock() : 0;
    1d30:	2600      	movs	r6, #0
    1d32:	e7f6      	b.n	1d22 <lfclk_spinwait+0x3a>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    1d34:	b1fc      	cbz	r4, 1d76 <lfclk_spinwait+0x8e>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    1d36:	4630      	mov	r0, r6
    1d38:	f7ff fa96 	bl	1268 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    1d3c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1d40:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    1d44:	b2db      	uxtb	r3, r3
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    1d46:	2b01      	cmp	r3, #1
    1d48:	d019      	beq.n	1d7e <lfclk_spinwait+0x96>
    1d4a:	f10d 0207 	add.w	r2, sp, #7
    1d4e:	2100      	movs	r1, #0
    1d50:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
    1d54:	f003 fc9a 	bl	568c <nrf_clock_is_running>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    1d58:	2800      	cmp	r0, #0
    1d5a:	d0eb      	beq.n	1d34 <lfclk_spinwait+0x4c>
		 && ((type == target_type)
    1d5c:	f89d 3007 	ldrb.w	r3, [sp, #7]
	while (!(nrfx_clock_is_running(d, (void *)&type)
    1d60:	2b02      	cmp	r3, #2
    1d62:	d001      	beq.n	1d68 <lfclk_spinwait+0x80>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    1d64:	2d01      	cmp	r5, #1
    1d66:	d1e5      	bne.n	1d34 <lfclk_spinwait+0x4c>
	if (isr_mode) {
    1d68:	b304      	cbz	r4, 1dac <lfclk_spinwait+0xc4>
	__asm__ volatile(
    1d6a:	f386 8811 	msr	BASEPRI, r6
    1d6e:	f3bf 8f6f 	isb	sy
}
    1d72:	b002      	add	sp, #8
    1d74:	bd70      	pop	{r4, r5, r6, pc}
				k_msleep(1);
    1d76:	2001      	movs	r0, #1
    1d78:	f003 fda5 	bl	58c6 <k_msleep>
    1d7c:	e7de      	b.n	1d3c <lfclk_spinwait+0x54>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    1d7e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1d82:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    1d86:	2b00      	cmp	r3, #0
    1d88:	d0df      	beq.n	1d4a <lfclk_spinwait+0x62>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1d8a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1d8e:	2200      	movs	r2, #0
    1d90:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    1d94:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    1d98:	2202      	movs	r2, #2
    1d9a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1d9e:	4a07      	ldr	r2, [pc, #28]	; (1dbc <lfclk_spinwait+0xd4>)
    1da0:	2120      	movs	r1, #32
    1da2:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1da6:	2201      	movs	r2, #1
    1da8:	609a      	str	r2, [r3, #8]
}
    1daa:	e7ce      	b.n	1d4a <lfclk_spinwait+0x62>
    p_reg->INTENSET = mask;
    1dac:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1db0:	2202      	movs	r2, #2
    1db2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    1db6:	e7dc      	b.n	1d72 <lfclk_spinwait+0x8a>
    1db8:	20000b67 	.word	0x20000b67
    1dbc:	e000e100 	.word	0xe000e100

00001dc0 <api_blocking_start>:
{
    1dc0:	b500      	push	{lr}
    1dc2:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1dc4:	f8cd d000 	str.w	sp, [sp]
    1dc8:	f8cd d004 	str.w	sp, [sp, #4]
    1dcc:	2300      	movs	r3, #0
    1dce:	9302      	str	r3, [sp, #8]
    1dd0:	2301      	movs	r3, #1
    1dd2:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1dd4:	466b      	mov	r3, sp
    1dd6:	4a07      	ldr	r2, [pc, #28]	; (1df4 <api_blocking_start+0x34>)
    1dd8:	f003 fd3d 	bl	5856 <api_start>
	if (err < 0) {
    1ddc:	2800      	cmp	r0, #0
    1dde:	db05      	blt.n	1dec <api_blocking_start+0x2c>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    1de0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    1de4:	2300      	movs	r3, #0
    1de6:	4668      	mov	r0, sp
    1de8:	f001 ff7c 	bl	3ce4 <z_impl_k_sem_take>
}
    1dec:	b005      	add	sp, #20
    1dee:	f85d fb04 	ldr.w	pc, [sp], #4
    1df2:	bf00      	nop
    1df4:	000058f3 	.word	0x000058f3

00001df8 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    1df8:	b570      	push	{r4, r5, r6, lr}
    1dfa:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1dfc:	2200      	movs	r2, #0
    1dfe:	2101      	movs	r1, #1
    1e00:	2005      	movs	r0, #5
    1e02:	f003 fb11 	bl	5428 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    1e06:	4811      	ldr	r0, [pc, #68]	; (1e4c <clk_init+0x54>)
    1e08:	f000 ff32 	bl	2c70 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    1e0c:	4b10      	ldr	r3, [pc, #64]	; (1e50 <clk_init+0x58>)
    1e0e:	4298      	cmp	r0, r3
    1e10:	d119      	bne.n	1e46 <clk_init+0x4e>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    1e12:	f004 fa18 	bl	6246 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    1e16:	2400      	movs	r4, #0
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    1e18:	2c03      	cmp	r4, #3
    1e1a:	d812      	bhi.n	1e42 <clk_init+0x4a>
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    1e1c:	4621      	mov	r1, r4
    1e1e:	4630      	mov	r0, r6
    1e20:	f003 fc6e 	bl	5700 <get_sub_data>
    1e24:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
    1e26:	4621      	mov	r1, r4
    1e28:	4630      	mov	r0, r6
    1e2a:	f003 fc74 	bl	5716 <get_onoff_manager>
    1e2e:	4909      	ldr	r1, [pc, #36]	; (1e54 <clk_init+0x5c>)
    1e30:	f002 ffde 	bl	4df0 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    1e34:	2800      	cmp	r0, #0
    1e36:	db05      	blt.n	1e44 <clk_init+0x4c>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1e38:	2301      	movs	r3, #1
    1e3a:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    1e3c:	441c      	add	r4, r3
    1e3e:	b2e4      	uxtb	r4, r4
    1e40:	e7ea      	b.n	1e18 <clk_init+0x20>
	}

	return 0;
    1e42:	2000      	movs	r0, #0
}
    1e44:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    1e46:	f06f 0004 	mvn.w	r0, #4
    1e4a:	e7fb      	b.n	1e44 <clk_init+0x4c>
    1e4c:	00001c05 	.word	0x00001c05
    1e50:	0bad0000 	.word	0x0bad0000
    1e54:	00006d4c 	.word	0x00006d4c

00001e58 <z_nrf_clock_control_lf_on>:
{
    1e58:	b510      	push	{r4, lr}
    1e5a:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1e5c:	4b0e      	ldr	r3, [pc, #56]	; (1e98 <z_nrf_clock_control_lf_on+0x40>)
    1e5e:	2101      	movs	r1, #1
    1e60:	e8d3 2fef 	ldaex	r2, [r3]
    1e64:	e8c3 1fe0 	stlex	r0, r1, [r3]
    1e68:	2800      	cmp	r0, #0
    1e6a:	d1f9      	bne.n	1e60 <z_nrf_clock_control_lf_on+0x8>
	if (atomic_set(&on, 1) == 0) {
    1e6c:	b11a      	cbz	r2, 1e76 <z_nrf_clock_control_lf_on+0x1e>
	switch (start_mode) {
    1e6e:	1e63      	subs	r3, r4, #1
    1e70:	2b01      	cmp	r3, #1
    1e72:	d90d      	bls.n	1e90 <z_nrf_clock_control_lf_on+0x38>
}
    1e74:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
    1e76:	4809      	ldr	r0, [pc, #36]	; (1e9c <z_nrf_clock_control_lf_on+0x44>)
    1e78:	f003 fc4d 	bl	5716 <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    1e7c:	4908      	ldr	r1, [pc, #32]	; (1ea0 <z_nrf_clock_control_lf_on+0x48>)
    1e7e:	2300      	movs	r3, #0
    1e80:	604b      	str	r3, [r1, #4]
    1e82:	608b      	str	r3, [r1, #8]
    1e84:	60cb      	str	r3, [r1, #12]
    1e86:	2301      	movs	r3, #1
    1e88:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    1e8a:	f002 ffce 	bl	4e2a <onoff_request>
    1e8e:	e7ee      	b.n	1e6e <z_nrf_clock_control_lf_on+0x16>
		lfclk_spinwait(start_mode);
    1e90:	4620      	mov	r0, r4
    1e92:	f7ff ff29 	bl	1ce8 <lfclk_spinwait>
		break;
    1e96:	e7ed      	b.n	1e74 <z_nrf_clock_control_lf_on+0x1c>
    1e98:	2000087c 	.word	0x2000087c
    1e9c:	0000693c 	.word	0x0000693c
    1ea0:	2000086c 	.word	0x2000086c

00001ea4 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    1ea4:	b510      	push	{r4, lr}
    1ea6:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    1ea8:	280a      	cmp	r0, #10
    1eaa:	d006      	beq.n	1eba <console_out+0x16>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    1eac:	b2e1      	uxtb	r1, r4
			     unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
					unsigned char out_char)
{
	const struct uart_driver_api *api =
    1eae:	4806      	ldr	r0, [pc, #24]	; (1ec8 <console_out+0x24>)
    1eb0:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    1eb2:	685b      	ldr	r3, [r3, #4]
    1eb4:	4798      	blx	r3

	return c;
}
    1eb6:	4620      	mov	r0, r4
    1eb8:	bd10      	pop	{r4, pc}
	const struct uart_driver_api *api =
    1eba:	4803      	ldr	r0, [pc, #12]	; (1ec8 <console_out+0x24>)
    1ebc:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    1ebe:	685b      	ldr	r3, [r3, #4]
    1ec0:	210d      	movs	r1, #13
    1ec2:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
    1ec4:	e7f2      	b.n	1eac <console_out+0x8>
    1ec6:	bf00      	nop
    1ec8:	00006984 	.word	0x00006984

00001ecc <uart_console_hook_install>:
/**
 * @brief Install printk/stdout hook for UART console output
 */

static void uart_console_hook_install(void)
{
    1ecc:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
    1ece:	4c04      	ldr	r4, [pc, #16]	; (1ee0 <uart_console_hook_install+0x14>)
    1ed0:	4620      	mov	r0, r4
    1ed2:	f7ff fe57 	bl	1b84 <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
    1ed6:	4620      	mov	r0, r4
    1ed8:	f7fe faf0 	bl	4bc <__printk_hook_install>
#endif
}
    1edc:	bd10      	pop	{r4, pc}
    1ede:	bf00      	nop
    1ee0:	00001ea5 	.word	0x00001ea5

00001ee4 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    1ee4:	b508      	push	{r3, lr}
    1ee6:	4805      	ldr	r0, [pc, #20]	; (1efc <uart_console_init+0x18>)
    1ee8:	f004 faad 	bl	6446 <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
    1eec:	b118      	cbz	r0, 1ef6 <uart_console_init+0x12>
		return -ENODEV;
	}

	uart_console_hook_install();
    1eee:	f7ff ffed 	bl	1ecc <uart_console_hook_install>

	return 0;
    1ef2:	2000      	movs	r0, #0
}
    1ef4:	bd08      	pop	{r3, pc}
		return -ENODEV;
    1ef6:	f06f 0012 	mvn.w	r0, #18
    1efa:	e7fb      	b.n	1ef4 <uart_console_init+0x10>
    1efc:	00006984 	.word	0x00006984

00001f00 <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    1f00:	b128      	cbz	r0, 1f0e <get_dev+0xe>
    1f02:	2801      	cmp	r0, #1
    1f04:	d101      	bne.n	1f0a <get_dev+0xa>
    1f06:	4803      	ldr	r0, [pc, #12]	; (1f14 <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
    1f08:	4770      	bx	lr
	const struct device *dev = NULL;
    1f0a:	2000      	movs	r0, #0
    1f0c:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    1f0e:	4802      	ldr	r0, [pc, #8]	; (1f18 <get_dev+0x18>)
    1f10:	4770      	bx	lr
    1f12:	bf00      	nop
    1f14:	00006954 	.word	0x00006954
    1f18:	0000696c 	.word	0x0000696c

00001f1c <gpio_nrfx_pin_interrupt_configure>:
{
    1f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f1e:	b085      	sub	sp, #20
    1f20:	460e      	mov	r6, r1
    1f22:	4619      	mov	r1, r3
	return port->config;
    1f24:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    1f26:	7b1b      	ldrb	r3, [r3, #12]
    1f28:	f006 051f 	and.w	r5, r6, #31
    1f2c:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    1f30:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
    1f34:	d022      	beq.n	1f7c <gpio_nrfx_pin_interrupt_configure+0x60>
    1f36:	4607      	mov	r7, r0
    1f38:	4614      	mov	r4, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    1f3a:	2300      	movs	r3, #0
    1f3c:	9301      	str	r3, [sp, #4]
    1f3e:	9302      	str	r3, [sp, #8]
		.trigger = get_trigger(mode, trig),
    1f40:	4610      	mov	r0, r2
    1f42:	f003 fdb0 	bl	5aa6 <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
    1f46:	f88d 0004 	strb.w	r0, [sp, #4]
	return port->config;
    1f4a:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    1f4c:	6899      	ldr	r1, [r3, #8]
    1f4e:	40f1      	lsrs	r1, r6
    1f50:	f011 0f01 	tst.w	r1, #1
    1f54:	d102      	bne.n	1f5c <gpio_nrfx_pin_interrupt_configure+0x40>
    1f56:	f1b4 7fa0 	cmp.w	r4, #20971520	; 0x1400000
    1f5a:	d014      	beq.n	1f86 <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    1f5c:	2300      	movs	r3, #0
    1f5e:	aa01      	add	r2, sp, #4
    1f60:	4619      	mov	r1, r3
    1f62:	4628      	mov	r0, r5
    1f64:	f001 f970 	bl	3248 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    1f68:	4b1a      	ldr	r3, [pc, #104]	; (1fd4 <gpio_nrfx_pin_interrupt_configure+0xb8>)
    1f6a:	4298      	cmp	r0, r3
    1f6c:	d12f      	bne.n	1fce <gpio_nrfx_pin_interrupt_configure+0xb2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    1f6e:	2101      	movs	r1, #1
    1f70:	4628      	mov	r0, r5
    1f72:	f001 facd 	bl	3510 <nrfx_gpiote_trigger_enable>
	return 0;
    1f76:	2000      	movs	r0, #0
}
    1f78:	b005      	add	sp, #20
    1f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
    1f7c:	4628      	mov	r0, r5
    1f7e:	f001 faf9 	bl	3574 <nrfx_gpiote_trigger_disable>
		return 0;
    1f82:	2000      	movs	r0, #0
    1f84:	e7f8      	b.n	1f78 <gpio_nrfx_pin_interrupt_configure+0x5c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    1f86:	f005 031f 	and.w	r3, r5, #31

    return pin_number >> 5;
    1f8a:	096a      	lsrs	r2, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    1f8c:	2a01      	cmp	r2, #1
    1f8e:	d012      	beq.n	1fb6 <gpio_nrfx_pin_interrupt_configure+0x9a>
        case 0: return NRF_P0;
    1f90:	4a11      	ldr	r2, [pc, #68]	; (1fd8 <gpio_nrfx_pin_interrupt_configure+0xbc>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    1f92:	3380      	adds	r3, #128	; 0x80
    1f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    1f98:	f013 0f01 	tst.w	r3, #1
    1f9c:	d1de      	bne.n	1f5c <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    1f9e:	f10d 010f 	add.w	r1, sp, #15
    1fa2:	4628      	mov	r0, r5
    1fa4:	f001 fa58 	bl	3458 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    1fa8:	4b0c      	ldr	r3, [pc, #48]	; (1fdc <gpio_nrfx_pin_interrupt_configure+0xc0>)
    1faa:	4298      	cmp	r0, r3
    1fac:	d005      	beq.n	1fba <gpio_nrfx_pin_interrupt_configure+0x9e>
		trigger_config.p_in_channel = &ch;
    1fae:	f10d 030f 	add.w	r3, sp, #15
    1fb2:	9302      	str	r3, [sp, #8]
    1fb4:	e7d2      	b.n	1f5c <gpio_nrfx_pin_interrupt_configure+0x40>
        case 1: return NRF_P1;
    1fb6:	4a0a      	ldr	r2, [pc, #40]	; (1fe0 <gpio_nrfx_pin_interrupt_configure+0xc4>)
    1fb8:	e7eb      	b.n	1f92 <gpio_nrfx_pin_interrupt_configure+0x76>
			err = nrfx_gpiote_channel_alloc(&ch);
    1fba:	f10d 000f 	add.w	r0, sp, #15
    1fbe:	f001 fa9f 	bl	3500 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    1fc2:	4b04      	ldr	r3, [pc, #16]	; (1fd4 <gpio_nrfx_pin_interrupt_configure+0xb8>)
    1fc4:	4298      	cmp	r0, r3
    1fc6:	d0f2      	beq.n	1fae <gpio_nrfx_pin_interrupt_configure+0x92>
				return -ENOMEM;
    1fc8:	f06f 000b 	mvn.w	r0, #11
    1fcc:	e7d4      	b.n	1f78 <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EINVAL;
    1fce:	f06f 0015 	mvn.w	r0, #21
    1fd2:	e7d1      	b.n	1f78 <gpio_nrfx_pin_interrupt_configure+0x5c>
    1fd4:	0bad0000 	.word	0x0bad0000
    1fd8:	50842500 	.word	0x50842500
    1fdc:	0bad0004 	.word	0x0bad0004
    1fe0:	50842800 	.word	0x50842800

00001fe4 <gpio_nrfx_pin_configure>:
{
    1fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1fe8:	b086      	sub	sp, #24
    1fea:	460e      	mov	r6, r1
    1fec:	4614      	mov	r4, r2
	return port->config;
    1fee:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    1ff2:	f898 300c 	ldrb.w	r3, [r8, #12]
    1ff6:	f001 051f 	and.w	r5, r1, #31
    1ffa:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    1ffe:	f10d 0117 	add.w	r1, sp, #23
    2002:	4628      	mov	r0, r5
    2004:	f001 fa28 	bl	3458 <nrfx_gpiote_channel_get>
    2008:	4607      	mov	r7, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    200a:	f414 3f40 	tst.w	r4, #196608	; 0x30000
    200e:	d039      	beq.n	2084 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x84>
	nrfx_gpiote_trigger_config_t trigger_config = {
    2010:	2100      	movs	r1, #0
    2012:	9103      	str	r1, [sp, #12]
    2014:	9104      	str	r1, [sp, #16]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2016:	460b      	mov	r3, r1
    2018:	aa03      	add	r2, sp, #12
    201a:	4628      	mov	r0, r5
    201c:	f001 f914 	bl	3248 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2020:	4b32      	ldr	r3, [pc, #200]	; (20ec <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xec>)
    2022:	4298      	cmp	r0, r3
    2024:	d15f      	bne.n	20e6 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xe6>
	if (free_ch) {
    2026:	429f      	cmp	r7, r3
    2028:	d03c      	beq.n	20a4 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xa4>
	if (flags & GPIO_OUTPUT) {
    202a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
    202e:	d047      	beq.n	20c0 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xc0>
		int rv = get_drive(flags, &drive);
    2030:	f10d 0103 	add.w	r1, sp, #3
    2034:	4620      	mov	r0, r4
    2036:	f003 fcc3 	bl	59c0 <get_drive>
		if (rv != 0) {
    203a:	4607      	mov	r7, r0
    203c:	bb48      	cbnz	r0, 2092 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x92>
		nrfx_gpiote_output_config_t output_config = {
    203e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2042:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    2046:	f414 3f80 	tst.w	r4, #65536	; 0x10000
    204a:	bf0c      	ite	eq
    204c:	2301      	moveq	r3, #1
    204e:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
    2050:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
    2054:	4620      	mov	r0, r4
    2056:	f003 fcf6 	bl	5a46 <get_pull>
		nrfx_gpiote_output_config_t output_config = {
    205a:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    205e:	f414 2f00 	tst.w	r4, #524288	; 0x80000
    2062:	d024      	beq.n	20ae <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xae>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    2064:	f8d8 2004 	ldr.w	r2, [r8, #4]
    2068:	2301      	movs	r3, #1
    206a:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    206c:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    206e:	2200      	movs	r2, #0
    2070:	a901      	add	r1, sp, #4
    2072:	4628      	mov	r0, r5
    2074:	f001 f97e 	bl	3374 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2078:	4b1c      	ldr	r3, [pc, #112]	; (20ec <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xec>)
    207a:	4298      	cmp	r0, r3
    207c:	d009      	beq.n	2092 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x92>
    207e:	f06f 0715 	mvn.w	r7, #21
    2082:	e006      	b.n	2092 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x92>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    2084:	4628      	mov	r0, r5
    2086:	f001 fa97 	bl	35b8 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    208a:	4b18      	ldr	r3, [pc, #96]	; (20ec <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xec>)
    208c:	429f      	cmp	r7, r3
    208e:	d004      	beq.n	209a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x9a>
		return 0;
    2090:	2700      	movs	r7, #0
}
    2092:	4638      	mov	r0, r7
    2094:	b006      	add	sp, #24
    2096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			err = nrfx_gpiote_channel_free(ch);
    209a:	f89d 0017 	ldrb.w	r0, [sp, #23]
    209e:	f001 fa27 	bl	34f0 <nrfx_gpiote_channel_free>
    20a2:	e7f5      	b.n	2090 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x90>
		err = nrfx_gpiote_channel_free(ch);
    20a4:	f89d 0017 	ldrb.w	r0, [sp, #23]
    20a8:	f001 fa22 	bl	34f0 <nrfx_gpiote_channel_free>
    20ac:	e7bd      	b.n	202a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2a>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    20ae:	f414 2f80 	tst.w	r4, #262144	; 0x40000
    20b2:	d0dc      	beq.n	206e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x6e>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    20b4:	f8d8 2004 	ldr.w	r2, [r8, #4]
    20b8:	2301      	movs	r3, #1
    20ba:	40b3      	lsls	r3, r6
    p_reg->OUTCLR = clr_mask;
    20bc:	60d3      	str	r3, [r2, #12]
}
    20be:	e7d6      	b.n	206e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x6e>
		.pull = get_pull(flags)
    20c0:	4620      	mov	r0, r4
    20c2:	f003 fcc0 	bl	5a46 <get_pull>
	nrfx_gpiote_input_config_t input_config = {
    20c6:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    20ca:	2300      	movs	r3, #0
    20cc:	461a      	mov	r2, r3
    20ce:	a902      	add	r1, sp, #8
    20d0:	4628      	mov	r0, r5
    20d2:	f001 f8b9 	bl	3248 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    20d6:	4b05      	ldr	r3, [pc, #20]	; (20ec <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xec>)
    20d8:	4298      	cmp	r0, r3
    20da:	d101      	bne.n	20e0 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xe0>
    20dc:	2700      	movs	r7, #0
    20de:	e7d8      	b.n	2092 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x92>
    20e0:	f06f 0715 	mvn.w	r7, #21
    20e4:	e7d5      	b.n	2092 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x92>
		return -EINVAL;
    20e6:	f06f 0715 	mvn.w	r7, #21
    20ea:	e7d2      	b.n	2092 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x92>
    20ec:	0bad0000 	.word	0x0bad0000

000020f0 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    20f0:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    20f2:	f001 f9f3 	bl	34dc <nrfx_gpiote_is_init>
    20f6:	b108      	cbz	r0, 20fc <gpio_nrfx_init+0xc>
		return 0;
    20f8:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    20fa:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
    20fc:	f001 f9c4 	bl	3488 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    2100:	4b08      	ldr	r3, [pc, #32]	; (2124 <gpio_nrfx_init+0x34>)
    2102:	4298      	cmp	r0, r3
    2104:	d10a      	bne.n	211c <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    2106:	2100      	movs	r1, #0
    2108:	4807      	ldr	r0, [pc, #28]	; (2128 <gpio_nrfx_init+0x38>)
    210a:	f001 f99f 	bl	344c <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    210e:	2200      	movs	r2, #0
    2110:	2105      	movs	r1, #5
    2112:	200d      	movs	r0, #13
    2114:	f003 f988 	bl	5428 <z_arm_irq_priority_set>
	return 0;
    2118:	2000      	movs	r0, #0
    211a:	e7ee      	b.n	20fa <gpio_nrfx_init+0xa>
		return -EIO;
    211c:	f06f 0004 	mvn.w	r0, #4
    2120:	e7eb      	b.n	20fa <gpio_nrfx_init+0xa>
    2122:	bf00      	nop
    2124:	0bad0000 	.word	0x0bad0000
    2128:	00005adf 	.word	0x00005adf

0000212c <baudrate_set>:
#endif
};

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = dev->config;
    212c:	6843      	ldr	r3, [r0, #4]

	return config->uarte_regs;
    212e:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    2130:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    2134:	d06f      	beq.n	2216 <baudrate_set+0xea>
    2136:	d83a      	bhi.n	21ae <baudrate_set+0x82>
    2138:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    213c:	d06e      	beq.n	221c <baudrate_set+0xf0>
    213e:	d90a      	bls.n	2156 <baudrate_set+0x2a>
    2140:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    2144:	d075      	beq.n	2232 <baudrate_set+0x106>
    2146:	d924      	bls.n	2192 <baudrate_set+0x66>
    2148:	f647 2312 	movw	r3, #31250	; 0x7a12
    214c:	4299      	cmp	r1, r3
    214e:	d12b      	bne.n	21a8 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    2150:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    2154:	e013      	b.n	217e <baudrate_set+0x52>
	switch (baudrate) {
    2156:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    215a:	d061      	beq.n	2220 <baudrate_set+0xf4>
    215c:	d907      	bls.n	216e <baudrate_set+0x42>
    215e:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    2162:	d063      	beq.n	222c <baudrate_set+0x100>
    2164:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    2168:	d110      	bne.n	218c <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    216a:	4b3c      	ldr	r3, [pc, #240]	; (225c <baudrate_set+0x130>)
    216c:	e007      	b.n	217e <baudrate_set+0x52>
	switch (baudrate) {
    216e:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    2172:	d058      	beq.n	2226 <baudrate_set+0xfa>
    2174:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    2178:	d105      	bne.n	2186 <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
    217a:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    217e:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    2182:	2000      	movs	r0, #0
    2184:	4770      	bx	lr
	switch (baudrate) {
    2186:	f06f 0015 	mvn.w	r0, #21
    218a:	4770      	bx	lr
    218c:	f06f 0015 	mvn.w	r0, #21
    2190:	4770      	bx	lr
    2192:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    2196:	d04e      	beq.n	2236 <baudrate_set+0x10a>
    2198:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    219c:	d101      	bne.n	21a2 <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    219e:	4b30      	ldr	r3, [pc, #192]	; (2260 <baudrate_set+0x134>)
    21a0:	e7ed      	b.n	217e <baudrate_set+0x52>
	switch (baudrate) {
    21a2:	f06f 0015 	mvn.w	r0, #21
    21a6:	4770      	bx	lr
    21a8:	f06f 0015 	mvn.w	r0, #21
    21ac:	4770      	bx	lr
    21ae:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    21b2:	d042      	beq.n	223a <baudrate_set+0x10e>
    21b4:	d909      	bls.n	21ca <baudrate_set+0x9e>
    21b6:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    21ba:	d046      	beq.n	224a <baudrate_set+0x11e>
    21bc:	d91f      	bls.n	21fe <baudrate_set+0xd2>
    21be:	4b29      	ldr	r3, [pc, #164]	; (2264 <baudrate_set+0x138>)
    21c0:	4299      	cmp	r1, r3
    21c2:	d148      	bne.n	2256 <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    21c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    21c8:	e7d9      	b.n	217e <baudrate_set+0x52>
	switch (baudrate) {
    21ca:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    21ce:	d037      	beq.n	2240 <baudrate_set+0x114>
    21d0:	d905      	bls.n	21de <baudrate_set+0xb2>
    21d2:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    21d6:	d10f      	bne.n	21f8 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    21d8:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    21dc:	e7cf      	b.n	217e <baudrate_set+0x52>
	switch (baudrate) {
    21de:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    21e2:	4299      	cmp	r1, r3
    21e4:	d02e      	beq.n	2244 <baudrate_set+0x118>
    21e6:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    21ea:	d102      	bne.n	21f2 <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    21ec:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    21f0:	e7c5      	b.n	217e <baudrate_set+0x52>
	switch (baudrate) {
    21f2:	f06f 0015 	mvn.w	r0, #21
    21f6:	4770      	bx	lr
    21f8:	f06f 0015 	mvn.w	r0, #21
    21fc:	4770      	bx	lr
    21fe:	4b1a      	ldr	r3, [pc, #104]	; (2268 <baudrate_set+0x13c>)
    2200:	4299      	cmp	r1, r3
    2202:	d025      	beq.n	2250 <baudrate_set+0x124>
    2204:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    2208:	d102      	bne.n	2210 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    220a:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    220e:	e7b6      	b.n	217e <baudrate_set+0x52>
	switch (baudrate) {
    2210:	f06f 0015 	mvn.w	r0, #21
    2214:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    2216:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    221a:	e7b0      	b.n	217e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    221c:	4b13      	ldr	r3, [pc, #76]	; (226c <baudrate_set+0x140>)
    221e:	e7ae      	b.n	217e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    2220:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    2224:	e7ab      	b.n	217e <baudrate_set+0x52>
	switch (baudrate) {
    2226:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    222a:	e7a8      	b.n	217e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    222c:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    2230:	e7a5      	b.n	217e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    2232:	4b0f      	ldr	r3, [pc, #60]	; (2270 <baudrate_set+0x144>)
    2234:	e7a3      	b.n	217e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    2236:	4b0f      	ldr	r3, [pc, #60]	; (2274 <baudrate_set+0x148>)
    2238:	e7a1      	b.n	217e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    223a:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    223e:	e79e      	b.n	217e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    2240:	4b0d      	ldr	r3, [pc, #52]	; (2278 <baudrate_set+0x14c>)
    2242:	e79c      	b.n	217e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    2244:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    2248:	e799      	b.n	217e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    224a:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    224e:	e796      	b.n	217e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    2250:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    2254:	e793      	b.n	217e <baudrate_set+0x52>
	switch (baudrate) {
    2256:	f06f 0015 	mvn.w	r0, #21
}
    225a:	4770      	bx	lr
    225c:	0013b000 	.word	0x0013b000
    2260:	004ea000 	.word	0x004ea000
    2264:	000f4240 	.word	0x000f4240
    2268:	0003d090 	.word	0x0003d090
    226c:	00275000 	.word	0x00275000
    2270:	0075c000 	.word	0x0075c000
    2274:	003af000 	.word	0x003af000
    2278:	013a9000 	.word	0x013a9000

0000227c <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    227c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    227e:	4605      	mov	r5, r0
    2280:	460e      	mov	r6, r1
	struct uarte_nrfx_data *data = dev->data;
    2282:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2284:	f004 f971 	bl	656a <k_is_in_isr>
    2288:	b910      	cbnz	r0, 2290 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    228a:	4b12      	ldr	r3, [pc, #72]	; (22d4 <uarte_nrfx_poll_out+0x58>)
    228c:	781b      	ldrb	r3, [r3, #0]
    228e:	b983      	cbnz	r3, 22b2 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    2290:	f04f 0320 	mov.w	r3, #32
    2294:	f3ef 8411 	mrs	r4, BASEPRI
    2298:	f383 8812 	msr	BASEPRI_MAX, r3
    229c:	f3bf 8f6f 	isb	sy
#endif

	if (isr_mode) {
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    22a0:	4628      	mov	r0, r5
    22a2:	f003 fcdf 	bl	5c64 <is_tx_ready>
    22a6:	b940      	cbnz	r0, 22ba <uarte_nrfx_poll_out+0x3e>
	__asm__ volatile(
    22a8:	f384 8811 	msr	BASEPRI, r4
    22ac:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    22b0:	e7ee      	b.n	2290 <uarte_nrfx_poll_out+0x14>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
    22b2:	4628      	mov	r0, r5
    22b4:	f003 fd3b 	bl	5d2e <wait_tx_ready>
    22b8:	4604      	mov	r4, r0
	}

	*data->char_out = c;
    22ba:	693b      	ldr	r3, [r7, #16]
    22bc:	701e      	strb	r6, [r3, #0]
	tx_start(dev, data->char_out, 1);
    22be:	2201      	movs	r2, #1
    22c0:	6939      	ldr	r1, [r7, #16]
    22c2:	4628      	mov	r0, r5
    22c4:	f003 fce8 	bl	5c98 <tx_start>
	__asm__ volatile(
    22c8:	f384 8811 	msr	BASEPRI, r4
    22cc:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    22d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    22d2:	bf00      	nop
    22d4:	20000b67 	.word	0x20000b67

000022d8 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    22d8:	b538      	push	{r3, r4, r5, lr}
    22da:	4605      	mov	r5, r0
    22dc:	460c      	mov	r4, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    22de:	f101 0018 	add.w	r0, r1, #24
    22e2:	f000 fd3b 	bl	2d5c <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    22e6:	4b0a      	ldr	r3, [pc, #40]	; (2310 <endtx_stoptx_ppi_init+0x38>)
    22e8:	4298      	cmp	r0, r3
    22ea:	d10e      	bne.n	230a <endtx_stoptx_ppi_init+0x32>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    22ec:	7e23      	ldrb	r3, [r4, #24]
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    22ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    22f2:	f8c5 31a0 	str.w	r3, [r5, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    22f6:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    22fa:	7e22      	ldrb	r2, [r4, #24]
    22fc:	2301      	movs	r3, #1
    22fe:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    2300:	4a04      	ldr	r2, [pc, #16]	; (2314 <endtx_stoptx_ppi_init+0x3c>)
    2302:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
    2306:	2000      	movs	r0, #0
}
    2308:	bd38      	pop	{r3, r4, r5, pc}
		return -EIO;
    230a:	f06f 0004 	mvn.w	r0, #4
    230e:	e7fb      	b.n	2308 <endtx_stoptx_ppi_init+0x30>
    2310:	0bad0000 	.word	0x0bad0000
    2314:	50017000 	.word	0x50017000

00002318 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    2318:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    231c:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    2320:	4b01      	ldr	r3, [pc, #4]	; (2328 <set_comparator+0x10>)
    2322:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    2326:	4770      	bx	lr
    2328:	50015000 	.word	0x50015000

0000232c <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    232c:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    2330:	4b01      	ldr	r3, [pc, #4]	; (2338 <get_comparator+0xc>)
    2332:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
    2336:	4770      	bx	lr
    2338:	50015000 	.word	0x50015000

0000233c <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    233c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2340:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    2342:	4a02      	ldr	r2, [pc, #8]	; (234c <event_enable+0x10>)
    2344:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    2348:	4770      	bx	lr
    234a:	bf00      	nop
    234c:	50015000 	.word	0x50015000

00002350 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2350:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2354:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    2356:	4a02      	ldr	r2, [pc, #8]	; (2360 <event_disable+0x10>)
    2358:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    235c:	4770      	bx	lr
    235e:	bf00      	nop
    2360:	50015000 	.word	0x50015000

00002364 <counter>:
     return p_reg->COUNTER;
    2364:	4b01      	ldr	r3, [pc, #4]	; (236c <counter+0x8>)
    2366:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    236a:	4770      	bx	lr
    236c:	50015000 	.word	0x50015000

00002370 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    2370:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    2372:	2301      	movs	r3, #1
    2374:	4083      	lsls	r3, r0
    2376:	ea6f 0c03 	mvn.w	ip, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    237a:	4a0c      	ldr	r2, [pc, #48]	; (23ac <compare_int_lock+0x3c>)
    237c:	e8d2 1fef 	ldaex	r1, [r2]
    2380:	ea01 0e0c 	and.w	lr, r1, ip
    2384:	e8c2 efe4 	stlex	r4, lr, [r2]
    2388:	2c00      	cmp	r4, #0
    238a:	d1f7      	bne.n	237c <compare_int_lock+0xc>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    238c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    2390:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    2392:	4807      	ldr	r0, [pc, #28]	; (23b0 <compare_int_lock+0x40>)
    2394:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    2398:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    239c:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    23a0:	420b      	tst	r3, r1
}
    23a2:	bf14      	ite	ne
    23a4:	2001      	movne	r0, #1
    23a6:	2000      	moveq	r0, #0
    23a8:	bd10      	pop	{r4, pc}
    23aa:	bf00      	nop
    23ac:	20000940 	.word	0x20000940
    23b0:	50015000 	.word	0x50015000

000023b4 <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
    23b4:	b538      	push	{r3, r4, r5, lr}
    23b6:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
    23b8:	f003 fd64 	bl	5e84 <full_int_lock>
    23bc:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    23be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    23c2:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
    23c4:	4a14      	ldr	r2, [pc, #80]	; (2418 <channel_processing_check_and_clear+0x64>)
    23c6:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    23ca:	4213      	tst	r3, r2
    23cc:	d105      	bne.n	23da <channel_processing_check_and_clear+0x26>
	bool result = false;
    23ce:	2400      	movs	r4, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
    23d0:	4628      	mov	r0, r5
    23d2:	f003 fd60 	bl	5e96 <full_int_unlock>

	return result;
}
    23d6:	4620      	mov	r0, r4
    23d8:	bd38      	pop	{r3, r4, r5, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    23da:	2301      	movs	r3, #1
    23dc:	40a3      	lsls	r3, r4
    23de:	43db      	mvns	r3, r3
    23e0:	4a0e      	ldr	r2, [pc, #56]	; (241c <channel_processing_check_and_clear+0x68>)
    23e2:	e8d2 1fef 	ldaex	r1, [r2]
    23e6:	ea01 0003 	and.w	r0, r1, r3
    23ea:	e8c2 0fec 	stlex	ip, r0, [r2]
    23ee:	f1bc 0f00 	cmp.w	ip, #0
    23f2:	d1f6      	bne.n	23e2 <channel_processing_check_and_clear+0x2e>
    23f4:	b949      	cbnz	r1, 240a <channel_processing_check_and_clear+0x56>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    23f6:	f104 0350 	add.w	r3, r4, #80	; 0x50
    23fa:	009b      	lsls	r3, r3, #2
    23fc:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    23fe:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    2402:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    2406:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    2408:	b123      	cbz	r3, 2414 <channel_processing_check_and_clear+0x60>
			event_clear(chan);
    240a:	4620      	mov	r0, r4
    240c:	f003 fd2b 	bl	5e66 <event_clear>
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    2410:	2401      	movs	r4, #1
    2412:	e7dd      	b.n	23d0 <channel_processing_check_and_clear+0x1c>
    2414:	2400      	movs	r4, #0
    2416:	e7db      	b.n	23d0 <channel_processing_check_and_clear+0x1c>
    2418:	50015000 	.word	0x50015000
    241c:	2000093c 	.word	0x2000093c

00002420 <compare_int_unlock>:
	if (key) {
    2420:	b901      	cbnz	r1, 2424 <compare_int_unlock+0x4>
}
    2422:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    2424:	2301      	movs	r3, #1
    2426:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2428:	4a0d      	ldr	r2, [pc, #52]	; (2460 <compare_int_unlock+0x40>)
    242a:	e8d2 cfef 	ldaex	ip, [r2]
    242e:	ea4c 0c03 	orr.w	ip, ip, r3
    2432:	e8c2 cfe1 	stlex	r1, ip, [r2]
    2436:	2900      	cmp	r1, #0
    2438:	d1f7      	bne.n	242a <compare_int_unlock+0xa>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    243a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    243e:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    2440:	4a08      	ldr	r2, [pc, #32]	; (2464 <compare_int_unlock+0x44>)
    2442:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2446:	4b08      	ldr	r3, [pc, #32]	; (2468 <compare_int_unlock+0x48>)
    2448:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    244c:	40c3      	lsrs	r3, r0
    244e:	f013 0f01 	tst.w	r3, #1
    2452:	d0e6      	beq.n	2422 <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2454:	4b05      	ldr	r3, [pc, #20]	; (246c <compare_int_unlock+0x4c>)
    2456:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    245a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    245e:	e7e0      	b.n	2422 <compare_int_unlock+0x2>
    2460:	20000940 	.word	0x20000940
    2464:	50015000 	.word	0x50015000
    2468:	2000093c 	.word	0x2000093c
    246c:	e000e100 	.word	0xe000e100

00002470 <sys_clock_timeout_handler>:
{
    2470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2474:	4607      	mov	r7, r0
    2476:	4614      	mov	r4, r2
    2478:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    247a:	4610      	mov	r0, r2
    247c:	4619      	mov	r1, r3
    247e:	f003 fcfe 	bl	5e7e <absolute_time_to_cc>
    2482:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    2484:	4b15      	ldr	r3, [pc, #84]	; (24dc <sys_clock_timeout_handler+0x6c>)
    2486:	681a      	ldr	r2, [r3, #0]
    2488:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
    248a:	601c      	str	r4, [r3, #0]
    248c:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    248e:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    2492:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    2496:	d309      	bcc.n	24ac <sys_clock_timeout_handler+0x3c>
	return false;
    2498:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    249a:	f002 f923 	bl	46e4 <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
    249e:	4638      	mov	r0, r7
    24a0:	f7ff ff44 	bl	232c <get_comparator>
    24a4:	42a8      	cmp	r0, r5
    24a6:	d00e      	beq.n	24c6 <sys_clock_timeout_handler+0x56>
}
    24a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    24ac:	4b0c      	ldr	r3, [pc, #48]	; (24e0 <sys_clock_timeout_handler+0x70>)
    24ae:	681b      	ldr	r3, [r3, #0]
    24b0:	0a1a      	lsrs	r2, r3, #8
    24b2:	061b      	lsls	r3, r3, #24
    24b4:	eb15 0803 	adds.w	r8, r5, r3
    24b8:	f142 0900 	adc.w	r9, r2, #0
    24bc:	4b09      	ldr	r3, [pc, #36]	; (24e4 <sys_clock_timeout_handler+0x74>)
    24be:	e9c3 8900 	strd	r8, r9, [r3]
		return true;
    24c2:	2401      	movs	r4, #1
    24c4:	e7e9      	b.n	249a <sys_clock_timeout_handler+0x2a>
		if (!anchor_updated) {
    24c6:	b11c      	cbz	r4, 24d0 <sys_clock_timeout_handler+0x60>
		event_enable(chan);
    24c8:	4638      	mov	r0, r7
    24ca:	f7ff ff37 	bl	233c <event_enable>
}
    24ce:	e7eb      	b.n	24a8 <sys_clock_timeout_handler+0x38>
			set_comparator(chan, COUNTER_HALF_SPAN);
    24d0:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    24d4:	4638      	mov	r0, r7
    24d6:	f7ff ff1f 	bl	2318 <set_comparator>
    24da:	e7f5      	b.n	24c8 <sys_clock_timeout_handler+0x58>
    24dc:	200001a0 	.word	0x200001a0
    24e0:	20000944 	.word	0x20000944
    24e4:	200001a8 	.word	0x200001a8

000024e8 <z_nrf_rtc_timer_read>:
{
    24e8:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    24ea:	4b0d      	ldr	r3, [pc, #52]	; (2520 <z_nrf_rtc_timer_read+0x38>)
    24ec:	681c      	ldr	r4, [r3, #0]
    24ee:	0a25      	lsrs	r5, r4, #8
    24f0:	0624      	lsls	r4, r4, #24
  __ASM volatile ("dmb 0xF":::"memory");
    24f2:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    24f6:	f7ff ff35 	bl	2364 <counter>
    24fa:	4603      	mov	r3, r0
	val += cntr;
    24fc:	1900      	adds	r0, r0, r4
    24fe:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    2502:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    2506:	d20a      	bcs.n	251e <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    2508:	4b06      	ldr	r3, [pc, #24]	; (2524 <z_nrf_rtc_timer_read+0x3c>)
    250a:	e9d3 2300 	ldrd	r2, r3, [r3]
    250e:	4290      	cmp	r0, r2
    2510:	eb71 0303 	sbcs.w	r3, r1, r3
    2514:	d203      	bcs.n	251e <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    2516:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    251a:	f141 0100 	adc.w	r1, r1, #0
}
    251e:	bd38      	pop	{r3, r4, r5, pc}
    2520:	20000944 	.word	0x20000944
    2524:	200001a8 	.word	0x200001a8

00002528 <compare_set_nolocks>:
{
    2528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    252a:	4606      	mov	r6, r0
    252c:	4614      	mov	r4, r2
    252e:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    2530:	4610      	mov	r0, r2
    2532:	4619      	mov	r1, r3
    2534:	f003 fca3 	bl	5e7e <absolute_time_to_cc>
    2538:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    253a:	f7ff ffd5 	bl	24e8 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    253e:	42a0      	cmp	r0, r4
    2540:	eb71 0305 	sbcs.w	r3, r1, r5
    2544:	d21d      	bcs.n	2582 <compare_set_nolocks+0x5a>
		if (target_time - curr_time > COUNTER_SPAN) {
    2546:	1a20      	subs	r0, r4, r0
    2548:	eb65 0101 	sbc.w	r1, r5, r1
    254c:	4b19      	ldr	r3, [pc, #100]	; (25b4 <compare_set_nolocks+0x8c>)
    254e:	4298      	cmp	r0, r3
    2550:	f171 0100 	sbcs.w	r1, r1, #0
    2554:	d22b      	bcs.n	25ae <compare_set_nolocks+0x86>
		if (target_time != cc_data[chan].target_time) {
    2556:	4b18      	ldr	r3, [pc, #96]	; (25b8 <compare_set_nolocks+0x90>)
    2558:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    255c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    2560:	42ab      	cmp	r3, r5
    2562:	bf08      	it	eq
    2564:	42a2      	cmpeq	r2, r4
    2566:	d016      	beq.n	2596 <compare_set_nolocks+0x6e>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
    2568:	4639      	mov	r1, r7
    256a:	4630      	mov	r0, r6
    256c:	f003 fc98 	bl	5ea0 <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
    2570:	4639      	mov	r1, r7
    2572:	f003 fc74 	bl	5e5e <counter_sub>
    2576:	1900      	adds	r0, r0, r4
    2578:	f145 0300 	adc.w	r3, r5, #0
    257c:	4604      	mov	r4, r0
    257e:	461d      	mov	r5, r3
    2580:	e009      	b.n	2596 <compare_set_nolocks+0x6e>
		atomic_or(&force_isr_mask, BIT(chan));
    2582:	2301      	movs	r3, #1
    2584:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2586:	4a0d      	ldr	r2, [pc, #52]	; (25bc <compare_set_nolocks+0x94>)
    2588:	e8d2 0fef 	ldaex	r0, [r2]
    258c:	4318      	orrs	r0, r3
    258e:	e8c2 0fe1 	stlex	r1, r0, [r2]
    2592:	2900      	cmp	r1, #0
    2594:	d1f8      	bne.n	2588 <compare_set_nolocks+0x60>
	cc_data[chan].target_time = target_time;
    2596:	4b08      	ldr	r3, [pc, #32]	; (25b8 <compare_set_nolocks+0x90>)
    2598:	0132      	lsls	r2, r6, #4
    259a:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    259e:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    25a2:	9906      	ldr	r1, [sp, #24]
    25a4:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    25a6:	9b07      	ldr	r3, [sp, #28]
    25a8:	6073      	str	r3, [r6, #4]
	return ret;
    25aa:	2000      	movs	r0, #0
}
    25ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -EINVAL;
    25ae:	f06f 0015 	mvn.w	r0, #21
    25b2:	e7fb      	b.n	25ac <compare_set_nolocks+0x84>
    25b4:	01000001 	.word	0x01000001
    25b8:	20000190 	.word	0x20000190
    25bc:	2000093c 	.word	0x2000093c

000025c0 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    25c0:	b530      	push	{r4, r5, lr}
    25c2:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
    25c4:	2300      	movs	r3, #0
    25c6:	4a1d      	ldr	r2, [pc, #116]	; (263c <sys_clock_driver_init+0x7c>)
    25c8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    25cc:	2b00      	cmp	r3, #0
    25ce:	dd24      	ble.n	261a <sys_clock_driver_init+0x5a>
    p_reg->INTENSET = mask;
    25d0:	4c1a      	ldr	r4, [pc, #104]	; (263c <sys_clock_driver_init+0x7c>)
    25d2:	2502      	movs	r5, #2
    25d4:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    25d8:	4b19      	ldr	r3, [pc, #100]	; (2640 <sys_clock_driver_init+0x80>)
    25da:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    25de:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    25e2:	2200      	movs	r2, #0
    25e4:	2101      	movs	r1, #1
    25e6:	2015      	movs	r0, #21
    25e8:	f002 ff1e 	bl	5428 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    25ec:	2015      	movs	r0, #21
    25ee:	f002 ff16 	bl	541e <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    25f2:	2301      	movs	r3, #1
    25f4:	60a3      	str	r3, [r4, #8]
    25f6:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    25f8:	4a12      	ldr	r2, [pc, #72]	; (2644 <sys_clock_driver_init+0x84>)
    25fa:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    25fc:	2400      	movs	r4, #0
    25fe:	9401      	str	r4, [sp, #4]
    2600:	4b11      	ldr	r3, [pc, #68]	; (2648 <sys_clock_driver_init+0x88>)
    2602:	9300      	str	r3, [sp, #0]
    2604:	4a11      	ldr	r2, [pc, #68]	; (264c <sys_clock_driver_init+0x8c>)
    2606:	2300      	movs	r3, #0
    2608:	4620      	mov	r0, r4
    260a:	f003 fc84 	bl	5f16 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    260e:	4628      	mov	r0, r5
    2610:	f7ff fc22 	bl	1e58 <z_nrf_clock_control_lf_on>

	return 0;
}
    2614:	4620      	mov	r0, r4
    2616:	b003      	add	sp, #12
    2618:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    261a:	4a0d      	ldr	r2, [pc, #52]	; (2650 <sys_clock_driver_init+0x90>)
    261c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    2620:	f04f 30ff 	mov.w	r0, #4294967295
    2624:	f04f 31ff 	mov.w	r1, #4294967295
    2628:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    262c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    2630:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    2632:	4902      	ldr	r1, [pc, #8]	; (263c <sys_clock_driver_init+0x7c>)
    2634:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    2638:	3301      	adds	r3, #1
    263a:	e7c7      	b.n	25cc <sys_clock_driver_init+0xc>
    263c:	50015000 	.word	0x50015000
    2640:	e000e100 	.word	0xe000e100
    2644:	20000940 	.word	0x20000940
    2648:	00002471 	.word	0x00002471
    264c:	007fffff 	.word	0x007fffff
    2650:	20000190 	.word	0x20000190

00002654 <process_channel>:
{
    2654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2658:	b082      	sub	sp, #8
    265a:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    265c:	f7ff feaa 	bl	23b4 <channel_processing_check_and_clear>
    2660:	b910      	cbnz	r0, 2668 <process_channel+0x14>
}
    2662:	b002      	add	sp, #8
    2664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    2668:	f7ff ff3e 	bl	24e8 <z_nrf_rtc_timer_read>
    266c:	4682      	mov	sl, r0
    266e:	460d      	mov	r5, r1
		mcu_critical_state = full_int_lock();
    2670:	f003 fc08 	bl	5e84 <full_int_lock>
    2674:	4606      	mov	r6, r0
		expire_time = cc_data[chan].target_time;
    2676:	4b13      	ldr	r3, [pc, #76]	; (26c4 <process_channel+0x70>)
    2678:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    267c:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    2680:	45c2      	cmp	sl, r8
    2682:	eb75 0509 	sbcs.w	r5, r5, r9
    2686:	d20b      	bcs.n	26a0 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    2688:	2500      	movs	r5, #0
		full_int_unlock(mcu_critical_state);
    268a:	4630      	mov	r0, r6
    268c:	f003 fc03 	bl	5e96 <full_int_unlock>
		if (handler) {
    2690:	2d00      	cmp	r5, #0
    2692:	d0e6      	beq.n	2662 <process_channel+0xe>
			handler(chan, expire_time, user_context);
    2694:	9700      	str	r7, [sp, #0]
    2696:	4642      	mov	r2, r8
    2698:	464b      	mov	r3, r9
    269a:	4620      	mov	r0, r4
    269c:	47a8      	blx	r5
}
    269e:	e7e0      	b.n	2662 <process_channel+0xe>
			handler = cc_data[chan].callback;
    26a0:	4a08      	ldr	r2, [pc, #32]	; (26c4 <process_channel+0x70>)
    26a2:	0123      	lsls	r3, r4, #4
    26a4:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    26a8:	58d5      	ldr	r5, [r2, r3]
			user_context = cc_data[chan].user_context;
    26aa:	684f      	ldr	r7, [r1, #4]
			cc_data[chan].callback = NULL;
    26ac:	2000      	movs	r0, #0
    26ae:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    26b0:	f04f 32ff 	mov.w	r2, #4294967295
    26b4:	f04f 33ff 	mov.w	r3, #4294967295
    26b8:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    26bc:	4620      	mov	r0, r4
    26be:	f7ff fe47 	bl	2350 <event_disable>
    26c2:	e7e2      	b.n	268a <process_channel+0x36>
    26c4:	20000190 	.word	0x20000190

000026c8 <rtc_nrf_isr>:
{
    26c8:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    26ca:	4b0e      	ldr	r3, [pc, #56]	; (2704 <rtc_nrf_isr+0x3c>)
    26cc:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    26d0:	f013 0f02 	tst.w	r3, #2
    26d4:	d00d      	beq.n	26f2 <rtc_nrf_isr+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    26d6:	4b0b      	ldr	r3, [pc, #44]	; (2704 <rtc_nrf_isr+0x3c>)
    26d8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    26dc:	b14b      	cbz	r3, 26f2 <rtc_nrf_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    26de:	4b09      	ldr	r3, [pc, #36]	; (2704 <rtc_nrf_isr+0x3c>)
    26e0:	2200      	movs	r2, #0
    26e2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    26e6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		overflow_cnt++;
    26ea:	4a07      	ldr	r2, [pc, #28]	; (2708 <rtc_nrf_isr+0x40>)
    26ec:	6813      	ldr	r3, [r2, #0]
    26ee:	3301      	adds	r3, #1
    26f0:	6013      	str	r3, [r2, #0]
{
    26f2:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    26f4:	2c00      	cmp	r4, #0
    26f6:	dd00      	ble.n	26fa <rtc_nrf_isr+0x32>
}
    26f8:	bd10      	pop	{r4, pc}
		process_channel(chan);
    26fa:	4620      	mov	r0, r4
    26fc:	f7ff ffaa 	bl	2654 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    2700:	3401      	adds	r4, #1
    2702:	e7f7      	b.n	26f4 <rtc_nrf_isr+0x2c>
    2704:	50015000 	.word	0x50015000
    2708:	20000944 	.word	0x20000944

0000270c <sys_clock_set_timeout>:
{
    270c:	b510      	push	{r4, lr}
    270e:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    2710:	f1b0 3fff 	cmp.w	r0, #4294967295
    2714:	d006      	beq.n	2724 <sys_clock_set_timeout+0x18>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    2716:	2801      	cmp	r0, #1
    2718:	dd06      	ble.n	2728 <sys_clock_set_timeout+0x1c>
    271a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    271e:	da05      	bge.n	272c <sys_clock_set_timeout+0x20>
    2720:	1e44      	subs	r4, r0, #1
    2722:	e004      	b.n	272e <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    2724:	480f      	ldr	r0, [pc, #60]	; (2764 <sys_clock_set_timeout+0x58>)
    2726:	e7f8      	b.n	271a <sys_clock_set_timeout+0xe>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    2728:	2400      	movs	r4, #0
    272a:	e000      	b.n	272e <sys_clock_set_timeout+0x22>
    272c:	4c0d      	ldr	r4, [pc, #52]	; (2764 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    272e:	f7ff fedb 	bl	24e8 <z_nrf_rtc_timer_read>
    2732:	4b0d      	ldr	r3, [pc, #52]	; (2768 <sys_clock_set_timeout+0x5c>)
    2734:	681a      	ldr	r2, [r3, #0]
    2736:	685b      	ldr	r3, [r3, #4]
    2738:	1a80      	subs	r0, r0, r2
	if (unannounced >= COUNTER_HALF_SPAN) {
    273a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    273e:	d300      	bcc.n	2742 <sys_clock_set_timeout+0x36>
		ticks = 0;
    2740:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    2742:	4420      	add	r0, r4
    2744:	1c41      	adds	r1, r0, #1
	if (cyc > MAX_CYCLES) {
    2746:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    274a:	d300      	bcc.n	274e <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
    274c:	4905      	ldr	r1, [pc, #20]	; (2764 <sys_clock_set_timeout+0x58>)
	uint64_t target_time = cyc + last_count;
    274e:	2000      	movs	r0, #0
    2750:	1852      	adds	r2, r2, r1
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    2752:	9001      	str	r0, [sp, #4]
    2754:	4905      	ldr	r1, [pc, #20]	; (276c <sys_clock_set_timeout+0x60>)
    2756:	9100      	str	r1, [sp, #0]
    2758:	f143 0300 	adc.w	r3, r3, #0
    275c:	f003 fbdb 	bl	5f16 <compare_set>
}
    2760:	b002      	add	sp, #8
    2762:	bd10      	pop	{r4, pc}
    2764:	007fffff 	.word	0x007fffff
    2768:	200001a0 	.word	0x200001a0
    276c:	00002471 	.word	0x00002471

00002770 <sys_clock_elapsed>:
{
    2770:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    2772:	f7ff feb9 	bl	24e8 <z_nrf_rtc_timer_read>
    2776:	4b02      	ldr	r3, [pc, #8]	; (2780 <sys_clock_elapsed+0x10>)
    2778:	681b      	ldr	r3, [r3, #0]
}
    277a:	1ac0      	subs	r0, r0, r3
    277c:	bd08      	pop	{r3, pc}
    277e:	bf00      	nop
    2780:	200001a0 	.word	0x200001a0

00002784 <nrf_gpio_cfg>:
{
    2784:	b430      	push	{r4, r5}
    *p_pin = pin_number & 0x1F;
    2786:	f000 0c1f 	and.w	ip, r0, #31
    return pin_number >> 5;
    278a:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    278c:	2801      	cmp	r0, #1
    278e:	d018      	beq.n	27c2 <nrf_gpio_cfg+0x3e>
        case 0: return NRF_P0;
    2790:	4d0d      	ldr	r5, [pc, #52]	; (27c8 <nrf_gpio_cfg+0x44>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    2792:	f10c 0080 	add.w	r0, ip, #128	; 0x80
    2796:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
    279a:	f004 4ce0 	and.w	ip, r4, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    279e:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
    27a2:	ea41 0383 	orr.w	r3, r1, r3, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    27a6:	f89d 2008 	ldrb.w	r2, [sp, #8]
    27aa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    27ae:	f89d 200c 	ldrb.w	r2, [sp, #12]
    27b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    27b6:	ea43 030c 	orr.w	r3, r3, ip
    reg->PIN_CNF[pin_number] = cnf;
    27ba:	f845 3020 	str.w	r3, [r5, r0, lsl #2]
}
    27be:	bc30      	pop	{r4, r5}
    27c0:	4770      	bx	lr
        case 1: return NRF_P1;
    27c2:	4d02      	ldr	r5, [pc, #8]	; (27cc <nrf_gpio_cfg+0x48>)
    27c4:	e7e5      	b.n	2792 <nrf_gpio_cfg+0xe>
    27c6:	bf00      	nop
    27c8:	50842500 	.word	0x50842500
    27cc:	50842800 	.word	0x50842800

000027d0 <nrf_gpio_pin_write>:
    if (value == 0)
    27d0:	b959      	cbnz	r1, 27ea <nrf_gpio_pin_write+0x1a>
    *p_pin = pin_number & 0x1F;
    27d2:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    27d6:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    27d8:	2801      	cmp	r0, #1
    27da:	d004      	beq.n	27e6 <nrf_gpio_pin_write+0x16>
        case 0: return NRF_P0;
    27dc:	4a09      	ldr	r2, [pc, #36]	; (2804 <nrf_gpio_pin_write+0x34>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    27de:	2301      	movs	r3, #1
    27e0:	408b      	lsls	r3, r1
    p_reg->OUTCLR = clr_mask;
    27e2:	60d3      	str	r3, [r2, #12]
}
    27e4:	4770      	bx	lr
        case 1: return NRF_P1;
    27e6:	4a08      	ldr	r2, [pc, #32]	; (2808 <nrf_gpio_pin_write+0x38>)
    27e8:	e7f9      	b.n	27de <nrf_gpio_pin_write+0xe>
    *p_pin = pin_number & 0x1F;
    27ea:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    27ee:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    27f0:	2801      	cmp	r0, #1
    27f2:	d004      	beq.n	27fe <nrf_gpio_pin_write+0x2e>
        case 0: return NRF_P0;
    27f4:	4a03      	ldr	r2, [pc, #12]	; (2804 <nrf_gpio_pin_write+0x34>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    27f6:	2301      	movs	r3, #1
    27f8:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
    27fa:	6093      	str	r3, [r2, #8]
}
    27fc:	4770      	bx	lr
        case 1: return NRF_P1;
    27fe:	4a02      	ldr	r2, [pc, #8]	; (2808 <nrf_gpio_pin_write+0x38>)
    2800:	e7f9      	b.n	27f6 <nrf_gpio_pin_write+0x26>
    2802:	bf00      	nop
    2804:	50842500 	.word	0x50842500
    2808:	50842800 	.word	0x50842800

0000280c <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    280c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2810:	b085      	sub	sp, #20
    2812:	4607      	mov	r7, r0
    2814:	468b      	mov	fp, r1
    2816:	4690      	mov	r8, r2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    2818:	2400      	movs	r4, #0
    281a:	e022      	b.n	2862 <pinctrl_configure_pins+0x56>
		uint32_t write = NO_WRITE;
		nrf_gpio_pin_dir_t dir;
		nrf_gpio_pin_input_t input;

		if (pin == NRF_PIN_DISCONNECTED) {
			pin = 0xFFFFFFFFU;
    281c:	f04f 35ff 	mov.w	r5, #4294967295
    2820:	e02c      	b.n	287c <pinctrl_configure_pins+0x70>
		}

		switch (NRF_GET_FUN(pins[i])) {
#if defined(NRF_PSEL_UART)
		case NRF_FUN_UART_TX:
			NRF_PSEL_UART(reg, TXD) = pin;
    2822:	f8c8 550c 	str.w	r5, [r8, #1292]	; 0x50c
			write = 1U;
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2826:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    2828:	9603      	str	r6, [sp, #12]
			write = 1U;
    282a:	4631      	mov	r1, r6
		default:
			return -ENOTSUP;
		}

		/* configure GPIO properties */
		if (pin != NRF_PIN_DISCONNECTED) {
    282c:	2d7f      	cmp	r5, #127	; 0x7f
    282e:	d016      	beq.n	285e <pinctrl_configure_pins+0x52>
			if (write != NO_WRITE) {
    2830:	f1b1 3fff 	cmp.w	r1, #4294967295
    2834:	f040 810e 	bne.w	2a54 <pinctrl_configure_pins+0x248>
				nrf_gpio_pin_write(pin, write);
			}

			/* force input and disconnected buffer for low power */
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    2838:	f857 300a 	ldr.w	r3, [r7, sl]
    283c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    2840:	d002      	beq.n	2848 <pinctrl_configure_pins+0x3c>
				dir = NRF_GPIO_PIN_DIR_INPUT;
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2842:	2601      	movs	r6, #1
				dir = NRF_GPIO_PIN_DIR_INPUT;
    2844:	2200      	movs	r2, #0
    2846:	9203      	str	r2, [sp, #12]
			}

			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
    2848:	2200      	movs	r2, #0
    284a:	9201      	str	r2, [sp, #4]
    284c:	f8cd 9000 	str.w	r9, [sp]
    2850:	f3c3 13c1 	ubfx	r3, r3, #7, #2
    2854:	4632      	mov	r2, r6
    2856:	9903      	ldr	r1, [sp, #12]
    2858:	4628      	mov	r0, r5
    285a:	f7ff ff93 	bl	2784 <nrf_gpio_cfg>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    285e:	3401      	adds	r4, #1
    2860:	b2e4      	uxtb	r4, r4
    2862:	455c      	cmp	r4, fp
    2864:	f080 80fa 	bcs.w	2a5c <pinctrl_configure_pins+0x250>
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    2868:	ea4f 0a84 	mov.w	sl, r4, lsl #2
    286c:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    2870:	f3c3 2943 	ubfx	r9, r3, #9, #4
		uint32_t pin = NRF_GET_PIN(pins[i]);
    2874:	f003 057f 	and.w	r5, r3, #127	; 0x7f
		if (pin == NRF_PIN_DISCONNECTED) {
    2878:	2d7f      	cmp	r5, #127	; 0x7f
    287a:	d0cf      	beq.n	281c <pinctrl_configure_pins+0x10>
		switch (NRF_GET_FUN(pins[i])) {
    287c:	0c1b      	lsrs	r3, r3, #16
    287e:	2b22      	cmp	r3, #34	; 0x22
    2880:	f200 80ee 	bhi.w	2a60 <pinctrl_configure_pins+0x254>
    2884:	a201      	add	r2, pc, #4	; (adr r2, 288c <pinctrl_configure_pins+0x80>)
    2886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    288a:	bf00      	nop
    288c:	00002823 	.word	0x00002823
    2890:	00002919 	.word	0x00002919
    2894:	00002927 	.word	0x00002927
    2898:	00002933 	.word	0x00002933
    289c:	00002941 	.word	0x00002941
    28a0:	0000294f 	.word	0x0000294f
    28a4:	0000295b 	.word	0x0000295b
    28a8:	00002a61 	.word	0x00002a61
    28ac:	00002a61 	.word	0x00002a61
    28b0:	00002a61 	.word	0x00002a61
    28b4:	00002a61 	.word	0x00002a61
    28b8:	00002969 	.word	0x00002969
    28bc:	0000297d 	.word	0x0000297d
    28c0:	00002a61 	.word	0x00002a61
    28c4:	00002a61 	.word	0x00002a61
    28c8:	00002a61 	.word	0x00002a61
    28cc:	00002a61 	.word	0x00002a61
    28d0:	00002a61 	.word	0x00002a61
    28d4:	00002a61 	.word	0x00002a61
    28d8:	00002a61 	.word	0x00002a61
    28dc:	00002a61 	.word	0x00002a61
    28e0:	00002a61 	.word	0x00002a61
    28e4:	00002991 	.word	0x00002991
    28e8:	000029a3 	.word	0x000029a3
    28ec:	000029b5 	.word	0x000029b5
    28f0:	000029c7 	.word	0x000029c7
    28f4:	00002a61 	.word	0x00002a61
    28f8:	00002a61 	.word	0x00002a61
    28fc:	00002a61 	.word	0x00002a61
    2900:	000029d9 	.word	0x000029d9
    2904:	000029e9 	.word	0x000029e9
    2908:	000029f5 	.word	0x000029f5
    290c:	00002a05 	.word	0x00002a05
    2910:	00002a15 	.word	0x00002a15
    2914:	00002a25 	.word	0x00002a25
			NRF_PSEL_UART(reg, RXD) = pin;
    2918:	f8c8 5514 	str.w	r5, [r8, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    291c:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    291e:	9603      	str	r6, [sp, #12]
		uint32_t write = NO_WRITE;
    2920:	f04f 31ff 	mov.w	r1, #4294967295
			break;
    2924:	e782      	b.n	282c <pinctrl_configure_pins+0x20>
			NRF_PSEL_UART(reg, RTS) = pin;
    2926:	f8c8 5508 	str.w	r5, [r8, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    292a:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    292c:	9603      	str	r6, [sp, #12]
			write = 1U;
    292e:	4631      	mov	r1, r6
			break;
    2930:	e77c      	b.n	282c <pinctrl_configure_pins+0x20>
			NRF_PSEL_UART(reg, CTS) = pin;
    2932:	f8c8 5510 	str.w	r5, [r8, #1296]	; 0x510
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    2936:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2938:	9603      	str	r6, [sp, #12]
		uint32_t write = NO_WRITE;
    293a:	f04f 31ff 	mov.w	r1, #4294967295
			break;
    293e:	e775      	b.n	282c <pinctrl_configure_pins+0x20>
			NRF_PSEL_SPIM(reg, SCK) = pin;
    2940:	f8c8 5508 	str.w	r5, [r8, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    2944:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    2946:	2301      	movs	r3, #1
    2948:	9303      	str	r3, [sp, #12]
			write = 0U;
    294a:	4631      	mov	r1, r6
			break;
    294c:	e76e      	b.n	282c <pinctrl_configure_pins+0x20>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
    294e:	f8c8 550c 	str.w	r5, [r8, #1292]	; 0x50c
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2952:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    2954:	9603      	str	r6, [sp, #12]
			write = 0U;
    2956:	2100      	movs	r1, #0
			break;
    2958:	e768      	b.n	282c <pinctrl_configure_pins+0x20>
			NRF_PSEL_SPIM(reg, MISO) = pin;
    295a:	f8c8 5510 	str.w	r5, [r8, #1296]	; 0x510
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    295e:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2960:	9603      	str	r6, [sp, #12]
		uint32_t write = NO_WRITE;
    2962:	f04f 31ff 	mov.w	r1, #4294967295
			break;
    2966:	e761      	b.n	282c <pinctrl_configure_pins+0x20>
			NRF_PSEL_TWIM(reg, SCL) = pin;
    2968:	f8c8 5508 	str.w	r5, [r8, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    296c:	f1b9 0f00 	cmp.w	r9, #0
    2970:	d060      	beq.n	2a34 <pinctrl_configure_pins+0x228>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    2972:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2974:	9603      	str	r6, [sp, #12]
		uint32_t write = NO_WRITE;
    2976:	f04f 31ff 	mov.w	r1, #4294967295
    297a:	e757      	b.n	282c <pinctrl_configure_pins+0x20>
			NRF_PSEL_TWIM(reg, SDA) = pin;
    297c:	f8c8 550c 	str.w	r5, [r8, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    2980:	f1b9 0f00 	cmp.w	r9, #0
    2984:	d05e      	beq.n	2a44 <pinctrl_configure_pins+0x238>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    2986:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2988:	9603      	str	r6, [sp, #12]
		uint32_t write = NO_WRITE;
    298a:	f04f 31ff 	mov.w	r1, #4294967295
    298e:	e74d      	b.n	282c <pinctrl_configure_pins+0x20>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
    2990:	f8c8 5560 	str.w	r5, [r8, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
    2994:	f857 100a 	ldr.w	r1, [r7, sl]
    2998:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    299c:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    299e:	9603      	str	r6, [sp, #12]
			break;
    29a0:	e744      	b.n	282c <pinctrl_configure_pins+0x20>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
    29a2:	f8c8 5564 	str.w	r5, [r8, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
    29a6:	f857 100a 	ldr.w	r1, [r7, sl]
    29aa:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    29ae:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    29b0:	9603      	str	r6, [sp, #12]
			break;
    29b2:	e73b      	b.n	282c <pinctrl_configure_pins+0x20>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
    29b4:	f8c8 5568 	str.w	r5, [r8, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
    29b8:	f857 100a 	ldr.w	r1, [r7, sl]
    29bc:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    29c0:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    29c2:	9603      	str	r6, [sp, #12]
			break;
    29c4:	e732      	b.n	282c <pinctrl_configure_pins+0x20>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
    29c6:	f8c8 556c 	str.w	r5, [r8, #1388]	; 0x56c
			write = NRF_GET_INVERT(pins[i]);
    29ca:	f857 100a 	ldr.w	r1, [r7, sl]
    29ce:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    29d2:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    29d4:	9603      	str	r6, [sp, #12]
			break;
    29d6:	e729      	b.n	282c <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, SCK) = pin;
    29d8:	f8c8 5524 	str.w	r5, [r8, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    29dc:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    29de:	2300      	movs	r3, #0
    29e0:	9303      	str	r3, [sp, #12]
		uint32_t write = NO_WRITE;
    29e2:	f04f 31ff 	mov.w	r1, #4294967295
			break;
    29e6:	e721      	b.n	282c <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, CSN) = pin;
    29e8:	f8c8 5528 	str.w	r5, [r8, #1320]	; 0x528
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    29ec:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    29ee:	9603      	str	r6, [sp, #12]
			write = 1U;
    29f0:	4631      	mov	r1, r6
			break;
    29f2:	e71b      	b.n	282c <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, IO0) = pin;
    29f4:	f8c8 5530 	str.w	r5, [r8, #1328]	; 0x530
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    29f8:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    29fa:	2300      	movs	r3, #0
    29fc:	9303      	str	r3, [sp, #12]
		uint32_t write = NO_WRITE;
    29fe:	f04f 31ff 	mov.w	r1, #4294967295
			break;
    2a02:	e713      	b.n	282c <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, IO1) = pin;
    2a04:	f8c8 5534 	str.w	r5, [r8, #1332]	; 0x534
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2a08:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2a0a:	2300      	movs	r3, #0
    2a0c:	9303      	str	r3, [sp, #12]
		uint32_t write = NO_WRITE;
    2a0e:	f04f 31ff 	mov.w	r1, #4294967295
			break;
    2a12:	e70b      	b.n	282c <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, IO2) = pin;
    2a14:	f8c8 5538 	str.w	r5, [r8, #1336]	; 0x538
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2a18:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2a1a:	2300      	movs	r3, #0
    2a1c:	9303      	str	r3, [sp, #12]
		uint32_t write = NO_WRITE;
    2a1e:	f04f 31ff 	mov.w	r1, #4294967295
			break;
    2a22:	e703      	b.n	282c <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, IO3) = pin;
    2a24:	f8c8 553c 	str.w	r5, [r8, #1340]	; 0x53c
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2a28:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2a2a:	2300      	movs	r3, #0
    2a2c:	9303      	str	r3, [sp, #12]
		uint32_t write = NO_WRITE;
    2a2e:	f04f 31ff 	mov.w	r1, #4294967295
			break;
    2a32:	e6fb      	b.n	282c <pinctrl_configure_pins+0x20>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    2a34:	464e      	mov	r6, r9
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2a36:	f8cd 900c 	str.w	r9, [sp, #12]
		uint32_t write = NO_WRITE;
    2a3a:	f04f 31ff 	mov.w	r1, #4294967295
				drive = NRF_DRIVE_S0D1;
    2a3e:	f04f 0906 	mov.w	r9, #6
    2a42:	e6f3      	b.n	282c <pinctrl_configure_pins+0x20>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    2a44:	464e      	mov	r6, r9
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2a46:	f8cd 900c 	str.w	r9, [sp, #12]
		uint32_t write = NO_WRITE;
    2a4a:	f04f 31ff 	mov.w	r1, #4294967295
				drive = NRF_DRIVE_S0D1;
    2a4e:	f04f 0906 	mov.w	r9, #6
    2a52:	e6eb      	b.n	282c <pinctrl_configure_pins+0x20>
				nrf_gpio_pin_write(pin, write);
    2a54:	4628      	mov	r0, r5
    2a56:	f7ff febb 	bl	27d0 <nrf_gpio_pin_write>
    2a5a:	e6ed      	b.n	2838 <pinctrl_configure_pins+0x2c>
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    2a5c:	2000      	movs	r0, #0
    2a5e:	e001      	b.n	2a64 <pinctrl_configure_pins+0x258>
		switch (NRF_GET_FUN(pins[i])) {
    2a60:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    2a64:	b005      	add	sp, #20
    2a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2a6a:	bf00      	nop

00002a6c <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
    2a6c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2a70:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
    2a74:	f002 0203 	and.w	r2, r2, #3
    2a78:	4b02      	ldr	r3, [pc, #8]	; (2a84 <SystemCoreClockUpdate+0x18>)
    2a7a:	40d3      	lsrs	r3, r2
    2a7c:	4a02      	ldr	r2, [pc, #8]	; (2a88 <SystemCoreClockUpdate+0x1c>)
    2a7e:	6013      	str	r3, [r2, #0]
#endif
}
    2a80:	4770      	bx	lr
    2a82:	bf00      	nop
    2a84:	07a12000 	.word	0x07a12000
    2a88:	20000048 	.word	0x20000048

00002a8c <SystemInit>:

void SystemInit(void)
{
    2a8c:	b508      	push	{r3, lr}
            SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
        #endif

        /* Workaround for Errata 97 "ERASEPROTECT, APPROTECT, or startup problems" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_97())
    2a8e:	f003 fafb 	bl	6088 <nrf53_errata_97>
    2a92:	b168      	cbz	r0, 2ab0 <SystemInit+0x24>
        {
            if (*((volatile uint32_t *)0x50004A20ul) == 0)
    2a94:	4b4e      	ldr	r3, [pc, #312]	; (2bd0 <SystemInit+0x144>)
    2a96:	f8d3 3a20 	ldr.w	r3, [r3, #2592]	; 0xa20
    2a9a:	b94b      	cbnz	r3, 2ab0 <SystemInit+0x24>
            {
                *((volatile uint32_t *)0x50004A20ul) = 0xDul;
    2a9c:	4b4c      	ldr	r3, [pc, #304]	; (2bd0 <SystemInit+0x144>)
    2a9e:	220d      	movs	r2, #13
    2aa0:	f8c3 2a20 	str.w	r2, [r3, #2592]	; 0xa20
                *((volatile uint32_t *)0x5000491Cul) = 0x1ul;
    2aa4:	2201      	movs	r2, #1
    2aa6:	f8c3 291c 	str.w	r2, [r3, #2332]	; 0x91c
                *((volatile uint32_t *)0x5000491Cul) = 0x0ul;
    2aaa:	2200      	movs	r2, #0
    2aac:	f8c3 291c 	str.w	r2, [r3, #2332]	; 0x91c
{
    2ab0:	2200      	movs	r2, #0
    2ab2:	e00b      	b.n	2acc <SystemInit+0x40>
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
            #if defined ( __ICCARM__ )
                /* IAR will complain about the order of volatile pointer accesses. */
                #pragma diag_suppress=Pa082
            #endif
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    2ab4:	f102 0360 	add.w	r3, r2, #96	; 0x60
    2ab8:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    2abc:	f851 1033 	ldr.w	r1, [r1, r3, lsl #3]
    2ac0:	00db      	lsls	r3, r3, #3
    2ac2:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
    2ac6:	685b      	ldr	r3, [r3, #4]
    2ac8:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    2aca:	3201      	adds	r2, #1
    2acc:	2a1f      	cmp	r2, #31
    2ace:	d808      	bhi.n	2ae2 <SystemInit+0x56>
    2ad0:	f102 0360 	add.w	r3, r2, #96	; 0x60
    2ad4:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    2ad8:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
    2adc:	f1b3 3fff 	cmp.w	r3, #4294967295
    2ae0:	d1e8      	bne.n	2ab4 <SystemInit+0x28>
        }

        /* errata 64 must be before errata 42, as errata 42 is dependant on the changes in errata 64*/
        /* Workaround for Errata 64 "VREGMAIN has invalid configuration when CPU is running at 128 MHz" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_64())
    2ae2:	f003 faa9 	bl	6038 <nrf53_errata_64>
    2ae6:	b130      	cbz	r0, 2af6 <SystemInit+0x6a>
        {
            *((volatile uint32_t *)0x5000470Cul) = 0x29ul;
    2ae8:	4b39      	ldr	r3, [pc, #228]	; (2bd0 <SystemInit+0x144>)
    2aea:	2229      	movs	r2, #41	; 0x29
    2aec:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
    2af0:	2203      	movs	r2, #3
    2af2:	f8c3 273c 	str.w	r2, [r3, #1852]	; 0x73c
        }

        /* Workaround for Errata 42 "Reset value of HFCLKCTRL is invalid" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_42())
    2af6:	f003 fa53 	bl	5fa0 <nrf53_errata_42>
    2afa:	b140      	cbz	r0, 2b0e <SystemInit+0x82>
        {
            *((volatile uint32_t *)0x50039530ul) = 0xBEEF0044ul;
    2afc:	4b35      	ldr	r3, [pc, #212]	; (2bd4 <SystemInit+0x148>)
    2afe:	4a36      	ldr	r2, [pc, #216]	; (2bd8 <SystemInit+0x14c>)
    2b00:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
            NRF_CLOCK_S->HFCLKCTRL = CLOCK_HFCLKCTRL_HCLK_Div2 << CLOCK_HFCLKCTRL_HCLK_Pos;
    2b04:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2b08:	2201      	movs	r2, #1
    2b0a:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
        }

        /* Workaround for Errata 46 "Higher power consumption of LFRC" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_46())
    2b0e:	f003 fa5b 	bl	5fc8 <nrf53_errata_46>
    2b12:	b118      	cbz	r0, 2b1c <SystemInit+0x90>
        {
            *((volatile uint32_t *)0x5003254Cul) = 0;
    2b14:	4b31      	ldr	r3, [pc, #196]	; (2bdc <SystemInit+0x150>)
    2b16:	2200      	movs	r2, #0
    2b18:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
        }

        /* Workaround for Errata 49 "SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_49())
    2b1c:	f003 fa6c 	bl	5ff8 <nrf53_errata_49>
    2b20:	b168      	cbz	r0, 2b3e <SystemInit+0xb2>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk)
    2b22:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2b26:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    2b2a:	f013 0f01 	tst.w	r3, #1
    2b2e:	d006      	beq.n	2b3e <SystemInit+0xb2>
            {
                NRF_POWER_S->EVENTS_SLEEPENTER = 0;
    2b30:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2b34:	2200      	movs	r2, #0
    2b36:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
                NRF_POWER_S->EVENTS_SLEEPEXIT = 0;
    2b3a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
            }
        }

        /* Workaround for Errata 55 "Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_55())
    2b3e:	f003 fa6f 	bl	6020 <nrf53_errata_55>
    2b42:	b160      	cbz	r0, 2b5e <SystemInit+0xd2>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk){
    2b44:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2b48:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    2b4c:	f013 0f01 	tst.w	r3, #1
    2b50:	d005      	beq.n	2b5e <SystemInit+0xd2>
                NRF_RESET_S->RESETREAS = ~RESET_RESETREAS_RESETPIN_Msk;
    2b52:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2b56:	f06f 0201 	mvn.w	r2, #1
    2b5a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            }
        }

        /* Workaround for Errata 69 "VREGMAIN configuration is not retained in System OFF" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_69())
    2b5e:	f003 fa7f 	bl	6060 <nrf53_errata_69>
    2b62:	b118      	cbz	r0, 2b6c <SystemInit+0xe0>
        {
            *((volatile uint32_t *)0x5000470Cul) =0x65ul;
    2b64:	4b1a      	ldr	r3, [pc, #104]	; (2bd0 <SystemInit+0x144>)
    2b66:	2265      	movs	r2, #101	; 0x65
    2b68:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
        }

        if (nrf53_errata_140())
    2b6c:	f003 faa0 	bl	60b0 <nrf53_errata_140>
    2b70:	b120      	cbz	r0, 2b7c <SystemInit+0xf0>
        {
            if (*(volatile uint32_t *)0x50032420 & 0x80000000)
    2b72:	4b1a      	ldr	r3, [pc, #104]	; (2bdc <SystemInit+0x150>)
    2b74:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
    2b78:	2b00      	cmp	r3, #0
    2b7a:	db11      	blt.n	2ba0 <SystemInit+0x114>

        #endif

        /* Allow Non-Secure code to run FPU instructions.
         * If only the secure code should control FPU power state these registers should be configured accordingly in the secure application code. */
        SCB->NSACR |= (3UL << 10);
    2b7c:	4a18      	ldr	r2, [pc, #96]	; (2be0 <SystemInit+0x154>)
    2b7e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    2b82:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    2b86:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                /* Do nothing, allow user code to handle APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load APPROTECT soft branch from UICR.
               If UICR->APPROTECT is disabled, CTRLAP->APPROTECT will be disabled. */
            NRF_CTRLAP_S->APPROTECT.DISABLE = NRF_UICR_S->APPROTECT;
    2b8a:	4a16      	ldr	r2, [pc, #88]	; (2be4 <SystemInit+0x158>)
    2b8c:	6811      	ldr	r1, [r2, #0]
    2b8e:	4b16      	ldr	r3, [pc, #88]	; (2be8 <SystemInit+0x15c>)
    2b90:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
                /* Do nothing, allow user code to handle SECURE APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load SECURE APPROTECT soft branch from UICR.
               If UICR->SECUREAPPROTECT is disabled, CTRLAP->SECUREAPPROTECT will be disabled. */
            NRF_CTRLAP_S->SECUREAPPROTECT.DISABLE = NRF_UICR_S->SECUREAPPROTECT;
    2b94:	69d2      	ldr	r2, [r2, #28]
    2b96:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
    2b9a:	f7ff ff67 	bl	2a6c <SystemCoreClockUpdate>
}
    2b9e:	bd08      	pop	{r3, pc}
                NRF_CLOCK_S->LFCLKSRC = CLOCK_LFCLKSRC_SRC_LFSYNT;
    2ba0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2ba4:	2203      	movs	r2, #3
    2ba6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
                NRF_CLOCK_S->TASKS_LFCLKSTART = 1;
    2baa:	2201      	movs	r2, #1
    2bac:	609a      	str	r2, [r3, #8]
                while (NRF_CLOCK_S->EVENTS_LFCLKSTARTED == 0) {}
    2bae:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2bb2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    2bb6:	2b00      	cmp	r3, #0
    2bb8:	d0f9      	beq.n	2bae <SystemInit+0x122>
                NRF_CLOCK_S->EVENTS_LFCLKSTARTED = 0;
    2bba:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2bbe:	2200      	movs	r2, #0
    2bc0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
                NRF_CLOCK_S->TASKS_LFCLKSTOP = 1;
    2bc4:	2201      	movs	r2, #1
    2bc6:	60da      	str	r2, [r3, #12]
                NRF_CLOCK_S->LFCLKSRC = CLOCK_LFCLKSRC_SRC_LFRC;
    2bc8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    2bcc:	e7d6      	b.n	2b7c <SystemInit+0xf0>
    2bce:	bf00      	nop
    2bd0:	50004000 	.word	0x50004000
    2bd4:	50039000 	.word	0x50039000
    2bd8:	beef0044 	.word	0xbeef0044
    2bdc:	50032000 	.word	0x50032000
    2be0:	e000ed00 	.word	0xe000ed00
    2be4:	00ff8000 	.word	0x00ff8000
    2be8:	50006000 	.word	0x50006000

00002bec <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    2bec:	b510      	push	{r4, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
    2bee:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    2bf0:	fab4 f384 	clz	r3, r4
    2bf4:	f1c3 031f 	rsb	r3, r3, #31
    2bf8:	fa5f fc83 	uxtb.w	ip, r3
        if (idx < 0) {
    2bfc:	2b00      	cmp	r3, #0
    2bfe:	db12      	blt.n	2c26 <nrfx_flag32_alloc+0x3a>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    2c00:	2201      	movs	r2, #1
    2c02:	fa02 f303 	lsl.w	r3, r2, r3
    2c06:	ea24 0303 	bic.w	r3, r4, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    2c0a:	e8d0 2fef 	ldaex	r2, [r0]
    2c0e:	42a2      	cmp	r2, r4
    2c10:	d104      	bne.n	2c1c <nrfx_flag32_alloc+0x30>
    2c12:	e8c0 3fee 	stlex	lr, r3, [r0]
    2c16:	f1be 0f00 	cmp.w	lr, #0
    2c1a:	d1f6      	bne.n	2c0a <nrfx_flag32_alloc+0x1e>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    2c1c:	d1e7      	bne.n	2bee <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
    2c1e:	f881 c000 	strb.w	ip, [r1]

    return NRFX_SUCCESS;
    2c22:	4802      	ldr	r0, [pc, #8]	; (2c2c <nrfx_flag32_alloc+0x40>)
}
    2c24:	bd10      	pop	{r4, pc}
            return NRFX_ERROR_NO_MEM;
    2c26:	4802      	ldr	r0, [pc, #8]	; (2c30 <nrfx_flag32_alloc+0x44>)
    2c28:	e7fc      	b.n	2c24 <nrfx_flag32_alloc+0x38>
    2c2a:	bf00      	nop
    2c2c:	0bad0000 	.word	0x0bad0000
    2c30:	0bad0002 	.word	0x0bad0002

00002c34 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    2c34:	6803      	ldr	r3, [r0, #0]
    2c36:	40cb      	lsrs	r3, r1
    2c38:	f013 0f01 	tst.w	r3, #1
    2c3c:	d111      	bne.n	2c62 <nrfx_flag32_free+0x2e>
{
    2c3e:	b500      	push	{lr}
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
    2c40:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    2c42:	2301      	movs	r3, #1
    2c44:	408b      	lsls	r3, r1
    2c46:	4313      	orrs	r3, r2
    2c48:	e8d0 cfef 	ldaex	ip, [r0]
    2c4c:	4594      	cmp	ip, r2
    2c4e:	d104      	bne.n	2c5a <nrfx_flag32_free+0x26>
    2c50:	e8c0 3fee 	stlex	lr, r3, [r0]
    2c54:	f1be 0f00 	cmp.w	lr, #0
    2c58:	d1f6      	bne.n	2c48 <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    2c5a:	d1f1      	bne.n	2c40 <nrfx_flag32_free+0xc>

    return NRFX_SUCCESS;
    2c5c:	4802      	ldr	r0, [pc, #8]	; (2c68 <nrfx_flag32_free+0x34>)
}
    2c5e:	f85d fb04 	ldr.w	pc, [sp], #4
        return NRFX_ERROR_INVALID_PARAM;
    2c62:	4802      	ldr	r0, [pc, #8]	; (2c6c <nrfx_flag32_free+0x38>)
}
    2c64:	4770      	bx	lr
    2c66:	bf00      	nop
    2c68:	0bad0000 	.word	0x0bad0000
    2c6c:	0bad0004 	.word	0x0bad0004

00002c70 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    2c70:	4b05      	ldr	r3, [pc, #20]	; (2c88 <nrfx_clock_init+0x18>)
    2c72:	791b      	ldrb	r3, [r3, #4]
    2c74:	b92b      	cbnz	r3, 2c82 <nrfx_clock_init+0x12>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    2c76:	4b04      	ldr	r3, [pc, #16]	; (2c88 <nrfx_clock_init+0x18>)
    2c78:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    2c7a:	2201      	movs	r2, #1
    2c7c:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    2c7e:	4803      	ldr	r0, [pc, #12]	; (2c8c <nrfx_clock_init+0x1c>)
    2c80:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    2c82:	4803      	ldr	r0, [pc, #12]	; (2c90 <nrfx_clock_init+0x20>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    2c84:	4770      	bx	lr
    2c86:	bf00      	nop
    2c88:	20000948 	.word	0x20000948
    2c8c:	0bad0000 	.word	0x0bad0000
    2c90:	0bad000c 	.word	0x0bad000c

00002c94 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    2c94:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2c96:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2c9a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    2c9e:	b163      	cbz	r3, 2cba <nrfx_power_clock_irq_handler+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2ca0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2ca4:	2000      	movs	r0, #0
    2ca6:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    2caa:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    2cae:	2201      	movs	r2, #1
    2cb0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    2cb4:	4b28      	ldr	r3, [pc, #160]	; (2d58 <nrfx_power_clock_irq_handler+0xc4>)
    2cb6:	681b      	ldr	r3, [r3, #0]
    2cb8:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2cba:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2cbe:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    2cc2:	b1bb      	cbz	r3, 2cf4 <nrfx_power_clock_irq_handler+0x60>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2cc4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2cc8:	2200      	movs	r2, #0
    2cca:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    2cce:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2cd2:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    2cd6:	f002 0203 	and.w	r2, r2, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2cda:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    2cde:	2a01      	cmp	r2, #1
    2ce0:	d031      	beq.n	2d46 <nrfx_power_clock_irq_handler+0xb2>
    p_reg->INTENCLR = mask;
    2ce2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2ce6:	2202      	movs	r2, #2
    2ce8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        else
#endif
        {
            // After the LF clock external source start invoke user callback.
            nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_LF_STARTED_MASK);
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    2cec:	4b1a      	ldr	r3, [pc, #104]	; (2d58 <nrfx_power_clock_irq_handler+0xc4>)
    2cee:	681b      	ldr	r3, [r3, #0]
    2cf0:	2001      	movs	r0, #1
    2cf2:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2cf4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2cf8:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
    2cfc:	b173      	cbz	r3, 2d1c <nrfx_power_clock_irq_handler+0x88>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2cfe:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2d02:	2200      	movs	r2, #0
    2d04:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    2d08:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
    2d0c:	f44f 7280 	mov.w	r2, #256	; 0x100
    2d10:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
    2d14:	4b10      	ldr	r3, [pc, #64]	; (2d58 <nrfx_power_clock_irq_handler+0xc4>)
    2d16:	681b      	ldr	r3, [r3, #0]
    2d18:	2004      	movs	r0, #4
    2d1a:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2d1c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2d20:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
    2d24:	b173      	cbz	r3, 2d44 <nrfx_power_clock_irq_handler+0xb0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2d26:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2d2a:	2200      	movs	r2, #0
    2d2c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    2d30:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
    2d34:	f44f 7200 	mov.w	r2, #512	; 0x200
    2d38:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLK192MSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    2d3c:	4b06      	ldr	r3, [pc, #24]	; (2d58 <nrfx_power_clock_irq_handler+0xc4>)
    2d3e:	681b      	ldr	r3, [r3, #0]
    2d40:	2005      	movs	r0, #5
    2d42:	4798      	blx	r3
    }
#endif
}
    2d44:	bd08      	pop	{r3, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
    2d46:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2d4a:	2202      	movs	r2, #2
    2d4c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2d50:	2201      	movs	r2, #1
    2d52:	609a      	str	r2, [r3, #8]
}
    2d54:	e7ce      	b.n	2cf4 <nrfx_power_clock_irq_handler+0x60>
    2d56:	bf00      	nop
    2d58:	20000948 	.word	0x20000948

00002d5c <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    2d5c:	b508      	push	{r3, lr}
    2d5e:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
    2d60:	4801      	ldr	r0, [pc, #4]	; (2d68 <nrfx_dppi_channel_alloc+0xc>)
    2d62:	f7ff ff43 	bl	2bec <nrfx_flag32_alloc>
}
    2d66:	bd08      	pop	{r3, pc}
    2d68:	2000004c 	.word	0x2000004c

00002d6c <nrf_gpio_reconfigure>:
{
    2d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d6e:	461c      	mov	r4, r3
    2d70:	9f05      	ldr	r7, [sp, #20]
    2d72:	9e06      	ldr	r6, [sp, #24]
    *p_pin = pin_number & 0x1F;
    2d74:	f000 0c1f 	and.w	ip, r0, #31
    return pin_number >> 5;
    2d78:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2d7a:	2801      	cmp	r0, #1
    2d7c:	d034      	beq.n	2de8 <nrf_gpio_reconfigure+0x7c>
        case 0: return NRF_P0;
    2d7e:	4d27      	ldr	r5, [pc, #156]	; (2e1c <nrf_gpio_reconfigure+0xb0>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    2d80:	f10c 0380 	add.w	r3, ip, #128	; 0x80
    2d84:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    2d88:	b381      	cbz	r1, 2dec <nrf_gpio_reconfigure+0x80>
    2d8a:	2001      	movs	r0, #1
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    2d8c:	b382      	cbz	r2, 2df0 <nrf_gpio_reconfigure+0x84>
    2d8e:	f04f 0e02 	mov.w	lr, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    2d92:	ea40 000e 	orr.w	r0, r0, lr
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    2d96:	b374      	cbz	r4, 2df6 <nrf_gpio_reconfigure+0x8a>
    2d98:	f04f 0e0c 	mov.w	lr, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    2d9c:	ea40 000e 	orr.w	r0, r0, lr
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    2da0:	b367      	cbz	r7, 2dfc <nrf_gpio_reconfigure+0x90>
    2da2:	f44f 6e70 	mov.w	lr, #3840	; 0xf00
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    2da6:	ea40 000e 	orr.w	r0, r0, lr
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    2daa:	b356      	cbz	r6, 2e02 <nrf_gpio_reconfigure+0x96>
    2dac:	f44f 3e40 	mov.w	lr, #196608	; 0x30000
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    2db0:	ea40 000e 	orr.w	r0, r0, lr
    cnf &= ~to_update;
    2db4:	ea23 0000 	bic.w	r0, r3, r0
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    2db8:	b331      	cbz	r1, 2e08 <nrf_gpio_reconfigure+0x9c>
    2dba:	780b      	ldrb	r3, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    2dbc:	b332      	cbz	r2, 2e0c <nrf_gpio_reconfigure+0xa0>
    2dbe:	7812      	ldrb	r2, [r2, #0]
    2dc0:	0052      	lsls	r2, r2, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    2dc2:	4313      	orrs	r3, r2
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    2dc4:	b324      	cbz	r4, 2e10 <nrf_gpio_reconfigure+0xa4>
    2dc6:	7822      	ldrb	r2, [r4, #0]
    2dc8:	0092      	lsls	r2, r2, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    2dca:	4313      	orrs	r3, r2
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    2dcc:	b317      	cbz	r7, 2e14 <nrf_gpio_reconfigure+0xa8>
    2dce:	783a      	ldrb	r2, [r7, #0]
    2dd0:	0212      	lsls	r2, r2, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    2dd2:	4313      	orrs	r3, r2
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    2dd4:	b306      	cbz	r6, 2e18 <nrf_gpio_reconfigure+0xac>
    2dd6:	7832      	ldrb	r2, [r6, #0]
    2dd8:	0412      	lsls	r2, r2, #16
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    2dda:	4313      	orrs	r3, r2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    2ddc:	4303      	orrs	r3, r0
    reg->PIN_CNF[pin_number] = cnf;
    2dde:	f10c 0c80 	add.w	ip, ip, #128	; 0x80
    2de2:	f845 302c 	str.w	r3, [r5, ip, lsl #2]
}
    2de6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        case 1: return NRF_P1;
    2de8:	4d0d      	ldr	r5, [pc, #52]	; (2e20 <nrf_gpio_reconfigure+0xb4>)
    2dea:	e7c9      	b.n	2d80 <nrf_gpio_reconfigure+0x14>
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    2dec:	2000      	movs	r0, #0
    2dee:	e7cd      	b.n	2d8c <nrf_gpio_reconfigure+0x20>
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    2df0:	f04f 0e00 	mov.w	lr, #0
    2df4:	e7cd      	b.n	2d92 <nrf_gpio_reconfigure+0x26>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    2df6:	f04f 0e00 	mov.w	lr, #0
    2dfa:	e7cf      	b.n	2d9c <nrf_gpio_reconfigure+0x30>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    2dfc:	f04f 0e00 	mov.w	lr, #0
    2e00:	e7d1      	b.n	2da6 <nrf_gpio_reconfigure+0x3a>
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    2e02:	f04f 0e00 	mov.w	lr, #0
    2e06:	e7d3      	b.n	2db0 <nrf_gpio_reconfigure+0x44>
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    2e08:	2300      	movs	r3, #0
    2e0a:	e7d7      	b.n	2dbc <nrf_gpio_reconfigure+0x50>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    2e0c:	2200      	movs	r2, #0
    2e0e:	e7d8      	b.n	2dc2 <nrf_gpio_reconfigure+0x56>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    2e10:	2200      	movs	r2, #0
    2e12:	e7da      	b.n	2dca <nrf_gpio_reconfigure+0x5e>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    2e14:	2200      	movs	r2, #0
    2e16:	e7dc      	b.n	2dd2 <nrf_gpio_reconfigure+0x66>
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    2e18:	2200      	movs	r2, #0
    2e1a:	e7de      	b.n	2dda <nrf_gpio_reconfigure+0x6e>
    2e1c:	50842500 	.word	0x50842500
    2e20:	50842800 	.word	0x50842800

00002e24 <nrf_gpio_cfg_default>:
    *p_pin = pin_number & 0x1F;
    2e24:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    2e28:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2e2a:	2801      	cmp	r0, #1
    2e2c:	d00a      	beq.n	2e44 <nrf_gpio_cfg_default+0x20>
        case 0: return NRF_P0;
    2e2e:	4906      	ldr	r1, [pc, #24]	; (2e48 <nrf_gpio_cfg_default+0x24>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    2e30:	3280      	adds	r2, #128	; 0x80
    2e32:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    2e36:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    2e3a:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
    2e3e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    2e42:	4770      	bx	lr
        case 1: return NRF_P1;
    2e44:	4901      	ldr	r1, [pc, #4]	; (2e4c <nrf_gpio_cfg_default+0x28>)
    2e46:	e7f3      	b.n	2e30 <nrf_gpio_cfg_default+0xc>
    2e48:	50842500 	.word	0x50842500
    2e4c:	50842800 	.word	0x50842800

00002e50 <nrf_gpio_latches_read_and_clear>:
{
    2e50:	b500      	push	{lr}
    2e52:	b083      	sub	sp, #12
    2e54:	4684      	mov	ip, r0
    2e56:	468e      	mov	lr, r1
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    2e58:	4b0c      	ldr	r3, [pc, #48]	; (2e8c <nrf_gpio_latches_read_and_clear+0x3c>)
    2e5a:	e893 0003 	ldmia.w	r3, {r0, r1}
    2e5e:	ab02      	add	r3, sp, #8
    2e60:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    2e64:	4663      	mov	r3, ip
    2e66:	e009      	b.n	2e7c <nrf_gpio_latches_read_and_clear+0x2c>
        *p_masks = gpio_regs[i]->LATCH;
    2e68:	a902      	add	r1, sp, #8
    2e6a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    2e6e:	f851 1c08 	ldr.w	r1, [r1, #-8]
    2e72:	6a08      	ldr	r0, [r1, #32]
    2e74:	f842 0b04 	str.w	r0, [r2], #4
        gpio_regs[i]->LATCH = *p_masks;
    2e78:	6208      	str	r0, [r1, #32]
    for (i = start_port; i < (start_port + length); i++)
    2e7a:	3301      	adds	r3, #1
    2e7c:	eb0c 000e 	add.w	r0, ip, lr
    2e80:	4298      	cmp	r0, r3
    2e82:	d8f1      	bhi.n	2e68 <nrf_gpio_latches_read_and_clear+0x18>
}
    2e84:	b003      	add	sp, #12
    2e86:	f85d fb04 	ldr.w	pc, [sp], #4
    2e8a:	bf00      	nop
    2e8c:	00006c20 	.word	0x00006c20

00002e90 <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    2e90:	3008      	adds	r0, #8
    2e92:	4b03      	ldr	r3, [pc, #12]	; (2ea0 <pin_in_use+0x10>)
    2e94:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    2e98:	f000 0001 	and.w	r0, r0, #1
    2e9c:	4770      	bx	lr
    2e9e:	bf00      	nop
    2ea0:	20000050 	.word	0x20000050

00002ea4 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    2ea4:	3008      	adds	r0, #8
    2ea6:	4b03      	ldr	r3, [pc, #12]	; (2eb4 <pin_in_use_by_te+0x10>)
    2ea8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    2eac:	f3c0 1040 	ubfx	r0, r0, #5, #1
    2eb0:	4770      	bx	lr
    2eb2:	bf00      	nop
    2eb4:	20000050 	.word	0x20000050

00002eb8 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    2eb8:	3008      	adds	r0, #8
    2eba:	4b04      	ldr	r3, [pc, #16]	; (2ecc <pin_has_trigger+0x14>)
    2ebc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    2ec0:	f010 001c 	ands.w	r0, r0, #28
    2ec4:	bf18      	it	ne
    2ec6:	2001      	movne	r0, #1
    2ec8:	4770      	bx	lr
    2eca:	bf00      	nop
    2ecc:	20000050 	.word	0x20000050

00002ed0 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    2ed0:	3008      	adds	r0, #8
    2ed2:	4b03      	ldr	r3, [pc, #12]	; (2ee0 <pin_is_output+0x10>)
    2ed4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    2ed8:	f3c0 0040 	ubfx	r0, r0, #1, #1
    2edc:	4770      	bx	lr
    2ede:	bf00      	nop
    2ee0:	20000050 	.word	0x20000050

00002ee4 <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    2ee4:	3008      	adds	r0, #8
    2ee6:	4b02      	ldr	r3, [pc, #8]	; (2ef0 <pin_te_get+0xc>)
    2ee8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    2eec:	0b40      	lsrs	r0, r0, #13
    2eee:	4770      	bx	lr
    2ef0:	20000050 	.word	0x20000050

00002ef4 <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    2ef4:	2200      	movs	r2, #0
    2ef6:	e004      	b.n	2f02 <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    2ef8:	f04f 33ff 	mov.w	r3, #4294967295
    2efc:	4283      	cmp	r3, r0
    2efe:	d00f      	beq.n	2f20 <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    2f00:	3201      	adds	r2, #1
    2f02:	2a2f      	cmp	r2, #47	; 0x2f
    2f04:	d80a      	bhi.n	2f1c <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    2f06:	f102 0308 	add.w	r3, r2, #8
    2f0a:	4906      	ldr	r1, [pc, #24]	; (2f24 <handler_in_use+0x30>)
    2f0c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    2f10:	f413 7f80 	tst.w	r3, #256	; 0x100
    2f14:	d0f0      	beq.n	2ef8 <handler_in_use+0x4>
    2f16:	f3c3 2343 	ubfx	r3, r3, #9, #4
    2f1a:	e7ef      	b.n	2efc <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
    2f1c:	2000      	movs	r0, #0
    2f1e:	4770      	bx	lr
            return true;
    2f20:	2001      	movs	r0, #1
}
    2f22:	4770      	bx	lr
    2f24:	20000050 	.word	0x20000050

00002f28 <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    2f28:	2300      	movs	r3, #0
    2f2a:	b113      	cbz	r3, 2f32 <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
    2f2c:	f04f 30ff 	mov.w	r0, #4294967295
}
    2f30:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    2f32:	4a07      	ldr	r2, [pc, #28]	; (2f50 <find_handler+0x28>)
    2f34:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    2f38:	4282      	cmp	r2, r0
    2f3a:	d001      	beq.n	2f40 <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    2f3c:	3301      	adds	r3, #1
    2f3e:	e7f4      	b.n	2f2a <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    2f40:	4a03      	ldr	r2, [pc, #12]	; (2f50 <find_handler+0x28>)
    2f42:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    2f46:	6852      	ldr	r2, [r2, #4]
    2f48:	428a      	cmp	r2, r1
    2f4a:	d1f7      	bne.n	2f3c <find_handler+0x14>
            return i;
    2f4c:	4618      	mov	r0, r3
    2f4e:	4770      	bx	lr
    2f50:	20000050 	.word	0x20000050

00002f54 <get_initial_sense>:
    return NRFX_SUCCESS;
}

static inline nrf_gpio_pin_sense_t get_initial_sense(nrfx_gpiote_pin_t pin)
{
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    2f54:	f100 0208 	add.w	r2, r0, #8
    2f58:	4b0e      	ldr	r3, [pc, #56]	; (2f94 <get_initial_sense+0x40>)
    2f5a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    2f5e:	f3c3 0382 	ubfx	r3, r3, #2, #3
    nrf_gpio_pin_sense_t sense;

    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    2f62:	2b04      	cmp	r3, #4
    2f64:	d010      	beq.n	2f88 <get_initial_sense+0x34>
    {
        sense = NRF_GPIO_PIN_SENSE_LOW;
    }
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    2f66:	2b05      	cmp	r3, #5
    2f68:	d010      	beq.n	2f8c <get_initial_sense+0x38>
    *p_pin = pin_number & 0x1F;
    2f6a:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    2f6e:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2f70:	2801      	cmp	r0, #1
    2f72:	d007      	beq.n	2f84 <get_initial_sense+0x30>
        case 0: return NRF_P0;
    2f74:	4b08      	ldr	r3, [pc, #32]	; (2f98 <get_initial_sense+0x44>)
    return p_reg->IN;
    2f76:	691b      	ldr	r3, [r3, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    2f78:	40d3      	lsrs	r3, r2
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    }
    else
    {
        /* If edge detection start with sensing opposite state. */
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    2f7a:	f013 0f01 	tst.w	r3, #1
    2f7e:	d007      	beq.n	2f90 <get_initial_sense+0x3c>
    2f80:	2003      	movs	r0, #3
    2f82:	4770      	bx	lr
        case 1: return NRF_P1;
    2f84:	4b05      	ldr	r3, [pc, #20]	; (2f9c <get_initial_sense+0x48>)
    2f86:	e7f6      	b.n	2f76 <get_initial_sense+0x22>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    2f88:	2003      	movs	r0, #3
    2f8a:	4770      	bx	lr
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    2f8c:	2002      	movs	r0, #2
    2f8e:	4770      	bx	lr
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    2f90:	2002      	movs	r0, #2
    }

    return sense;
}
    2f92:	4770      	bx	lr
    2f94:	20000050 	.word	0x20000050
    2f98:	50842500 	.word	0x50842500
    2f9c:	50842800 	.word	0x50842800

00002fa0 <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    2fa0:	3008      	adds	r0, #8
    2fa2:	4b06      	ldr	r3, [pc, #24]	; (2fbc <channel_handler_get+0x1c>)
    2fa4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    2fa8:	f410 7f80 	tst.w	r0, #256	; 0x100
    2fac:	d004      	beq.n	2fb8 <channel_handler_get+0x18>
    2fae:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
    2fb2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    2fb6:	4770      	bx	lr
        return NULL;
    2fb8:	2000      	movs	r0, #0
}
    2fba:	4770      	bx	lr
    2fbc:	20000050 	.word	0x20000050

00002fc0 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    2fc0:	b570      	push	{r4, r5, r6, lr}
    2fc2:	4604      	mov	r4, r0
    2fc4:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
    2fc6:	f7ff ffeb 	bl	2fa0 <channel_handler_get>

    if (handler)
    2fca:	b120      	cbz	r0, 2fd6 <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
    2fcc:	6806      	ldr	r6, [r0, #0]
    2fce:	6842      	ldr	r2, [r0, #4]
    2fd0:	4629      	mov	r1, r5
    2fd2:	4620      	mov	r0, r4
    2fd4:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
    2fd6:	4b04      	ldr	r3, [pc, #16]	; (2fe8 <call_handler+0x28>)
    2fd8:	689b      	ldr	r3, [r3, #8]
    2fda:	b123      	cbz	r3, 2fe6 <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    2fdc:	4a02      	ldr	r2, [pc, #8]	; (2fe8 <call_handler+0x28>)
    2fde:	68d2      	ldr	r2, [r2, #12]
    2fe0:	4629      	mov	r1, r5
    2fe2:	4620      	mov	r0, r4
    2fe4:	4798      	blx	r3
    }
}
    2fe6:	bd70      	pop	{r4, r5, r6, pc}
    2fe8:	20000050 	.word	0x20000050

00002fec <next_sense_cond_call_handler>:

static void next_sense_cond_call_handler(nrfx_gpiote_pin_t     pin,
                                         nrfx_gpiote_trigger_t trigger,
                                         nrf_gpio_pin_sense_t  sense)
{
    2fec:	b570      	push	{r4, r5, r6, lr}
    2fee:	4606      	mov	r6, r0
    2ff0:	460c      	mov	r4, r1
    2ff2:	4615      	mov	r5, r2
    if (is_level(trigger))
    2ff4:	4608      	mov	r0, r1
    2ff6:	f003 fa0e 	bl	6416 <is_level>
    2ffa:	b960      	cbnz	r0, 3016 <next_sense_cond_call_handler+0x2a>
    {
        /* Reconfigure sense to the opposite level, so the internal PINx.DETECT signal
         * can be deasserted. Therefore PORT event can be generated again,
         * unless some other PINx.DETECT signal is still active. */
        nrf_gpio_pin_sense_t next_sense = (sense == NRF_GPIO_PIN_SENSE_HIGH) ?
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    2ffc:	2d02      	cmp	r5, #2
    2ffe:	d026      	beq.n	304e <next_sense_cond_call_handler+0x62>
    3000:	2102      	movs	r1, #2

        nrf_gpio_cfg_sense_set(pin, next_sense);
    3002:	4630      	mov	r0, r6
    3004:	f003 f9df 	bl	63c6 <nrf_gpio_cfg_sense_set>

        /* Invoke user handler only if the sensed pin level matches its polarity
         * configuration. Call handler unconditionally in case of toggle trigger or
         * level trigger. */
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    3008:	2c03      	cmp	r4, #3
    300a:	d024      	beq.n	3056 <next_sense_cond_call_handler+0x6a>
    300c:	2d02      	cmp	r5, #2
    300e:	d020      	beq.n	3052 <next_sense_cond_call_handler+0x66>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    3010:	2d03      	cmp	r5, #3
    3012:	d025      	beq.n	3060 <next_sense_cond_call_handler+0x74>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
        {
            call_handler(pin, trigger);
        }
    }
}
    3014:	bd70      	pop	{r4, r5, r6, pc}
        call_handler(pin, trigger);
    3016:	4621      	mov	r1, r4
    3018:	4630      	mov	r0, r6
    301a:	f7ff ffd1 	bl	2fc0 <call_handler>
    *p_pin = pin_number & 0x1F;
    301e:	f006 031f 	and.w	r3, r6, #31
    return pin_number >> 5;
    3022:	0972      	lsrs	r2, r6, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3024:	2a01      	cmp	r2, #1
    3026:	d010      	beq.n	304a <next_sense_cond_call_handler+0x5e>
        case 0: return NRF_P0;
    3028:	4a0f      	ldr	r2, [pc, #60]	; (3068 <next_sense_cond_call_handler+0x7c>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    302a:	3380      	adds	r3, #128	; 0x80
    302c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3030:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
    3034:	429d      	cmp	r5, r3
    3036:	d1ed      	bne.n	3014 <next_sense_cond_call_handler+0x28>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    3038:	2100      	movs	r1, #0
    303a:	4630      	mov	r0, r6
    303c:	f003 f9c3 	bl	63c6 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    3040:	4629      	mov	r1, r5
    3042:	4630      	mov	r0, r6
    3044:	f003 f9bf 	bl	63c6 <nrf_gpio_cfg_sense_set>
    3048:	e7e4      	b.n	3014 <next_sense_cond_call_handler+0x28>
        case 1: return NRF_P1;
    304a:	4a08      	ldr	r2, [pc, #32]	; (306c <next_sense_cond_call_handler+0x80>)
    304c:	e7ed      	b.n	302a <next_sense_cond_call_handler+0x3e>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    304e:	2103      	movs	r1, #3
    3050:	e7d7      	b.n	3002 <next_sense_cond_call_handler+0x16>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    3052:	2c01      	cmp	r4, #1
    3054:	d1dc      	bne.n	3010 <next_sense_cond_call_handler+0x24>
            call_handler(pin, trigger);
    3056:	4621      	mov	r1, r4
    3058:	4630      	mov	r0, r6
    305a:	f7ff ffb1 	bl	2fc0 <call_handler>
}
    305e:	e7d9      	b.n	3014 <next_sense_cond_call_handler+0x28>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    3060:	2c02      	cmp	r4, #2
    3062:	d1d7      	bne.n	3014 <next_sense_cond_call_handler+0x28>
    3064:	e7f7      	b.n	3056 <next_sense_cond_call_handler+0x6a>
    3066:	bf00      	nop
    3068:	50842500 	.word	0x50842500
    306c:	50842800 	.word	0x50842800

00003070 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3070:	f100 0208 	add.w	r2, r0, #8
    3074:	4b0e      	ldr	r3, [pc, #56]	; (30b0 <release_handler+0x40>)
    3076:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    307a:	f413 7f80 	tst.w	r3, #256	; 0x100
    307e:	d016      	beq.n	30ae <release_handler+0x3e>
{
    3080:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3082:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    3086:	4610      	mov	r0, r2
    3088:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    308c:	4a08      	ldr	r2, [pc, #32]	; (30b0 <release_handler+0x40>)
    308e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
    3092:	4620      	mov	r0, r4
    3094:	f7ff ff2e 	bl	2ef4 <handler_in_use>
    3098:	b100      	cbz	r0, 309c <release_handler+0x2c>
}
    309a:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
    309c:	4804      	ldr	r0, [pc, #16]	; (30b0 <release_handler+0x40>)
    309e:	2300      	movs	r3, #0
    30a0:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    30a4:	4621      	mov	r1, r4
    30a6:	3074      	adds	r0, #116	; 0x74
    30a8:	f7ff fdc4 	bl	2c34 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    30ac:	e7f5      	b.n	309a <release_handler+0x2a>
    30ae:	4770      	bx	lr
    30b0:	20000050 	.word	0x20000050

000030b4 <pin_handler_trigger_uninit>:
{
    30b4:	b510      	push	{r4, lr}
    30b6:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
    30b8:	f7ff fef4 	bl	2ea4 <pin_in_use_by_te>
    30bc:	b150      	cbz	r0, 30d4 <pin_handler_trigger_uninit+0x20>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    30be:	4620      	mov	r0, r4
    30c0:	f7ff ff10 	bl	2ee4 <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    30c4:	4b08      	ldr	r3, [pc, #32]	; (30e8 <pin_handler_trigger_uninit+0x34>)
    30c6:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    30ca:	2200      	movs	r2, #0
    30cc:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
    30d0:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
    30d4:	4620      	mov	r0, r4
    30d6:	f7ff ffcb 	bl	3070 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    30da:	3408      	adds	r4, #8
    30dc:	4b03      	ldr	r3, [pc, #12]	; (30ec <pin_handler_trigger_uninit+0x38>)
    30de:	2200      	movs	r2, #0
    30e0:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
    30e4:	bd10      	pop	{r4, pc}
    30e6:	bf00      	nop
    30e8:	5000d000 	.word	0x5000d000
    30ec:	20000050 	.word	0x20000050

000030f0 <pin_handler_set>:
{
    30f0:	b570      	push	{r4, r5, r6, lr}
    30f2:	b082      	sub	sp, #8
    30f4:	4605      	mov	r5, r0
    30f6:	460e      	mov	r6, r1
    30f8:	4614      	mov	r4, r2
    release_handler(pin);
    30fa:	f7ff ffb9 	bl	3070 <release_handler>
    if (!handler)
    30fe:	b326      	cbz	r6, 314a <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
    3100:	4621      	mov	r1, r4
    3102:	4630      	mov	r0, r6
    3104:	f7ff ff10 	bl	2f28 <find_handler>
    if (handler_id < 0)
    3108:	1e03      	subs	r3, r0, #0
    310a:	db13      	blt.n	3134 <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
    310c:	4910      	ldr	r1, [pc, #64]	; (3150 <pin_handler_set+0x60>)
    310e:	f841 6033 	str.w	r6, [r1, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    3112:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
    3116:	6054      	str	r4, [r2, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    3118:	f105 0008 	add.w	r0, r5, #8
    311c:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
    3120:	025b      	lsls	r3, r3, #9
    3122:	b29b      	uxth	r3, r3
    3124:	4313      	orrs	r3, r2
    3126:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    312a:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
    return NRFX_SUCCESS;
    312e:	4809      	ldr	r0, [pc, #36]	; (3154 <pin_handler_set+0x64>)
}
    3130:	b002      	add	sp, #8
    3132:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    3134:	f10d 0107 	add.w	r1, sp, #7
    3138:	4807      	ldr	r0, [pc, #28]	; (3158 <pin_handler_set+0x68>)
    313a:	f7ff fd57 	bl	2bec <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    313e:	4b05      	ldr	r3, [pc, #20]	; (3154 <pin_handler_set+0x64>)
    3140:	4298      	cmp	r0, r3
    3142:	d1f5      	bne.n	3130 <pin_handler_set+0x40>
        handler_id = (int32_t)id;
    3144:	f89d 3007 	ldrb.w	r3, [sp, #7]
    3148:	e7e0      	b.n	310c <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
    314a:	4802      	ldr	r0, [pc, #8]	; (3154 <pin_handler_set+0x64>)
    314c:	e7f0      	b.n	3130 <pin_handler_set+0x40>
    314e:	bf00      	nop
    3150:	20000050 	.word	0x20000050
    3154:	0bad0000 	.word	0x0bad0000
    3158:	200000c4 	.word	0x200000c4

0000315c <port_event_handle>:
    }
    return false;
}

static void port_event_handle(void)
{
    315c:	b570      	push	{r4, r5, r6, lr}
    315e:	b082      	sub	sp, #8
    uint32_t latch[GPIO_COUNT];

    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);
    3160:	466a      	mov	r2, sp
    3162:	2102      	movs	r1, #2
    3164:	2000      	movs	r0, #0
    3166:	f7ff fe73 	bl	2e50 <nrf_gpio_latches_read_and_clear>
    316a:	e03e      	b.n	31ea <port_event_handle+0x8e>
    316c:	4e21      	ldr	r6, [pc, #132]	; (31f4 <port_event_handle+0x98>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    316e:	f105 0380 	add.w	r3, r5, #128	; 0x80
    3172:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);

                nrf_bitmask_bit_clear(pin, latch);
                sense = nrf_gpio_pin_sense_get(pin);

                next_sense_cond_call_handler(pin, trigger, sense);
    3176:	f3c2 4201 	ubfx	r2, r2, #16, #2
    317a:	f7ff ff37 	bl	2fec <next_sense_cond_call_handler>
    reg->LATCH = (1 << pin_number);
    317e:	2301      	movs	r3, #1
    3180:	40ab      	lsls	r3, r5
    3182:	6233      	str	r3, [r6, #32]
            while (latch[i])
    3184:	ab02      	add	r3, sp, #8
    3186:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    318a:	f853 0c08 	ldr.w	r0, [r3, #-8]
    318e:	b1f8      	cbz	r0, 31d0 <port_event_handle+0x74>
                uint32_t pin = NRF_CTZ(latch[i]);
    3190:	fa90 f0a0 	rbit	r0, r0
    3194:	fab0 f080 	clz	r0, r0
                pin += 32 * i;
    3198:	eb00 1044 	add.w	r0, r0, r4, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    319c:	f100 0208 	add.w	r2, r0, #8
    31a0:	4b15      	ldr	r3, [pc, #84]	; (31f8 <port_event_handle+0x9c>)
    31a2:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
    31a6:	f3c1 0182 	ubfx	r1, r1, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    31aa:	08c5      	lsrs	r5, r0, #3
    bit = BITMASK_RELBIT_GET(bit);
    31ac:	f000 0607 	and.w	r6, r0, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    31b0:	f81d 2005 	ldrb.w	r2, [sp, r5]
    31b4:	2301      	movs	r3, #1
    31b6:	40b3      	lsls	r3, r6
    31b8:	43db      	mvns	r3, r3
    31ba:	b25b      	sxtb	r3, r3
    31bc:	4013      	ands	r3, r2
    31be:	f80d 3005 	strb.w	r3, [sp, r5]
    *p_pin = pin_number & 0x1F;
    31c2:	f000 051f 	and.w	r5, r0, #31
    return pin_number >> 5;
    31c6:	0943      	lsrs	r3, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    31c8:	2b01      	cmp	r3, #1
    31ca:	d0cf      	beq.n	316c <port_event_handle+0x10>
        case 0: return NRF_P0;
    31cc:	4e0b      	ldr	r6, [pc, #44]	; (31fc <port_event_handle+0xa0>)
    31ce:	e7ce      	b.n	316e <port_event_handle+0x12>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    31d0:	3401      	adds	r4, #1
    31d2:	2c01      	cmp	r4, #1
    31d4:	d9d6      	bls.n	3184 <port_event_handle+0x28>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    31d6:	4b0a      	ldr	r3, [pc, #40]	; (3200 <port_event_handle+0xa4>)
    31d8:	2200      	movs	r2, #0
    31da:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    31de:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        }

        /* All pins have been handled, clear PORT, check latch again in case
         * something came between deciding to exit and clearing PORT event. */
        nrf_gpiote_event_clear(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT);
    } while (latch_pending_read_and_check(latch));
    31e2:	4668      	mov	r0, sp
    31e4:	f003 f91c 	bl	6420 <latch_pending_read_and_check>
    31e8:	b108      	cbz	r0, 31ee <port_event_handle+0x92>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    31ea:	2400      	movs	r4, #0
    31ec:	e7f1      	b.n	31d2 <port_event_handle+0x76>
}
    31ee:	b002      	add	sp, #8
    31f0:	bd70      	pop	{r4, r5, r6, pc}
    31f2:	bf00      	nop
    31f4:	50842800 	.word	0x50842800
    31f8:	20000050 	.word	0x20000050
    31fc:	50842500 	.word	0x50842500
    3200:	5000d000 	.word	0x5000d000

00003204 <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
    3204:	b538      	push	{r3, r4, r5, lr}
    3206:	4604      	mov	r4, r0
    while (mask)
    3208:	e018      	b.n	323c <gpiote_evt_handle+0x38>
    {
        uint32_t ch = NRF_CTZ(mask);
    320a:	fa94 f3a4 	rbit	r3, r4
    320e:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    3212:	2201      	movs	r2, #1
    3214:	409a      	lsls	r2, r3
    3216:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    321a:	4a0a      	ldr	r2, [pc, #40]	; (3244 <gpiote_evt_handle+0x40>)
    321c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    3220:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    3224:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    3228:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    322c:	f3c0 4001 	ubfx	r0, r0, #16, #2
    3230:	f003 f8ef 	bl	6412 <gpiote_polarity_to_trigger>
    3234:	4601      	mov	r1, r0
    3236:	4628      	mov	r0, r5
    3238:	f7ff fec2 	bl	2fc0 <call_handler>
    while (mask)
    323c:	2c00      	cmp	r4, #0
    323e:	d1e4      	bne.n	320a <gpiote_evt_handle+0x6>
    }
}
    3240:	bd38      	pop	{r3, r4, r5, pc}
    3242:	bf00      	nop
    3244:	5000d000 	.word	0x5000d000

00003248 <nrfx_gpiote_input_configure>:
{
    3248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    324c:	b084      	sub	sp, #16
    324e:	4604      	mov	r4, r0
    3250:	4615      	mov	r5, r2
    3252:	461e      	mov	r6, r3
    if (p_input_config)
    3254:	b309      	cbz	r1, 329a <nrfx_gpiote_input_configure+0x52>
    3256:	460f      	mov	r7, r1
        if (pin_is_task_output(pin))
    3258:	f003 f8c5 	bl	63e6 <pin_is_task_output>
    325c:	2800      	cmp	r0, #0
    325e:	d13f      	bne.n	32e0 <nrfx_gpiote_input_configure+0x98>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    3260:	2300      	movs	r3, #0
    3262:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    3266:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    326a:	9301      	str	r3, [sp, #4]
    326c:	9300      	str	r3, [sp, #0]
    326e:	463b      	mov	r3, r7
    3270:	f10d 020f 	add.w	r2, sp, #15
    3274:	f10d 010e 	add.w	r1, sp, #14
    3278:	4620      	mov	r0, r4
    327a:	f7ff fd77 	bl	2d6c <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    327e:	4a39      	ldr	r2, [pc, #228]	; (3364 <nrfx_gpiote_input_configure+0x11c>)
    3280:	f104 0108 	add.w	r1, r4, #8
    3284:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    3288:	f023 0302 	bic.w	r3, r3, #2
    328c:	b29b      	uxth	r3, r3
    328e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    3292:	f043 0301 	orr.w	r3, r3, #1
    3296:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    329a:	b1bd      	cbz	r5, 32cc <nrfx_gpiote_input_configure+0x84>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    329c:	782f      	ldrb	r7, [r5, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    329e:	f8d5 8004 	ldr.w	r8, [r5, #4]
        if (pin_is_output(pin))
    32a2:	4620      	mov	r0, r4
    32a4:	f7ff fe14 	bl	2ed0 <pin_is_output>
    32a8:	b1e0      	cbz	r0, 32e4 <nrfx_gpiote_input_configure+0x9c>
            if (use_evt)
    32aa:	f1b8 0f00 	cmp.w	r8, #0
    32ae:	d153      	bne.n	3358 <nrfx_gpiote_input_configure+0x110>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    32b0:	4a2c      	ldr	r2, [pc, #176]	; (3364 <nrfx_gpiote_input_configure+0x11c>)
    32b2:	f104 0108 	add.w	r1, r4, #8
    32b6:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    32ba:	f023 031c 	bic.w	r3, r3, #28
    32be:	b29b      	uxth	r3, r3
    32c0:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    32c4:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
    32c8:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
    32cc:	2e00      	cmp	r6, #0
    32ce:	d047      	beq.n	3360 <nrfx_gpiote_input_configure+0x118>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    32d0:	6872      	ldr	r2, [r6, #4]
    32d2:	6831      	ldr	r1, [r6, #0]
    32d4:	4620      	mov	r0, r4
    32d6:	f7ff ff0b 	bl	30f0 <pin_handler_set>
}
    32da:	b004      	add	sp, #16
    32dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return NRFX_ERROR_INVALID_PARAM;
    32e0:	4821      	ldr	r0, [pc, #132]	; (3368 <nrfx_gpiote_input_configure+0x120>)
    32e2:	e7fa      	b.n	32da <nrfx_gpiote_input_configure+0x92>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    32e4:	4a1f      	ldr	r2, [pc, #124]	; (3364 <nrfx_gpiote_input_configure+0x11c>)
    32e6:	f104 0108 	add.w	r1, r4, #8
    32ea:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    32ee:	f023 0320 	bic.w	r3, r3, #32
    32f2:	04db      	lsls	r3, r3, #19
    32f4:	0cdb      	lsrs	r3, r3, #19
    32f6:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            if (use_evt)
    32fa:	f1b8 0f00 	cmp.w	r8, #0
    32fe:	d0d7      	beq.n	32b0 <nrfx_gpiote_input_configure+0x68>
                if (!edge)
    3300:	2f03      	cmp	r7, #3
    3302:	d82b      	bhi.n	335c <nrfx_gpiote_input_configure+0x114>
                uint8_t ch = *p_trigger_config->p_in_channel;
    3304:	686b      	ldr	r3, [r5, #4]
    3306:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    3308:	b947      	cbnz	r7, 331c <nrfx_gpiote_input_configure+0xd4>
    p_reg->CONFIG[idx] = 0;
    330a:	4b18      	ldr	r3, [pc, #96]	; (336c <nrfx_gpiote_input_configure+0x124>)
    330c:	f505 75a2 	add.w	r5, r5, #324	; 0x144
    3310:	2200      	movs	r2, #0
    3312:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    p_reg->CONFIG[idx] = 0;
    3316:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#endif
}
    331a:	e7c9      	b.n	32b0 <nrfx_gpiote_input_configure+0x68>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
    331c:	4638      	mov	r0, r7
    331e:	f003 f879 	bl	6414 <gpiote_trigger_to_polarity>
    3322:	4603      	mov	r3, r0
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    3324:	4811      	ldr	r0, [pc, #68]	; (336c <nrfx_gpiote_input_configure+0x124>)
    3326:	f505 71a2 	add.w	r1, r5, #324	; 0x144
    332a:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
    332e:	f022 0203 	bic.w	r2, r2, #3
    3332:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
                    nrf_gpiote_event_configure(NRF_GPIOTE, ch, pin, polarity);
    3336:	4622      	mov	r2, r4
    3338:	4629      	mov	r1, r5
    333a:	f003 f80c 	bl	6356 <nrf_gpiote_event_configure>
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    333e:	4a09      	ldr	r2, [pc, #36]	; (3364 <nrfx_gpiote_input_configure+0x11c>)
    3340:	f104 0108 	add.w	r1, r4, #8
    3344:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    3348:	036d      	lsls	r5, r5, #13
    334a:	b2ad      	uxth	r5, r5
    334c:	432b      	orrs	r3, r5
    334e:	f043 0320 	orr.w	r3, r3, #32
    3352:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    3356:	e7ab      	b.n	32b0 <nrfx_gpiote_input_configure+0x68>
                return NRFX_ERROR_INVALID_PARAM;
    3358:	4803      	ldr	r0, [pc, #12]	; (3368 <nrfx_gpiote_input_configure+0x120>)
    335a:	e7be      	b.n	32da <nrfx_gpiote_input_configure+0x92>
                    return NRFX_ERROR_INVALID_PARAM;
    335c:	4802      	ldr	r0, [pc, #8]	; (3368 <nrfx_gpiote_input_configure+0x120>)
    335e:	e7bc      	b.n	32da <nrfx_gpiote_input_configure+0x92>
        err = NRFX_SUCCESS;
    3360:	4803      	ldr	r0, [pc, #12]	; (3370 <nrfx_gpiote_input_configure+0x128>)
    3362:	e7ba      	b.n	32da <nrfx_gpiote_input_configure+0x92>
    3364:	20000050 	.word	0x20000050
    3368:	0bad0004 	.word	0x0bad0004
    336c:	5000d000 	.word	0x5000d000
    3370:	0bad0000 	.word	0x0bad0000

00003374 <nrfx_gpiote_output_configure>:
{
    3374:	b570      	push	{r4, r5, r6, lr}
    3376:	b084      	sub	sp, #16
    3378:	4604      	mov	r4, r0
    337a:	4615      	mov	r5, r2
    if (p_config)
    337c:	b329      	cbz	r1, 33ca <nrfx_gpiote_output_configure+0x56>
    337e:	460e      	mov	r6, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    3380:	f003 f840 	bl	6404 <pin_is_input>
    3384:	b120      	cbz	r0, 3390 <nrfx_gpiote_output_configure+0x1c>
    3386:	4620      	mov	r0, r4
    3388:	f7ff fd8c 	bl	2ea4 <pin_in_use_by_te>
    338c:	2800      	cmp	r0, #0
    338e:	d13a      	bne.n	3406 <nrfx_gpiote_output_configure+0x92>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    3390:	4620      	mov	r0, r4
    3392:	f7ff fd91 	bl	2eb8 <pin_has_trigger>
    3396:	b110      	cbz	r0, 339e <nrfx_gpiote_output_configure+0x2a>
    3398:	7873      	ldrb	r3, [r6, #1]
    339a:	2b01      	cmp	r3, #1
    339c:	d033      	beq.n	3406 <nrfx_gpiote_output_configure+0x92>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    339e:	2301      	movs	r3, #1
    33a0:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    33a4:	2300      	movs	r3, #0
    33a6:	9301      	str	r3, [sp, #4]
    33a8:	9600      	str	r6, [sp, #0]
    33aa:	1cb3      	adds	r3, r6, #2
    33ac:	1c72      	adds	r2, r6, #1
    33ae:	f10d 010f 	add.w	r1, sp, #15
    33b2:	4620      	mov	r0, r4
    33b4:	f7ff fcda 	bl	2d6c <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    33b8:	4a20      	ldr	r2, [pc, #128]	; (343c <nrfx_gpiote_output_configure+0xc8>)
    33ba:	f104 0108 	add.w	r1, r4, #8
    33be:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    33c2:	f043 0303 	orr.w	r3, r3, #3
    33c6:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    33ca:	b395      	cbz	r5, 3432 <nrfx_gpiote_output_configure+0xbe>
        if (pin_is_input(pin))
    33cc:	4620      	mov	r0, r4
    33ce:	f003 f819 	bl	6404 <pin_is_input>
    33d2:	bb80      	cbnz	r0, 3436 <nrfx_gpiote_output_configure+0xc2>
        uint32_t ch = p_task_config->task_ch;
    33d4:	782e      	ldrb	r6, [r5, #0]
    p_reg->CONFIG[idx] = 0;
    33d6:	4b1a      	ldr	r3, [pc, #104]	; (3440 <nrfx_gpiote_output_configure+0xcc>)
    33d8:	f506 72a2 	add.w	r2, r6, #324	; 0x144
    33dc:	2100      	movs	r1, #0
    33de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    p_reg->CONFIG[idx] = 0;
    33e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    33e6:	4a15      	ldr	r2, [pc, #84]	; (343c <nrfx_gpiote_output_configure+0xc8>)
    33e8:	f104 0108 	add.w	r1, r4, #8
    33ec:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    33f0:	f023 0320 	bic.w	r3, r3, #32
    33f4:	04db      	lsls	r3, r3, #19
    33f6:	0cdb      	lsrs	r3, r3, #19
    33f8:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    33fc:	786b      	ldrb	r3, [r5, #1]
    33fe:	b923      	cbnz	r3, 340a <nrfx_gpiote_output_configure+0x96>
    return NRFX_SUCCESS;
    3400:	4810      	ldr	r0, [pc, #64]	; (3444 <nrfx_gpiote_output_configure+0xd0>)
}
    3402:	b004      	add	sp, #16
    3404:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_INVALID_PARAM;
    3406:	4810      	ldr	r0, [pc, #64]	; (3448 <nrfx_gpiote_output_configure+0xd4>)
    3408:	e7fb      	b.n	3402 <nrfx_gpiote_output_configure+0x8e>
                                      p_task_config->init_val);
    340a:	78aa      	ldrb	r2, [r5, #2]
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    340c:	9200      	str	r2, [sp, #0]
    340e:	4622      	mov	r2, r4
    3410:	4631      	mov	r1, r6
    3412:	480b      	ldr	r0, [pc, #44]	; (3440 <nrfx_gpiote_output_configure+0xcc>)
    3414:	f002 ffb8 	bl	6388 <nrf_gpiote_task_configure>
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    3418:	4a08      	ldr	r2, [pc, #32]	; (343c <nrfx_gpiote_output_configure+0xc8>)
    341a:	3408      	adds	r4, #8
    341c:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
    3420:	0376      	lsls	r6, r6, #13
    3422:	b2b6      	uxth	r6, r6
    3424:	4333      	orrs	r3, r6
    3426:	f043 0320 	orr.w	r3, r3, #32
    342a:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    return NRFX_SUCCESS;
    342e:	4805      	ldr	r0, [pc, #20]	; (3444 <nrfx_gpiote_output_configure+0xd0>)
    3430:	e7e7      	b.n	3402 <nrfx_gpiote_output_configure+0x8e>
    3432:	4804      	ldr	r0, [pc, #16]	; (3444 <nrfx_gpiote_output_configure+0xd0>)
    3434:	e7e5      	b.n	3402 <nrfx_gpiote_output_configure+0x8e>
            return NRFX_ERROR_INVALID_PARAM;
    3436:	4804      	ldr	r0, [pc, #16]	; (3448 <nrfx_gpiote_output_configure+0xd4>)
    3438:	e7e3      	b.n	3402 <nrfx_gpiote_output_configure+0x8e>
    343a:	bf00      	nop
    343c:	20000050 	.word	0x20000050
    3440:	5000d000 	.word	0x5000d000
    3444:	0bad0000 	.word	0x0bad0000
    3448:	0bad0004 	.word	0x0bad0004

0000344c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    344c:	4b01      	ldr	r3, [pc, #4]	; (3454 <nrfx_gpiote_global_callback_set+0x8>)
    344e:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
    3450:	60d9      	str	r1, [r3, #12]
}
    3452:	4770      	bx	lr
    3454:	20000050 	.word	0x20000050

00003458 <nrfx_gpiote_channel_get>:
{
    3458:	b538      	push	{r3, r4, r5, lr}
    345a:	4604      	mov	r4, r0
    345c:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin))
    345e:	f7ff fd21 	bl	2ea4 <pin_in_use_by_te>
    3462:	b140      	cbz	r0, 3476 <nrfx_gpiote_channel_get+0x1e>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3464:	f104 0008 	add.w	r0, r4, #8
    3468:	4b04      	ldr	r3, [pc, #16]	; (347c <nrfx_gpiote_channel_get+0x24>)
    346a:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
    346e:	0b5b      	lsrs	r3, r3, #13
    3470:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
    3472:	4803      	ldr	r0, [pc, #12]	; (3480 <nrfx_gpiote_channel_get+0x28>)
}
    3474:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
    3476:	4803      	ldr	r0, [pc, #12]	; (3484 <nrfx_gpiote_channel_get+0x2c>)
    3478:	e7fc      	b.n	3474 <nrfx_gpiote_channel_get+0x1c>
    347a:	bf00      	nop
    347c:	20000050 	.word	0x20000050
    3480:	0bad0000 	.word	0x0bad0000
    3484:	0bad0004 	.word	0x0bad0004

00003488 <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    3488:	4b0f      	ldr	r3, [pc, #60]	; (34c8 <nrfx_gpiote_init+0x40>)
    348a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    348e:	b10b      	cbz	r3, 3494 <nrfx_gpiote_init+0xc>
        return err_code;
    3490:	480e      	ldr	r0, [pc, #56]	; (34cc <nrfx_gpiote_init+0x44>)
}
    3492:	4770      	bx	lr
{
    3494:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    3496:	4c0e      	ldr	r4, [pc, #56]	; (34d0 <nrfx_gpiote_init+0x48>)
    3498:	2260      	movs	r2, #96	; 0x60
    349a:	2100      	movs	r1, #0
    349c:	4620      	mov	r0, r4
    349e:	f002 f8d4 	bl	564a <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    34a2:	200d      	movs	r0, #13
    34a4:	f001 ffbb 	bl	541e <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    34a8:	4b0a      	ldr	r3, [pc, #40]	; (34d4 <nrfx_gpiote_init+0x4c>)
    34aa:	2200      	movs	r2, #0
    34ac:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    34b0:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    34b4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    34b8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    34bc:	2301      	movs	r3, #1
    34be:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    34c2:	6663      	str	r3, [r4, #100]	; 0x64
    return err_code;
    34c4:	4804      	ldr	r0, [pc, #16]	; (34d8 <nrfx_gpiote_init+0x50>)
}
    34c6:	bd10      	pop	{r4, pc}
    34c8:	20000050 	.word	0x20000050
    34cc:	0bad0005 	.word	0x0bad0005
    34d0:	20000060 	.word	0x20000060
    34d4:	5000d000 	.word	0x5000d000
    34d8:	0bad0000 	.word	0x0bad0000

000034dc <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    34dc:	4b03      	ldr	r3, [pc, #12]	; (34ec <nrfx_gpiote_is_init+0x10>)
    34de:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    34e2:	3800      	subs	r0, #0
    34e4:	bf18      	it	ne
    34e6:	2001      	movne	r0, #1
    34e8:	4770      	bx	lr
    34ea:	bf00      	nop
    34ec:	20000050 	.word	0x20000050

000034f0 <nrfx_gpiote_channel_free>:
{
    34f0:	b508      	push	{r3, lr}
    34f2:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    34f4:	4801      	ldr	r0, [pc, #4]	; (34fc <nrfx_gpiote_channel_free+0xc>)
    34f6:	f7ff fb9d 	bl	2c34 <nrfx_flag32_free>
}
    34fa:	bd08      	pop	{r3, pc}
    34fc:	200000c0 	.word	0x200000c0

00003500 <nrfx_gpiote_channel_alloc>:
{
    3500:	b508      	push	{r3, lr}
    3502:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    3504:	4801      	ldr	r0, [pc, #4]	; (350c <nrfx_gpiote_channel_alloc+0xc>)
    3506:	f7ff fb71 	bl	2bec <nrfx_flag32_alloc>
}
    350a:	bd08      	pop	{r3, pc}
    350c:	200000c0 	.word	0x200000c0

00003510 <nrfx_gpiote_trigger_enable>:
{
    3510:	b538      	push	{r3, r4, r5, lr}
    3512:	4604      	mov	r4, r0
    3514:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3516:	f7ff fcc5 	bl	2ea4 <pin_in_use_by_te>
    351a:	b300      	cbz	r0, 355e <nrfx_gpiote_trigger_enable+0x4e>
    351c:	4620      	mov	r0, r4
    351e:	f002 ff71 	bl	6404 <pin_is_input>
    3522:	b1e0      	cbz	r0, 355e <nrfx_gpiote_trigger_enable+0x4e>
        uint8_t ch = pin_te_get(pin);
    3524:	4620      	mov	r0, r4
    3526:	f7ff fcdd 	bl	2ee4 <pin_te_get>
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    352a:	0083      	lsls	r3, r0, #2
    352c:	f503 7380 	add.w	r3, r3, #256	; 0x100
    return ((uint32_t)p_reg + event);
    3530:	b29b      	uxth	r3, r3
    3532:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    3536:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    353a:	2200      	movs	r2, #0
    353c:	601a      	str	r2, [r3, #0]
    353e:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    3540:	4a0b      	ldr	r2, [pc, #44]	; (3570 <nrfx_gpiote_trigger_enable+0x60>)
    3542:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    3546:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    354a:	f043 0301 	orr.w	r3, r3, #1
    354e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
    3552:	b15d      	cbz	r5, 356c <nrfx_gpiote_trigger_enable+0x5c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    3554:	2301      	movs	r3, #1
    3556:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    3558:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    355c:	e006      	b.n	356c <nrfx_gpiote_trigger_enable+0x5c>
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    355e:	4620      	mov	r0, r4
    3560:	f7ff fcf8 	bl	2f54 <get_initial_sense>
    3564:	4601      	mov	r1, r0
    3566:	4620      	mov	r0, r4
    3568:	f002 ff2d 	bl	63c6 <nrf_gpio_cfg_sense_set>
}
    356c:	bd38      	pop	{r3, r4, r5, pc}
    356e:	bf00      	nop
    3570:	5000d000 	.word	0x5000d000

00003574 <nrfx_gpiote_trigger_disable>:
{
    3574:	b510      	push	{r4, lr}
    3576:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3578:	f7ff fc94 	bl	2ea4 <pin_in_use_by_te>
    357c:	b1a0      	cbz	r0, 35a8 <nrfx_gpiote_trigger_disable+0x34>
    357e:	4620      	mov	r0, r4
    3580:	f002 ff40 	bl	6404 <pin_is_input>
    3584:	b180      	cbz	r0, 35a8 <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
    3586:	4620      	mov	r0, r4
    3588:	f7ff fcac 	bl	2ee4 <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    358c:	2201      	movs	r2, #1
    358e:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    3590:	4b08      	ldr	r3, [pc, #32]	; (35b4 <nrfx_gpiote_trigger_disable+0x40>)
    3592:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    3596:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    359a:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    359e:	f022 0203 	bic.w	r2, r2, #3
    35a2:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
    35a6:	e003      	b.n	35b0 <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    35a8:	2100      	movs	r1, #0
    35aa:	4620      	mov	r0, r4
    35ac:	f002 ff0b 	bl	63c6 <nrf_gpio_cfg_sense_set>
}
    35b0:	bd10      	pop	{r4, pc}
    35b2:	bf00      	nop
    35b4:	5000d000 	.word	0x5000d000

000035b8 <nrfx_gpiote_pin_uninit>:
{
    35b8:	b510      	push	{r4, lr}
    35ba:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    35bc:	f7ff fc68 	bl	2e90 <pin_in_use>
    35c0:	b908      	cbnz	r0, 35c6 <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
    35c2:	4806      	ldr	r0, [pc, #24]	; (35dc <nrfx_gpiote_pin_uninit+0x24>)
}
    35c4:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_disable(pin);
    35c6:	4620      	mov	r0, r4
    35c8:	f7ff ffd4 	bl	3574 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    35cc:	4620      	mov	r0, r4
    35ce:	f7ff fd71 	bl	30b4 <pin_handler_trigger_uninit>
    nrf_gpio_cfg_default(pin);
    35d2:	4620      	mov	r0, r4
    35d4:	f7ff fc26 	bl	2e24 <nrf_gpio_cfg_default>
    return NRFX_SUCCESS;
    35d8:	4801      	ldr	r0, [pc, #4]	; (35e0 <nrfx_gpiote_pin_uninit+0x28>)
    35da:	e7f3      	b.n	35c4 <nrfx_gpiote_pin_uninit+0xc>
    35dc:	0bad0004 	.word	0x0bad0004
    35e0:	0bad0000 	.word	0x0bad0000

000035e4 <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
    35e4:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    35e6:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    35e8:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    35ec:	2100      	movs	r1, #0
    uint32_t status = 0;
    35ee:	460c      	mov	r4, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    35f0:	e003      	b.n	35fa <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
    35f2:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    35f4:	3304      	adds	r3, #4
    35f6:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    35f8:	3101      	adds	r1, #1
    35fa:	2907      	cmp	r1, #7
    35fc:	d814      	bhi.n	3628 <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    35fe:	f103 42a0 	add.w	r2, r3, #1342177280	; 0x50000000
    3602:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    3606:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    3608:	2a00      	cmp	r2, #0
    360a:	d0f2      	beq.n	35f2 <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
    360c:	4a0c      	ldr	r2, [pc, #48]	; (3640 <nrfx_gpiote_irq_handler+0x5c>)
    360e:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    3612:	4210      	tst	r0, r2
    3614:	d0ed      	beq.n	35f2 <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
    3616:	f103 42a0 	add.w	r2, r3, #1342177280	; 0x50000000
    361a:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    361e:	2500      	movs	r5, #0
    3620:	6015      	str	r5, [r2, #0]
    3622:	6812      	ldr	r2, [r2, #0]
            status |= mask;
    3624:	4304      	orrs	r4, r0
    3626:	e7e4      	b.n	35f2 <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3628:	4b05      	ldr	r3, [pc, #20]	; (3640 <nrfx_gpiote_irq_handler+0x5c>)
    362a:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    362e:	b91b      	cbnz	r3, 3638 <nrfx_gpiote_irq_handler+0x54>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
    3630:	4620      	mov	r0, r4
    3632:	f7ff fde7 	bl	3204 <gpiote_evt_handle>
}
    3636:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
    3638:	f7ff fd90 	bl	315c <port_event_handle>
    363c:	e7f8      	b.n	3630 <nrfx_gpiote_irq_handler+0x4c>
    363e:	bf00      	nop
    3640:	5000d000 	.word	0x5000d000

00003644 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
    3644:	4b03      	ldr	r3, [pc, #12]	; (3654 <z_device_state_init+0x10>)

	while (dev < __device_end) {
    3646:	e000      	b.n	364a <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
    3648:	3318      	adds	r3, #24
	while (dev < __device_end) {
    364a:	4a03      	ldr	r2, [pc, #12]	; (3658 <z_device_state_init+0x14>)
    364c:	4293      	cmp	r3, r2
    364e:	d3fb      	bcc.n	3648 <z_device_state_init+0x4>
	}
}
    3650:	4770      	bx	lr
    3652:	bf00      	nop
    3654:	0000693c 	.word	0x0000693c
    3658:	0000699c 	.word	0x0000699c

0000365c <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
static void z_sys_init_run_level(enum init_level level)
{
    365c:	b570      	push	{r4, r5, r6, lr}
    365e:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3660:	4b11      	ldr	r3, [pc, #68]	; (36a8 <z_sys_init_run_level+0x4c>)
    3662:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    3666:	e009      	b.n	367c <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
    3668:	4240      	negs	r0, r0
    366a:	e017      	b.n	369c <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    366c:	68eb      	ldr	r3, [r5, #12]
    366e:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
    3670:	68ea      	ldr	r2, [r5, #12]
    3672:	7853      	ldrb	r3, [r2, #1]
    3674:	f043 0301 	orr.w	r3, r3, #1
    3678:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    367a:	3408      	adds	r4, #8
    367c:	1c73      	adds	r3, r6, #1
    367e:	4a0a      	ldr	r2, [pc, #40]	; (36a8 <z_sys_init_run_level+0x4c>)
    3680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3684:	42a3      	cmp	r3, r4
    3686:	d90d      	bls.n	36a4 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
    3688:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
    368a:	6823      	ldr	r3, [r4, #0]
    368c:	4628      	mov	r0, r5
    368e:	4798      	blx	r3
		if (dev != NULL) {
    3690:	2d00      	cmp	r5, #0
    3692:	d0f2      	beq.n	367a <z_sys_init_run_level+0x1e>
			if (rc != 0) {
    3694:	2800      	cmp	r0, #0
    3696:	d0eb      	beq.n	3670 <z_sys_init_run_level+0x14>
				if (rc < 0) {
    3698:	2800      	cmp	r0, #0
    369a:	dbe5      	blt.n	3668 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
    369c:	28ff      	cmp	r0, #255	; 0xff
    369e:	dde5      	ble.n	366c <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
    36a0:	20ff      	movs	r0, #255	; 0xff
    36a2:	e7e3      	b.n	366c <z_sys_init_run_level+0x10>
		}
	}
}
    36a4:	bd70      	pop	{r4, r5, r6, pc}
    36a6:	bf00      	nop
    36a8:	00006e64 	.word	0x00006e64

000036ac <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    36ac:	b510      	push	{r4, lr}
    36ae:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
    36b0:	23b0      	movs	r3, #176	; 0xb0
    36b2:	4c11      	ldr	r4, [pc, #68]	; (36f8 <init_idle_thread+0x4c>)
    36b4:	fb03 4400 	mla	r4, r3, r0, r4
	k_thread_stack_t *stack = z_idle_stacks[i];
    36b8:	eb00 0c80 	add.w	ip, r0, r0, lsl #2
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    36bc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    36c0:	4b0e      	ldr	r3, [pc, #56]	; (36fc <init_idle_thread+0x50>)
    36c2:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
	z_setup_new_thread(thread, stack,
    36c6:	4a0e      	ldr	r2, [pc, #56]	; (3700 <init_idle_thread+0x54>)
    36c8:	9205      	str	r2, [sp, #20]
    36ca:	2201      	movs	r2, #1
    36cc:	9204      	str	r2, [sp, #16]
    36ce:	220f      	movs	r2, #15
    36d0:	9203      	str	r2, [sp, #12]
    36d2:	2200      	movs	r2, #0
    36d4:	9202      	str	r2, [sp, #8]
    36d6:	9201      	str	r2, [sp, #4]
    36d8:	9300      	str	r3, [sp, #0]
    36da:	4b0a      	ldr	r3, [pc, #40]	; (3704 <init_idle_thread+0x58>)
    36dc:	f44f 72a0 	mov.w	r2, #320	; 0x140
    36e0:	4909      	ldr	r1, [pc, #36]	; (3708 <init_idle_thread+0x5c>)
    36e2:	eb01 118c 	add.w	r1, r1, ip, lsl #6
    36e6:	4620      	mov	r0, r4
    36e8:	f000 f94a 	bl	3980 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    36ec:	7b63      	ldrb	r3, [r4, #13]
    36ee:	f023 0304 	bic.w	r3, r3, #4
    36f2:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    36f4:	b006      	add	sp, #24
    36f6:	bd10      	pop	{r4, pc}
    36f8:	200001b0 	.word	0x200001b0
    36fc:	20000950 	.word	0x20000950
    3700:	00006e54 	.word	0x00006e54
    3704:	00003add 	.word	0x00003add
    3708:	20001368 	.word	0x20001368

0000370c <bg_thread_main>:
{
    370c:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    370e:	4b0a      	ldr	r3, [pc, #40]	; (3738 <bg_thread_main+0x2c>)
    3710:	2201      	movs	r2, #1
    3712:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    3714:	2003      	movs	r0, #3
    3716:	f7ff ffa1 	bl	365c <z_sys_init_run_level>
	boot_banner();
    371a:	f001 f865 	bl	47e8 <boot_banner>
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    371e:	2004      	movs	r0, #4
    3720:	f7ff ff9c 	bl	365c <z_sys_init_run_level>
	z_init_static_threads();
    3724:	f000 f990 	bl	3a48 <z_init_static_threads>
	main();
    3728:	f7fc fe7c 	bl	424 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    372c:	4a03      	ldr	r2, [pc, #12]	; (373c <bg_thread_main+0x30>)
    372e:	7b13      	ldrb	r3, [r2, #12]
    3730:	f023 0301 	bic.w	r3, r3, #1
    3734:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    3736:	bd08      	pop	{r3, pc}
    3738:	20000b67 	.word	0x20000b67
    373c:	20000260 	.word	0x20000260

00003740 <switch_to_main_thread>:
	return stack_ptr;
}

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
    3740:	b508      	push	{r3, lr}
    3742:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    3744:	4a01      	ldr	r2, [pc, #4]	; (374c <switch_to_main_thread+0xc>)
    3746:	4802      	ldr	r0, [pc, #8]	; (3750 <switch_to_main_thread+0x10>)
    3748:	f7fd fe64 	bl	1414 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    374c:	0000370d 	.word	0x0000370d
    3750:	20000260 	.word	0x20000260

00003754 <z_bss_zero>:
{
    3754:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    3756:	4803      	ldr	r0, [pc, #12]	; (3764 <z_bss_zero+0x10>)
    3758:	4a03      	ldr	r2, [pc, #12]	; (3768 <z_bss_zero+0x14>)
    375a:	1a12      	subs	r2, r2, r0
    375c:	2100      	movs	r1, #0
    375e:	f002 fe9c 	bl	649a <z_early_memset>
}
    3762:	bd08      	pop	{r3, pc}
    3764:	20000190 	.word	0x20000190
    3768:	20000b68 	.word	0x20000b68

0000376c <z_init_cpu>:
{
    376c:	b510      	push	{r4, lr}
    376e:	4604      	mov	r4, r0
	init_idle_thread(id);
    3770:	f7ff ff9c 	bl	36ac <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    3774:	23b0      	movs	r3, #176	; 0xb0
    3776:	490a      	ldr	r1, [pc, #40]	; (37a0 <z_init_cpu+0x34>)
    3778:	fb03 1104 	mla	r1, r3, r4, r1
    377c:	4a09      	ldr	r2, [pc, #36]	; (37a4 <z_init_cpu+0x38>)
    377e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    3782:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    3786:	60d9      	str	r1, [r3, #12]
	_kernel.cpus[id].id = id;
    3788:	751c      	strb	r4, [r3, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    378a:	4b07      	ldr	r3, [pc, #28]	; (37a8 <z_init_cpu+0x3c>)
    378c:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
    3790:	f503 6300 	add.w	r3, r3, #2048	; 0x800
	_kernel.cpus[id].irq_stack =
    3794:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    3798:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
    379c:	6053      	str	r3, [r2, #4]
}
    379e:	bd10      	pop	{r4, pc}
    37a0:	200001b0 	.word	0x200001b0
    37a4:	20000950 	.word	0x20000950
    37a8:	20000b68 	.word	0x20000b68

000037ac <prepare_multithreading>:
{
    37ac:	b570      	push	{r4, r5, r6, lr}
    37ae:	b086      	sub	sp, #24
	z_sched_init();
    37b0:	f000 fda6 	bl	4300 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
    37b4:	4d10      	ldr	r5, [pc, #64]	; (37f8 <prepare_multithreading+0x4c>)
    37b6:	4b11      	ldr	r3, [pc, #68]	; (37fc <prepare_multithreading+0x50>)
    37b8:	61dd      	str	r5, [r3, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    37ba:	4b11      	ldr	r3, [pc, #68]	; (3800 <prepare_multithreading+0x54>)
    37bc:	9305      	str	r3, [sp, #20]
    37be:	2301      	movs	r3, #1
    37c0:	9304      	str	r3, [sp, #16]
    37c2:	2400      	movs	r4, #0
    37c4:	9403      	str	r4, [sp, #12]
    37c6:	9402      	str	r4, [sp, #8]
    37c8:	9401      	str	r4, [sp, #4]
    37ca:	9400      	str	r4, [sp, #0]
    37cc:	4b0d      	ldr	r3, [pc, #52]	; (3804 <prepare_multithreading+0x58>)
    37ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
    37d2:	490d      	ldr	r1, [pc, #52]	; (3808 <prepare_multithreading+0x5c>)
    37d4:	4628      	mov	r0, r5
    37d6:	f000 f8d3 	bl	3980 <z_setup_new_thread>
    37da:	4606      	mov	r6, r0
    37dc:	7b6b      	ldrb	r3, [r5, #13]
    37de:	f023 0304 	bic.w	r3, r3, #4
    37e2:	736b      	strb	r3, [r5, #13]
	z_ready_thread(&z_main_thread);
    37e4:	4628      	mov	r0, r5
    37e6:	f002 ff3d 	bl	6664 <z_ready_thread>
	z_init_cpu(0);
    37ea:	4620      	mov	r0, r4
    37ec:	f7ff ffbe 	bl	376c <z_init_cpu>
}
    37f0:	4630      	mov	r0, r6
    37f2:	b006      	add	sp, #24
    37f4:	bd70      	pop	{r4, r5, r6, pc}
    37f6:	bf00      	nop
    37f8:	20000260 	.word	0x20000260
    37fc:	20000950 	.word	0x20000950
    3800:	00006e5c 	.word	0x00006e5c
    3804:	0000370d 	.word	0x0000370d
    3808:	200014a8 	.word	0x200014a8

0000380c <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    380c:	b500      	push	{lr}
    380e:	b0ad      	sub	sp, #180	; 0xb4
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    3810:	2000      	movs	r0, #0
    3812:	f7ff ff23 	bl	365c <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    3816:	4b1d      	ldr	r3, [pc, #116]	; (388c <z_cstart+0x80>)
	uint32_t msp =
    3818:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    381c:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    3820:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3824:	4c1a      	ldr	r4, [pc, #104]	; (3890 <z_cstart+0x84>)
    3826:	23e0      	movs	r3, #224	; 0xe0
    3828:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    382c:	2500      	movs	r5, #0
    382e:	77e5      	strb	r5, [r4, #31]
    3830:	7625      	strb	r5, [r4, #24]
    3832:	7665      	strb	r5, [r4, #25]
    3834:	76a5      	strb	r5, [r4, #26]
    3836:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    383a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    383c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    3840:	6263      	str	r3, [r4, #36]	; 0x24
    3842:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    3846:	f7fd ff45 	bl	16d4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    384a:	f7fd fcf9 	bl	1240 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    384e:	f04f 33ff 	mov.w	r3, #4294967295
    3852:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    3854:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    3856:	f7fe f973 	bl	1b40 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    385a:	f7fe f809 	bl	1870 <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    385e:	2401      	movs	r4, #1
    3860:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    3864:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    3868:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
    386a:	9527      	str	r5, [sp, #156]	; 0x9c
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
    386c:	9529      	str	r5, [sp, #164]	; 0xa4

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    386e:	4b09      	ldr	r3, [pc, #36]	; (3894 <z_cstart+0x88>)
    3870:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    3874:	f7ff fee6 	bl	3644 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    3878:	4620      	mov	r0, r4
    387a:	f7ff feef 	bl	365c <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    387e:	2002      	movs	r0, #2
    3880:	f7ff feec 	bl	365c <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
    3884:	f7ff ff92 	bl	37ac <prepare_multithreading>
    3888:	f7ff ff5a 	bl	3740 <switch_to_main_thread>
    388c:	20000b68 	.word	0x20000b68
    3890:	e000ed00 	.word	0xe000ed00
    3894:	20000950 	.word	0x20000950

00003898 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    3898:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    389a:	4c06      	ldr	r4, [pc, #24]	; (38b4 <init_mem_slab_module+0x1c>)
	int rc = 0;
    389c:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    389e:	e000      	b.n	38a2 <init_mem_slab_module+0xa>
    38a0:	341c      	adds	r4, #28
    38a2:	4b05      	ldr	r3, [pc, #20]	; (38b8 <init_mem_slab_module+0x20>)
    38a4:	429c      	cmp	r4, r3
    38a6:	d204      	bcs.n	38b2 <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
    38a8:	4620      	mov	r0, r4
    38aa:	f002 fdfe 	bl	64aa <create_free_list>
		if (rc < 0) {
    38ae:	2800      	cmp	r0, #0
    38b0:	daf6      	bge.n	38a0 <init_mem_slab_module+0x8>
		z_object_init(slab);
	}

out:
	return rc;
}
    38b2:	bd10      	pop	{r4, pc}
    38b4:	2000013c 	.word	0x2000013c
    38b8:	2000013c 	.word	0x2000013c

000038bc <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    38bc:	b530      	push	{r4, r5, lr}
    38be:	b083      	sub	sp, #12
    38c0:	460d      	mov	r5, r1
	__asm__ volatile(
    38c2:	f04f 0120 	mov.w	r1, #32
    38c6:	f3ef 8c11 	mrs	ip, BASEPRI
    38ca:	f381 8812 	msr	BASEPRI_MAX, r1
    38ce:	f3bf 8f6f 	isb	sy
    38d2:	4661      	mov	r1, ip
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    38d4:	6944      	ldr	r4, [r0, #20]
    38d6:	b164      	cbz	r4, 38f2 <k_mem_slab_alloc+0x36>
		/* take a free block */
		*mem = slab->free_list;
    38d8:	602c      	str	r4, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
    38da:	6823      	ldr	r3, [r4, #0]
    38dc:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    38de:	6983      	ldr	r3, [r0, #24]
    38e0:	3301      	adds	r3, #1
    38e2:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    38e4:	2000      	movs	r0, #0
	__asm__ volatile(
    38e6:	f381 8811 	msr	BASEPRI, r1
    38ea:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
    38ee:	b003      	add	sp, #12
    38f0:	bd30      	pop	{r4, r5, pc}
    38f2:	f100 0e08 	add.w	lr, r0, #8
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    38f6:	ea53 0402 	orrs.w	r4, r3, r2
    38fa:	d104      	bne.n	3906 <k_mem_slab_alloc+0x4a>
		*mem = NULL;
    38fc:	2300      	movs	r3, #0
    38fe:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
    3900:	f06f 000b 	mvn.w	r0, #11
    3904:	e7ef      	b.n	38e6 <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    3906:	9200      	str	r2, [sp, #0]
    3908:	9301      	str	r3, [sp, #4]
    390a:	4602      	mov	r2, r0
    390c:	4670      	mov	r0, lr
    390e:	f000 fbf1 	bl	40f4 <z_pend_curr>
		if (result == 0) {
    3912:	2800      	cmp	r0, #0
    3914:	d1eb      	bne.n	38ee <k_mem_slab_alloc+0x32>
			*mem = _current->base.swap_data;
    3916:	4b02      	ldr	r3, [pc, #8]	; (3920 <k_mem_slab_alloc+0x64>)
    3918:	689b      	ldr	r3, [r3, #8]
    391a:	695b      	ldr	r3, [r3, #20]
    391c:	602b      	str	r3, [r5, #0]
		return result;
    391e:	e7e6      	b.n	38ee <k_mem_slab_alloc+0x32>
    3920:	20000950 	.word	0x20000950

00003924 <z_thread_monitor_exit>:
	__asm__ volatile(
    3924:	f04f 0320 	mov.w	r3, #32
    3928:	f3ef 8111 	mrs	r1, BASEPRI
    392c:	f383 8812 	msr	BASEPRI_MAX, r3
    3930:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
    3934:	4b0a      	ldr	r3, [pc, #40]	; (3960 <z_thread_monitor_exit+0x3c>)
    3936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3938:	4283      	cmp	r3, r0
    393a:	d104      	bne.n	3946 <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
    393c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    393e:	4b08      	ldr	r3, [pc, #32]	; (3960 <z_thread_monitor_exit+0x3c>)
    3940:	629a      	str	r2, [r3, #40]	; 0x28
    3942:	e007      	b.n	3954 <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
    3944:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    3946:	b113      	cbz	r3, 394e <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
    3948:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
    394a:	4282      	cmp	r2, r0
    394c:	d1fa      	bne.n	3944 <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
    394e:	b10b      	cbz	r3, 3954 <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
    3950:	6f02      	ldr	r2, [r0, #112]	; 0x70
    3952:	671a      	str	r2, [r3, #112]	; 0x70
	__asm__ volatile(
    3954:	f381 8811 	msr	BASEPRI, r1
    3958:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
    395c:	4770      	bx	lr
    395e:	bf00      	nop
    3960:	20000950 	.word	0x20000950

00003964 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
    3964:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    3966:	ea53 0102 	orrs.w	r1, r3, r2
    396a:	d102      	bne.n	3972 <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
    396c:	f002 fe03 	bl	6576 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    3970:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    3972:	4902      	ldr	r1, [pc, #8]	; (397c <schedule_new_thread+0x18>)
    3974:	3018      	adds	r0, #24
    3976:	f000 fe2b 	bl	45d0 <z_add_timeout>
    397a:	e7f9      	b.n	3970 <schedule_new_thread+0xc>
    397c:	0000669d 	.word	0x0000669d

00003980 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    3980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3984:	b085      	sub	sp, #20
    3986:	4604      	mov	r4, r0
    3988:	460f      	mov	r7, r1
    398a:	4615      	mov	r5, r2
    398c:	461e      	mov	r6, r3
    398e:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
    3992:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    3996:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    399a:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    399e:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    39a2:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
    39a4:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    39a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    39a8:	2204      	movs	r2, #4
    39aa:	9911      	ldr	r1, [sp, #68]	; 0x44
    39ac:	f002 fde7 	bl	657e <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
    39b0:	462a      	mov	r2, r5
    39b2:	4639      	mov	r1, r7
    39b4:	4620      	mov	r0, r4
    39b6:	f002 fdcc 	bl	6552 <setup_thread_stack>
    39ba:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    39bc:	f8cd 8008 	str.w	r8, [sp, #8]
    39c0:	f8cd 9004 	str.w	r9, [sp, #4]
    39c4:	f8cd a000 	str.w	sl, [sp]
    39c8:	4633      	mov	r3, r6
    39ca:	4602      	mov	r2, r0
    39cc:	4639      	mov	r1, r7
    39ce:	4620      	mov	r0, r4
    39d0:	f7fd fcfe 	bl	13d0 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
    39d4:	2300      	movs	r3, #0
    39d6:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_THREAD_CUSTOM_DATA
	/* Initialize custom data field (value is opaque to kernel) */
	new_thread->custom_data = NULL;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
    39d8:	6626      	str	r6, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
    39da:	f8c4 a064 	str.w	sl, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
    39de:	f8c4 9068 	str.w	r9, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
    39e2:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
	__asm__ volatile(
    39e6:	f04f 0320 	mov.w	r3, #32
    39ea:	f3ef 8211 	mrs	r2, BASEPRI
    39ee:	f383 8812 	msr	BASEPRI_MAX, r3
    39f2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
    39f6:	4b13      	ldr	r3, [pc, #76]	; (3a44 <z_setup_new_thread+0xc4>)
    39f8:	6a99      	ldr	r1, [r3, #40]	; 0x28
    39fa:	6721      	str	r1, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
    39fc:	629c      	str	r4, [r3, #40]	; 0x28
	__asm__ volatile(
    39fe:	f382 8811 	msr	BASEPRI, r2
    3a02:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
    3a06:	f1bb 0f00 	cmp.w	fp, #0
    3a0a:	d013      	beq.n	3a34 <z_setup_new_thread+0xb4>
		strncpy(new_thread->name, name,
    3a0c:	221f      	movs	r2, #31
    3a0e:	4659      	mov	r1, fp
    3a10:	f104 0074 	add.w	r0, r4, #116	; 0x74
    3a14:	f001 fdbd 	bl	5592 <strncpy>
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    3a18:	2300      	movs	r3, #0
    3a1a:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    3a1e:	4b09      	ldr	r3, [pc, #36]	; (3a44 <z_setup_new_thread+0xc4>)
    3a20:	689b      	ldr	r3, [r3, #8]
    3a22:	b15b      	cbz	r3, 3a3c <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    3a24:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    3a28:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
#endif

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
    3a2c:	4628      	mov	r0, r5
    3a2e:	b005      	add	sp, #20
    3a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
    3a34:	2300      	movs	r3, #0
    3a36:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    3a3a:	e7f0      	b.n	3a1e <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
    3a3c:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
    3a40:	e7f4      	b.n	3a2c <z_setup_new_thread+0xac>
    3a42:	bf00      	nop
    3a44:	20000950 	.word	0x20000950

00003a48 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    3a48:	b530      	push	{r4, r5, lr}
    3a4a:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    3a4c:	4c21      	ldr	r4, [pc, #132]	; (3ad4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3c>)
    3a4e:	e014      	b.n	3a7a <z_init_static_threads+0x32>
		z_setup_new_thread(
    3a50:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3a52:	9305      	str	r3, [sp, #20]
    3a54:	6a23      	ldr	r3, [r4, #32]
    3a56:	9304      	str	r3, [sp, #16]
    3a58:	69e3      	ldr	r3, [r4, #28]
    3a5a:	9303      	str	r3, [sp, #12]
    3a5c:	69a3      	ldr	r3, [r4, #24]
    3a5e:	9302      	str	r3, [sp, #8]
    3a60:	6963      	ldr	r3, [r4, #20]
    3a62:	9301      	str	r3, [sp, #4]
    3a64:	6923      	ldr	r3, [r4, #16]
    3a66:	9300      	str	r3, [sp, #0]
    3a68:	68e3      	ldr	r3, [r4, #12]
    3a6a:	68a2      	ldr	r2, [r4, #8]
    3a6c:	6861      	ldr	r1, [r4, #4]
    3a6e:	6820      	ldr	r0, [r4, #0]
    3a70:	f7ff ff86 	bl	3980 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
    3a74:	6823      	ldr	r3, [r4, #0]
    3a76:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    3a78:	3430      	adds	r4, #48	; 0x30
    3a7a:	4b17      	ldr	r3, [pc, #92]	; (3ad8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x40>)
    3a7c:	429c      	cmp	r4, r3
    3a7e:	d3e7      	bcc.n	3a50 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    3a80:	f000 f9ea 	bl	3e58 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    3a84:	4c13      	ldr	r4, [pc, #76]	; (3ad4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3c>)
    3a86:	e000      	b.n	3a8a <z_init_static_threads+0x42>
    3a88:	3430      	adds	r4, #48	; 0x30
    3a8a:	4b13      	ldr	r3, [pc, #76]	; (3ad8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x40>)
    3a8c:	429c      	cmp	r4, r3
    3a8e:	d21c      	bcs.n	3aca <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x32>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    3a90:	6a60      	ldr	r0, [r4, #36]	; 0x24
    3a92:	f1b0 3fff 	cmp.w	r0, #4294967295
    3a96:	d0f7      	beq.n	3a88 <z_init_static_threads+0x40>
			schedule_new_thread(thread_data->init_thread,
    3a98:	6825      	ldr	r5, [r4, #0]
					    K_MSEC(thread_data->init_delay));
    3a9a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    3a9e:	17c1      	asrs	r1, r0, #31
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    3aa0:	03c9      	lsls	r1, r1, #15
    3aa2:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    3aa6:	03c0      	lsls	r0, r0, #15
    3aa8:	f240 33e7 	movw	r3, #999	; 0x3e7
    3aac:	18c0      	adds	r0, r0, r3
    3aae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3ab2:	f04f 0300 	mov.w	r3, #0
    3ab6:	f141 0100 	adc.w	r1, r1, #0
    3aba:	f7fc fb4b 	bl	154 <__aeabi_uldivmod>
    3abe:	4602      	mov	r2, r0
    3ac0:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
    3ac2:	4628      	mov	r0, r5
    3ac4:	f7ff ff4e 	bl	3964 <schedule_new_thread>
    3ac8:	e7de      	b.n	3a88 <z_init_static_threads+0x40>
		}
	}
	k_sched_unlock();
    3aca:	f000 fbc7 	bl	425c <k_sched_unlock>
}
    3ace:	b007      	add	sp, #28
    3ad0:	bd30      	pop	{r4, r5, pc}
    3ad2:	bf00      	nop
    3ad4:	00006bc4 	.word	0x00006bc4
    3ad8:	00006bc4 	.word	0x00006bc4

00003adc <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    3adc:	b508      	push	{r3, lr}
    3ade:	e001      	b.n	3ae4 <idle+0x8>
	arch_cpu_idle();
    3ae0:	f7fd fbb4 	bl	124c <arch_cpu_idle>
	__asm__ volatile(
    3ae4:	f04f 0220 	mov.w	r2, #32
    3ae8:	f3ef 8311 	mrs	r3, BASEPRI
    3aec:	f382 8812 	msr	BASEPRI_MAX, r2
    3af0:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    3af4:	f002 fea8 	bl	6848 <z_get_next_timeout_expiry>
    3af8:	4b05      	ldr	r3, [pc, #20]	; (3b10 <idle+0x34>)
    3afa:	6198      	str	r0, [r3, #24]
	return !z_sys_post_kernel;
    3afc:	4b05      	ldr	r3, [pc, #20]	; (3b14 <idle+0x38>)
    3afe:	781b      	ldrb	r3, [r3, #0]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    3b00:	2b00      	cmp	r3, #0
    3b02:	d0ed      	beq.n	3ae0 <idle+0x4>
    3b04:	f7fd f99e 	bl	e44 <pm_system_suspend>
    3b08:	2800      	cmp	r0, #0
    3b0a:	d1eb      	bne.n	3ae4 <idle+0x8>
    3b0c:	e7e8      	b.n	3ae0 <idle+0x4>
    3b0e:	bf00      	nop
    3b10:	20000950 	.word	0x20000950
    3b14:	20000b67 	.word	0x20000b67

00003b18 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    3b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3b1c:	b082      	sub	sp, #8
    3b1e:	4604      	mov	r4, r0
    3b20:	461e      	mov	r6, r3
    3b22:	f04f 0320 	mov.w	r3, #32
    3b26:	f3ef 8511 	mrs	r5, BASEPRI
    3b2a:	f383 8812 	msr	BASEPRI_MAX, r3
    3b2e:	f3bf 8f6f 	isb	sy
    3b32:	462b      	mov	r3, r5

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    3b34:	68c1      	ldr	r1, [r0, #12]
    3b36:	b999      	cbnz	r1, 3b60 <z_impl_k_mutex_lock+0x48>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
    3b38:	2900      	cmp	r1, #0
    3b3a:	d151      	bne.n	3be0 <z_impl_k_mutex_lock+0xc8>
    3b3c:	4a36      	ldr	r2, [pc, #216]	; (3c18 <z_impl_k_mutex_lock+0x100>)
    3b3e:	6892      	ldr	r2, [r2, #8]
    3b40:	f992 200e 	ldrsb.w	r2, [r2, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    3b44:	6122      	str	r2, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
    3b46:	3101      	adds	r1, #1
    3b48:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
    3b4a:	4a33      	ldr	r2, [pc, #204]	; (3c18 <z_impl_k_mutex_lock+0x100>)
    3b4c:	6892      	ldr	r2, [r2, #8]
    3b4e:	60a2      	str	r2, [r4, #8]
	__asm__ volatile(
    3b50:	f383 8811 	msr	BASEPRI, r3
    3b54:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
    3b58:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    3b5a:	b002      	add	sp, #8
    3b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3b60:	4617      	mov	r7, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    3b62:	6880      	ldr	r0, [r0, #8]
    3b64:	4a2c      	ldr	r2, [pc, #176]	; (3c18 <z_impl_k_mutex_lock+0x100>)
    3b66:	6892      	ldr	r2, [r2, #8]
    3b68:	4290      	cmp	r0, r2
    3b6a:	d0e5      	beq.n	3b38 <z_impl_k_mutex_lock+0x20>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    3b6c:	ea56 0107 	orrs.w	r1, r6, r7
    3b70:	d038      	beq.n	3be4 <z_impl_k_mutex_lock+0xcc>
					    mutex->owner->base.prio);
    3b72:	f990 800e 	ldrsb.w	r8, [r0, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
    3b76:	4641      	mov	r1, r8
    3b78:	f992 000e 	ldrsb.w	r0, [r2, #14]
    3b7c:	f002 fd10 	bl	65a0 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    3b80:	4580      	cmp	r8, r0
    3b82:	dc36      	bgt.n	3bf2 <z_impl_k_mutex_lock+0xda>
	bool resched = false;
    3b84:	f04f 0800 	mov.w	r8, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    3b88:	9700      	str	r7, [sp, #0]
    3b8a:	9601      	str	r6, [sp, #4]
    3b8c:	4622      	mov	r2, r4
    3b8e:	4629      	mov	r1, r5
    3b90:	4822      	ldr	r0, [pc, #136]	; (3c1c <z_impl_k_mutex_lock+0x104>)
    3b92:	f000 faaf 	bl	40f4 <z_pend_curr>
	if (got_mutex == 0) {
    3b96:	2800      	cmp	r0, #0
    3b98:	d0df      	beq.n	3b5a <z_impl_k_mutex_lock+0x42>
	__asm__ volatile(
    3b9a:	f04f 0320 	mov.w	r3, #32
    3b9e:	f3ef 8511 	mrs	r5, BASEPRI
    3ba2:	f383 8812 	msr	BASEPRI_MAX, r3
    3ba6:	f3bf 8f6f 	isb	sy
    3baa:	462e      	mov	r6, r5
	if (likely(mutex->owner != NULL)) {
    3bac:	68a3      	ldr	r3, [r4, #8]
    3bae:	b343      	cbz	r3, 3c02 <z_impl_k_mutex_lock+0xea>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    3bb0:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3bb2:	429c      	cmp	r4, r3
    3bb4:	d023      	beq.n	3bfe <z_impl_k_mutex_lock+0xe6>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    3bb6:	b313      	cbz	r3, 3bfe <z_impl_k_mutex_lock+0xe6>
    3bb8:	6921      	ldr	r1, [r4, #16]
    3bba:	f993 000e 	ldrsb.w	r0, [r3, #14]
    3bbe:	f002 fcef 	bl	65a0 <new_prio_for_inheritance>
    3bc2:	4601      	mov	r1, r0
		resched = adjust_owner_prio(mutex, new_prio) || resched;
    3bc4:	4620      	mov	r0, r4
    3bc6:	f002 fcf6 	bl	65b6 <adjust_owner_prio>
    3bca:	b9e8      	cbnz	r0, 3c08 <z_impl_k_mutex_lock+0xf0>
    3bcc:	f1b8 0f00 	cmp.w	r8, #0
    3bd0:	d11a      	bne.n	3c08 <z_impl_k_mutex_lock+0xf0>
	__asm__ volatile(
    3bd2:	f386 8811 	msr	BASEPRI, r6
    3bd6:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
    3bda:	f06f 000a 	mvn.w	r0, #10
    3bde:	e7bc      	b.n	3b5a <z_impl_k_mutex_lock+0x42>
					_current->base.prio :
    3be0:	6922      	ldr	r2, [r4, #16]
    3be2:	e7af      	b.n	3b44 <z_impl_k_mutex_lock+0x2c>
    3be4:	f385 8811 	msr	BASEPRI, r5
    3be8:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    3bec:	f06f 000f 	mvn.w	r0, #15
    3bf0:	e7b3      	b.n	3b5a <z_impl_k_mutex_lock+0x42>
		resched = adjust_owner_prio(mutex, new_prio);
    3bf2:	4601      	mov	r1, r0
    3bf4:	4620      	mov	r0, r4
    3bf6:	f002 fcde 	bl	65b6 <adjust_owner_prio>
    3bfa:	4680      	mov	r8, r0
    3bfc:	e7c4      	b.n	3b88 <z_impl_k_mutex_lock+0x70>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    3bfe:	6921      	ldr	r1, [r4, #16]
    3c00:	e7e0      	b.n	3bc4 <z_impl_k_mutex_lock+0xac>
	if (resched) {
    3c02:	f1b8 0f00 	cmp.w	r8, #0
    3c06:	d0e4      	beq.n	3bd2 <z_impl_k_mutex_lock+0xba>
		z_reschedule(&lock, key);
    3c08:	4629      	mov	r1, r5
    3c0a:	4804      	ldr	r0, [pc, #16]	; (3c1c <z_impl_k_mutex_lock+0x104>)
    3c0c:	f000 f90e 	bl	3e2c <z_reschedule>
	return -EAGAIN;
    3c10:	f06f 000a 	mvn.w	r0, #10
    3c14:	e7a1      	b.n	3b5a <z_impl_k_mutex_lock+0x42>
    3c16:	bf00      	nop
    3c18:	20000950 	.word	0x20000950
    3c1c:	2000097c 	.word	0x2000097c

00003c20 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    3c20:	6883      	ldr	r3, [r0, #8]
    3c22:	b38b      	cbz	r3, 3c88 <z_impl_k_mutex_unlock+0x68>
{
    3c24:	b570      	push	{r4, r5, r6, lr}
    3c26:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    3c28:	4a1a      	ldr	r2, [pc, #104]	; (3c94 <z_impl_k_mutex_unlock+0x74>)
    3c2a:	6892      	ldr	r2, [r2, #8]
    3c2c:	4293      	cmp	r3, r2
    3c2e:	d12e      	bne.n	3c8e <z_impl_k_mutex_unlock+0x6e>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    3c30:	68c3      	ldr	r3, [r0, #12]
    3c32:	2b01      	cmp	r3, #1
    3c34:	d903      	bls.n	3c3e <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
    3c36:	3b01      	subs	r3, #1
    3c38:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    3c3a:	2000      	movs	r0, #0
}
    3c3c:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
    3c3e:	f04f 0320 	mov.w	r3, #32
    3c42:	f3ef 8511 	mrs	r5, BASEPRI
    3c46:	f383 8812 	msr	BASEPRI_MAX, r3
    3c4a:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    3c4e:	6901      	ldr	r1, [r0, #16]
    3c50:	f002 fcb1 	bl	65b6 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    3c54:	4620      	mov	r0, r4
    3c56:	f002 fd9c 	bl	6792 <z_unpend_first_thread>
	mutex->owner = new_owner;
    3c5a:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    3c5c:	b168      	cbz	r0, 3c7a <z_impl_k_mutex_unlock+0x5a>
		mutex->owner_orig_prio = new_owner->base.prio;
    3c5e:	f990 300e 	ldrsb.w	r3, [r0, #14]
    3c62:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    3c64:	2400      	movs	r4, #0
    3c66:	f8c0 40ac 	str.w	r4, [r0, #172]	; 0xac
		z_ready_thread(new_owner);
    3c6a:	f002 fcfb 	bl	6664 <z_ready_thread>
		z_reschedule(&lock, key);
    3c6e:	4629      	mov	r1, r5
    3c70:	4809      	ldr	r0, [pc, #36]	; (3c98 <z_impl_k_mutex_unlock+0x78>)
    3c72:	f000 f8db 	bl	3e2c <z_reschedule>
	return 0;
    3c76:	4620      	mov	r0, r4
    3c78:	e7e0      	b.n	3c3c <z_impl_k_mutex_unlock+0x1c>
		mutex->lock_count = 0U;
    3c7a:	2000      	movs	r0, #0
    3c7c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    3c7e:	f385 8811 	msr	BASEPRI, r5
    3c82:	f3bf 8f6f 	isb	sy
    3c86:	e7d9      	b.n	3c3c <z_impl_k_mutex_unlock+0x1c>
		return -EINVAL;
    3c88:	f06f 0015 	mvn.w	r0, #21
}
    3c8c:	4770      	bx	lr
		return -EPERM;
    3c8e:	f04f 30ff 	mov.w	r0, #4294967295
    3c92:	e7d3      	b.n	3c3c <z_impl_k_mutex_unlock+0x1c>
    3c94:	20000950 	.word	0x20000950
    3c98:	2000097c 	.word	0x2000097c

00003c9c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    3c9c:	b538      	push	{r3, r4, r5, lr}
    3c9e:	4604      	mov	r4, r0
	__asm__ volatile(
    3ca0:	f04f 0320 	mov.w	r3, #32
    3ca4:	f3ef 8511 	mrs	r5, BASEPRI
    3ca8:	f383 8812 	msr	BASEPRI_MAX, r3
    3cac:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    3cb0:	f002 fd6f 	bl	6792 <z_unpend_first_thread>

	if (thread != NULL) {
    3cb4:	b148      	cbz	r0, 3cca <z_impl_k_sem_give+0x2e>
    3cb6:	2200      	movs	r2, #0
    3cb8:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    3cbc:	f002 fcd2 	bl	6664 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    3cc0:	4629      	mov	r1, r5
    3cc2:	4807      	ldr	r0, [pc, #28]	; (3ce0 <z_impl_k_sem_give+0x44>)
    3cc4:	f000 f8b2 	bl	3e2c <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    3cc8:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    3cca:	68a3      	ldr	r3, [r4, #8]
    3ccc:	68e2      	ldr	r2, [r4, #12]
    3cce:	4293      	cmp	r3, r2
    3cd0:	d003      	beq.n	3cda <z_impl_k_sem_give+0x3e>
    3cd2:	2201      	movs	r2, #1
    3cd4:	4413      	add	r3, r2
    3cd6:	60a3      	str	r3, [r4, #8]
}
    3cd8:	e7f2      	b.n	3cc0 <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    3cda:	2200      	movs	r2, #0
    3cdc:	e7fa      	b.n	3cd4 <z_impl_k_sem_give+0x38>
    3cde:	bf00      	nop
    3ce0:	2000097c 	.word	0x2000097c

00003ce4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    3ce4:	b510      	push	{r4, lr}
    3ce6:	b082      	sub	sp, #8
    3ce8:	f04f 0420 	mov.w	r4, #32
    3cec:	f3ef 8111 	mrs	r1, BASEPRI
    3cf0:	f384 8812 	msr	BASEPRI_MAX, r4
    3cf4:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    3cf8:	6884      	ldr	r4, [r0, #8]
    3cfa:	b144      	cbz	r4, 3d0e <z_impl_k_sem_take+0x2a>
		sem->count--;
    3cfc:	3c01      	subs	r4, #1
    3cfe:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    3d00:	f381 8811 	msr	BASEPRI, r1
    3d04:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    3d08:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    3d0a:	b002      	add	sp, #8
    3d0c:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    3d0e:	ea53 0402 	orrs.w	r4, r3, r2
    3d12:	d006      	beq.n	3d22 <z_impl_k_sem_take+0x3e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    3d14:	9200      	str	r2, [sp, #0]
    3d16:	9301      	str	r3, [sp, #4]
    3d18:	4602      	mov	r2, r0
    3d1a:	4805      	ldr	r0, [pc, #20]	; (3d30 <z_impl_k_sem_take+0x4c>)
    3d1c:	f000 f9ea 	bl	40f4 <z_pend_curr>
	return ret;
    3d20:	e7f3      	b.n	3d0a <z_impl_k_sem_take+0x26>
    3d22:	f381 8811 	msr	BASEPRI, r1
    3d26:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    3d2a:	f06f 000f 	mvn.w	r0, #15
    3d2e:	e7ec      	b.n	3d0a <z_impl_k_sem_take+0x26>
    3d30:	2000097c 	.word	0x2000097c

00003d34 <sliceable>:


static inline int is_preempt(struct k_thread *thread)
{
	/* explanation in kernel_struct.h */
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    3d34:	89c3      	ldrh	r3, [r0, #14]
static inline bool sliceable(struct k_thread *thread)
{
	bool ret = is_preempt(thread)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_idle_thread_object(thread);
    3d36:	2b7f      	cmp	r3, #127	; 0x7f
    3d38:	d80e      	bhi.n	3d58 <sliceable+0x24>
	uint8_t state = thread->base.thread_state;
    3d3a:	7b43      	ldrb	r3, [r0, #13]
		&& !z_is_thread_prevented_from_running(thread)
    3d3c:	f013 0f1f 	tst.w	r3, #31
    3d40:	d10c      	bne.n	3d5c <sliceable+0x28>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    3d42:	f990 200e 	ldrsb.w	r2, [r0, #14]
    3d46:	4b08      	ldr	r3, [pc, #32]	; (3d68 <sliceable+0x34>)
    3d48:	681b      	ldr	r3, [r3, #0]
    3d4a:	429a      	cmp	r2, r3
    3d4c:	db08      	blt.n	3d60 <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
    3d4e:	4b07      	ldr	r3, [pc, #28]	; (3d6c <sliceable+0x38>)
    3d50:	4298      	cmp	r0, r3
    3d52:	d007      	beq.n	3d64 <sliceable+0x30>
    3d54:	2001      	movs	r0, #1
    3d56:	4770      	bx	lr
    3d58:	2000      	movs	r0, #0
    3d5a:	4770      	bx	lr
    3d5c:	2000      	movs	r0, #0
    3d5e:	4770      	bx	lr
    3d60:	2000      	movs	r0, #0
    3d62:	4770      	bx	lr
    3d64:	2000      	movs	r0, #0
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
    3d66:	4770      	bx	lr
    3d68:	20000980 	.word	0x20000980
    3d6c:	200001b0 	.word	0x200001b0

00003d70 <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3d70:	f1b3 3fff 	cmp.w	r3, #4294967295
    3d74:	bf08      	it	eq
    3d76:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    3d7a:	d100      	bne.n	3d7e <add_thread_timeout+0xe>
    3d7c:	4770      	bx	lr
{
    3d7e:	b508      	push	{r3, lr}
    3d80:	4902      	ldr	r1, [pc, #8]	; (3d8c <add_thread_timeout+0x1c>)
    3d82:	3018      	adds	r0, #24
    3d84:	f000 fc24 	bl	45d0 <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
    3d88:	bd08      	pop	{r3, pc}
    3d8a:	bf00      	nop
    3d8c:	0000669d 	.word	0x0000669d

00003d90 <z_reset_time_slice>:
{
    3d90:	b510      	push	{r4, lr}
	int ret = slice_ticks;
    3d92:	4b07      	ldr	r3, [pc, #28]	; (3db0 <z_reset_time_slice+0x20>)
    3d94:	681c      	ldr	r4, [r3, #0]
	if (slice_time(curr) != 0) {
    3d96:	b904      	cbnz	r4, 3d9a <z_reset_time_slice+0xa>
}
    3d98:	bd10      	pop	{r4, pc}
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    3d9a:	f7fe fce9 	bl	2770 <sys_clock_elapsed>
    3d9e:	4404      	add	r4, r0
    3da0:	4b04      	ldr	r3, [pc, #16]	; (3db4 <z_reset_time_slice+0x24>)
    3da2:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    3da4:	2100      	movs	r1, #0
    3da6:	4b02      	ldr	r3, [pc, #8]	; (3db0 <z_reset_time_slice+0x20>)
    3da8:	6818      	ldr	r0, [r3, #0]
    3daa:	f002 fd64 	bl	6876 <z_set_timeout_expiry>
}
    3dae:	e7f3      	b.n	3d98 <z_reset_time_slice+0x8>
    3db0:	20000984 	.word	0x20000984
    3db4:	20000950 	.word	0x20000950

00003db8 <k_sched_time_slice_set>:
{
    3db8:	b570      	push	{r4, r5, r6, lr}
    3dba:	4604      	mov	r4, r0
    3dbc:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
    3dbe:	2300      	movs	r3, #0
	__asm__ volatile(
    3dc0:	f04f 0220 	mov.w	r2, #32
    3dc4:	f3ef 8511 	mrs	r5, BASEPRI
    3dc8:	f382 8812 	msr	BASEPRI_MAX, r2
    3dcc:	f3bf 8f6f 	isb	sy
	z_spin_lock_set_owner(l);
#if defined(CONFIG_SPIN_LOCK_TIME_LIMIT) && (CONFIG_SPIN_LOCK_TIME_LIMIT != 0)
	l->lock_time = sys_clock_cycle_get_32();
#endif /* CONFIG_SPIN_LOCK_TIME_LIMIT */
#endif/* CONFIG_SPIN_VALIDATE */
	return k;
    3dd0:	e00e      	b.n	3df0 <k_sched_time_slice_set+0x38>
			slice_ticks = MAX(2, slice_ticks);
    3dd2:	2802      	cmp	r0, #2
    3dd4:	bfb8      	it	lt
    3dd6:	2002      	movlt	r0, #2
    3dd8:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    3dda:	4b11      	ldr	r3, [pc, #68]	; (3e20 <k_sched_time_slice_set+0x68>)
    3ddc:	601e      	str	r6, [r3, #0]
		z_reset_time_slice(_current);
    3dde:	4b11      	ldr	r3, [pc, #68]	; (3e24 <k_sched_time_slice_set+0x6c>)
    3de0:	6898      	ldr	r0, [r3, #8]
    3de2:	f7ff ffd5 	bl	3d90 <z_reset_time_slice>
	__asm__ volatile(
    3de6:	f385 8811 	msr	BASEPRI, r5
    3dea:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    3dee:	2301      	movs	r3, #1
    3df0:	b9a3      	cbnz	r3, 3e1c <k_sched_time_slice_set+0x64>
		_current_cpu->slice_ticks = 0;
    3df2:	4b0c      	ldr	r3, [pc, #48]	; (3e24 <k_sched_time_slice_set+0x6c>)
    3df4:	2200      	movs	r2, #0
    3df6:	611a      	str	r2, [r3, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
    3df8:	0c61      	lsrs	r1, r4, #17
    3dfa:	03e0      	lsls	r0, r4, #15
    3dfc:	f240 33e7 	movw	r3, #999	; 0x3e7
    3e00:	18c0      	adds	r0, r0, r3
    3e02:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3e06:	f04f 0300 	mov.w	r3, #0
    3e0a:	f141 0100 	adc.w	r1, r1, #0
    3e0e:	f7fc f9a1 	bl	154 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    3e12:	4b05      	ldr	r3, [pc, #20]	; (3e28 <k_sched_time_slice_set+0x70>)
    3e14:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    3e16:	2c00      	cmp	r4, #0
    3e18:	dcdb      	bgt.n	3dd2 <k_sched_time_slice_set+0x1a>
    3e1a:	e7de      	b.n	3dda <k_sched_time_slice_set+0x22>
}
    3e1c:	bd70      	pop	{r4, r5, r6, pc}
    3e1e:	bf00      	nop
    3e20:	20000980 	.word	0x20000980
    3e24:	20000950 	.word	0x20000950
    3e28:	20000984 	.word	0x20000984

00003e2c <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    3e2c:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
    3e2e:	460b      	mov	r3, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    3e30:	b959      	cbnz	r1, 3e4a <z_reschedule+0x1e>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3e32:	f3ef 8205 	mrs	r2, IPSR
    3e36:	b942      	cbnz	r2, 3e4a <z_reschedule+0x1e>
	new_thread = _kernel.ready_q.cache;
    3e38:	4a06      	ldr	r2, [pc, #24]	; (3e54 <z_reschedule+0x28>)
    3e3a:	69d0      	ldr	r0, [r2, #28]
	return new_thread != _current;
    3e3c:	6892      	ldr	r2, [r2, #8]
	if (resched(key.key) && need_swap()) {
    3e3e:	4290      	cmp	r0, r2
    3e40:	d003      	beq.n	3e4a <z_reschedule+0x1e>
	ret = arch_swap(key);
    3e42:	4608      	mov	r0, r1
    3e44:	f7fd fa6a 	bl	131c <arch_swap>
		z_swap(lock, key);
    3e48:	e003      	b.n	3e52 <z_reschedule+0x26>
    3e4a:	f383 8811 	msr	BASEPRI, r3
    3e4e:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
    3e52:	bd08      	pop	{r3, pc}
    3e54:	20000950 	.word	0x20000950

00003e58 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
    3e58:	2300      	movs	r3, #0
	__asm__ volatile(
    3e5a:	f04f 0220 	mov.w	r2, #32
    3e5e:	f3ef 8111 	mrs	r1, BASEPRI
    3e62:	f382 8812 	msr	BASEPRI_MAX, r2
    3e66:	f3bf 8f6f 	isb	sy
    3e6a:	e009      	b.n	3e80 <k_sched_lock+0x28>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    3e6c:	4b06      	ldr	r3, [pc, #24]	; (3e88 <k_sched_lock+0x30>)
    3e6e:	689a      	ldr	r2, [r3, #8]
    3e70:	7bd3      	ldrb	r3, [r2, #15]
    3e72:	3b01      	subs	r3, #1
    3e74:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    3e76:	f381 8811 	msr	BASEPRI, r1
    3e7a:	f3bf 8f6f 	isb	sy
    3e7e:	2301      	movs	r3, #1
    3e80:	2b00      	cmp	r3, #0
    3e82:	d0f3      	beq.n	3e6c <k_sched_lock+0x14>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    3e84:	4770      	bx	lr
    3e86:	bf00      	nop
    3e88:	20000950 	.word	0x20000950

00003e8c <update_cache>:
{
    3e8c:	b538      	push	{r3, r4, r5, lr}
    3e8e:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
    3e90:	4810      	ldr	r0, [pc, #64]	; (3ed4 <update_cache+0x48>)
    3e92:	f002 fbe0 	bl	6656 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    3e96:	4605      	mov	r5, r0
    3e98:	b170      	cbz	r0, 3eb8 <update_cache+0x2c>
	if (preempt_ok != 0) {
    3e9a:	b984      	cbnz	r4, 3ebe <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
    3e9c:	4b0e      	ldr	r3, [pc, #56]	; (3ed8 <update_cache+0x4c>)
    3e9e:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
    3ea0:	7b5a      	ldrb	r2, [r3, #13]
    3ea2:	f012 0f1f 	tst.w	r2, #31
    3ea6:	d10a      	bne.n	3ebe <update_cache+0x32>
	return node->next != NULL;
    3ea8:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    3eaa:	b942      	cbnz	r2, 3ebe <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    3eac:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
    3eae:	2a7f      	cmp	r2, #127	; 0x7f
    3eb0:	d905      	bls.n	3ebe <update_cache+0x32>
		_kernel.ready_q.cache = _current;
    3eb2:	4a09      	ldr	r2, [pc, #36]	; (3ed8 <update_cache+0x4c>)
    3eb4:	61d3      	str	r3, [r2, #28]
    3eb6:	e00b      	b.n	3ed0 <update_cache+0x44>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    3eb8:	4b07      	ldr	r3, [pc, #28]	; (3ed8 <update_cache+0x4c>)
    3eba:	68dd      	ldr	r5, [r3, #12]
    3ebc:	e7ed      	b.n	3e9a <update_cache+0xe>
		if (thread != _current) {
    3ebe:	4b06      	ldr	r3, [pc, #24]	; (3ed8 <update_cache+0x4c>)
    3ec0:	689b      	ldr	r3, [r3, #8]
    3ec2:	42ab      	cmp	r3, r5
    3ec4:	d002      	beq.n	3ecc <update_cache+0x40>
			z_reset_time_slice(thread);
    3ec6:	4628      	mov	r0, r5
    3ec8:	f7ff ff62 	bl	3d90 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    3ecc:	4b02      	ldr	r3, [pc, #8]	; (3ed8 <update_cache+0x4c>)
    3ece:	61dd      	str	r5, [r3, #28]
}
    3ed0:	bd38      	pop	{r3, r4, r5, pc}
    3ed2:	bf00      	nop
    3ed4:	20000970 	.word	0x20000970
    3ed8:	20000950 	.word	0x20000950

00003edc <move_thread_to_end_of_prio_q>:
{
    3edc:	b538      	push	{r3, r4, r5, lr}
    3ede:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
    3ee0:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    3ee2:	f990 300d 	ldrsb.w	r3, [r0, #13]
    3ee6:	2b00      	cmp	r3, #0
    3ee8:	db0a      	blt.n	3f00 <move_thread_to_end_of_prio_q+0x24>
	thread->base.thread_state |= _THREAD_QUEUED;
    3eea:	7b6b      	ldrb	r3, [r5, #13]
    3eec:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3ef0:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    3ef2:	4b1b      	ldr	r3, [pc, #108]	; (3f60 <move_thread_to_end_of_prio_q+0x84>)
    3ef4:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3ef8:	429c      	cmp	r4, r3
    3efa:	d110      	bne.n	3f1e <move_thread_to_end_of_prio_q+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3efc:	2400      	movs	r4, #0
    3efe:	e00e      	b.n	3f1e <move_thread_to_end_of_prio_q+0x42>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3f00:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    3f04:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    3f06:	4601      	mov	r1, r0
    3f08:	4816      	ldr	r0, [pc, #88]	; (3f64 <move_thread_to_end_of_prio_q+0x88>)
    3f0a:	f002 fb8e 	bl	662a <z_priq_dumb_remove>
}
    3f0e:	e7ec      	b.n	3eea <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    3f10:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
    3f12:	606b      	str	r3, [r5, #4]
	node->next = successor;
    3f14:	602c      	str	r4, [r5, #0]
	prev->next = node;
    3f16:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    3f18:	6065      	str	r5, [r4, #4]
}
    3f1a:	e017      	b.n	3f4c <move_thread_to_end_of_prio_q+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3f1c:	2400      	movs	r4, #0
    3f1e:	b16c      	cbz	r4, 3f3c <move_thread_to_end_of_prio_q+0x60>
		if (z_sched_prio_cmp(thread, t) > 0) {
    3f20:	4621      	mov	r1, r4
    3f22:	4628      	mov	r0, r5
    3f24:	f002 fb5d 	bl	65e2 <z_sched_prio_cmp>
    3f28:	2800      	cmp	r0, #0
    3f2a:	dcf1      	bgt.n	3f10 <move_thread_to_end_of_prio_q+0x34>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    3f2c:	2c00      	cmp	r4, #0
    3f2e:	d0f6      	beq.n	3f1e <move_thread_to_end_of_prio_q+0x42>
	return (node == list->tail) ? NULL : node->next;
    3f30:	4b0b      	ldr	r3, [pc, #44]	; (3f60 <move_thread_to_end_of_prio_q+0x84>)
    3f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3f34:	429c      	cmp	r4, r3
    3f36:	d0f1      	beq.n	3f1c <move_thread_to_end_of_prio_q+0x40>
    3f38:	6824      	ldr	r4, [r4, #0]
    3f3a:	e7f0      	b.n	3f1e <move_thread_to_end_of_prio_q+0x42>
	sys_dnode_t *const tail = list->tail;
    3f3c:	4b08      	ldr	r3, [pc, #32]	; (3f60 <move_thread_to_end_of_prio_q+0x84>)
    3f3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    3f40:	f103 0120 	add.w	r1, r3, #32
    3f44:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    3f46:	606a      	str	r2, [r5, #4]
	tail->next = node;
    3f48:	6015      	str	r5, [r2, #0]
	list->tail = node;
    3f4a:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
    3f4c:	4b04      	ldr	r3, [pc, #16]	; (3f60 <move_thread_to_end_of_prio_q+0x84>)
    3f4e:	6898      	ldr	r0, [r3, #8]
    3f50:	42a8      	cmp	r0, r5
    3f52:	bf14      	ite	ne
    3f54:	2000      	movne	r0, #0
    3f56:	2001      	moveq	r0, #1
    3f58:	f7ff ff98 	bl	3e8c <update_cache>
}
    3f5c:	bd38      	pop	{r3, r4, r5, pc}
    3f5e:	bf00      	nop
    3f60:	20000950 	.word	0x20000950
    3f64:	20000970 	.word	0x20000970

00003f68 <slice_expired_locked>:
{
    3f68:	b538      	push	{r3, r4, r5, lr}
    3f6a:	4604      	mov	r4, r0
	struct k_thread *curr = _current;
    3f6c:	4b07      	ldr	r3, [pc, #28]	; (3f8c <slice_expired_locked+0x24>)
    3f6e:	689d      	ldr	r5, [r3, #8]
	uint8_t state = thread->base.thread_state;
    3f70:	7b6b      	ldrb	r3, [r5, #13]
	if (!z_is_thread_prevented_from_running(curr)) {
    3f72:	f013 0f1f 	tst.w	r3, #31
    3f76:	d004      	beq.n	3f82 <slice_expired_locked+0x1a>
	z_reset_time_slice(curr);
    3f78:	4628      	mov	r0, r5
    3f7a:	f7ff ff09 	bl	3d90 <z_reset_time_slice>
}
    3f7e:	4620      	mov	r0, r4
    3f80:	bd38      	pop	{r3, r4, r5, pc}
		move_thread_to_end_of_prio_q(curr);
    3f82:	4628      	mov	r0, r5
    3f84:	f7ff ffaa 	bl	3edc <move_thread_to_end_of_prio_q>
    3f88:	e7f6      	b.n	3f78 <slice_expired_locked+0x10>
    3f8a:	bf00      	nop
    3f8c:	20000950 	.word	0x20000950

00003f90 <z_time_slice>:
{
    3f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3f92:	4605      	mov	r5, r0
	__asm__ volatile(
    3f94:	f04f 0320 	mov.w	r3, #32
    3f98:	f3ef 8611 	mrs	r6, BASEPRI
    3f9c:	f383 8812 	msr	BASEPRI_MAX, r3
    3fa0:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    3fa4:	4b15      	ldr	r3, [pc, #84]	; (3ffc <z_time_slice+0x6c>)
    3fa6:	6898      	ldr	r0, [r3, #8]
    3fa8:	4b15      	ldr	r3, [pc, #84]	; (4000 <CONFIG_FPROTECT_BLOCK_SIZE>)
    3faa:	681b      	ldr	r3, [r3, #0]
    3fac:	4298      	cmp	r0, r3
    3fae:	d011      	beq.n	3fd4 <z_time_slice+0x44>
    3fb0:	4634      	mov	r4, r6
	pending_current = NULL;
    3fb2:	4b13      	ldr	r3, [pc, #76]	; (4000 <CONFIG_FPROTECT_BLOCK_SIZE>)
    3fb4:	2200      	movs	r2, #0
    3fb6:	601a      	str	r2, [r3, #0]
	int ret = slice_ticks;
    3fb8:	4b12      	ldr	r3, [pc, #72]	; (4004 <CONFIG_FPROTECT_BLOCK_SIZE+0x4>)
    3fba:	681b      	ldr	r3, [r3, #0]
	if (slice_time(_current) && sliceable(_current)) {
    3fbc:	b1b3      	cbz	r3, 3fec <z_time_slice+0x5c>
    3fbe:	f7ff feb9 	bl	3d34 <sliceable>
    3fc2:	b198      	cbz	r0, 3fec <z_time_slice+0x5c>
		if (ticks >= _current_cpu->slice_ticks) {
    3fc4:	4b0d      	ldr	r3, [pc, #52]	; (3ffc <z_time_slice+0x6c>)
    3fc6:	691b      	ldr	r3, [r3, #16]
    3fc8:	42ab      	cmp	r3, r5
    3fca:	dd0a      	ble.n	3fe2 <z_time_slice+0x52>
			_current_cpu->slice_ticks -= ticks;
    3fcc:	1b5b      	subs	r3, r3, r5
    3fce:	4a0b      	ldr	r2, [pc, #44]	; (3ffc <z_time_slice+0x6c>)
    3fd0:	6113      	str	r3, [r2, #16]
    3fd2:	e00e      	b.n	3ff2 <z_time_slice+0x62>
		z_reset_time_slice(_current);
    3fd4:	f7ff fedc 	bl	3d90 <z_reset_time_slice>
	__asm__ volatile(
    3fd8:	f386 8811 	msr	BASEPRI, r6
    3fdc:	f3bf 8f6f 	isb	sy
		return;
    3fe0:	e00b      	b.n	3ffa <z_time_slice+0x6a>
			key = slice_expired_locked(key);
    3fe2:	4630      	mov	r0, r6
    3fe4:	f7ff ffc0 	bl	3f68 <slice_expired_locked>
    3fe8:	4604      	mov	r4, r0
    3fea:	e002      	b.n	3ff2 <z_time_slice+0x62>
		_current_cpu->slice_ticks = 0;
    3fec:	4b03      	ldr	r3, [pc, #12]	; (3ffc <z_time_slice+0x6c>)
    3fee:	2200      	movs	r2, #0
    3ff0:	611a      	str	r2, [r3, #16]
    3ff2:	f384 8811 	msr	BASEPRI, r4
    3ff6:	f3bf 8f6f 	isb	sy
}
    3ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3ffc:	20000950 	.word	0x20000950
    4000:	2000097c 	.word	0x2000097c
    4004:	20000984 	.word	0x20000984

00004008 <ready_thread>:
	return (thread->base.thread_state & state) != 0U;
    4008:	7b42      	ldrb	r2, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    400a:	f990 300d 	ldrsb.w	r3, [r0, #13]
    400e:	2b00      	cmp	r3, #0
    4010:	db33      	blt.n	407a <ready_thread+0x72>
{
    4012:	b570      	push	{r4, r5, r6, lr}
    4014:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    4016:	f012 0f1f 	tst.w	r2, #31
    401a:	d101      	bne.n	4020 <ready_thread+0x18>
	return node->next != NULL;
    401c:	6986      	ldr	r6, [r0, #24]
    401e:	b106      	cbz	r6, 4022 <ready_thread+0x1a>
}
    4020:	bd70      	pop	{r4, r5, r6, pc}
	thread->base.thread_state |= _THREAD_QUEUED;
    4022:	f062 027f 	orn	r2, r2, #127	; 0x7f
    4026:	7342      	strb	r2, [r0, #13]
	return list->head == list;
    4028:	4b14      	ldr	r3, [pc, #80]	; (407c <ready_thread+0x74>)
    402a:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    402e:	429d      	cmp	r5, r3
    4030:	d108      	bne.n	4044 <ready_thread+0x3c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4032:	4635      	mov	r5, r6
    4034:	e006      	b.n	4044 <ready_thread+0x3c>
	sys_dnode_t *const prev = successor->prev;
    4036:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    4038:	6063      	str	r3, [r4, #4]
	node->next = successor;
    403a:	6025      	str	r5, [r4, #0]
	prev->next = node;
    403c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    403e:	606c      	str	r4, [r5, #4]
}
    4040:	e017      	b.n	4072 <ready_thread+0x6a>
    4042:	4635      	mov	r5, r6
    4044:	b16d      	cbz	r5, 4062 <ready_thread+0x5a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    4046:	4629      	mov	r1, r5
    4048:	4620      	mov	r0, r4
    404a:	f002 faca 	bl	65e2 <z_sched_prio_cmp>
    404e:	2800      	cmp	r0, #0
    4050:	dcf1      	bgt.n	4036 <ready_thread+0x2e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4052:	2d00      	cmp	r5, #0
    4054:	d0f6      	beq.n	4044 <ready_thread+0x3c>
	return (node == list->tail) ? NULL : node->next;
    4056:	4b09      	ldr	r3, [pc, #36]	; (407c <ready_thread+0x74>)
    4058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    405a:	429d      	cmp	r5, r3
    405c:	d0f1      	beq.n	4042 <ready_thread+0x3a>
    405e:	682d      	ldr	r5, [r5, #0]
    4060:	e7f0      	b.n	4044 <ready_thread+0x3c>
	sys_dnode_t *const tail = list->tail;
    4062:	4b06      	ldr	r3, [pc, #24]	; (407c <ready_thread+0x74>)
    4064:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    4066:	f103 0120 	add.w	r1, r3, #32
    406a:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    406c:	6062      	str	r2, [r4, #4]
	tail->next = node;
    406e:	6014      	str	r4, [r2, #0]
	list->tail = node;
    4070:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
    4072:	2000      	movs	r0, #0
    4074:	f7ff ff0a 	bl	3e8c <update_cache>
}
    4078:	e7d2      	b.n	4020 <ready_thread+0x18>
    407a:	4770      	bx	lr
    407c:	20000950 	.word	0x20000950

00004080 <z_sched_start>:
{
    4080:	b510      	push	{r4, lr}
	__asm__ volatile(
    4082:	f04f 0320 	mov.w	r3, #32
    4086:	f3ef 8411 	mrs	r4, BASEPRI
    408a:	f383 8812 	msr	BASEPRI_MAX, r3
    408e:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    4092:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
    4094:	f013 0f04 	tst.w	r3, #4
    4098:	d104      	bne.n	40a4 <z_sched_start+0x24>
	__asm__ volatile(
    409a:	f384 8811 	msr	BASEPRI, r4
    409e:	f3bf 8f6f 	isb	sy
}
    40a2:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    40a4:	f023 0304 	bic.w	r3, r3, #4
    40a8:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
    40aa:	f7ff ffad 	bl	4008 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    40ae:	4621      	mov	r1, r4
    40b0:	4801      	ldr	r0, [pc, #4]	; (40b8 <z_sched_start+0x38>)
    40b2:	f7ff febb 	bl	3e2c <z_reschedule>
    40b6:	e7f4      	b.n	40a2 <z_sched_start+0x22>
    40b8:	20000988 	.word	0x20000988

000040bc <unready_thread>:
{
    40bc:	b510      	push	{r4, lr}
    40be:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
    40c0:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    40c2:	f990 300d 	ldrsb.w	r3, [r0, #13]
    40c6:	2b00      	cmp	r3, #0
    40c8:	db08      	blt.n	40dc <unready_thread+0x20>
	update_cache(thread == _current);
    40ca:	4b08      	ldr	r3, [pc, #32]	; (40ec <unready_thread+0x30>)
    40cc:	6898      	ldr	r0, [r3, #8]
    40ce:	42a0      	cmp	r0, r4
    40d0:	bf14      	ite	ne
    40d2:	2000      	movne	r0, #0
    40d4:	2001      	moveq	r0, #1
    40d6:	f7ff fed9 	bl	3e8c <update_cache>
}
    40da:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    40dc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    40e0:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    40e2:	4601      	mov	r1, r0
    40e4:	4802      	ldr	r0, [pc, #8]	; (40f0 <unready_thread+0x34>)
    40e6:	f002 faa0 	bl	662a <z_priq_dumb_remove>
}
    40ea:	e7ee      	b.n	40ca <unready_thread+0xe>
    40ec:	20000950 	.word	0x20000950
    40f0:	20000970 	.word	0x20000970

000040f4 <z_pend_curr>:
{
    40f4:	b510      	push	{r4, lr}
    40f6:	460c      	mov	r4, r1
    40f8:	4611      	mov	r1, r2
	pending_current = _current;
    40fa:	480a      	ldr	r0, [pc, #40]	; (4124 <z_pend_curr+0x30>)
    40fc:	6882      	ldr	r2, [r0, #8]
    40fe:	4b0a      	ldr	r3, [pc, #40]	; (4128 <z_pend_curr+0x34>)
    4100:	601a      	str	r2, [r3, #0]
	__asm__ volatile(
    4102:	f04f 0220 	mov.w	r2, #32
    4106:	f3ef 8311 	mrs	r3, BASEPRI
    410a:	f382 8812 	msr	BASEPRI_MAX, r2
    410e:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
    4112:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    4116:	6880      	ldr	r0, [r0, #8]
    4118:	f002 fb2f 	bl	677a <pend_locked>
    411c:	4620      	mov	r0, r4
    411e:	f7fd f8fd 	bl	131c <arch_swap>
}
    4122:	bd10      	pop	{r4, pc}
    4124:	20000950 	.word	0x20000950
    4128:	2000097c 	.word	0x2000097c

0000412c <z_set_prio>:
{
    412c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4130:	4605      	mov	r5, r0
    4132:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
    4134:	2300      	movs	r3, #0
    4136:	f04f 0220 	mov.w	r2, #32
    413a:	f3ef 8611 	mrs	r6, BASEPRI
    413e:	f382 8812 	msr	BASEPRI_MAX, r2
    4142:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
    4146:	4618      	mov	r0, r3
    4148:	e029      	b.n	419e <z_set_prio+0x72>
	sys_dnode_t *const prev = successor->prev;
    414a:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    414c:	606b      	str	r3, [r5, #4]
	node->next = successor;
    414e:	602c      	str	r4, [r5, #0]
	prev->next = node;
    4150:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    4152:	6065      	str	r5, [r4, #4]
}
    4154:	e017      	b.n	4186 <z_set_prio+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4156:	4644      	mov	r4, r8
    4158:	b16c      	cbz	r4, 4176 <z_set_prio+0x4a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    415a:	4621      	mov	r1, r4
    415c:	4628      	mov	r0, r5
    415e:	f002 fa40 	bl	65e2 <z_sched_prio_cmp>
    4162:	2800      	cmp	r0, #0
    4164:	dcf1      	bgt.n	414a <z_set_prio+0x1e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4166:	2c00      	cmp	r4, #0
    4168:	d0f6      	beq.n	4158 <z_set_prio+0x2c>
	return (node == list->tail) ? NULL : node->next;
    416a:	4b1d      	ldr	r3, [pc, #116]	; (41e0 <z_set_prio+0xb4>)
    416c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    416e:	429c      	cmp	r4, r3
    4170:	d0f1      	beq.n	4156 <z_set_prio+0x2a>
    4172:	6824      	ldr	r4, [r4, #0]
    4174:	e7f0      	b.n	4158 <z_set_prio+0x2c>
	sys_dnode_t *const tail = list->tail;
    4176:	4b1a      	ldr	r3, [pc, #104]	; (41e0 <z_set_prio+0xb4>)
    4178:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    417a:	f103 0120 	add.w	r1, r3, #32
    417e:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    4180:	606a      	str	r2, [r5, #4]
	tail->next = node;
    4182:	6015      	str	r5, [r2, #0]
	list->tail = node;
    4184:	625d      	str	r5, [r3, #36]	; 0x24
			update_cache(1);
    4186:	2001      	movs	r0, #1
    4188:	f7ff fe80 	bl	3e8c <update_cache>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    418c:	2001      	movs	r0, #1
    418e:	e001      	b.n	4194 <z_set_prio+0x68>
			thread->base.prio = prio;
    4190:	73af      	strb	r7, [r5, #14]
    4192:	2000      	movs	r0, #0
	__asm__ volatile(
    4194:	f386 8811 	msr	BASEPRI, r6
    4198:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    419c:	2301      	movs	r3, #1
    419e:	b9e3      	cbnz	r3, 41da <z_set_prio+0xae>
	uint8_t state = thread->base.thread_state;
    41a0:	7b6b      	ldrb	r3, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    41a2:	f013 0f1f 	tst.w	r3, #31
    41a6:	d1f3      	bne.n	4190 <z_set_prio+0x64>
	return node->next != NULL;
    41a8:	f8d5 8018 	ldr.w	r8, [r5, #24]
    41ac:	f1b8 0f00 	cmp.w	r8, #0
    41b0:	d1ee      	bne.n	4190 <z_set_prio+0x64>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    41b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    41b6:	736b      	strb	r3, [r5, #13]
	_priq_run_remove(thread_runq(thread), thread);
    41b8:	f8df 9028 	ldr.w	r9, [pc, #40]	; 41e4 <z_set_prio+0xb8>
    41bc:	4629      	mov	r1, r5
    41be:	4648      	mov	r0, r9
    41c0:	f002 fa33 	bl	662a <z_priq_dumb_remove>
				thread->base.prio = prio;
    41c4:	73af      	strb	r7, [r5, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    41c6:	7b6b      	ldrb	r3, [r5, #13]
    41c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    41cc:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    41ce:	f8d9 4000 	ldr.w	r4, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    41d2:	454c      	cmp	r4, r9
    41d4:	d1c0      	bne.n	4158 <z_set_prio+0x2c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    41d6:	4644      	mov	r4, r8
    41d8:	e7be      	b.n	4158 <z_set_prio+0x2c>
}
    41da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    41de:	bf00      	nop
    41e0:	20000950 	.word	0x20000950
    41e4:	20000970 	.word	0x20000970

000041e8 <z_impl_k_thread_suspend>:
{
    41e8:	b538      	push	{r3, r4, r5, lr}
    41ea:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    41ec:	3018      	adds	r0, #24
    41ee:	f002 fb0d 	bl	680c <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    41f2:	2300      	movs	r3, #0
	__asm__ volatile(
    41f4:	f04f 0220 	mov.w	r2, #32
    41f8:	f3ef 8511 	mrs	r5, BASEPRI
    41fc:	f382 8812 	msr	BASEPRI_MAX, r2
    4200:	f3bf 8f6f 	isb	sy
    4204:	e010      	b.n	4228 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    4206:	7b63      	ldrb	r3, [r4, #13]
    4208:	f043 0310 	orr.w	r3, r3, #16
    420c:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    420e:	4b11      	ldr	r3, [pc, #68]	; (4254 <z_impl_k_thread_suspend+0x6c>)
    4210:	6898      	ldr	r0, [r3, #8]
    4212:	42a0      	cmp	r0, r4
    4214:	bf14      	ite	ne
    4216:	2000      	movne	r0, #0
    4218:	2001      	moveq	r0, #1
    421a:	f7ff fe37 	bl	3e8c <update_cache>
	__asm__ volatile(
    421e:	f385 8811 	msr	BASEPRI, r5
    4222:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    4226:	2301      	movs	r3, #1
    4228:	b963      	cbnz	r3, 4244 <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
    422a:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
    422c:	f994 300d 	ldrsb.w	r3, [r4, #13]
    4230:	2b00      	cmp	r3, #0
    4232:	dae8      	bge.n	4206 <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4234:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    4238:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    423a:	4621      	mov	r1, r4
    423c:	4806      	ldr	r0, [pc, #24]	; (4258 <z_impl_k_thread_suspend+0x70>)
    423e:	f002 f9f4 	bl	662a <z_priq_dumb_remove>
}
    4242:	e7e0      	b.n	4206 <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
    4244:	4b03      	ldr	r3, [pc, #12]	; (4254 <z_impl_k_thread_suspend+0x6c>)
    4246:	689b      	ldr	r3, [r3, #8]
    4248:	42a3      	cmp	r3, r4
    424a:	d000      	beq.n	424e <z_impl_k_thread_suspend+0x66>
}
    424c:	bd38      	pop	{r3, r4, r5, pc}
		z_reschedule_unlocked();
    424e:	f002 f9e0 	bl	6612 <z_reschedule_unlocked>
}
    4252:	e7fb      	b.n	424c <z_impl_k_thread_suspend+0x64>
    4254:	20000950 	.word	0x20000950
    4258:	20000970 	.word	0x20000970

0000425c <k_sched_unlock>:

void k_sched_unlock(void)
{
    425c:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
    425e:	2300      	movs	r3, #0
	__asm__ volatile(
    4260:	f04f 0220 	mov.w	r2, #32
    4264:	f3ef 8411 	mrs	r4, BASEPRI
    4268:	f382 8812 	msr	BASEPRI_MAX, r2
    426c:	f3bf 8f6f 	isb	sy
    4270:	e00c      	b.n	428c <k_sched_unlock+0x30>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
    4272:	4b09      	ldr	r3, [pc, #36]	; (4298 <k_sched_unlock+0x3c>)
    4274:	689a      	ldr	r2, [r3, #8]
    4276:	7bd3      	ldrb	r3, [r2, #15]
    4278:	3301      	adds	r3, #1
    427a:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    427c:	2000      	movs	r0, #0
    427e:	f7ff fe05 	bl	3e8c <update_cache>
	__asm__ volatile(
    4282:	f384 8811 	msr	BASEPRI, r4
    4286:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    428a:	2301      	movs	r3, #1
    428c:	2b00      	cmp	r3, #0
    428e:	d0f0      	beq.n	4272 <k_sched_unlock+0x16>
	LOG_DBG("scheduler unlocked (%p:%d)",
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
    4290:	f002 f9bf 	bl	6612 <z_reschedule_unlocked>
}
    4294:	bd10      	pop	{r4, pc}
    4296:	bf00      	nop
    4298:	20000950 	.word	0x20000950

0000429c <end_thread>:
static void end_thread(struct k_thread *thread)
{
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
    429c:	7b43      	ldrb	r3, [r0, #13]
    429e:	f013 0f08 	tst.w	r3, #8
    42a2:	d12a      	bne.n	42fa <end_thread+0x5e>
{
    42a4:	b510      	push	{r4, lr}
    42a6:	4604      	mov	r4, r0
		thread->base.thread_state |= _THREAD_DEAD;
    42a8:	f043 0208 	orr.w	r2, r3, #8
    42ac:	7342      	strb	r2, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
    42ae:	f023 0220 	bic.w	r2, r3, #32
    42b2:	f042 0208 	orr.w	r2, r2, #8
    42b6:	7342      	strb	r2, [r0, #13]
		if (z_is_thread_queued(thread)) {
    42b8:	f012 0f80 	tst.w	r2, #128	; 0x80
    42bc:	d113      	bne.n	42e6 <end_thread+0x4a>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
    42be:	68a3      	ldr	r3, [r4, #8]
    42c0:	b113      	cbz	r3, 42c8 <end_thread+0x2c>
			unpend_thread_no_timeout(thread);
    42c2:	4620      	mov	r0, r4
    42c4:	f002 f9b9 	bl	663a <unpend_thread_no_timeout>
    42c8:	f104 0018 	add.w	r0, r4, #24
    42cc:	f002 fa9e 	bl	680c <z_abort_timeout>
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
    42d0:	f104 0058 	add.w	r0, r4, #88	; 0x58
    42d4:	f002 fa11 	bl	66fa <unpend_all>
		update_cache(1);
    42d8:	2001      	movs	r0, #1
    42da:	f7ff fdd7 	bl	3e8c <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
    42de:	4620      	mov	r0, r4
    42e0:	f7ff fb20 	bl	3924 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
    42e4:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    42e6:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    42ea:	f043 0308 	orr.w	r3, r3, #8
    42ee:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    42f0:	4601      	mov	r1, r0
    42f2:	4802      	ldr	r0, [pc, #8]	; (42fc <end_thread+0x60>)
    42f4:	f002 f999 	bl	662a <z_priq_dumb_remove>
}
    42f8:	e7e1      	b.n	42be <end_thread+0x22>
    42fa:	4770      	bx	lr
    42fc:	20000970 	.word	0x20000970

00004300 <z_sched_init>:
{
    4300:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
    4302:	4804      	ldr	r0, [pc, #16]	; (4314 <z_sched_init+0x14>)
    4304:	f002 fa67 	bl	67d6 <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    4308:	2100      	movs	r1, #0
    430a:	4608      	mov	r0, r1
    430c:	f7ff fd54 	bl	3db8 <k_sched_time_slice_set>
}
    4310:	bd08      	pop	{r3, pc}
    4312:	bf00      	nop
    4314:	2000096c 	.word	0x2000096c

00004318 <z_impl_k_yield>:
{
    4318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    431a:	f04f 0320 	mov.w	r3, #32
    431e:	f3ef 8611 	mrs	r6, BASEPRI
    4322:	f383 8812 	msr	BASEPRI_MAX, r3
    4326:	f3bf 8f6f 	isb	sy
		dequeue_thread(_current);
    432a:	4c1d      	ldr	r4, [pc, #116]	; (43a0 <z_impl_k_yield+0x88>)
    432c:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    432e:	7b4b      	ldrb	r3, [r1, #13]
    4330:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4334:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    4336:	f104 0720 	add.w	r7, r4, #32
    433a:	4638      	mov	r0, r7
    433c:	f002 f975 	bl	662a <z_priq_dumb_remove>
	queue_thread(_current);
    4340:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    4342:	7b6b      	ldrb	r3, [r5, #13]
    4344:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4348:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    434a:	6a24      	ldr	r4, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    434c:	42bc      	cmp	r4, r7
    434e:	d108      	bne.n	4362 <z_impl_k_yield+0x4a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4350:	2400      	movs	r4, #0
    4352:	e006      	b.n	4362 <z_impl_k_yield+0x4a>
	sys_dnode_t *const prev = successor->prev;
    4354:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    4356:	606b      	str	r3, [r5, #4]
	node->next = successor;
    4358:	602c      	str	r4, [r5, #0]
	prev->next = node;
    435a:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    435c:	6065      	str	r5, [r4, #4]
}
    435e:	e017      	b.n	4390 <z_impl_k_yield+0x78>
    4360:	2400      	movs	r4, #0
    4362:	b16c      	cbz	r4, 4380 <z_impl_k_yield+0x68>
		if (z_sched_prio_cmp(thread, t) > 0) {
    4364:	4621      	mov	r1, r4
    4366:	4628      	mov	r0, r5
    4368:	f002 f93b 	bl	65e2 <z_sched_prio_cmp>
    436c:	2800      	cmp	r0, #0
    436e:	dcf1      	bgt.n	4354 <z_impl_k_yield+0x3c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4370:	2c00      	cmp	r4, #0
    4372:	d0f6      	beq.n	4362 <z_impl_k_yield+0x4a>
	return (node == list->tail) ? NULL : node->next;
    4374:	4b0a      	ldr	r3, [pc, #40]	; (43a0 <z_impl_k_yield+0x88>)
    4376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4378:	429c      	cmp	r4, r3
    437a:	d0f1      	beq.n	4360 <z_impl_k_yield+0x48>
    437c:	6824      	ldr	r4, [r4, #0]
    437e:	e7f0      	b.n	4362 <z_impl_k_yield+0x4a>
	sys_dnode_t *const tail = list->tail;
    4380:	4b07      	ldr	r3, [pc, #28]	; (43a0 <z_impl_k_yield+0x88>)
    4382:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    4384:	f103 0120 	add.w	r1, r3, #32
    4388:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    438a:	606a      	str	r2, [r5, #4]
	tail->next = node;
    438c:	6015      	str	r5, [r2, #0]
	list->tail = node;
    438e:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
    4390:	2001      	movs	r0, #1
    4392:	f7ff fd7b 	bl	3e8c <update_cache>
    4396:	4630      	mov	r0, r6
    4398:	f7fc ffc0 	bl	131c <arch_swap>
}
    439c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    439e:	bf00      	nop
    43a0:	20000950 	.word	0x20000950

000043a4 <z_tick_sleep>:
{
    43a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (ticks == 0) {
    43a8:	ea50 0301 	orrs.w	r3, r0, r1
    43ac:	d038      	beq.n	4420 <z_tick_sleep+0x7c>
    43ae:	4604      	mov	r4, r0
    43b0:	460e      	mov	r6, r1
	if (Z_TICK_ABS(ticks) <= 0) {
    43b2:	f06f 0301 	mvn.w	r3, #1
    43b6:	1a1b      	subs	r3, r3, r0
    43b8:	f04f 32ff 	mov.w	r2, #4294967295
    43bc:	eb62 0201 	sbc.w	r2, r2, r1
    43c0:	2b01      	cmp	r3, #1
    43c2:	f172 0200 	sbcs.w	r2, r2, #0
    43c6:	db2f      	blt.n	4428 <z_tick_sleep+0x84>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    43c8:	f06f 0501 	mvn.w	r5, #1
    43cc:	1a2d      	subs	r5, r5, r0
    43ce:	f04f 0320 	mov.w	r3, #32
    43d2:	f3ef 8811 	mrs	r8, BASEPRI
    43d6:	f383 8812 	msr	BASEPRI_MAX, r3
    43da:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    43de:	4f14      	ldr	r7, [pc, #80]	; (4430 <z_tick_sleep+0x8c>)
    43e0:	68b8      	ldr	r0, [r7, #8]
    43e2:	4b14      	ldr	r3, [pc, #80]	; (4434 <z_tick_sleep+0x90>)
    43e4:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    43e6:	f7ff fe69 	bl	40bc <unready_thread>
	z_add_thread_timeout(_current, timeout);
    43ea:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    43ec:	4622      	mov	r2, r4
    43ee:	4633      	mov	r3, r6
    43f0:	4911      	ldr	r1, [pc, #68]	; (4438 <z_tick_sleep+0x94>)
    43f2:	3018      	adds	r0, #24
    43f4:	f000 f8ec 	bl	45d0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    43f8:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    43fa:	7b53      	ldrb	r3, [r2, #13]
    43fc:	f043 0310 	orr.w	r3, r3, #16
    4400:	7353      	strb	r3, [r2, #13]
    4402:	4640      	mov	r0, r8
    4404:	f7fc ff8a 	bl	131c <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    4408:	f002 fa60 	bl	68cc <sys_clock_tick_get_32>
    440c:	1a28      	subs	r0, r5, r0
    440e:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    4412:	2801      	cmp	r0, #1
    4414:	f173 0300 	sbcs.w	r3, r3, #0
    4418:	da00      	bge.n	441c <z_tick_sleep+0x78>
	return 0;
    441a:	2000      	movs	r0, #0
}
    441c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
    4420:	f7ff ff7a 	bl	4318 <z_impl_k_yield>
		return 0;
    4424:	2000      	movs	r0, #0
    4426:	e7f9      	b.n	441c <z_tick_sleep+0x78>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    4428:	f002 fa50 	bl	68cc <sys_clock_tick_get_32>
    442c:	1905      	adds	r5, r0, r4
    442e:	e7ce      	b.n	43ce <z_tick_sleep+0x2a>
    4430:	20000950 	.word	0x20000950
    4434:	2000097c 	.word	0x2000097c
    4438:	0000669d 	.word	0x0000669d

0000443c <z_impl_k_sleep>:
{
    443c:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    443e:	f1b1 3fff 	cmp.w	r1, #4294967295
    4442:	bf08      	it	eq
    4444:	f1b0 3fff 	cmpeq.w	r0, #4294967295
    4448:	d018      	beq.n	447c <z_impl_k_sleep+0x40>
	ticks = z_tick_sleep(ticks);
    444a:	f7ff ffab 	bl	43a4 <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
    444e:	17c2      	asrs	r2, r0, #31
			return ((t * to_hz + off) / from_hz);
    4450:	0151      	lsls	r1, r2, #5
    4452:	ea41 61d0 	orr.w	r1, r1, r0, lsr #27
    4456:	0143      	lsls	r3, r0, #5
    4458:	1a1b      	subs	r3, r3, r0
    445a:	eb61 0102 	sbc.w	r1, r1, r2
    445e:	0089      	lsls	r1, r1, #2
    4460:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
    4464:	009b      	lsls	r3, r3, #2
    4466:	181b      	adds	r3, r3, r0
    4468:	eb42 0201 	adc.w	r2, r2, r1
    446c:	00d2      	lsls	r2, r2, #3
    446e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
    4472:	f3c3 3310 	ubfx	r3, r3, #12, #17
    4476:	ea43 4042 	orr.w	r0, r3, r2, lsl #17
}
    447a:	bd08      	pop	{r3, pc}
		k_thread_suspend(_current);
    447c:	4b03      	ldr	r3, [pc, #12]	; (448c <z_impl_k_sleep+0x50>)
    447e:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    4480:	f7ff feb2 	bl	41e8 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    4484:	f04f 30ff 	mov.w	r0, #4294967295
    4488:	e7f7      	b.n	447a <z_impl_k_sleep+0x3e>
    448a:	bf00      	nop
    448c:	20000950 	.word	0x20000950

00004490 <z_impl_z_current_get>:
}
    4490:	4b01      	ldr	r3, [pc, #4]	; (4498 <z_impl_z_current_get+0x8>)
    4492:	6898      	ldr	r0, [r3, #8]
    4494:	4770      	bx	lr
    4496:	bf00      	nop
    4498:	20000950 	.word	0x20000950

0000449c <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
    449c:	b570      	push	{r4, r5, r6, lr}
    449e:	f04f 0320 	mov.w	r3, #32
    44a2:	f3ef 8511 	mrs	r5, BASEPRI
    44a6:	f383 8812 	msr	BASEPRI_MAX, r3
    44aa:	f3bf 8f6f 	isb	sy
    44ae:	462e      	mov	r6, r5
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    44b0:	7b03      	ldrb	r3, [r0, #12]
    44b2:	f013 0f01 	tst.w	r3, #1
    44b6:	d109      	bne.n	44cc <z_thread_abort+0x30>
    44b8:	4604      	mov	r4, r0
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
		return;
	}

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    44ba:	7b43      	ldrb	r3, [r0, #13]
    44bc:	f013 0f08 	tst.w	r3, #8
    44c0:	d00f      	beq.n	44e2 <z_thread_abort+0x46>
	__asm__ volatile(
    44c2:	f385 8811 	msr	BASEPRI, r5
    44c6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		return;
    44ca:	e009      	b.n	44e0 <z_thread_abort+0x44>
    44cc:	f385 8811 	msr	BASEPRI, r5
    44d0:	f3bf 8f6f 	isb	sy
		k_panic();
    44d4:	4040      	eors	r0, r0
    44d6:	f380 8811 	msr	BASEPRI, r0
    44da:	f04f 0004 	mov.w	r0, #4
    44de:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    44e0:	bd70      	pop	{r4, r5, r6, pc}
	end_thread(thread);
    44e2:	f7ff fedb 	bl	429c <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
    44e6:	4b08      	ldr	r3, [pc, #32]	; (4508 <z_thread_abort+0x6c>)
    44e8:	689b      	ldr	r3, [r3, #8]
    44ea:	42a3      	cmp	r3, r4
    44ec:	d004      	beq.n	44f8 <z_thread_abort+0x5c>
    44ee:	f386 8811 	msr	BASEPRI, r6
    44f2:	f3bf 8f6f 	isb	sy
    44f6:	e7f3      	b.n	44e0 <z_thread_abort+0x44>
    44f8:	f3ef 8305 	mrs	r3, IPSR
    44fc:	2b00      	cmp	r3, #0
    44fe:	d1f6      	bne.n	44ee <z_thread_abort+0x52>
    4500:	4628      	mov	r0, r5
    4502:	f7fc ff0b 	bl	131c <arch_swap>
	return ret;
    4506:	e7f2      	b.n	44ee <z_thread_abort+0x52>
    4508:	20000950 	.word	0x20000950

0000450c <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    450c:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    450e:	4806      	ldr	r0, [pc, #24]	; (4528 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    4510:	4a06      	ldr	r2, [pc, #24]	; (452c <z_data_copy+0x20>)
    4512:	1a12      	subs	r2, r2, r0
    4514:	4906      	ldr	r1, [pc, #24]	; (4530 <z_data_copy+0x24>)
    4516:	f001 ffc4 	bl	64a2 <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    451a:	4a06      	ldr	r2, [pc, #24]	; (4534 <z_data_copy+0x28>)
    451c:	4906      	ldr	r1, [pc, #24]	; (4538 <z_data_copy+0x2c>)
    451e:	4807      	ldr	r0, [pc, #28]	; (453c <z_data_copy+0x30>)
    4520:	f001 ffbf 	bl	64a2 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    4524:	bd08      	pop	{r3, pc}
    4526:	bf00      	nop
    4528:	20000000 	.word	0x20000000
    452c:	2000018c 	.word	0x2000018c
    4530:	00006f38 	.word	0x00006f38
    4534:	00000000 	.word	0x00000000
    4538:	00006f38 	.word	0x00006f38
    453c:	20000000 	.word	0x20000000

00004540 <first>:
	return list->head == list;
    4540:	4b03      	ldr	r3, [pc, #12]	; (4550 <first+0x10>)
    4542:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4544:	4298      	cmp	r0, r3
    4546:	d000      	beq.n	454a <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    4548:	4770      	bx	lr
    454a:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    454c:	e7fc      	b.n	4548 <first+0x8>
    454e:	bf00      	nop
    4550:	200000cc 	.word	0x200000cc

00004554 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4554:	b130      	cbz	r0, 4564 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    4556:	4a04      	ldr	r2, [pc, #16]	; (4568 <next+0x14>)
    4558:	6852      	ldr	r2, [r2, #4]
    455a:	4290      	cmp	r0, r2
    455c:	d001      	beq.n	4562 <next+0xe>
    455e:	6800      	ldr	r0, [r0, #0]
    4560:	4770      	bx	lr
    4562:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    4564:	4770      	bx	lr
    4566:	bf00      	nop
    4568:	200000cc 	.word	0x200000cc

0000456c <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    456c:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    456e:	4b04      	ldr	r3, [pc, #16]	; (4580 <elapsed+0x14>)
    4570:	681b      	ldr	r3, [r3, #0]
    4572:	b10b      	cbz	r3, 4578 <elapsed+0xc>
    4574:	2000      	movs	r0, #0
}
    4576:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    4578:	f7fe f8fa 	bl	2770 <sys_clock_elapsed>
    457c:	e7fb      	b.n	4576 <elapsed+0xa>
    457e:	bf00      	nop
    4580:	20000988 	.word	0x20000988

00004584 <next_timeout>:

static int32_t next_timeout(void)
{
    4584:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    4586:	f7ff ffdb 	bl	4540 <first>
    458a:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
    458c:	f7ff ffee 	bl	456c <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    4590:	b17c      	cbz	r4, 45b2 <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    4592:	6923      	ldr	r3, [r4, #16]
    4594:	6962      	ldr	r2, [r4, #20]
    4596:	1a1b      	subs	r3, r3, r0
    4598:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    459c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    45a0:	f172 0100 	sbcs.w	r1, r2, #0
    45a4:	da08      	bge.n	45b8 <next_timeout+0x34>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    45a6:	2a00      	cmp	r2, #0
    45a8:	db01      	blt.n	45ae <next_timeout+0x2a>
    45aa:	4618      	mov	r0, r3
    45ac:	e006      	b.n	45bc <next_timeout+0x38>
    45ae:	2300      	movs	r3, #0
    45b0:	e7fb      	b.n	45aa <next_timeout+0x26>
		ret = MAX_WAIT;
    45b2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    45b6:	e001      	b.n	45bc <next_timeout+0x38>
    45b8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    45bc:	4b03      	ldr	r3, [pc, #12]	; (45cc <next_timeout+0x48>)
    45be:	691b      	ldr	r3, [r3, #16]
    45c0:	b113      	cbz	r3, 45c8 <next_timeout+0x44>
    45c2:	4283      	cmp	r3, r0
    45c4:	da00      	bge.n	45c8 <next_timeout+0x44>
		ret = _current_cpu->slice_ticks;
    45c6:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
    45c8:	bd10      	pop	{r4, pc}
    45ca:	bf00      	nop
    45cc:	20000950 	.word	0x20000950

000045d0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    45d0:	f1b3 3fff 	cmp.w	r3, #4294967295
    45d4:	bf08      	it	eq
    45d6:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    45da:	d07b      	beq.n	46d4 <z_add_timeout+0x104>
{
    45dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    45e0:	4604      	mov	r4, r0
    45e2:	4692      	mov	sl, r2
    45e4:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    45e6:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
    45e8:	2300      	movs	r3, #0
	__asm__ volatile(
    45ea:	f04f 0220 	mov.w	r2, #32
    45ee:	f3ef 8711 	mrs	r7, BASEPRI
    45f2:	f382 8812 	msr	BASEPRI_MAX, r2
    45f6:	f3bf 8f6f 	isb	sy
    45fa:	e026      	b.n	464a <z_add_timeout+0x7a>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    45fc:	f11a 0801 	adds.w	r8, sl, #1
    4600:	f145 0900 	adc.w	r9, r5, #0
    4604:	f7ff ffb2 	bl	456c <elapsed>
    4608:	eb18 0300 	adds.w	r3, r8, r0
    460c:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
    4610:	6123      	str	r3, [r4, #16]
    4612:	6160      	str	r0, [r4, #20]
    4614:	e03b      	b.n	468e <z_add_timeout+0xbe>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
    4616:	1a52      	subs	r2, r2, r1
    4618:	eb66 0303 	sbc.w	r3, r6, r3
    461c:	6102      	str	r2, [r0, #16]
    461e:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
    4620:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
    4622:	6063      	str	r3, [r4, #4]
	node->next = successor;
    4624:	6020      	str	r0, [r4, #0]
	prev->next = node;
    4626:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    4628:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    462a:	e005      	b.n	4638 <z_add_timeout+0x68>
	sys_dnode_t *const tail = list->tail;
    462c:	4b2a      	ldr	r3, [pc, #168]	; (46d8 <z_add_timeout+0x108>)
    462e:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    4630:	6023      	str	r3, [r4, #0]
	node->prev = tail;
    4632:	6062      	str	r2, [r4, #4]
	tail->next = node;
    4634:	6014      	str	r4, [r2, #0]
	list->tail = node;
    4636:	605c      	str	r4, [r3, #4]
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    4638:	f7ff ff82 	bl	4540 <first>
    463c:	4284      	cmp	r4, r0
    463e:	d03a      	beq.n	46b6 <z_add_timeout+0xe6>
	__asm__ volatile(
    4640:	f387 8811 	msr	BASEPRI, r7
    4644:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    4648:	2301      	movs	r3, #1
    464a:	2b00      	cmp	r3, #0
    464c:	d140      	bne.n	46d0 <z_add_timeout+0x100>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    464e:	4653      	mov	r3, sl
    4650:	f06f 0101 	mvn.w	r1, #1
    4654:	ebb1 010a 	subs.w	r1, r1, sl
    4658:	f04f 30ff 	mov.w	r0, #4294967295
    465c:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    4660:	2a00      	cmp	r2, #0
    4662:	dbcb      	blt.n	45fc <z_add_timeout+0x2c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    4664:	4a1d      	ldr	r2, [pc, #116]	; (46dc <z_add_timeout+0x10c>)
    4666:	6811      	ldr	r1, [r2, #0]
    4668:	6852      	ldr	r2, [r2, #4]
    466a:	185b      	adds	r3, r3, r1
    466c:	eb42 0205 	adc.w	r2, r2, r5
    4670:	f06f 0101 	mvn.w	r1, #1
    4674:	1ac9      	subs	r1, r1, r3
    4676:	eb60 0302 	sbc.w	r3, r0, r2
			to->dticks = MAX(1, ticks);
    467a:	4608      	mov	r0, r1
    467c:	461a      	mov	r2, r3
    467e:	2901      	cmp	r1, #1
    4680:	f173 0300 	sbcs.w	r3, r3, #0
    4684:	da01      	bge.n	468a <z_add_timeout+0xba>
    4686:	2001      	movs	r0, #1
    4688:	2200      	movs	r2, #0
    468a:	6120      	str	r0, [r4, #16]
    468c:	6162      	str	r2, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    468e:	f7ff ff57 	bl	4540 <first>
    4692:	2800      	cmp	r0, #0
    4694:	d0ca      	beq.n	462c <z_add_timeout+0x5c>
			if (t->dticks > to->dticks) {
    4696:	6902      	ldr	r2, [r0, #16]
    4698:	6946      	ldr	r6, [r0, #20]
    469a:	6921      	ldr	r1, [r4, #16]
    469c:	6963      	ldr	r3, [r4, #20]
    469e:	4291      	cmp	r1, r2
    46a0:	eb73 0e06 	sbcs.w	lr, r3, r6
    46a4:	dbb7      	blt.n	4616 <z_add_timeout+0x46>
			to->dticks -= t->dticks;
    46a6:	1a89      	subs	r1, r1, r2
    46a8:	eb63 0306 	sbc.w	r3, r3, r6
    46ac:	6121      	str	r1, [r4, #16]
    46ae:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    46b0:	f7ff ff50 	bl	4554 <next>
    46b4:	e7ed      	b.n	4692 <z_add_timeout+0xc2>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    46b6:	f7ff ff65 	bl	4584 <next_timeout>

			if (next_time == 0 ||
    46ba:	4603      	mov	r3, r0
    46bc:	b118      	cbz	r0, 46c6 <z_add_timeout+0xf6>
			    _current_cpu->slice_ticks != next_time) {
    46be:	4a08      	ldr	r2, [pc, #32]	; (46e0 <z_add_timeout+0x110>)
    46c0:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
    46c2:	4282      	cmp	r2, r0
    46c4:	d0bc      	beq.n	4640 <z_add_timeout+0x70>
				sys_clock_set_timeout(next_time, false);
    46c6:	2100      	movs	r1, #0
    46c8:	4618      	mov	r0, r3
    46ca:	f7fe f81f 	bl	270c <sys_clock_set_timeout>
    46ce:	e7b7      	b.n	4640 <z_add_timeout+0x70>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    46d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    46d4:	4770      	bx	lr
    46d6:	bf00      	nop
    46d8:	200000cc 	.word	0x200000cc
    46dc:	20000310 	.word	0x20000310
    46e0:	20000950 	.word	0x20000950

000046e4 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    46e4:	b570      	push	{r4, r5, r6, lr}
    46e6:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    46e8:	f7ff fc52 	bl	3f90 <z_time_slice>
	__asm__ volatile(
    46ec:	f04f 0320 	mov.w	r3, #32
    46f0:	f3ef 8611 	mrs	r6, BASEPRI
    46f4:	f383 8812 	msr	BASEPRI_MAX, r3
    46f8:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    46fc:	4b28      	ldr	r3, [pc, #160]	; (47a0 <sys_clock_announce+0xbc>)
    46fe:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    4700:	e021      	b.n	4746 <sys_clock_announce+0x62>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    4702:	4a28      	ldr	r2, [pc, #160]	; (47a4 <sys_clock_announce+0xc0>)
    4704:	6813      	ldr	r3, [r2, #0]
    4706:	6851      	ldr	r1, [r2, #4]
    4708:	195b      	adds	r3, r3, r5
    470a:	eb41 71e5 	adc.w	r1, r1, r5, asr #31
    470e:	6013      	str	r3, [r2, #0]
    4710:	6051      	str	r1, [r2, #4]
		t->dticks = 0;
    4712:	2200      	movs	r2, #0
    4714:	2300      	movs	r3, #0
    4716:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    471a:	4620      	mov	r0, r4
    471c:	f002 f85f 	bl	67de <remove_timeout>
	__asm__ volatile(
    4720:	f386 8811 	msr	BASEPRI, r6
    4724:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    4728:	68a3      	ldr	r3, [r4, #8]
    472a:	4620      	mov	r0, r4
    472c:	4798      	blx	r3
	__asm__ volatile(
    472e:	f04f 0320 	mov.w	r3, #32
    4732:	f3ef 8611 	mrs	r6, BASEPRI
    4736:	f383 8812 	msr	BASEPRI_MAX, r3
    473a:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
    473e:	4a18      	ldr	r2, [pc, #96]	; (47a0 <sys_clock_announce+0xbc>)
    4740:	6813      	ldr	r3, [r2, #0]
    4742:	1b5b      	subs	r3, r3, r5
    4744:	6013      	str	r3, [r2, #0]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    4746:	f7ff fefb 	bl	4540 <first>
    474a:	4604      	mov	r4, r0
    474c:	b138      	cbz	r0, 475e <sys_clock_announce+0x7a>
    474e:	6905      	ldr	r5, [r0, #16]
    4750:	6941      	ldr	r1, [r0, #20]
    4752:	4b13      	ldr	r3, [pc, #76]	; (47a0 <sys_clock_announce+0xbc>)
    4754:	681a      	ldr	r2, [r3, #0]
    4756:	17d3      	asrs	r3, r2, #31
    4758:	42aa      	cmp	r2, r5
    475a:	418b      	sbcs	r3, r1
    475c:	dad1      	bge.n	4702 <sys_clock_announce+0x1e>
	}

	if (first() != NULL) {
    475e:	b144      	cbz	r4, 4772 <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
    4760:	6923      	ldr	r3, [r4, #16]
    4762:	6962      	ldr	r2, [r4, #20]
    4764:	490e      	ldr	r1, [pc, #56]	; (47a0 <sys_clock_announce+0xbc>)
    4766:	6809      	ldr	r1, [r1, #0]
    4768:	1a5b      	subs	r3, r3, r1
    476a:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
    476e:	6123      	str	r3, [r4, #16]
    4770:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
    4772:	4a0c      	ldr	r2, [pc, #48]	; (47a4 <sys_clock_announce+0xc0>)
    4774:	4d0a      	ldr	r5, [pc, #40]	; (47a0 <sys_clock_announce+0xbc>)
    4776:	6828      	ldr	r0, [r5, #0]
    4778:	6813      	ldr	r3, [r2, #0]
    477a:	6851      	ldr	r1, [r2, #4]
    477c:	181b      	adds	r3, r3, r0
    477e:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
    4782:	6013      	str	r3, [r2, #0]
    4784:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
    4786:	2400      	movs	r4, #0
    4788:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
    478a:	f7ff fefb 	bl	4584 <next_timeout>
    478e:	4621      	mov	r1, r4
    4790:	f7fd ffbc 	bl	270c <sys_clock_set_timeout>
	__asm__ volatile(
    4794:	f386 8811 	msr	BASEPRI, r6
    4798:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    479c:	bd70      	pop	{r4, r5, r6, pc}
    479e:	bf00      	nop
    47a0:	20000988 	.word	0x20000988
    47a4:	20000310 	.word	0x20000310

000047a8 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    47a8:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
    47aa:	2200      	movs	r2, #0
	__asm__ volatile(
    47ac:	f04f 0320 	mov.w	r3, #32
    47b0:	f3ef 8411 	mrs	r4, BASEPRI
    47b4:	f383 8812 	msr	BASEPRI_MAX, r3
    47b8:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
    47bc:	4613      	mov	r3, r2
    47be:	4611      	mov	r1, r2
    47c0:	e00c      	b.n	47dc <sys_clock_tick_get+0x34>
		t = curr_tick + elapsed();
    47c2:	f7ff fed3 	bl	456c <elapsed>
    47c6:	4a07      	ldr	r2, [pc, #28]	; (47e4 <sys_clock_tick_get+0x3c>)
    47c8:	6813      	ldr	r3, [r2, #0]
    47ca:	6851      	ldr	r1, [r2, #4]
    47cc:	18c3      	adds	r3, r0, r3
    47ce:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
	__asm__ volatile(
    47d2:	f384 8811 	msr	BASEPRI, r4
    47d6:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    47da:	2201      	movs	r2, #1
    47dc:	2a00      	cmp	r2, #0
    47de:	d0f0      	beq.n	47c2 <sys_clock_tick_get+0x1a>
	}
	return t;
}
    47e0:	4618      	mov	r0, r3
    47e2:	bd10      	pop	{r4, pc}
    47e4:	20000310 	.word	0x20000310

000047e8 <boot_banner>:
#else
#define BANNER_VERSION KERNEL_VERSION_STRING
#endif

void boot_banner(void)
{
    47e8:	b508      	push	{r3, lr}
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    47ea:	4802      	ldr	r0, [pc, #8]	; (47f4 <boot_banner+0xc>)
    47ec:	f000 fa07 	bl	4bfe <printk>
#endif /* CONFIG_BOOT_BANNER */
}
    47f0:	bd08      	pop	{r3, pc}
    47f2:	bf00      	nop
    47f4:	00006e7c 	.word	0x00006e7c

000047f8 <nrf_cc3xx_platform_init_no_rng>:
    47f8:	b510      	push	{r4, lr}
    47fa:	4c0a      	ldr	r4, [pc, #40]	; (4824 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    47fc:	6823      	ldr	r3, [r4, #0]
    47fe:	b11b      	cbz	r3, 4808 <nrf_cc3xx_platform_init_no_rng+0x10>
    4800:	2301      	movs	r3, #1
    4802:	2000      	movs	r0, #0
    4804:	6023      	str	r3, [r4, #0]
    4806:	bd10      	pop	{r4, pc}
    4808:	f000 f8f4 	bl	49f4 <CC_LibInitNoRng>
    480c:	2800      	cmp	r0, #0
    480e:	d0f7      	beq.n	4800 <nrf_cc3xx_platform_init_no_rng+0x8>
    4810:	3801      	subs	r0, #1
    4812:	2807      	cmp	r0, #7
    4814:	d803      	bhi.n	481e <nrf_cc3xx_platform_init_no_rng+0x26>
    4816:	4b04      	ldr	r3, [pc, #16]	; (4828 <nrf_cc3xx_platform_init_no_rng+0x30>)
    4818:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    481c:	bd10      	pop	{r4, pc}
    481e:	4803      	ldr	r0, [pc, #12]	; (482c <nrf_cc3xx_platform_init_no_rng+0x34>)
    4820:	bd10      	pop	{r4, pc}
    4822:	bf00      	nop
    4824:	2000098c 	.word	0x2000098c
    4828:	00006eac 	.word	0x00006eac
    482c:	ffff8ffe 	.word	0xffff8ffe

00004830 <nrf_cc3xx_platform_abort>:
    4830:	f3bf 8f4f 	dsb	sy
    4834:	4905      	ldr	r1, [pc, #20]	; (484c <nrf_cc3xx_platform_abort+0x1c>)
    4836:	4b06      	ldr	r3, [pc, #24]	; (4850 <nrf_cc3xx_platform_abort+0x20>)
    4838:	68ca      	ldr	r2, [r1, #12]
    483a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    483e:	4313      	orrs	r3, r2
    4840:	60cb      	str	r3, [r1, #12]
    4842:	f3bf 8f4f 	dsb	sy
    4846:	bf00      	nop
    4848:	e7fd      	b.n	4846 <nrf_cc3xx_platform_abort+0x16>
    484a:	bf00      	nop
    484c:	e000ed00 	.word	0xe000ed00
    4850:	05fa0004 	.word	0x05fa0004

00004854 <CC_PalAbort>:
    4854:	b430      	push	{r4, r5}
    4856:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    485a:	2500      	movs	r5, #0
    485c:	4b0b      	ldr	r3, [pc, #44]	; (488c <CC_PalAbort+0x38>)
    485e:	4c0c      	ldr	r4, [pc, #48]	; (4890 <CC_PalAbort+0x3c>)
    4860:	490c      	ldr	r1, [pc, #48]	; (4894 <CC_PalAbort+0x40>)
    4862:	6849      	ldr	r1, [r1, #4]
    4864:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    4868:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    486c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    4870:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    4874:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    4878:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
    487c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    4880:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
    4884:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
    4888:	bc30      	pop	{r4, r5}
    488a:	4708      	bx	r1
    488c:	50845000 	.word	0x50845000
    4890:	50844000 	.word	0x50844000
    4894:	200000d4 	.word	0x200000d4

00004898 <nrf_cc3xx_platform_set_abort>:
    4898:	4b02      	ldr	r3, [pc, #8]	; (48a4 <nrf_cc3xx_platform_set_abort+0xc>)
    489a:	e9d0 1200 	ldrd	r1, r2, [r0]
    489e:	e9c3 1200 	strd	r1, r2, [r3]
    48a2:	4770      	bx	lr
    48a4:	200000d4 	.word	0x200000d4

000048a8 <mutex_free>:
    48a8:	b510      	push	{r4, lr}
    48aa:	4604      	mov	r4, r0
    48ac:	b150      	cbz	r0, 48c4 <mutex_free+0x1c>
    48ae:	6863      	ldr	r3, [r4, #4]
    48b0:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    48b4:	d005      	beq.n	48c2 <mutex_free+0x1a>
    48b6:	4a06      	ldr	r2, [pc, #24]	; (48d0 <mutex_free+0x28>)
    48b8:	4293      	cmp	r3, r2
    48ba:	d002      	beq.n	48c2 <mutex_free+0x1a>
    48bc:	2300      	movs	r3, #0
    48be:	6062      	str	r2, [r4, #4]
    48c0:	6023      	str	r3, [r4, #0]
    48c2:	bd10      	pop	{r4, pc}
    48c4:	4b03      	ldr	r3, [pc, #12]	; (48d4 <mutex_free+0x2c>)
    48c6:	4804      	ldr	r0, [pc, #16]	; (48d8 <mutex_free+0x30>)
    48c8:	685b      	ldr	r3, [r3, #4]
    48ca:	4798      	blx	r3
    48cc:	e7ef      	b.n	48ae <mutex_free+0x6>
    48ce:	bf00      	nop
    48d0:	a95c5f2c 	.word	0xa95c5f2c
    48d4:	200000d4 	.word	0x200000d4
    48d8:	00006ecc 	.word	0x00006ecc

000048dc <mutex_lock>:
    48dc:	b1c8      	cbz	r0, 4912 <mutex_lock+0x36>
    48de:	6843      	ldr	r3, [r0, #4]
    48e0:	4a0d      	ldr	r2, [pc, #52]	; (4918 <mutex_lock+0x3c>)
    48e2:	4293      	cmp	r3, r2
    48e4:	d013      	beq.n	490e <mutex_lock+0x32>
    48e6:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    48ea:	d00e      	beq.n	490a <mutex_lock+0x2e>
    48ec:	2301      	movs	r3, #1
    48ee:	e850 2f00 	ldrex	r2, [r0]
    48f2:	4619      	mov	r1, r3
    48f4:	e840 1c00 	strex	ip, r1, [r0]
    48f8:	f09c 0f00 	teq	ip, #0
    48fc:	d1f7      	bne.n	48ee <mutex_lock+0x12>
    48fe:	2a01      	cmp	r2, #1
    4900:	d0f5      	beq.n	48ee <mutex_lock+0x12>
    4902:	f3bf 8f5f 	dmb	sy
    4906:	2000      	movs	r0, #0
    4908:	4770      	bx	lr
    490a:	4804      	ldr	r0, [pc, #16]	; (491c <mutex_lock+0x40>)
    490c:	4770      	bx	lr
    490e:	4804      	ldr	r0, [pc, #16]	; (4920 <mutex_lock+0x44>)
    4910:	4770      	bx	lr
    4912:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    4916:	4770      	bx	lr
    4918:	a95c5f2c 	.word	0xa95c5f2c
    491c:	ffff8fe9 	.word	0xffff8fe9
    4920:	ffff8fea 	.word	0xffff8fea

00004924 <mutex_unlock>:
    4924:	4603      	mov	r3, r0
    4926:	b180      	cbz	r0, 494a <mutex_unlock+0x26>
    4928:	6842      	ldr	r2, [r0, #4]
    492a:	4909      	ldr	r1, [pc, #36]	; (4950 <mutex_unlock+0x2c>)
    492c:	428a      	cmp	r2, r1
    492e:	d00a      	beq.n	4946 <mutex_unlock+0x22>
    4930:	f012 5f68 	tst.w	r2, #973078528	; 0x3a000000
    4934:	d005      	beq.n	4942 <mutex_unlock+0x1e>
    4936:	f3bf 8f5f 	dmb	sy
    493a:	2200      	movs	r2, #0
    493c:	4610      	mov	r0, r2
    493e:	601a      	str	r2, [r3, #0]
    4940:	4770      	bx	lr
    4942:	4804      	ldr	r0, [pc, #16]	; (4954 <mutex_unlock+0x30>)
    4944:	4770      	bx	lr
    4946:	4804      	ldr	r0, [pc, #16]	; (4958 <mutex_unlock+0x34>)
    4948:	4770      	bx	lr
    494a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    494e:	4770      	bx	lr
    4950:	a95c5f2c 	.word	0xa95c5f2c
    4954:	ffff8fe9 	.word	0xffff8fe9
    4958:	ffff8fea 	.word	0xffff8fea

0000495c <mutex_init>:
    495c:	b510      	push	{r4, lr}
    495e:	4604      	mov	r4, r0
    4960:	b120      	cbz	r0, 496c <mutex_init+0x10>
    4962:	2300      	movs	r3, #0
    4964:	4a03      	ldr	r2, [pc, #12]	; (4974 <mutex_init+0x18>)
    4966:	6023      	str	r3, [r4, #0]
    4968:	6062      	str	r2, [r4, #4]
    496a:	bd10      	pop	{r4, pc}
    496c:	4802      	ldr	r0, [pc, #8]	; (4978 <mutex_init+0x1c>)
    496e:	f7ff ff71 	bl	4854 <CC_PalAbort>
    4972:	e7f6      	b.n	4962 <mutex_init+0x6>
    4974:	3a00003a 	.word	0x3a00003a
    4978:	00006ef4 	.word	0x00006ef4

0000497c <nrf_cc3xx_platform_set_mutexes>:
    497c:	b570      	push	{r4, r5, r6, lr}
    497e:	4c19      	ldr	r4, [pc, #100]	; (49e4 <nrf_cc3xx_platform_set_mutexes+0x68>)
    4980:	f8d0 c004 	ldr.w	ip, [r0, #4]
    4984:	6806      	ldr	r6, [r0, #0]
    4986:	f8c4 c004 	str.w	ip, [r4, #4]
    498a:	f8d0 c008 	ldr.w	ip, [r0, #8]
    498e:	68c0      	ldr	r0, [r0, #12]
    4990:	f8c4 c008 	str.w	ip, [r4, #8]
    4994:	60e0      	str	r0, [r4, #12]
    4996:	6026      	str	r6, [r4, #0]
    4998:	6808      	ldr	r0, [r1, #0]
    499a:	4b13      	ldr	r3, [pc, #76]	; (49e8 <nrf_cc3xx_platform_set_mutexes+0x6c>)
    499c:	4d13      	ldr	r5, [pc, #76]	; (49ec <nrf_cc3xx_platform_set_mutexes+0x70>)
    499e:	6018      	str	r0, [r3, #0]
    49a0:	6848      	ldr	r0, [r1, #4]
    49a2:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
    49a6:	6058      	str	r0, [r3, #4]
    49a8:	6888      	ldr	r0, [r1, #8]
    49aa:	f012 5f68 	tst.w	r2, #973078528	; 0x3a000000
    49ae:	6098      	str	r0, [r3, #8]
    49b0:	68c8      	ldr	r0, [r1, #12]
    49b2:	6909      	ldr	r1, [r1, #16]
    49b4:	60d8      	str	r0, [r3, #12]
    49b6:	6119      	str	r1, [r3, #16]
    49b8:	d012      	beq.n	49e0 <nrf_cc3xx_platform_set_mutexes+0x64>
    49ba:	2300      	movs	r3, #0
    49bc:	4a0c      	ldr	r2, [pc, #48]	; (49f0 <nrf_cc3xx_platform_set_mutexes+0x74>)
    49be:	f505 708a 	add.w	r0, r5, #276	; 0x114
    49c2:	f8c5 3114 	str.w	r3, [r5, #276]	; 0x114
    49c6:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
    49ca:	f8c5 2118 	str.w	r2, [r5, #280]	; 0x118
    49ce:	f8c5 21bc 	str.w	r2, [r5, #444]	; 0x1bc
    49d2:	47b0      	blx	r6
    49d4:	6823      	ldr	r3, [r4, #0]
    49d6:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    49da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    49de:	4718      	bx	r3
    49e0:	bd70      	pop	{r4, r5, r6, pc}
    49e2:	bf00      	nop
    49e4:	200000e4 	.word	0x200000e4
    49e8:	200000f4 	.word	0x200000f4
    49ec:	200009a4 	.word	0x200009a4
    49f0:	a95c5f2c 	.word	0xa95c5f2c

000049f4 <CC_LibInitNoRng>:
    49f4:	b508      	push	{r3, lr}
    49f6:	f000 f811 	bl	4a1c <CC_HalInit>
    49fa:	b930      	cbnz	r0, 4a0a <CC_LibInitNoRng+0x16>
    49fc:	f000 f810 	bl	4a20 <CC_PalInit>
    4a00:	b938      	cbnz	r0, 4a12 <CC_LibInitNoRng+0x1e>
    4a02:	4a05      	ldr	r2, [pc, #20]	; (4a18 <CC_LibInitNoRng+0x24>)
    4a04:	f8c2 0a0c 	str.w	r0, [r2, #2572]	; 0xa0c
    4a08:	bd08      	pop	{r3, pc}
    4a0a:	f000 f837 	bl	4a7c <CC_PalTerminate>
    4a0e:	2003      	movs	r0, #3
    4a10:	bd08      	pop	{r3, pc}
    4a12:	2004      	movs	r0, #4
    4a14:	bd08      	pop	{r3, pc}
    4a16:	bf00      	nop
    4a18:	50845000 	.word	0x50845000

00004a1c <CC_HalInit>:
    4a1c:	2000      	movs	r0, #0
    4a1e:	4770      	bx	lr

00004a20 <CC_PalInit>:
    4a20:	b510      	push	{r4, lr}
    4a22:	4811      	ldr	r0, [pc, #68]	; (4a68 <CC_PalInit+0x48>)
    4a24:	f000 f848 	bl	4ab8 <CC_PalMutexCreate>
    4a28:	b100      	cbz	r0, 4a2c <CC_PalInit+0xc>
    4a2a:	bd10      	pop	{r4, pc}
    4a2c:	480f      	ldr	r0, [pc, #60]	; (4a6c <CC_PalInit+0x4c>)
    4a2e:	f000 f843 	bl	4ab8 <CC_PalMutexCreate>
    4a32:	2800      	cmp	r0, #0
    4a34:	d1f9      	bne.n	4a2a <CC_PalInit+0xa>
    4a36:	4c0e      	ldr	r4, [pc, #56]	; (4a70 <CC_PalInit+0x50>)
    4a38:	4620      	mov	r0, r4
    4a3a:	f000 f83d 	bl	4ab8 <CC_PalMutexCreate>
    4a3e:	2800      	cmp	r0, #0
    4a40:	d1f3      	bne.n	4a2a <CC_PalInit+0xa>
    4a42:	4b0c      	ldr	r3, [pc, #48]	; (4a74 <CC_PalInit+0x54>)
    4a44:	480c      	ldr	r0, [pc, #48]	; (4a78 <CC_PalInit+0x58>)
    4a46:	601c      	str	r4, [r3, #0]
    4a48:	f000 f836 	bl	4ab8 <CC_PalMutexCreate>
    4a4c:	4601      	mov	r1, r0
    4a4e:	2800      	cmp	r0, #0
    4a50:	d1eb      	bne.n	4a2a <CC_PalInit+0xa>
    4a52:	f000 f82d 	bl	4ab0 <CC_PalDmaInit>
    4a56:	4604      	mov	r4, r0
    4a58:	b108      	cbz	r0, 4a5e <CC_PalInit+0x3e>
    4a5a:	4620      	mov	r0, r4
    4a5c:	bd10      	pop	{r4, pc}
    4a5e:	f000 f83f 	bl	4ae0 <CC_PalPowerSaveModeInit>
    4a62:	4620      	mov	r0, r4
    4a64:	e7fa      	b.n	4a5c <CC_PalInit+0x3c>
    4a66:	bf00      	nop
    4a68:	2000012c 	.word	0x2000012c
    4a6c:	20000120 	.word	0x20000120
    4a70:	20000128 	.word	0x20000128
    4a74:	20000130 	.word	0x20000130
    4a78:	20000124 	.word	0x20000124

00004a7c <CC_PalTerminate>:
    4a7c:	b508      	push	{r3, lr}
    4a7e:	4808      	ldr	r0, [pc, #32]	; (4aa0 <CC_PalTerminate+0x24>)
    4a80:	f000 f824 	bl	4acc <CC_PalMutexDestroy>
    4a84:	4807      	ldr	r0, [pc, #28]	; (4aa4 <CC_PalTerminate+0x28>)
    4a86:	f000 f821 	bl	4acc <CC_PalMutexDestroy>
    4a8a:	4807      	ldr	r0, [pc, #28]	; (4aa8 <CC_PalTerminate+0x2c>)
    4a8c:	f000 f81e 	bl	4acc <CC_PalMutexDestroy>
    4a90:	4806      	ldr	r0, [pc, #24]	; (4aac <CC_PalTerminate+0x30>)
    4a92:	f000 f81b 	bl	4acc <CC_PalMutexDestroy>
    4a96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    4a9a:	f000 b80b 	b.w	4ab4 <CC_PalDmaTerminate>
    4a9e:	bf00      	nop
    4aa0:	2000012c 	.word	0x2000012c
    4aa4:	20000120 	.word	0x20000120
    4aa8:	20000128 	.word	0x20000128
    4aac:	20000124 	.word	0x20000124

00004ab0 <CC_PalDmaInit>:
    4ab0:	2000      	movs	r0, #0
    4ab2:	4770      	bx	lr

00004ab4 <CC_PalDmaTerminate>:
    4ab4:	4770      	bx	lr
    4ab6:	bf00      	nop

00004ab8 <CC_PalMutexCreate>:
    4ab8:	b508      	push	{r3, lr}
    4aba:	4b03      	ldr	r3, [pc, #12]	; (4ac8 <CC_PalMutexCreate+0x10>)
    4abc:	6802      	ldr	r2, [r0, #0]
    4abe:	681b      	ldr	r3, [r3, #0]
    4ac0:	6810      	ldr	r0, [r2, #0]
    4ac2:	4798      	blx	r3
    4ac4:	2000      	movs	r0, #0
    4ac6:	bd08      	pop	{r3, pc}
    4ac8:	200000e4 	.word	0x200000e4

00004acc <CC_PalMutexDestroy>:
    4acc:	b508      	push	{r3, lr}
    4ace:	4b03      	ldr	r3, [pc, #12]	; (4adc <CC_PalMutexDestroy+0x10>)
    4ad0:	6802      	ldr	r2, [r0, #0]
    4ad2:	685b      	ldr	r3, [r3, #4]
    4ad4:	6810      	ldr	r0, [r2, #0]
    4ad6:	4798      	blx	r3
    4ad8:	2000      	movs	r0, #0
    4ada:	bd08      	pop	{r3, pc}
    4adc:	200000e4 	.word	0x200000e4

00004ae0 <CC_PalPowerSaveModeInit>:
    4ae0:	b570      	push	{r4, r5, r6, lr}
    4ae2:	4c09      	ldr	r4, [pc, #36]	; (4b08 <CC_PalPowerSaveModeInit+0x28>)
    4ae4:	4d09      	ldr	r5, [pc, #36]	; (4b0c <CC_PalPowerSaveModeInit+0x2c>)
    4ae6:	6920      	ldr	r0, [r4, #16]
    4ae8:	68ab      	ldr	r3, [r5, #8]
    4aea:	4798      	blx	r3
    4aec:	b118      	cbz	r0, 4af6 <CC_PalPowerSaveModeInit+0x16>
    4aee:	4b08      	ldr	r3, [pc, #32]	; (4b10 <CC_PalPowerSaveModeInit+0x30>)
    4af0:	4808      	ldr	r0, [pc, #32]	; (4b14 <CC_PalPowerSaveModeInit+0x34>)
    4af2:	685b      	ldr	r3, [r3, #4]
    4af4:	4798      	blx	r3
    4af6:	2100      	movs	r1, #0
    4af8:	4a07      	ldr	r2, [pc, #28]	; (4b18 <CC_PalPowerSaveModeInit+0x38>)
    4afa:	68eb      	ldr	r3, [r5, #12]
    4afc:	6011      	str	r1, [r2, #0]
    4afe:	6920      	ldr	r0, [r4, #16]
    4b00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4b04:	4718      	bx	r3
    4b06:	bf00      	nop
    4b08:	200000f4 	.word	0x200000f4
    4b0c:	200000e4 	.word	0x200000e4
    4b10:	200000d4 	.word	0x200000d4
    4b14:	00006f18 	.word	0x00006f18
    4b18:	200009a0 	.word	0x200009a0

00004b1c <z_impl_gpio_pin_configure>:
{
    4b1c:	b538      	push	{r3, r4, r5, lr}
    4b1e:	4613      	mov	r3, r2
	const struct gpio_driver_api *api =
    4b20:	6885      	ldr	r5, [r0, #8]
	struct gpio_driver_data *data =
    4b22:	6904      	ldr	r4, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    4b24:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
    4b28:	d007      	beq.n	4b3a <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
    4b2a:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
    4b2e:	d004      	beq.n	4b3a <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    4b30:	f012 0f01 	tst.w	r2, #1
    4b34:	d001      	beq.n	4b3a <z_impl_gpio_pin_configure+0x1e>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    4b36:	f482 2340 	eor.w	r3, r2, #786432	; 0xc0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    4b3a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    4b3e:	f013 0f01 	tst.w	r3, #1
    4b42:	d00a      	beq.n	4b5a <z_impl_gpio_pin_configure+0x3e>
		data->invert |= (gpio_port_pins_t)BIT(pin);
    4b44:	6823      	ldr	r3, [r4, #0]
    4b46:	f04f 0c01 	mov.w	ip, #1
    4b4a:	fa0c fc01 	lsl.w	ip, ip, r1
    4b4e:	ea43 030c 	orr.w	r3, r3, ip
    4b52:	6023      	str	r3, [r4, #0]
	return api->pin_configure(port, pin, flags);
    4b54:	682b      	ldr	r3, [r5, #0]
    4b56:	4798      	blx	r3
}
    4b58:	bd38      	pop	{r3, r4, r5, pc}
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    4b5a:	6823      	ldr	r3, [r4, #0]
    4b5c:	f04f 0c01 	mov.w	ip, #1
    4b60:	fa0c fc01 	lsl.w	ip, ip, r1
    4b64:	ea23 030c 	bic.w	r3, r3, ip
    4b68:	6023      	str	r3, [r4, #0]
    4b6a:	e7f3      	b.n	4b54 <z_impl_gpio_pin_configure+0x38>

00004b6c <gpio_pin_configure_dt>:
{
    4b6c:	b508      	push	{r3, lr}
    4b6e:	4603      	mov	r3, r0
    4b70:	468c      	mov	ip, r1
	return gpio_pin_configure(spec->port,
    4b72:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
    4b74:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
    4b76:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
    4b78:	ea42 020c 	orr.w	r2, r2, ip
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
    4b7c:	f7ff ffce 	bl	4b1c <z_impl_gpio_pin_configure>
}
    4b80:	bd08      	pop	{r3, pc}

00004b82 <gpio_port_get>:
{
    4b82:	b538      	push	{r3, r4, r5, lr}
    4b84:	460c      	mov	r4, r1
	const struct gpio_driver_data *const data =
    4b86:	6905      	ldr	r5, [r0, #16]
	const struct gpio_driver_api *api =
    4b88:	6883      	ldr	r3, [r0, #8]
	return api->port_get_raw(port, value);
    4b8a:	685b      	ldr	r3, [r3, #4]
    4b8c:	4798      	blx	r3
	if (ret == 0) {
    4b8e:	b918      	cbnz	r0, 4b98 <gpio_port_get+0x16>
		*value ^= data->invert;
    4b90:	6823      	ldr	r3, [r4, #0]
    4b92:	682a      	ldr	r2, [r5, #0]
    4b94:	4053      	eors	r3, r2
    4b96:	6023      	str	r3, [r4, #0]
}
    4b98:	bd38      	pop	{r3, r4, r5, pc}

00004b9a <gpio_pin_get>:
{
    4b9a:	b510      	push	{r4, lr}
    4b9c:	b082      	sub	sp, #8
    4b9e:	460c      	mov	r4, r1
	ret = gpio_port_get(port, &value);
    4ba0:	a901      	add	r1, sp, #4
    4ba2:	f7ff ffee 	bl	4b82 <gpio_port_get>
	if (ret == 0) {
    4ba6:	b930      	cbnz	r0, 4bb6 <gpio_pin_get+0x1c>
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
    4ba8:	2301      	movs	r3, #1
    4baa:	40a3      	lsls	r3, r4
    4bac:	9a01      	ldr	r2, [sp, #4]
    4bae:	4213      	tst	r3, r2
    4bb0:	bf14      	ite	ne
    4bb2:	2001      	movne	r0, #1
    4bb4:	2000      	moveq	r0, #0
}
    4bb6:	b002      	add	sp, #8
    4bb8:	bd10      	pop	{r4, pc}

00004bba <gpio_pin_toggle_dt>:
 *
 * @param spec GPIO specification from devicetree
 * @return a value from gpio_pin_toggle()
 */
static inline int gpio_pin_toggle_dt(const struct gpio_dt_spec *spec)
{
    4bba:	b508      	push	{r3, lr}
    4bbc:	4603      	mov	r3, r0
	return gpio_pin_toggle(spec->port, spec->pin);
    4bbe:	6800      	ldr	r0, [r0, #0]
    4bc0:	791b      	ldrb	r3, [r3, #4]
	return gpio_port_toggle_bits(port, (gpio_port_pins_t)BIT(pin));
    4bc2:	2101      	movs	r1, #1
    4bc4:	4099      	lsls	r1, r3
	const struct gpio_driver_api *api =
    4bc6:	6883      	ldr	r3, [r0, #8]
	return api->port_toggle_bits(port, pins);
    4bc8:	695b      	ldr	r3, [r3, #20]
    4bca:	4798      	blx	r3
}
    4bcc:	bd08      	pop	{r3, pc}

00004bce <k_msleep>:
{
    4bce:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
    4bd0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    4bd4:	17c1      	asrs	r1, r0, #31
    4bd6:	03c9      	lsls	r1, r1, #15
    4bd8:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    4bdc:	03c0      	lsls	r0, r0, #15
    4bde:	f240 33e7 	movw	r3, #999	; 0x3e7
    4be2:	18c0      	adds	r0, r0, r3
    4be4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4be8:	f04f 0300 	mov.w	r3, #0
    4bec:	f141 0100 	adc.w	r1, r1, #0
    4bf0:	f7fb fab0 	bl	154 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    4bf4:	f7ff fc22 	bl	443c <z_impl_k_sleep>
}
    4bf8:	bd08      	pop	{r3, pc}

00004bfa <arch_printk_char_out>:
}
    4bfa:	2000      	movs	r0, #0
    4bfc:	4770      	bx	lr

00004bfe <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    4bfe:	b40f      	push	{r0, r1, r2, r3}
    4c00:	b500      	push	{lr}
    4c02:	b083      	sub	sp, #12
    4c04:	a904      	add	r1, sp, #16
    4c06:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    4c0a:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    4c0c:	f7fb fc5c 	bl	4c8 <vprintk>

	va_end(ap);
}
    4c10:	b003      	add	sp, #12
    4c12:	f85d eb04 	ldr.w	lr, [sp], #4
    4c16:	b004      	add	sp, #16
    4c18:	4770      	bx	lr

00004c1a <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    4c1a:	b508      	push	{r3, lr}
    4c1c:	4604      	mov	r4, r0
    4c1e:	4608      	mov	r0, r1
    4c20:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    4c22:	461a      	mov	r2, r3
    4c24:	47a0      	blx	r4
	return z_impl_z_current_get();
    4c26:	f7ff fc33 	bl	4490 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    4c2a:	f7fc fe07 	bl	183c <z_impl_k_thread_abort>

00004c2e <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
    4c2e:	f001 0107 	and.w	r1, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4c32:	8b03      	ldrh	r3, [r0, #24]
    4c34:	f023 0307 	bic.w	r3, r3, #7
    4c38:	430b      	orrs	r3, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    4c3a:	8303      	strh	r3, [r0, #24]
}
    4c3c:	4770      	bx	lr

00004c3e <notify_monitors>:
{
    4c3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4c42:	4606      	mov	r6, r0
    4c44:	460f      	mov	r7, r1
    4c46:	4690      	mov	r8, r2
	return list->head;
    4c48:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    4c4a:	b121      	cbz	r1, 4c56 <notify_monitors+0x18>
	return node->next;
    4c4c:	680c      	ldr	r4, [r1, #0]
    4c4e:	b13c      	cbz	r4, 4c60 <notify_monitors+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
    4c50:	b931      	cbnz	r1, 4c60 <notify_monitors+0x22>
    4c52:	460c      	mov	r4, r1
    4c54:	e004      	b.n	4c60 <notify_monitors+0x22>
    4c56:	460c      	mov	r4, r1
    4c58:	e002      	b.n	4c60 <notify_monitors+0x22>
    4c5a:	4623      	mov	r3, r4
    4c5c:	4621      	mov	r1, r4
    4c5e:	461c      	mov	r4, r3
    4c60:	b169      	cbz	r1, 4c7e <notify_monitors+0x40>
		mon->callback(mgr, mon, state, res);
    4c62:	684d      	ldr	r5, [r1, #4]
    4c64:	4643      	mov	r3, r8
    4c66:	463a      	mov	r2, r7
    4c68:	4630      	mov	r0, r6
    4c6a:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    4c6c:	2c00      	cmp	r4, #0
    4c6e:	d0f4      	beq.n	4c5a <notify_monitors+0x1c>
	return node->next;
    4c70:	6823      	ldr	r3, [r4, #0]
    4c72:	2b00      	cmp	r3, #0
    4c74:	d0f2      	beq.n	4c5c <notify_monitors+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
    4c76:	2c00      	cmp	r4, #0
    4c78:	d1f0      	bne.n	4c5c <notify_monitors+0x1e>
    4c7a:	4623      	mov	r3, r4
    4c7c:	e7ee      	b.n	4c5c <notify_monitors+0x1e>
}
    4c7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004c82 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4c82:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    4c84:	f013 0307 	ands.w	r3, r3, #7
    4c88:	d103      	bne.n	4c92 <process_recheck+0x10>
	return list->head;
    4c8a:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
    4c8c:	b10a      	cbz	r2, 4c92 <process_recheck+0x10>
		evt = EVT_START;
    4c8e:	2003      	movs	r0, #3
    4c90:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    4c92:	2b02      	cmp	r3, #2
    4c94:	d003      	beq.n	4c9e <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
    4c96:	2b01      	cmp	r3, #1
    4c98:	d006      	beq.n	4ca8 <process_recheck+0x26>
	int evt = EVT_NOP;
    4c9a:	2000      	movs	r0, #0
    4c9c:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
    4c9e:	8b42      	ldrh	r2, [r0, #26]
    4ca0:	2a00      	cmp	r2, #0
    4ca2:	d1f8      	bne.n	4c96 <process_recheck+0x14>
		evt = EVT_STOP;
    4ca4:	2004      	movs	r0, #4
    4ca6:	4770      	bx	lr
    4ca8:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
    4caa:	b10b      	cbz	r3, 4cb0 <process_recheck+0x2e>
		evt = EVT_RESET;
    4cac:	2005      	movs	r0, #5
}
    4cae:	4770      	bx	lr
	int evt = EVT_NOP;
    4cb0:	2000      	movs	r0, #0
    4cb2:	4770      	bx	lr

00004cb4 <process_complete>:
{
    4cb4:	b510      	push	{r4, lr}
    4cb6:	4604      	mov	r4, r0
    4cb8:	468c      	mov	ip, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4cba:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
    4cbc:	2a00      	cmp	r2, #0
    4cbe:	db07      	blt.n	4cd0 <process_complete+0x1c>
    4cc0:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    4cc4:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    4cc6:	2a01      	cmp	r2, #1
    4cc8:	d90e      	bls.n	4ce8 <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
    4cca:	2b04      	cmp	r3, #4
    4ccc:	d036      	beq.n	4d3c <process_complete+0x88>
}
    4cce:	bd10      	pop	{r4, pc}
		*clients = mgr->clients;
    4cd0:	e9d0 0100 	ldrd	r0, r1, [r0]
    4cd4:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
    4cd8:	2300      	movs	r3, #0
    4cda:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
    4cdc:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
    4cde:	2101      	movs	r1, #1
    4ce0:	4620      	mov	r0, r4
    4ce2:	f7ff ffa4 	bl	4c2e <set_state>
    4ce6:	e7f2      	b.n	4cce <process_complete+0x1a>
		*clients = mgr->clients;
    4ce8:	e9d0 0100 	ldrd	r0, r1, [r0]
    4cec:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
    4cf0:	2200      	movs	r2, #0
    4cf2:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
    4cf4:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
    4cf6:	2b06      	cmp	r3, #6
    4cf8:	d11b      	bne.n	4d32 <process_complete+0x7e>
	return list->head;
    4cfa:	f8dc 3000 	ldr.w	r3, [ip]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    4cfe:	b153      	cbz	r3, 4d16 <process_complete+0x62>
				mgr->refs += 1U;
    4d00:	8b62      	ldrh	r2, [r4, #26]
    4d02:	3201      	adds	r2, #1
    4d04:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    4d06:	461a      	mov	r2, r3
	return node->next;
    4d08:	681b      	ldr	r3, [r3, #0]
    4d0a:	2b00      	cmp	r3, #0
    4d0c:	d0f7      	beq.n	4cfe <process_complete+0x4a>
Z_GENLIST_PEEK_NEXT(slist, snode)
    4d0e:	2a00      	cmp	r2, #0
    4d10:	d1f5      	bne.n	4cfe <process_complete+0x4a>
    4d12:	4613      	mov	r3, r2
    4d14:	e7f3      	b.n	4cfe <process_complete+0x4a>
			set_state(mgr, ONOFF_STATE_ON);
    4d16:	2102      	movs	r1, #2
    4d18:	4620      	mov	r0, r4
    4d1a:	f7ff ff88 	bl	4c2e <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    4d1e:	4620      	mov	r0, r4
    4d20:	f7ff ffaf 	bl	4c82 <process_recheck>
    4d24:	2800      	cmp	r0, #0
    4d26:	d0d2      	beq.n	4cce <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    4d28:	8b23      	ldrh	r3, [r4, #24]
    4d2a:	f043 0320 	orr.w	r3, r3, #32
    4d2e:	8323      	strh	r3, [r4, #24]
    4d30:	e7cd      	b.n	4cce <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
    4d32:	2100      	movs	r1, #0
    4d34:	4620      	mov	r0, r4
    4d36:	f7ff ff7a 	bl	4c2e <set_state>
    4d3a:	e7f0      	b.n	4d1e <process_complete+0x6a>
		set_state(mgr, ONOFF_STATE_OFF);
    4d3c:	2100      	movs	r1, #0
    4d3e:	f7ff ff76 	bl	4c2e <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    4d42:	4620      	mov	r0, r4
    4d44:	f7ff ff9d 	bl	4c82 <process_recheck>
    4d48:	2800      	cmp	r0, #0
    4d4a:	d0c0      	beq.n	4cce <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    4d4c:	8b23      	ldrh	r3, [r4, #24]
    4d4e:	f043 0320 	orr.w	r3, r3, #32
    4d52:	8323      	strh	r3, [r4, #24]
}
    4d54:	e7bb      	b.n	4cce <process_complete+0x1a>

00004d56 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
    4d56:	b150      	cbz	r0, 4d6e <validate_args+0x18>
{
    4d58:	b510      	push	{r4, lr}
    4d5a:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    4d5c:	b151      	cbz	r1, 4d74 <validate_args+0x1e>
	int rv = sys_notify_validate(&cli->notify);
    4d5e:	1d08      	adds	r0, r1, #4
    4d60:	f000 f8c4 	bl	4eec <sys_notify_validate>
	if ((rv == 0)
    4d64:	b910      	cbnz	r0, 4d6c <validate_args+0x16>
	    && ((cli->notify.flags
    4d66:	68a3      	ldr	r3, [r4, #8]
    4d68:	2b03      	cmp	r3, #3
    4d6a:	d806      	bhi.n	4d7a <validate_args+0x24>
}
    4d6c:	bd10      	pop	{r4, pc}
		return -EINVAL;
    4d6e:	f06f 0015 	mvn.w	r0, #21
}
    4d72:	4770      	bx	lr
		return -EINVAL;
    4d74:	f06f 0015 	mvn.w	r0, #21
    4d78:	e7f8      	b.n	4d6c <validate_args+0x16>
		rv = -EINVAL;
    4d7a:	f06f 0015 	mvn.w	r0, #21
    4d7e:	e7f5      	b.n	4d6c <validate_args+0x16>

00004d80 <notify_one>:
{
    4d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4d84:	4607      	mov	r7, r0
    4d86:	460c      	mov	r4, r1
    4d88:	4616      	mov	r6, r2
    4d8a:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    4d8c:	4619      	mov	r1, r3
    4d8e:	1d20      	adds	r0, r4, #4
    4d90:	f000 f8c3 	bl	4f1a <sys_notify_finalize>
	if (cb) {
    4d94:	b128      	cbz	r0, 4da2 <notify_one+0x22>
    4d96:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
    4d98:	462b      	mov	r3, r5
    4d9a:	4632      	mov	r2, r6
    4d9c:	4621      	mov	r1, r4
    4d9e:	4638      	mov	r0, r7
    4da0:	47c0      	blx	r8
}
    4da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004da6 <notify_all>:
{
    4da6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4daa:	4680      	mov	r8, r0
    4dac:	460c      	mov	r4, r1
    4dae:	4617      	mov	r7, r2
    4db0:	461e      	mov	r6, r3
	while (!sys_slist_is_empty(list)) {
    4db2:	e004      	b.n	4dbe <notify_all+0x18>
		notify_one(mgr, cli, state, res);
    4db4:	4633      	mov	r3, r6
    4db6:	463a      	mov	r2, r7
    4db8:	4640      	mov	r0, r8
    4dba:	f7ff ffe1 	bl	4d80 <notify_one>
	return list->head;
    4dbe:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
    4dc0:	b131      	cbz	r1, 4dd0 <notify_all+0x2a>
	return node->next;
    4dc2:	680d      	ldr	r5, [r1, #0]
	list->head = node;
    4dc4:	6025      	str	r5, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    4dc6:	6863      	ldr	r3, [r4, #4]
    4dc8:	428b      	cmp	r3, r1
    4dca:	d1f3      	bne.n	4db4 <notify_all+0xe>
	list->tail = node;
    4dcc:	6065      	str	r5, [r4, #4]
}
    4dce:	e7f1      	b.n	4db4 <notify_all+0xe>
}
    4dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004dd4 <transition_complete>:
{
    4dd4:	b508      	push	{r3, lr}
	__asm__ volatile(
    4dd6:	f04f 0c20 	mov.w	ip, #32
    4dda:	f3ef 8211 	mrs	r2, BASEPRI
    4dde:	f38c 8812 	msr	BASEPRI_MAX, ip
    4de2:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    4de6:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
    4de8:	2101      	movs	r1, #1
    4dea:	f7fb fb7b 	bl	4e4 <process_event>
}
    4dee:	bd08      	pop	{r3, pc}

00004df0 <onoff_manager_init>:
	if ((mgr == NULL)
    4df0:	4603      	mov	r3, r0
    4df2:	b170      	cbz	r0, 4e12 <onoff_manager_init+0x22>
	    || (transitions == NULL)
    4df4:	b181      	cbz	r1, 4e18 <onoff_manager_init+0x28>
	    || (transitions->start == NULL)
    4df6:	680a      	ldr	r2, [r1, #0]
    4df8:	b18a      	cbz	r2, 4e1e <onoff_manager_init+0x2e>
	    || (transitions->stop == NULL)) {
    4dfa:	684a      	ldr	r2, [r1, #4]
    4dfc:	b192      	cbz	r2, 4e24 <onoff_manager_init+0x34>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    4dfe:	2000      	movs	r0, #0
    4e00:	6018      	str	r0, [r3, #0]
    4e02:	6058      	str	r0, [r3, #4]
    4e04:	6098      	str	r0, [r3, #8]
    4e06:	60d8      	str	r0, [r3, #12]
    4e08:	6118      	str	r0, [r3, #16]
    4e0a:	6158      	str	r0, [r3, #20]
    4e0c:	6198      	str	r0, [r3, #24]
    4e0e:	6119      	str	r1, [r3, #16]
	return 0;
    4e10:	4770      	bx	lr
		return -EINVAL;
    4e12:	f06f 0015 	mvn.w	r0, #21
    4e16:	4770      	bx	lr
    4e18:	f06f 0015 	mvn.w	r0, #21
    4e1c:	4770      	bx	lr
    4e1e:	f06f 0015 	mvn.w	r0, #21
    4e22:	4770      	bx	lr
    4e24:	f06f 0015 	mvn.w	r0, #21
}
    4e28:	4770      	bx	lr

00004e2a <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    4e2a:	b570      	push	{r4, r5, r6, lr}
    4e2c:	4605      	mov	r5, r0
    4e2e:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    4e30:	f7ff ff91 	bl	4d56 <validate_args>

	if (rv < 0) {
    4e34:	1e04      	subs	r4, r0, #0
    4e36:	db30      	blt.n	4e9a <onoff_request+0x70>
    4e38:	f04f 0320 	mov.w	r3, #32
    4e3c:	f3ef 8211 	mrs	r2, BASEPRI
    4e40:	f383 8812 	msr	BASEPRI_MAX, r3
    4e44:	f3bf 8f6f 	isb	sy
    4e48:	4696      	mov	lr, r2
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4e4a:	f8b5 c018 	ldrh.w	ip, [r5, #24]
    4e4e:	f00c 0c07 	and.w	ip, ip, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    4e52:	8b6b      	ldrh	r3, [r5, #26]
    4e54:	f64f 71ff 	movw	r1, #65535	; 0xffff
    4e58:	428b      	cmp	r3, r1
    4e5a:	d02c      	beq.n	4eb6 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
    4e5c:	4664      	mov	r4, ip
	if (state == ONOFF_STATE_ON) {
    4e5e:	f1bc 0f02 	cmp.w	ip, #2
    4e62:	d008      	beq.n	4e76 <onoff_request+0x4c>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
    4e64:	f1bc 0f06 	cmp.w	ip, #6
    4e68:	d819      	bhi.n	4e9e <onoff_request+0x74>
    4e6a:	e8df f00c 	tbb	[pc, ip]
    4e6e:	181e      	.short	0x181e
    4e70:	2a1e1818 	.word	0x2a1e1818
    4e74:	1e          	.byte	0x1e
    4e75:	00          	.byte	0x00
		mgr->refs += 1U;
    4e76:	3301      	adds	r3, #1
    4e78:	836b      	strh	r3, [r5, #26]
		notify = true;
    4e7a:	2301      	movs	r3, #1
	bool start = false;             /* trigger a start transition */
    4e7c:	2100      	movs	r1, #0
	bool add_client = false;        /* add client to pending list */
    4e7e:	4608      	mov	r0, r1
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
	}

out:
	if (add_client) {
    4e80:	b128      	cbz	r0, 4e8e <onoff_request+0x64>
	parent->next = child;
    4e82:	2000      	movs	r0, #0
    4e84:	6030      	str	r0, [r6, #0]
	return list->tail;
    4e86:	6868      	ldr	r0, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
    4e88:	b308      	cbz	r0, 4ece <onoff_request+0xa4>
	parent->next = child;
    4e8a:	6006      	str	r6, [r0, #0]
	list->tail = node;
    4e8c:	606e      	str	r6, [r5, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    4e8e:	bb09      	cbnz	r1, 4ed4 <onoff_request+0xaa>
	__asm__ volatile(
    4e90:	f38e 8811 	msr	BASEPRI, lr
    4e94:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    4e98:	bb0b      	cbnz	r3, 4ede <onoff_request+0xb4>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    4e9a:	4620      	mov	r0, r4
    4e9c:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    4e9e:	f06f 0404 	mvn.w	r4, #4
    4ea2:	2300      	movs	r3, #0
    4ea4:	4619      	mov	r1, r3
    4ea6:	4618      	mov	r0, r3
    4ea8:	e7ea      	b.n	4e80 <onoff_request+0x56>
		start = (state == ONOFF_STATE_OFF);
    4eaa:	fabc f18c 	clz	r1, ip
    4eae:	0949      	lsrs	r1, r1, #5
	bool notify = false;            /* do client notification */
    4eb0:	2300      	movs	r3, #0
		add_client = true;
    4eb2:	2001      	movs	r0, #1
    4eb4:	e7e4      	b.n	4e80 <onoff_request+0x56>
		rv = -EAGAIN;
    4eb6:	f06f 040a 	mvn.w	r4, #10
	bool notify = false;            /* do client notification */
    4eba:	2300      	movs	r3, #0
	bool start = false;             /* trigger a start transition */
    4ebc:	4619      	mov	r1, r3
	bool add_client = false;        /* add client to pending list */
    4ebe:	4618      	mov	r0, r3
    4ec0:	e7de      	b.n	4e80 <onoff_request+0x56>
	if (state == ONOFF_STATE_ON) {
    4ec2:	f06f 0485 	mvn.w	r4, #133	; 0x85
    4ec6:	2300      	movs	r3, #0
    4ec8:	4619      	mov	r1, r3
    4eca:	4618      	mov	r0, r3
    4ecc:	e7d8      	b.n	4e80 <onoff_request+0x56>
    4ece:	606e      	str	r6, [r5, #4]
	list->head = node;
    4ed0:	602e      	str	r6, [r5, #0]
}
    4ed2:	e7dc      	b.n	4e8e <onoff_request+0x64>
		process_event(mgr, EVT_RECHECK, key);
    4ed4:	2102      	movs	r1, #2
    4ed6:	4628      	mov	r0, r5
    4ed8:	f7fb fb04 	bl	4e4 <process_event>
    4edc:	e7dd      	b.n	4e9a <onoff_request+0x70>
			notify_one(mgr, cli, state, 0);
    4ede:	2300      	movs	r3, #0
    4ee0:	4662      	mov	r2, ip
    4ee2:	4631      	mov	r1, r6
    4ee4:	4628      	mov	r0, r5
    4ee6:	f7ff ff4b 	bl	4d80 <notify_one>
    4eea:	e7d6      	b.n	4e9a <onoff_request+0x70>

00004eec <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    4eec:	4602      	mov	r2, r0
    4eee:	b158      	cbz	r0, 4f08 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    4ef0:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    4ef2:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    4ef6:	2b01      	cmp	r3, #1
    4ef8:	d003      	beq.n	4f02 <sys_notify_validate+0x16>
    4efa:	2b03      	cmp	r3, #3
    4efc:	d107      	bne.n	4f0e <sys_notify_validate+0x22>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    4efe:	6803      	ldr	r3, [r0, #0]
    4f00:	b143      	cbz	r3, 4f14 <sys_notify_validate+0x28>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    4f02:	2000      	movs	r0, #0
    4f04:	6090      	str	r0, [r2, #8]
    4f06:	4770      	bx	lr
		return -EINVAL;
    4f08:	f06f 0015 	mvn.w	r0, #21
    4f0c:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
    4f0e:	f06f 0015 	mvn.w	r0, #21
    4f12:	4770      	bx	lr
			rv = -EINVAL;
    4f14:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    4f18:	4770      	bx	lr

00004f1a <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    4f1a:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    4f1c:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    4f1e:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    4f22:	6081      	str	r1, [r0, #8]
	switch (method) {
    4f24:	2a03      	cmp	r2, #3
    4f26:	d103      	bne.n	4f30 <sys_notify_finalize+0x16>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    4f28:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    4f2a:	2200      	movs	r2, #0
    4f2c:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    4f2e:	4770      	bx	lr
	sys_notify_generic_callback rv = NULL;
    4f30:	2000      	movs	r0, #0
    4f32:	e7fa      	b.n	4f2a <sys_notify_finalize+0x10>

00004f34 <extract_decimal>:
{
    4f34:	4684      	mov	ip, r0
	const char *sp = *str;
    4f36:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
    4f38:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
    4f3a:	e006      	b.n	4f4a <extract_decimal+0x16>
		val = 10U * val + *sp++ - '0';
    4f3c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    4f40:	3201      	adds	r2, #1
    4f42:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    4f46:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    4f4a:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    4f4c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    4f50:	2909      	cmp	r1, #9
    4f52:	d9f3      	bls.n	4f3c <extract_decimal+0x8>
	*str = sp;
    4f54:	f8cc 2000 	str.w	r2, [ip]
}
    4f58:	4770      	bx	lr

00004f5a <extract_width>:
{
    4f5a:	b530      	push	{r4, r5, lr}
    4f5c:	b083      	sub	sp, #12
    4f5e:	4604      	mov	r4, r0
    4f60:	9101      	str	r1, [sp, #4]
	conv->width_present = true;
    4f62:	7803      	ldrb	r3, [r0, #0]
    4f64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    4f68:	7003      	strb	r3, [r0, #0]
	if (*sp == '*') {
    4f6a:	460d      	mov	r5, r1
    4f6c:	780b      	ldrb	r3, [r1, #0]
    4f6e:	2b2a      	cmp	r3, #42	; 0x2a
    4f70:	d018      	beq.n	4fa4 <extract_width+0x4a>
	size_t width = extract_decimal(&sp);
    4f72:	a801      	add	r0, sp, #4
    4f74:	f7ff ffde 	bl	4f34 <extract_decimal>
	if (sp != wp) {
    4f78:	9b01      	ldr	r3, [sp, #4]
    4f7a:	429d      	cmp	r5, r3
    4f7c:	d00f      	beq.n	4f9e <extract_width+0x44>
		conv->width_present = true;
    4f7e:	7823      	ldrb	r3, [r4, #0]
    4f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    4f84:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
    4f86:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
    4f88:	b2db      	uxtb	r3, r3
    4f8a:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
    4f8e:	2800      	cmp	r0, #0
    4f90:	db10      	blt.n	4fb4 <extract_width+0x5a>
    4f92:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
    4f94:	4313      	orrs	r3, r2
    4f96:	7822      	ldrb	r2, [r4, #0]
    4f98:	f363 0241 	bfi	r2, r3, #1, #1
    4f9c:	7022      	strb	r2, [r4, #0]
	return sp;
    4f9e:	9801      	ldr	r0, [sp, #4]
}
    4fa0:	b003      	add	sp, #12
    4fa2:	bd30      	pop	{r4, r5, pc}
		conv->width_star = true;
    4fa4:	7843      	ldrb	r3, [r0, #1]
    4fa6:	f043 0301 	orr.w	r3, r3, #1
    4faa:	7043      	strb	r3, [r0, #1]
		return ++sp;
    4fac:	4608      	mov	r0, r1
    4fae:	3001      	adds	r0, #1
    4fb0:	9001      	str	r0, [sp, #4]
    4fb2:	e7f5      	b.n	4fa0 <extract_width+0x46>
				      || (width != (size_t)conv->width_value));
    4fb4:	2201      	movs	r2, #1
    4fb6:	e7ed      	b.n	4f94 <extract_width+0x3a>

00004fb8 <extract_prec>:
{
    4fb8:	b510      	push	{r4, lr}
    4fba:	b082      	sub	sp, #8
    4fbc:	9101      	str	r1, [sp, #4]
	conv->prec_present = (*sp == '.');
    4fbe:	780b      	ldrb	r3, [r1, #0]
    4fc0:	2b2e      	cmp	r3, #46	; 0x2e
    4fc2:	bf14      	ite	ne
    4fc4:	2300      	movne	r3, #0
    4fc6:	2301      	moveq	r3, #1
    4fc8:	7842      	ldrb	r2, [r0, #1]
    4fca:	f363 0241 	bfi	r2, r3, #1, #1
    4fce:	7042      	strb	r2, [r0, #1]
	if (!conv->prec_present) {
    4fd0:	b1c3      	cbz	r3, 5004 <extract_prec+0x4c>
    4fd2:	4604      	mov	r4, r0
	++sp;
    4fd4:	9b01      	ldr	r3, [sp, #4]
    4fd6:	1c5a      	adds	r2, r3, #1
    4fd8:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
    4fda:	785b      	ldrb	r3, [r3, #1]
    4fdc:	2b2a      	cmp	r3, #42	; 0x2a
    4fde:	d013      	beq.n	5008 <extract_prec+0x50>
	size_t prec = extract_decimal(&sp);
    4fe0:	a801      	add	r0, sp, #4
    4fe2:	f7ff ffa7 	bl	4f34 <extract_decimal>
	conv->prec_value = prec;
    4fe6:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
    4fe8:	7823      	ldrb	r3, [r4, #0]
    4fea:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
    4fee:	2800      	cmp	r0, #0
    4ff0:	db12      	blt.n	5018 <extract_prec+0x60>
    4ff2:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
    4ff4:	4313      	orrs	r3, r2
    4ff6:	7822      	ldrb	r2, [r4, #0]
    4ff8:	f363 0241 	bfi	r2, r3, #1, #1
    4ffc:	7022      	strb	r2, [r4, #0]
	return sp;
    4ffe:	9801      	ldr	r0, [sp, #4]
}
    5000:	b002      	add	sp, #8
    5002:	bd10      	pop	{r4, pc}
		return sp;
    5004:	4608      	mov	r0, r1
    5006:	e7fb      	b.n	5000 <extract_prec+0x48>
		conv->prec_star = true;
    5008:	7843      	ldrb	r3, [r0, #1]
    500a:	f043 0304 	orr.w	r3, r3, #4
    500e:	7043      	strb	r3, [r0, #1]
		return ++sp;
    5010:	4610      	mov	r0, r2
    5012:	3001      	adds	r0, #1
    5014:	9001      	str	r0, [sp, #4]
    5016:	e7f3      	b.n	5000 <extract_prec+0x48>
			      || (prec != (size_t)conv->prec_value));
    5018:	2201      	movs	r2, #1
    501a:	e7eb      	b.n	4ff4 <extract_prec+0x3c>

0000501c <extract_length>:
{
    501c:	4602      	mov	r2, r0
	switch (*sp) {
    501e:	780b      	ldrb	r3, [r1, #0]
    5020:	3b4c      	subs	r3, #76	; 0x4c
    5022:	2b2e      	cmp	r3, #46	; 0x2e
    5024:	d85b      	bhi.n	50de <extract_length+0xc2>
    5026:	e8df f003 	tbb	[pc, r3]
    502a:	5a4f      	.short	0x5a4f
    502c:	5a5a5a5a 	.word	0x5a5a5a5a
    5030:	5a5a5a5a 	.word	0x5a5a5a5a
    5034:	5a5a5a5a 	.word	0x5a5a5a5a
    5038:	5a5a5a5a 	.word	0x5a5a5a5a
    503c:	5a5a5a5a 	.word	0x5a5a5a5a
    5040:	5a5a5a5a 	.word	0x5a5a5a5a
    5044:	5a185a5a 	.word	0x5a185a5a
    5048:	5a295a3a 	.word	0x5a295a3a
    504c:	5a5a5a5a 	.word	0x5a5a5a5a
    5050:	5a485a5a 	.word	0x5a485a5a
    5054:	5a5a5a5a 	.word	0x5a5a5a5a
    5058:	41          	.byte	0x41
    5059:	00          	.byte	0x00
		if (*++sp == 'h') {
    505a:	1c48      	adds	r0, r1, #1
    505c:	784b      	ldrb	r3, [r1, #1]
    505e:	2b68      	cmp	r3, #104	; 0x68
    5060:	d005      	beq.n	506e <extract_length+0x52>
			conv->length_mod = LENGTH_H;
    5062:	7853      	ldrb	r3, [r2, #1]
    5064:	2102      	movs	r1, #2
    5066:	f361 03c6 	bfi	r3, r1, #3, #4
    506a:	7053      	strb	r3, [r2, #1]
    506c:	4770      	bx	lr
			conv->length_mod = LENGTH_HH;
    506e:	7853      	ldrb	r3, [r2, #1]
    5070:	2001      	movs	r0, #1
    5072:	f360 03c6 	bfi	r3, r0, #3, #4
    5076:	7053      	strb	r3, [r2, #1]
			++sp;
    5078:	1c88      	adds	r0, r1, #2
    507a:	4770      	bx	lr
		if (*++sp == 'l') {
    507c:	1c48      	adds	r0, r1, #1
    507e:	784b      	ldrb	r3, [r1, #1]
    5080:	2b6c      	cmp	r3, #108	; 0x6c
    5082:	d005      	beq.n	5090 <extract_length+0x74>
			conv->length_mod = LENGTH_L;
    5084:	7853      	ldrb	r3, [r2, #1]
    5086:	2103      	movs	r1, #3
    5088:	f361 03c6 	bfi	r3, r1, #3, #4
    508c:	7053      	strb	r3, [r2, #1]
    508e:	4770      	bx	lr
			conv->length_mod = LENGTH_LL;
    5090:	7853      	ldrb	r3, [r2, #1]
    5092:	2004      	movs	r0, #4
    5094:	f360 03c6 	bfi	r3, r0, #3, #4
    5098:	7053      	strb	r3, [r2, #1]
			++sp;
    509a:	1c88      	adds	r0, r1, #2
    509c:	4770      	bx	lr
		conv->length_mod = LENGTH_J;
    509e:	7853      	ldrb	r3, [r2, #1]
    50a0:	2005      	movs	r0, #5
    50a2:	f360 03c6 	bfi	r3, r0, #3, #4
    50a6:	7053      	strb	r3, [r2, #1]
		++sp;
    50a8:	1c48      	adds	r0, r1, #1
		break;
    50aa:	4770      	bx	lr
		conv->length_mod = LENGTH_Z;
    50ac:	7853      	ldrb	r3, [r2, #1]
    50ae:	2006      	movs	r0, #6
    50b0:	f360 03c6 	bfi	r3, r0, #3, #4
    50b4:	7053      	strb	r3, [r2, #1]
		++sp;
    50b6:	1c48      	adds	r0, r1, #1
		break;
    50b8:	4770      	bx	lr
		conv->length_mod = LENGTH_T;
    50ba:	7853      	ldrb	r3, [r2, #1]
    50bc:	2007      	movs	r0, #7
    50be:	f360 03c6 	bfi	r3, r0, #3, #4
    50c2:	7053      	strb	r3, [r2, #1]
		++sp;
    50c4:	1c48      	adds	r0, r1, #1
		break;
    50c6:	4770      	bx	lr
		conv->length_mod = LENGTH_UPPER_L;
    50c8:	7853      	ldrb	r3, [r2, #1]
    50ca:	2008      	movs	r0, #8
    50cc:	f360 03c6 	bfi	r3, r0, #3, #4
    50d0:	7053      	strb	r3, [r2, #1]
		++sp;
    50d2:	1c48      	adds	r0, r1, #1
		conv->unsupported = true;
    50d4:	7813      	ldrb	r3, [r2, #0]
    50d6:	f043 0302 	orr.w	r3, r3, #2
    50da:	7013      	strb	r3, [r2, #0]
		break;
    50dc:	4770      	bx	lr
		conv->length_mod = LENGTH_NONE;
    50de:	7853      	ldrb	r3, [r2, #1]
    50e0:	f36f 03c6 	bfc	r3, #3, #4
    50e4:	7053      	strb	r3, [r2, #1]
		break;
    50e6:	4608      	mov	r0, r1
}
    50e8:	4770      	bx	lr

000050ea <extract_specifier>:
{
    50ea:	b500      	push	{lr}
    50ec:	4602      	mov	r2, r0
	conv->specifier = *sp++;
    50ee:	4608      	mov	r0, r1
    50f0:	f810 3b01 	ldrb.w	r3, [r0], #1
    50f4:	70d3      	strb	r3, [r2, #3]
	switch (conv->specifier) {
    50f6:	2b78      	cmp	r3, #120	; 0x78
    50f8:	d817      	bhi.n	512a <extract_specifier+0x40>
    50fa:	2b6e      	cmp	r3, #110	; 0x6e
    50fc:	d229      	bcs.n	5152 <extract_specifier+0x68>
    50fe:	2b69      	cmp	r3, #105	; 0x69
    5100:	d813      	bhi.n	512a <extract_specifier+0x40>
    5102:	2b58      	cmp	r3, #88	; 0x58
    5104:	d317      	bcc.n	5136 <extract_specifier+0x4c>
    5106:	f1a3 0c58 	sub.w	ip, r3, #88	; 0x58
    510a:	fa5f fc8c 	uxtb.w	ip, ip
    510e:	2101      	movs	r1, #1
    5110:	fa01 f10c 	lsl.w	r1, r1, ip
    5114:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    5118:	d114      	bne.n	5144 <extract_specifier+0x5a>
    511a:	f640 0c01 	movw	ip, #2049	; 0x801
    511e:	ea11 0f0c 	tst.w	r1, ip
    5122:	d155      	bne.n	51d0 <extract_specifier+0xe6>
    5124:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    5128:	d13a      	bne.n	51a0 <extract_specifier+0xb6>
		conv->invalid = true;
    512a:	7813      	ldrb	r3, [r2, #0]
    512c:	f043 0301 	orr.w	r3, r3, #1
    5130:	7013      	strb	r3, [r2, #0]
	bool unsupported = false;
    5132:	2100      	movs	r1, #0
		break;
    5134:	e042      	b.n	51bc <extract_specifier+0xd2>
	switch (conv->specifier) {
    5136:	2b41      	cmp	r3, #65	; 0x41
    5138:	d004      	beq.n	5144 <extract_specifier+0x5a>
    513a:	d3f6      	bcc.n	512a <extract_specifier+0x40>
    513c:	3b45      	subs	r3, #69	; 0x45
    513e:	b2db      	uxtb	r3, r3
    5140:	2b02      	cmp	r3, #2
    5142:	d8f2      	bhi.n	512a <extract_specifier+0x40>
		conv->specifier_cat = SPECIFIER_FP;
    5144:	7893      	ldrb	r3, [r2, #2]
    5146:	2104      	movs	r1, #4
    5148:	f361 0302 	bfi	r3, r1, #0, #3
    514c:	7093      	strb	r3, [r2, #2]
			unsupported = true;
    514e:	2101      	movs	r1, #1
			break;
    5150:	e034      	b.n	51bc <extract_specifier+0xd2>
	switch (conv->specifier) {
    5152:	f1a3 016e 	sub.w	r1, r3, #110	; 0x6e
    5156:	b2c9      	uxtb	r1, r1
    5158:	f04f 0c01 	mov.w	ip, #1
    515c:	fa0c fc01 	lsl.w	ip, ip, r1
    5160:	f240 4182 	movw	r1, #1154	; 0x482
    5164:	ea1c 0f01 	tst.w	ip, r1
    5168:	bf14      	ite	ne
    516a:	f04f 0e01 	movne.w	lr, #1
    516e:	f04f 0e00 	moveq.w	lr, #0
    5172:	d12d      	bne.n	51d0 <extract_specifier+0xe6>
    5174:	f01c 0f24 	tst.w	ip, #36	; 0x24
    5178:	bf14      	ite	ne
    517a:	2101      	movne	r1, #1
    517c:	2100      	moveq	r1, #0
    517e:	d139      	bne.n	51f4 <extract_specifier+0x10a>
    5180:	f01c 0c01 	ands.w	ip, ip, #1
    5184:	d0d1      	beq.n	512a <extract_specifier+0x40>
		conv->specifier_cat = SPECIFIER_PTR;
    5186:	7893      	ldrb	r3, [r2, #2]
    5188:	f04f 0e03 	mov.w	lr, #3
    518c:	f36e 0302 	bfi	r3, lr, #0, #3
    5190:	7093      	strb	r3, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    5192:	7853      	ldrb	r3, [r2, #1]
    5194:	f003 0378 	and.w	r3, r3, #120	; 0x78
    5198:	2b40      	cmp	r3, #64	; 0x40
    519a:	d10f      	bne.n	51bc <extract_specifier+0xd2>
			unsupported = true;
    519c:	4661      	mov	r1, ip
    519e:	e00d      	b.n	51bc <extract_specifier+0xd2>
		conv->specifier_cat = SPECIFIER_SINT;
    51a0:	7891      	ldrb	r1, [r2, #2]
    51a2:	f04f 0c01 	mov.w	ip, #1
    51a6:	f36c 0102 	bfi	r1, ip, #0, #3
    51aa:	7091      	strb	r1, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    51ac:	7851      	ldrb	r1, [r2, #1]
    51ae:	f001 0178 	and.w	r1, r1, #120	; 0x78
    51b2:	2940      	cmp	r1, #64	; 0x40
    51b4:	d013      	beq.n	51de <extract_specifier+0xf4>
		if (conv->specifier == 'c') {
    51b6:	2b63      	cmp	r3, #99	; 0x63
    51b8:	d018      	beq.n	51ec <extract_specifier+0x102>
	bool unsupported = false;
    51ba:	2100      	movs	r1, #0
	conv->unsupported |= unsupported;
    51bc:	7813      	ldrb	r3, [r2, #0]
    51be:	f3c3 0c40 	ubfx	ip, r3, #1, #1
    51c2:	ea41 010c 	orr.w	r1, r1, ip
    51c6:	f361 0341 	bfi	r3, r1, #1, #1
    51ca:	7013      	strb	r3, [r2, #0]
}
    51cc:	f85d fb04 	ldr.w	pc, [sp], #4
		conv->specifier_cat = SPECIFIER_UINT;
    51d0:	7891      	ldrb	r1, [r2, #2]
    51d2:	f04f 0c02 	mov.w	ip, #2
    51d6:	f36c 0102 	bfi	r1, ip, #0, #3
    51da:	7091      	strb	r1, [r2, #2]
    51dc:	e7e6      	b.n	51ac <extract_specifier+0xc2>
			conv->invalid = true;
    51de:	f892 c000 	ldrb.w	ip, [r2]
    51e2:	f04c 0c01 	orr.w	ip, ip, #1
    51e6:	f882 c000 	strb.w	ip, [r2]
    51ea:	e7e4      	b.n	51b6 <extract_specifier+0xcc>
			unsupported = (conv->length_mod != LENGTH_NONE);
    51ec:	3900      	subs	r1, #0
    51ee:	bf18      	it	ne
    51f0:	2101      	movne	r1, #1
    51f2:	e7e3      	b.n	51bc <extract_specifier+0xd2>
		conv->specifier_cat = SPECIFIER_PTR;
    51f4:	7893      	ldrb	r3, [r2, #2]
    51f6:	f04f 0c03 	mov.w	ip, #3
    51fa:	f36c 0302 	bfi	r3, ip, #0, #3
    51fe:	7093      	strb	r3, [r2, #2]
		if (conv->length_mod != LENGTH_NONE) {
    5200:	7853      	ldrb	r3, [r2, #1]
    5202:	f013 0f78 	tst.w	r3, #120	; 0x78
    5206:	d1d9      	bne.n	51bc <extract_specifier+0xd2>
	bool unsupported = false;
    5208:	4671      	mov	r1, lr
    520a:	e7d7      	b.n	51bc <extract_specifier+0xd2>

0000520c <extract_conversion>:
{
    520c:	b510      	push	{r4, lr}
    520e:	4604      	mov	r4, r0
    5210:	4608      	mov	r0, r1
	*conv = (struct conversion) {
    5212:	2300      	movs	r3, #0
    5214:	6023      	str	r3, [r4, #0]
    5216:	6063      	str	r3, [r4, #4]
    5218:	60a3      	str	r3, [r4, #8]
	if (*sp == '%') {
    521a:	784b      	ldrb	r3, [r1, #1]
    521c:	2b25      	cmp	r3, #37	; 0x25
    521e:	d014      	beq.n	524a <extract_conversion+0x3e>
    5220:	3101      	adds	r1, #1
	sp = extract_flags(conv, sp);
    5222:	4620      	mov	r0, r4
    5224:	f7fb fa14 	bl	650 <extract_flags>
    5228:	4601      	mov	r1, r0
	sp = extract_width(conv, sp);
    522a:	4620      	mov	r0, r4
    522c:	f7ff fe95 	bl	4f5a <extract_width>
    5230:	4601      	mov	r1, r0
	sp = extract_prec(conv, sp);
    5232:	4620      	mov	r0, r4
    5234:	f7ff fec0 	bl	4fb8 <extract_prec>
    5238:	4601      	mov	r1, r0
	sp = extract_length(conv, sp);
    523a:	4620      	mov	r0, r4
    523c:	f7ff feee 	bl	501c <extract_length>
    5240:	4601      	mov	r1, r0
	sp = extract_specifier(conv, sp);
    5242:	4620      	mov	r0, r4
    5244:	f7ff ff51 	bl	50ea <extract_specifier>
}
    5248:	bd10      	pop	{r4, pc}
		conv->specifier = *sp++;
    524a:	3002      	adds	r0, #2
    524c:	70e3      	strb	r3, [r4, #3]
		return sp;
    524e:	e7fb      	b.n	5248 <extract_conversion+0x3c>

00005250 <conversion_radix>:
	switch (specifier) {
    5250:	286f      	cmp	r0, #111	; 0x6f
    5252:	d00c      	beq.n	526e <conversion_radix+0x1e>
    5254:	d905      	bls.n	5262 <conversion_radix+0x12>
    5256:	2870      	cmp	r0, #112	; 0x70
    5258:	d00b      	beq.n	5272 <conversion_radix+0x22>
    525a:	2878      	cmp	r0, #120	; 0x78
    525c:	d10b      	bne.n	5276 <conversion_radix+0x26>
		return 16;
    525e:	2010      	movs	r0, #16
    5260:	4770      	bx	lr
	switch (specifier) {
    5262:	2858      	cmp	r0, #88	; 0x58
    5264:	d001      	beq.n	526a <conversion_radix+0x1a>
    5266:	200a      	movs	r0, #10
    5268:	4770      	bx	lr
		return 16;
    526a:	2010      	movs	r0, #16
    526c:	4770      	bx	lr
		return 8;
    526e:	2008      	movs	r0, #8
    5270:	4770      	bx	lr
		return 16;
    5272:	2010      	movs	r0, #16
    5274:	4770      	bx	lr
	switch (specifier) {
    5276:	200a      	movs	r0, #10
}
    5278:	4770      	bx	lr

0000527a <encode_uint>:
{
    527a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    527e:	4605      	mov	r5, r0
    5280:	460c      	mov	r4, r1
    5282:	4693      	mov	fp, r2
    5284:	4699      	mov	r9, r3
    5286:	9f0a      	ldr	r7, [sp, #40]	; 0x28
	bool upcase = isupper((int)conv->specifier);
    5288:	78d0      	ldrb	r0, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    528a:	f1a0 0a41 	sub.w	sl, r0, #65	; 0x41
	const unsigned int radix = conversion_radix(conv->specifier);
    528e:	f7ff ffdf 	bl	5250 <conversion_radix>
    5292:	4606      	mov	r6, r0
	char *bp = bps + (bpe - bps);
    5294:	e015      	b.n	52c2 <encode_uint+0x48>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5296:	f1ba 0f19 	cmp.w	sl, #25
    529a:	d820      	bhi.n	52de <encode_uint+0x64>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    529c:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    529e:	3237      	adds	r2, #55	; 0x37
    52a0:	b2d2      	uxtb	r2, r2
    52a2:	f807 2d01 	strb.w	r2, [r7, #-1]!
		value /= radix;
    52a6:	4632      	mov	r2, r6
    52a8:	4643      	mov	r3, r8
    52aa:	4628      	mov	r0, r5
    52ac:	4621      	mov	r1, r4
    52ae:	f7fa ff51 	bl	154 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
    52b2:	42b5      	cmp	r5, r6
    52b4:	f174 0400 	sbcs.w	r4, r4, #0
    52b8:	d315      	bcc.n	52e6 <encode_uint+0x6c>
    52ba:	454f      	cmp	r7, r9
    52bc:	d913      	bls.n	52e6 <encode_uint+0x6c>
		value /= radix;
    52be:	4605      	mov	r5, r0
    52c0:	460c      	mov	r4, r1
		unsigned int lsv = (unsigned int)(value % radix);
    52c2:	f04f 0800 	mov.w	r8, #0
    52c6:	4632      	mov	r2, r6
    52c8:	4643      	mov	r3, r8
    52ca:	4628      	mov	r0, r5
    52cc:	4621      	mov	r1, r4
    52ce:	f7fa ff41 	bl	154 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    52d2:	2a09      	cmp	r2, #9
    52d4:	d8df      	bhi.n	5296 <encode_uint+0x1c>
    52d6:	b2d2      	uxtb	r2, r2
    52d8:	3230      	adds	r2, #48	; 0x30
    52da:	b2d2      	uxtb	r2, r2
    52dc:	e7e1      	b.n	52a2 <encode_uint+0x28>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    52de:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    52e0:	3257      	adds	r2, #87	; 0x57
    52e2:	b2d2      	uxtb	r2, r2
    52e4:	e7dd      	b.n	52a2 <encode_uint+0x28>
	if (conv->flag_hash) {
    52e6:	f89b 3000 	ldrb.w	r3, [fp]
    52ea:	f013 0f20 	tst.w	r3, #32
    52ee:	d003      	beq.n	52f8 <encode_uint+0x7e>
		if (radix == 8) {
    52f0:	2e08      	cmp	r6, #8
    52f2:	d004      	beq.n	52fe <encode_uint+0x84>
		} else if (radix == 16) {
    52f4:	2e10      	cmp	r6, #16
    52f6:	d009      	beq.n	530c <encode_uint+0x92>
}
    52f8:	4638      	mov	r0, r7
    52fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
    52fe:	f89b 3002 	ldrb.w	r3, [fp, #2]
    5302:	f043 0308 	orr.w	r3, r3, #8
    5306:	f88b 3002 	strb.w	r3, [fp, #2]
    530a:	e7f5      	b.n	52f8 <encode_uint+0x7e>
			conv->altform_0c = true;
    530c:	f89b 3002 	ldrb.w	r3, [fp, #2]
    5310:	f043 0310 	orr.w	r3, r3, #16
    5314:	f88b 3002 	strb.w	r3, [fp, #2]
    5318:	e7ee      	b.n	52f8 <encode_uint+0x7e>

0000531a <store_count>:
	switch ((enum length_mod_enum)conv->length_mod) {
    531a:	7843      	ldrb	r3, [r0, #1]
    531c:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    5320:	2b07      	cmp	r3, #7
    5322:	d818      	bhi.n	5356 <store_count+0x3c>
    5324:	e8df f003 	tbb	[pc, r3]
    5328:	0a080604 	.word	0x0a080604
    532c:	1614100c 	.word	0x1614100c
		*(int *)dp = count;
    5330:	600a      	str	r2, [r1, #0]
		break;
    5332:	4770      	bx	lr
		*(signed char *)dp = (signed char)count;
    5334:	700a      	strb	r2, [r1, #0]
		break;
    5336:	4770      	bx	lr
		*(short *)dp = (short)count;
    5338:	800a      	strh	r2, [r1, #0]
		break;
    533a:	4770      	bx	lr
		*(long *)dp = (long)count;
    533c:	600a      	str	r2, [r1, #0]
		break;
    533e:	4770      	bx	lr
		*(long long *)dp = (long long)count;
    5340:	17d3      	asrs	r3, r2, #31
    5342:	600a      	str	r2, [r1, #0]
    5344:	604b      	str	r3, [r1, #4]
		break;
    5346:	4770      	bx	lr
		*(intmax_t *)dp = (intmax_t)count;
    5348:	17d3      	asrs	r3, r2, #31
    534a:	600a      	str	r2, [r1, #0]
    534c:	604b      	str	r3, [r1, #4]
		break;
    534e:	4770      	bx	lr
		*(size_t *)dp = (size_t)count;
    5350:	600a      	str	r2, [r1, #0]
		break;
    5352:	4770      	bx	lr
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    5354:	600a      	str	r2, [r1, #0]
}
    5356:	4770      	bx	lr

00005358 <outs>:
{
    5358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    535c:	4607      	mov	r7, r0
    535e:	460e      	mov	r6, r1
    5360:	4614      	mov	r4, r2
    5362:	4698      	mov	r8, r3
	size_t count = 0;
    5364:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    5366:	e006      	b.n	5376 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
    5368:	4631      	mov	r1, r6
    536a:	f814 0b01 	ldrb.w	r0, [r4], #1
    536e:	47b8      	blx	r7
		if (rc < 0) {
    5370:	2800      	cmp	r0, #0
    5372:	db09      	blt.n	5388 <outs+0x30>
		++count;
    5374:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    5376:	4544      	cmp	r4, r8
    5378:	d3f6      	bcc.n	5368 <outs+0x10>
    537a:	f1b8 0f00 	cmp.w	r8, #0
    537e:	d102      	bne.n	5386 <outs+0x2e>
    5380:	7823      	ldrb	r3, [r4, #0]
    5382:	2b00      	cmp	r3, #0
    5384:	d1f0      	bne.n	5368 <outs+0x10>
	return (int)count;
    5386:	4628      	mov	r0, r5
}
    5388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000538c <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    538c:	4770      	bx	lr

0000538e <arch_busy_wait>:

void arch_busy_wait(uint32_t time_us)
{
    538e:	b508      	push	{r3, lr}
	nrfx_coredep_delay_us(time_us);
    5390:	f7fb fca0 	bl	cd4 <nrfx_coredep_delay_us>
}
    5394:	bd08      	pop	{r3, pc}

00005396 <nrf_regulators_system_off>:
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
    5396:	2301      	movs	r3, #1
    5398:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    539c:	f3bf 8f4f 	dsb	sy
        __WFE();
    53a0:	bf20      	wfe
    while (true)
    53a2:	e7fd      	b.n	53a0 <nrf_regulators_system_off+0xa>

000053a4 <pm_state_exit_post_ops>:
    53a4:	2300      	movs	r3, #0
    53a6:	f383 8811 	msr	BASEPRI, r3
    53aa:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    53ae:	4770      	bx	lr

000053b0 <atomic_test_and_clear_bit>:
 * @param bit Bit number (starting from 0).
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
    53b0:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
    53b2:	f001 021f 	and.w	r2, r1, #31
    53b6:	2301      	movs	r3, #1
    53b8:	4093      	lsls	r3, r2
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    53ba:	0949      	lsrs	r1, r1, #5
    53bc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    53c0:	43d9      	mvns	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    53c2:	e8d0 2fef 	ldaex	r2, [r0]
    53c6:	ea02 0c01 	and.w	ip, r2, r1
    53ca:	e8c0 cfee 	stlex	lr, ip, [r0]
    53ce:	f1be 0f00 	cmp.w	lr, #0
    53d2:	d1f6      	bne.n	53c2 <atomic_test_and_clear_bit+0x12>

	return (old & mask) != 0;
    53d4:	4213      	tst	r3, r2
}
    53d6:	bf14      	ite	ne
    53d8:	2001      	movne	r0, #1
    53da:	2000      	moveq	r0, #0
    53dc:	f85d fb04 	ldr.w	pc, [sp], #4

000053e0 <atomic_set_bit>:
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    53e0:	f001 021f 	and.w	r2, r1, #31
    53e4:	2301      	movs	r3, #1
    53e6:	4093      	lsls	r3, r2

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    53e8:	0949      	lsrs	r1, r1, #5
    53ea:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    53ee:	e8d0 2fef 	ldaex	r2, [r0]
    53f2:	431a      	orrs	r2, r3
    53f4:	e8c0 2fe1 	stlex	r1, r2, [r0]
    53f8:	2900      	cmp	r1, #0
    53fa:	d1f8      	bne.n	53ee <atomic_set_bit+0xe>
}
    53fc:	4770      	bx	lr

000053fe <pm_policy_state_lock_is_active>:
			return (atomic_get(&substate_lock_t[i].lock) != 0);
		}
	}

	return false;
}
    53fe:	2000      	movs	r0, #0
    5400:	4770      	bx	lr

00005402 <abort_function>:
{
    5402:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    5404:	2000      	movs	r0, #0
    5406:	f7fb fc51 	bl	cac <sys_reboot>

0000540a <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    540a:	b508      	push	{r3, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    540c:	f001 f82b 	bl	6466 <z_fatal_error>
}
    5410:	bd08      	pop	{r3, pc}

00005412 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    5412:	b508      	push	{r3, lr}
    5414:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    5416:	6800      	ldr	r0, [r0, #0]
    5418:	f7ff fff7 	bl	540a <z_arm_fatal_error>
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
    541c:	bd08      	pop	{r3, pc}

0000541e <arch_irq_enable>:
{
    541e:	b508      	push	{r3, lr}
	NVIC_EnableIRQ((IRQn_Type)irq);
    5420:	b240      	sxtb	r0, r0
    5422:	f7fb ff2b 	bl	127c <__NVIC_EnableIRQ>
}
    5426:	bd08      	pop	{r3, pc}

00005428 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    5428:	b508      	push	{r3, lr}
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    542a:	3101      	adds	r1, #1
    542c:	b240      	sxtb	r0, r0
    542e:	f7fb ff33 	bl	1298 <__NVIC_SetPriority>
}
    5432:	bd08      	pop	{r3, pc}

00005434 <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
    5434:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    5436:	2100      	movs	r1, #0
    5438:	2001      	movs	r0, #1
    543a:	f7ff ffe6 	bl	540a <z_arm_fatal_error>
}
    543e:	bd08      	pop	{r3, pc}

00005440 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    5440:	b508      	push	{r3, lr}
	handler();
    5442:	f7fb ff4b 	bl	12dc <z_SysNmiOnReset>
	z_arm_int_exit();
    5446:	f7fc f81b 	bl	1480 <z_arm_exc_exit>
}
    544a:	bd08      	pop	{r3, pc}

0000544c <configure_builtin_stack_guard>:
	uint32_t guard_start = thread->stack_info.start;
    544c:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    5450:	f383 880b 	msr	PSPLIM, r3
}
    5454:	4770      	bx	lr

00005456 <memory_fault_recoverable>:
}
    5456:	2000      	movs	r0, #0
    5458:	4770      	bx	lr

0000545a <debug_monitor>:
	*recoverable = false;
    545a:	2300      	movs	r3, #0
    545c:	700b      	strb	r3, [r1, #0]
}
    545e:	4770      	bx	lr

00005460 <fault_handle>:
{
    5460:	b508      	push	{r3, lr}
	*recoverable = false;
    5462:	2300      	movs	r3, #0
    5464:	7013      	strb	r3, [r2, #0]
	switch (fault) {
    5466:	1ecb      	subs	r3, r1, #3
    5468:	2b09      	cmp	r3, #9
    546a:	d81a      	bhi.n	54a2 <fault_handle+0x42>
    546c:	e8df f003 	tbb	[pc, r3]
    5470:	110d0905 	.word	0x110d0905
    5474:	19191919 	.word	0x19191919
    5478:	1419      	.short	0x1419
		reason = hard_fault(esf, recoverable);
    547a:	4611      	mov	r1, r2
    547c:	f7fc f8a4 	bl	15c8 <hard_fault>
		break;
    5480:	e010      	b.n	54a4 <fault_handle+0x44>
		reason = mem_manage_fault(esf, 0, recoverable);
    5482:	2100      	movs	r1, #0
    5484:	f7fc f80a 	bl	149c <mem_manage_fault>
		break;
    5488:	e00c      	b.n	54a4 <fault_handle+0x44>
		reason = bus_fault(esf, 0, recoverable);
    548a:	2100      	movs	r1, #0
    548c:	f7fc f83c 	bl	1508 <bus_fault>
		break;
    5490:	e008      	b.n	54a4 <fault_handle+0x44>
		reason = usage_fault(esf);
    5492:	f7fc f863 	bl	155c <usage_fault>
		break;
    5496:	e005      	b.n	54a4 <fault_handle+0x44>
		debug_monitor(esf, recoverable);
    5498:	4611      	mov	r1, r2
    549a:	f7ff ffde 	bl	545a <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    549e:	2000      	movs	r0, #0
		break;
    54a0:	e000      	b.n	54a4 <fault_handle+0x44>
	switch (fault) {
    54a2:	2000      	movs	r0, #0
}
    54a4:	bd08      	pop	{r3, pc}

000054a6 <sys_arch_reboot>:
{
    54a6:	b508      	push	{r3, lr}
	NVIC_SystemReset();
    54a8:	f7fc f978 	bl	179c <__NVIC_SystemReset>

000054ac <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    54ac:	e840 f000 	tt	r0, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
    54b0:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    54b4:	d001      	beq.n	54ba <arm_cmse_mpu_region_get+0xe>
		return addr_info.flags.mpu_region;
    54b6:	b2c0      	uxtb	r0, r0
    54b8:	4770      	bx	lr
	}

	return -EINVAL;
    54ba:	f06f 0015 	mvn.w	r0, #21
}
    54be:	4770      	bx	lr

000054c0 <region_init>:
{
    54c0:	b508      	push	{r3, lr}
		(region_conf->base & MPU_RBAR_BASE_Msk)
    54c2:	680b      	ldr	r3, [r1, #0]
    54c4:	f023 0c1f 	bic.w	ip, r3, #31
		| (region_conf->attr.rbar &
    54c8:	7a0b      	ldrb	r3, [r1, #8]
    54ca:	f003 0e1f 	and.w	lr, r3, #31
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    54ce:	68ca      	ldr	r2, [r1, #12]
    54d0:	f022 021f 	bic.w	r2, r2, #31
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    54d4:	095b      	lsrs	r3, r3, #5
    54d6:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
	mpu_set_region(
    54da:	f042 0201 	orr.w	r2, r2, #1
    54de:	ea4c 010e 	orr.w	r1, ip, lr
    54e2:	f7fc f9ef 	bl	18c4 <mpu_set_region>
}
    54e6:	bd08      	pop	{r3, pc}

000054e8 <mpu_partition_is_valid>:
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
    54e8:	6843      	ldr	r3, [r0, #4]
		&&
    54ea:	2b1f      	cmp	r3, #31
    54ec:	d908      	bls.n	5500 <mpu_partition_is_valid+0x18>
		&&
    54ee:	f013 0f1f 	tst.w	r3, #31
    54f2:	d107      	bne.n	5504 <mpu_partition_is_valid+0x1c>
		((part->start &
    54f4:	6803      	ldr	r3, [r0, #0]
		&&
    54f6:	f013 0f1f 	tst.w	r3, #31
    54fa:	d005      	beq.n	5508 <mpu_partition_is_valid+0x20>
    54fc:	2000      	movs	r0, #0
    54fe:	4770      	bx	lr
    5500:	2000      	movs	r0, #0
    5502:	4770      	bx	lr
    5504:	2000      	movs	r0, #0
    5506:	4770      	bx	lr
    5508:	2001      	movs	r0, #1
}
    550a:	4770      	bx	lr

0000550c <region_allocate_and_init>:
	if (index > (get_num_regions() - 1U)) {
    550c:	2807      	cmp	r0, #7
    550e:	d805      	bhi.n	551c <region_allocate_and_init+0x10>
{
    5510:	b510      	push	{r4, lr}
    5512:	4604      	mov	r4, r0
	region_init(index, region_conf);
    5514:	f7ff ffd4 	bl	54c0 <region_init>
	return index;
    5518:	4620      	mov	r0, r4
}
    551a:	bd10      	pop	{r4, pc}
		return -EINVAL;
    551c:	f06f 0015 	mvn.w	r0, #21
}
    5520:	4770      	bx	lr

00005522 <mpu_configure_region>:
{
    5522:	b510      	push	{r4, lr}
    5524:	b084      	sub	sp, #16
	region_conf.base = new_region->start;
    5526:	680b      	ldr	r3, [r1, #0]
    5528:	9300      	str	r3, [sp, #0]
		&new_region->attr, new_region->start, new_region->size);
    552a:	684c      	ldr	r4, [r1, #4]
	p_attr->rbar = attr->rbar &
    552c:	f8b1 c008 	ldrh.w	ip, [r1, #8]
    5530:	f89d 2008 	ldrb.w	r2, [sp, #8]
    5534:	f36c 0204 	bfi	r2, ip, #0, #5
    5538:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->mair_idx = attr->mair_idx;
    553c:	8949      	ldrh	r1, [r1, #10]
    553e:	b2d2      	uxtb	r2, r2
    5540:	f361 1247 	bfi	r2, r1, #5, #3
    5544:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    5548:	f023 031f 	bic.w	r3, r3, #31
    554c:	4423      	add	r3, r4
    554e:	3b01      	subs	r3, #1
    5550:	f023 031f 	bic.w	r3, r3, #31
    5554:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
    5556:	4669      	mov	r1, sp
    5558:	f7ff ffd8 	bl	550c <region_allocate_and_init>
}
    555c:	b004      	add	sp, #16
    555e:	bd10      	pop	{r4, pc}

00005560 <get_region_index>:
{
    5560:	b570      	push	{r4, r5, r6, lr}
    5562:	4604      	mov	r4, r0
    5564:	460e      	mov	r6, r1
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    5566:	f7ff ffa1 	bl	54ac <arm_cmse_mpu_region_get>
    556a:	4605      	mov	r5, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    556c:	4434      	add	r4, r6
    556e:	1e60      	subs	r0, r4, #1
    5570:	f7ff ff9c 	bl	54ac <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    5574:	4285      	cmp	r5, r0
    5576:	d101      	bne.n	557c <get_region_index+0x1c>
}
    5578:	4628      	mov	r0, r5
    557a:	bd70      	pop	{r4, r5, r6, pc}
	return -EINVAL;
    557c:	f06f 0515 	mvn.w	r5, #21
    5580:	e7fa      	b.n	5578 <get_region_index+0x18>

00005582 <arm_core_mpu_configure_static_mpu_regions>:
{
    5582:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    5584:	f7fc fa8c 	bl	1aa0 <mpu_configure_static_mpu_regions>
}
    5588:	bd08      	pop	{r3, pc}

0000558a <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    558a:	b508      	push	{r3, lr}
	if (mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    558c:	f7fc fa92 	bl	1ab4 <mpu_mark_areas_for_dynamic_regions>
}
    5590:	bd08      	pop	{r3, pc}

00005592 <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    5592:	4603      	mov	r3, r0
    5594:	b1a2      	cbz	r2, 55c0 <strncpy+0x2e>
{
    5596:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
    5598:	780c      	ldrb	r4, [r1, #0]
    559a:	b12c      	cbz	r4, 55a8 <strncpy+0x16>
		*d = *s;
    559c:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
    55a0:	3101      	adds	r1, #1
		d++;
		n--;
    55a2:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
    55a4:	2a00      	cmp	r2, #0
    55a6:	d1f7      	bne.n	5598 <strncpy+0x6>
	}

	while (n > 0) {
    55a8:	b122      	cbz	r2, 55b4 <strncpy+0x22>
		*d = '\0';
    55aa:	2100      	movs	r1, #0
    55ac:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
    55b0:	3a01      	subs	r2, #1
    55b2:	e7f9      	b.n	55a8 <strncpy+0x16>
	}

	return dest;
}
    55b4:	bc10      	pop	{r4}
    55b6:	4770      	bx	lr
		*d = '\0';
    55b8:	2100      	movs	r1, #0
    55ba:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    55be:	3a01      	subs	r2, #1
	while (n > 0) {
    55c0:	2a00      	cmp	r2, #0
    55c2:	d1f9      	bne.n	55b8 <strncpy+0x26>
    55c4:	4770      	bx	lr

000055c6 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    55c6:	4603      	mov	r3, r0
	size_t n = 0;
    55c8:	2000      	movs	r0, #0

	while (*s != '\0') {
    55ca:	e001      	b.n	55d0 <strlen+0xa>
		s++;
    55cc:	3301      	adds	r3, #1
		n++;
    55ce:	3001      	adds	r0, #1
	while (*s != '\0') {
    55d0:	781a      	ldrb	r2, [r3, #0]
    55d2:	2a00      	cmp	r2, #0
    55d4:	d1fa      	bne.n	55cc <strlen+0x6>
	}

	return n;
}
    55d6:	4770      	bx	lr

000055d8 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    55d8:	4603      	mov	r3, r0
	size_t n = 0;
    55da:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    55dc:	e001      	b.n	55e2 <strnlen+0xa>
		s++;
    55de:	3301      	adds	r3, #1
		n++;
    55e0:	3001      	adds	r0, #1
	while (*s != '\0' && n < maxlen) {
    55e2:	781a      	ldrb	r2, [r3, #0]
    55e4:	b10a      	cbz	r2, 55ea <strnlen+0x12>
    55e6:	4288      	cmp	r0, r1
    55e8:	d3f9      	bcc.n	55de <strnlen+0x6>
	}

	return n;
}
    55ea:	4770      	bx	lr

000055ec <memcpy>:
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    55ec:	ea80 0301 	eor.w	r3, r0, r1
    55f0:	f013 0f03 	tst.w	r3, #3
    55f4:	d001      	beq.n	55fa <memcpy+0xe>
	unsigned char *d_byte = (unsigned char *)d;
    55f6:	4603      	mov	r3, r0
    55f8:	e023      	b.n	5642 <memcpy+0x56>
    55fa:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
    55fc:	f013 0f03 	tst.w	r3, #3
    5600:	d00f      	beq.n	5622 <memcpy+0x36>
			if (n == 0) {
    5602:	b30a      	cbz	r2, 5648 <memcpy+0x5c>
				return d;
			}
			*(d_byte++) = *(s_byte++);
    5604:	f811 cb01 	ldrb.w	ip, [r1], #1
    5608:	f803 cb01 	strb.w	ip, [r3], #1
			n--;
    560c:	3a01      	subs	r2, #1
    560e:	e7f5      	b.n	55fc <memcpy+0x10>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
    5610:	f811 cb01 	ldrb.w	ip, [r1], #1
    5614:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    5618:	3a01      	subs	r2, #1
	while (n > 0) {
    561a:	2a00      	cmp	r2, #0
    561c:	d1f8      	bne.n	5610 <memcpy+0x24>
	}

	return d;
}
    561e:	bc10      	pop	{r4}
    5620:	4770      	bx	lr
		while (n >= sizeof(mem_word_t)) {
    5622:	2a03      	cmp	r2, #3
    5624:	d90d      	bls.n	5642 <memcpy+0x56>
{
    5626:	b410      	push	{r4}
			*(d_word++) = *(s_word++);
    5628:	f851 4b04 	ldr.w	r4, [r1], #4
    562c:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
    5630:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
    5632:	2a03      	cmp	r2, #3
    5634:	d8f8      	bhi.n	5628 <memcpy+0x3c>
    5636:	e7f0      	b.n	561a <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
    5638:	f811 cb01 	ldrb.w	ip, [r1], #1
    563c:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    5640:	3a01      	subs	r2, #1
	while (n > 0) {
    5642:	2a00      	cmp	r2, #0
    5644:	d1f8      	bne.n	5638 <memcpy+0x4c>
    5646:	4770      	bx	lr
}
    5648:	4770      	bx	lr

0000564a <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    564a:	fa5f fc81 	uxtb.w	ip, r1
	unsigned char *d_byte = (unsigned char *)buf;
    564e:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    5650:	e002      	b.n	5658 <memset+0xe>
		if (n == 0) {
			return buf;
		}
		*(d_byte++) = c_byte;
    5652:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    5656:	3a01      	subs	r2, #1
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    5658:	f013 0f03 	tst.w	r3, #3
    565c:	d002      	beq.n	5664 <memset+0x1a>
		if (n == 0) {
    565e:	2a00      	cmp	r2, #0
    5660:	d1f7      	bne.n	5652 <memset+0x8>
    5662:	e00f      	b.n	5684 <memset+0x3a>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
    5664:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
    5666:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
    566a:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    566e:	2a03      	cmp	r2, #3
    5670:	d906      	bls.n	5680 <memset+0x36>
		*(d_word++) = c_word;
    5672:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
    5676:	3a04      	subs	r2, #4
    5678:	e7f9      	b.n	566e <memset+0x24>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
    567a:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    567e:	3a01      	subs	r2, #1
	while (n > 0) {
    5680:	2a00      	cmp	r2, #0
    5682:	d1fa      	bne.n	567a <memset+0x30>
	}

	return buf;
}
    5684:	4770      	bx	lr

00005686 <_stdout_hook_default>:
}
    5686:	f04f 30ff 	mov.w	r0, #4294967295
    568a:	4770      	bx	lr

0000568c <nrf_clock_is_running>:
    switch (domain)
    568c:	2903      	cmp	r1, #3
    568e:	d82f      	bhi.n	56f0 <nrf_clock_is_running+0x64>
    5690:	e8df f001 	tbb	[pc, r1]
    5694:	291c0f02 	.word	0x291c0f02
            if (p_clk_src != NULL)
    5698:	b122      	cbz	r2, 56a4 <nrf_clock_is_running+0x18>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    569a:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
    569e:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    56a2:	7013      	strb	r3, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    56a4:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
    56a8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    56ac:	d122      	bne.n	56f4 <nrf_clock_is_running+0x68>
    return false;
    56ae:	2000      	movs	r0, #0
    56b0:	4770      	bx	lr
            if (p_clk_src != NULL)
    56b2:	b122      	cbz	r2, 56be <nrf_clock_is_running+0x32>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    56b4:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
    56b8:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    56bc:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    56be:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
    56c2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    56c6:	d117      	bne.n	56f8 <nrf_clock_is_running+0x6c>
    return false;
    56c8:	2000      	movs	r0, #0
    56ca:	4770      	bx	lr
            if (p_clk_src != NULL)
    56cc:	b122      	cbz	r2, 56d8 <nrf_clock_is_running+0x4c>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
    56ce:	f8d0 345c 	ldr.w	r3, [r0, #1116]	; 0x45c
    56d2:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    56d6:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    56d8:	f8d0 345c 	ldr.w	r3, [r0, #1116]	; 0x45c
    56dc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    56e0:	d10c      	bne.n	56fc <nrf_clock_is_running+0x70>
    return false;
    56e2:	2000      	movs	r0, #0
    56e4:	4770      	bx	lr
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
    56e6:	f8d0 0454 	ldr.w	r0, [r0, #1108]	; 0x454
    56ea:	f3c0 4000 	ubfx	r0, r0, #16, #1
    56ee:	4770      	bx	lr
    switch (domain)
    56f0:	2000      	movs	r0, #0
    56f2:	4770      	bx	lr
                return true;
    56f4:	2001      	movs	r0, #1
    56f6:	4770      	bx	lr
                return true;
    56f8:	2001      	movs	r0, #1
    56fa:	4770      	bx	lr
                return true;
    56fc:	2001      	movs	r0, #1
}
    56fe:	4770      	bx	lr

00005700 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
    5700:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    5702:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    5706:	0089      	lsls	r1, r1, #2
    5708:	3170      	adds	r1, #112	; 0x70
}
    570a:	4408      	add	r0, r1
    570c:	4770      	bx	lr

0000570e <get_sub_config>:
	const struct nrf_clock_control_config *config =
    570e:	6840      	ldr	r0, [r0, #4]
}
    5710:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    5714:	4770      	bx	lr

00005716 <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
    5716:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
    5718:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
    571c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    5720:	4770      	bx	lr

00005722 <get_status>:
{
    5722:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
    5724:	b2c9      	uxtb	r1, r1
    5726:	f7ff ffeb 	bl	5700 <get_sub_data>
    572a:	6880      	ldr	r0, [r0, #8]
}
    572c:	f000 0007 	and.w	r0, r0, #7
    5730:	bd08      	pop	{r3, pc}

00005732 <set_off_state>:
	__asm__ volatile(
    5732:	f04f 0320 	mov.w	r3, #32
    5736:	f3ef 8211 	mrs	r2, BASEPRI
    573a:	f383 8812 	msr	BASEPRI_MAX, r3
    573e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    5742:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    5744:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    5748:	d001      	beq.n	574e <set_off_state+0x1c>
    574a:	428b      	cmp	r3, r1
    574c:	d107      	bne.n	575e <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    574e:	2301      	movs	r3, #1
    5750:	6003      	str	r3, [r0, #0]
	int err = 0;
    5752:	2000      	movs	r0, #0
	__asm__ volatile(
    5754:	f382 8811 	msr	BASEPRI, r2
    5758:	f3bf 8f6f 	isb	sy
}
    575c:	4770      	bx	lr
		err = -EPERM;
    575e:	f04f 30ff 	mov.w	r0, #4294967295
    5762:	e7f7      	b.n	5754 <set_off_state+0x22>

00005764 <set_starting_state>:
	__asm__ volatile(
    5764:	f04f 0320 	mov.w	r3, #32
    5768:	f3ef 8211 	mrs	r2, BASEPRI
    576c:	f383 8812 	msr	BASEPRI_MAX, r3
    5770:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    5774:	6803      	ldr	r3, [r0, #0]
    5776:	f003 0cc0 	and.w	ip, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    577a:	f003 0307 	and.w	r3, r3, #7
    577e:	2b01      	cmp	r3, #1
    5780:	d008      	beq.n	5794 <set_starting_state+0x30>
	} else if (current_ctx != ctx) {
    5782:	458c      	cmp	ip, r1
    5784:	d009      	beq.n	579a <set_starting_state+0x36>
		err = -EPERM;
    5786:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
    578a:	f382 8811 	msr	BASEPRI, r2
    578e:	f3bf 8f6f 	isb	sy
}
    5792:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    5794:	6001      	str	r1, [r0, #0]
	int err = 0;
    5796:	2000      	movs	r0, #0
    5798:	e7f7      	b.n	578a <set_starting_state+0x26>
		err = -EALREADY;
    579a:	f06f 0077 	mvn.w	r0, #119	; 0x77
    579e:	e7f4      	b.n	578a <set_starting_state+0x26>

000057a0 <set_on_state>:
	__asm__ volatile(
    57a0:	f04f 0320 	mov.w	r3, #32
    57a4:	f3ef 8211 	mrs	r2, BASEPRI
    57a8:	f383 8812 	msr	BASEPRI_MAX, r3
    57ac:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    57b0:	6803      	ldr	r3, [r0, #0]
    57b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    57b6:	f043 0302 	orr.w	r3, r3, #2
    57ba:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    57bc:	f382 8811 	msr	BASEPRI, r2
    57c0:	f3bf 8f6f 	isb	sy
}
    57c4:	4770      	bx	lr

000057c6 <clkstarted_handle>:
{
    57c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    57c8:	4606      	mov	r6, r0
    57ca:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    57cc:	f7ff ff98 	bl	5700 <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
    57d0:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
    57d2:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
    57d4:	2300      	movs	r3, #0
    57d6:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
    57da:	f7ff ffe1 	bl	57a0 <set_on_state>
	if (callback) {
    57de:	b11d      	cbz	r5, 57e8 <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
    57e0:	463a      	mov	r2, r7
    57e2:	4621      	mov	r1, r4
    57e4:	4630      	mov	r0, r6
    57e6:	47a8      	blx	r5
}
    57e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000057ea <stop>:
{
    57ea:	b570      	push	{r4, r5, r6, lr}
    57ec:	4606      	mov	r6, r0
    57ee:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    57f0:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    57f2:	4621      	mov	r1, r4
    57f4:	f7ff ff84 	bl	5700 <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
    57f8:	4629      	mov	r1, r5
    57fa:	3008      	adds	r0, #8
    57fc:	f7ff ff99 	bl	5732 <set_off_state>
	if (err < 0) {
    5800:	2800      	cmp	r0, #0
    5802:	db06      	blt.n	5812 <stop+0x28>
	get_sub_config(dev, type)->stop();
    5804:	4621      	mov	r1, r4
    5806:	4630      	mov	r0, r6
    5808:	f7ff ff81 	bl	570e <get_sub_config>
    580c:	6843      	ldr	r3, [r0, #4]
    580e:	4798      	blx	r3
	return 0;
    5810:	2000      	movs	r0, #0
}
    5812:	bd70      	pop	{r4, r5, r6, pc}

00005814 <api_stop>:
{
    5814:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
    5816:	2280      	movs	r2, #128	; 0x80
    5818:	f7ff ffe7 	bl	57ea <stop>
}
    581c:	bd08      	pop	{r3, pc}

0000581e <async_start>:
{
    581e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5822:	4606      	mov	r6, r0
    5824:	4690      	mov	r8, r2
    5826:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    5828:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    582a:	4629      	mov	r1, r5
    582c:	f7ff ff68 	bl	5700 <get_sub_data>
    5830:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
    5832:	9906      	ldr	r1, [sp, #24]
    5834:	3008      	adds	r0, #8
    5836:	f7ff ff95 	bl	5764 <set_starting_state>
	if (err < 0) {
    583a:	2800      	cmp	r0, #0
    583c:	db09      	blt.n	5852 <async_start+0x34>
	subdata->cb = cb;
    583e:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
    5842:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
    5844:	4629      	mov	r1, r5
    5846:	4630      	mov	r0, r6
    5848:	f7ff ff61 	bl	570e <get_sub_config>
    584c:	6803      	ldr	r3, [r0, #0]
    584e:	4798      	blx	r3
	return 0;
    5850:	2000      	movs	r0, #0
}
    5852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005856 <api_start>:
{
    5856:	b510      	push	{r4, lr}
    5858:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
    585a:	2480      	movs	r4, #128	; 0x80
    585c:	9400      	str	r4, [sp, #0]
    585e:	f7ff ffde 	bl	581e <async_start>
}
    5862:	b002      	add	sp, #8
    5864:	bd10      	pop	{r4, pc}

00005866 <onoff_started_callback>:
{
    5866:	b510      	push	{r4, lr}
    5868:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
    586a:	b2c9      	uxtb	r1, r1
    586c:	f7ff ff53 	bl	5716 <get_onoff_manager>
	notify(mgr, 0);
    5870:	2100      	movs	r1, #0
    5872:	47a0      	blx	r4
}
    5874:	bd10      	pop	{r4, pc}

00005876 <hfclk_start>:
{
    5876:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    5878:	2001      	movs	r0, #1
    587a:	f000 fcf3 	bl	6264 <nrfx_clock_start>
}
    587e:	bd08      	pop	{r3, pc}

00005880 <hfclkaudio_start>:
{
    5880:	b508      	push	{r3, lr}
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    5882:	2003      	movs	r0, #3
    5884:	f000 fcee 	bl	6264 <nrfx_clock_start>
}
    5888:	bd08      	pop	{r3, pc}

0000588a <hfclk192m_start>:
{
    588a:	b508      	push	{r3, lr}
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
    588c:	2002      	movs	r0, #2
    588e:	f000 fce9 	bl	6264 <nrfx_clock_start>
}
    5892:	bd08      	pop	{r3, pc}

00005894 <lfclk_start>:
{
    5894:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    5896:	2000      	movs	r0, #0
    5898:	f000 fce4 	bl	6264 <nrfx_clock_start>
}
    589c:	bd08      	pop	{r3, pc}

0000589e <hfclk_stop>:
{
    589e:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    58a0:	2001      	movs	r0, #1
    58a2:	f000 fd54 	bl	634e <nrfx_clock_stop>
}
    58a6:	bd08      	pop	{r3, pc}

000058a8 <hfclkaudio_stop>:
{
    58a8:	b508      	push	{r3, lr}
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    58aa:	2003      	movs	r0, #3
    58ac:	f000 fd4f 	bl	634e <nrfx_clock_stop>
}
    58b0:	bd08      	pop	{r3, pc}

000058b2 <hfclk192m_stop>:
{
    58b2:	b508      	push	{r3, lr}
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
    58b4:	2002      	movs	r0, #2
    58b6:	f000 fd4a 	bl	634e <nrfx_clock_stop>
}
    58ba:	bd08      	pop	{r3, pc}

000058bc <lfclk_stop>:
{
    58bc:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    58be:	2000      	movs	r0, #0
    58c0:	f000 fd45 	bl	634e <nrfx_clock_stop>
}
    58c4:	bd08      	pop	{r3, pc}

000058c6 <k_msleep>:
{
    58c6:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
    58c8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    58cc:	17c1      	asrs	r1, r0, #31
    58ce:	03c9      	lsls	r1, r1, #15
    58d0:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    58d4:	03c0      	lsls	r0, r0, #15
    58d6:	f240 33e7 	movw	r3, #999	; 0x3e7
    58da:	18c0      	adds	r0, r0, r3
    58dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    58e0:	f04f 0300 	mov.w	r3, #0
    58e4:	f141 0100 	adc.w	r1, r1, #0
    58e8:	f7fa fc34 	bl	154 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    58ec:	f7fe fda6 	bl	443c <z_impl_k_sleep>
}
    58f0:	bd08      	pop	{r3, pc}

000058f2 <blocking_start_callback>:
{
    58f2:	b508      	push	{r3, lr}
    58f4:	4610      	mov	r0, r2
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    58f6:	f7fe f9d1 	bl	3c9c <z_impl_k_sem_give>
}
    58fa:	bd08      	pop	{r3, pc}

000058fc <sys_slist_remove>:
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    58fc:	460b      	mov	r3, r1
    58fe:	b139      	cbz	r1, 5910 <sys_slist_remove+0x14>
	return node->next;
    5900:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
    5902:	6019      	str	r1, [r3, #0]
	return list->tail;
    5904:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
    5906:	428a      	cmp	r2, r1
    5908:	d009      	beq.n	591e <sys_slist_remove+0x22>
	parent->next = child;
    590a:	2300      	movs	r3, #0
    590c:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    590e:	4770      	bx	lr
	return node->next;
    5910:	6813      	ldr	r3, [r2, #0]
	list->head = node;
    5912:	6003      	str	r3, [r0, #0]
	return list->tail;
    5914:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
    5916:	428a      	cmp	r2, r1
    5918:	d1f7      	bne.n	590a <sys_slist_remove+0xe>
	list->tail = node;
    591a:	6043      	str	r3, [r0, #4]
}
    591c:	e7f5      	b.n	590a <sys_slist_remove+0xe>
	list->tail = node;
    591e:	6043      	str	r3, [r0, #4]
}
    5920:	e7f3      	b.n	590a <sys_slist_remove+0xe>

00005922 <sys_slist_find_and_remove>:
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5922:	b508      	push	{r3, lr}
    5924:	460a      	mov	r2, r1
	return list->head;
    5926:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5928:	2100      	movs	r1, #0
    592a:	e001      	b.n	5930 <sys_slist_find_and_remove+0xe>
    592c:	4619      	mov	r1, r3
    592e:	681b      	ldr	r3, [r3, #0]
    5930:	b12b      	cbz	r3, 593e <sys_slist_find_and_remove+0x1c>
    5932:	4293      	cmp	r3, r2
    5934:	d1fa      	bne.n	592c <sys_slist_find_and_remove+0xa>
    5936:	f7ff ffe1 	bl	58fc <sys_slist_remove>
    593a:	2001      	movs	r0, #1
    593c:	e000      	b.n	5940 <sys_slist_find_and_remove+0x1e>
    593e:	2000      	movs	r0, #0
    5940:	bd08      	pop	{r3, pc}

00005942 <gpio_manage_callback>:
 * @return 0 on success, negative errno otherwise.
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
    5942:	b570      	push	{r4, r5, r6, lr}
    5944:	4604      	mov	r4, r0
    5946:	460d      	mov	r5, r1
    5948:	4616      	mov	r6, r2
	return list->head;
    594a:	6803      	ldr	r3, [r0, #0]
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
    594c:	b133      	cbz	r3, 595c <gpio_manage_callback+0x1a>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
    594e:	f7ff ffe8 	bl	5922 <sys_slist_find_and_remove>
    5952:	b970      	cbnz	r0, 5972 <gpio_manage_callback+0x30>
			if (!set) {
    5954:	b91e      	cbnz	r6, 595e <gpio_manage_callback+0x1c>
				return -EINVAL;
    5956:	f06f 0015 	mvn.w	r0, #21
    595a:	e006      	b.n	596a <gpio_manage_callback+0x28>
			}
		}
	} else if (!set) {
    595c:	b132      	cbz	r2, 596c <gpio_manage_callback+0x2a>
    595e:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
    5960:	602b      	str	r3, [r5, #0]
	list->head = node;
    5962:	6025      	str	r5, [r4, #0]
	return list->tail;
    5964:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
    5966:	b143      	cbz	r3, 597a <gpio_manage_callback+0x38>

	if (set) {
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    5968:	2000      	movs	r0, #0
}
    596a:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    596c:	f06f 0015 	mvn.w	r0, #21
    5970:	e7fb      	b.n	596a <gpio_manage_callback+0x28>
	if (set) {
    5972:	2e00      	cmp	r6, #0
    5974:	d1f3      	bne.n	595e <gpio_manage_callback+0x1c>
	return 0;
    5976:	2000      	movs	r0, #0
    5978:	e7f7      	b.n	596a <gpio_manage_callback+0x28>
	list->tail = node;
    597a:	6065      	str	r5, [r4, #4]
    597c:	2000      	movs	r0, #0
}
    597e:	e7f4      	b.n	596a <gpio_manage_callback+0x28>

00005980 <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
    5980:	b570      	push	{r4, r5, r6, lr}
    5982:	460e      	mov	r6, r1
    5984:	4615      	mov	r5, r2
	return list->head;
    5986:	6801      	ldr	r1, [r0, #0]
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    5988:	b121      	cbz	r1, 5994 <gpio_fire_callbacks+0x14>
	return node->next;
    598a:	680c      	ldr	r4, [r1, #0]
    598c:	b13c      	cbz	r4, 599e <gpio_fire_callbacks+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
    598e:	b931      	cbnz	r1, 599e <gpio_fire_callbacks+0x1e>
    5990:	460c      	mov	r4, r1
    5992:	e004      	b.n	599e <gpio_fire_callbacks+0x1e>
    5994:	460c      	mov	r4, r1
    5996:	e002      	b.n	599e <gpio_fire_callbacks+0x1e>
    5998:	4623      	mov	r3, r4
    599a:	4621      	mov	r1, r4
    599c:	461c      	mov	r4, r3
    599e:	b171      	cbz	r1, 59be <gpio_fire_callbacks+0x3e>
		if (cb->pin_mask & pins) {
    59a0:	688a      	ldr	r2, [r1, #8]
    59a2:	402a      	ands	r2, r5
    59a4:	d002      	beq.n	59ac <gpio_fire_callbacks+0x2c>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    59a6:	684b      	ldr	r3, [r1, #4]
    59a8:	4630      	mov	r0, r6
    59aa:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    59ac:	2c00      	cmp	r4, #0
    59ae:	d0f3      	beq.n	5998 <gpio_fire_callbacks+0x18>
	return node->next;
    59b0:	6823      	ldr	r3, [r4, #0]
    59b2:	2b00      	cmp	r3, #0
    59b4:	d0f1      	beq.n	599a <gpio_fire_callbacks+0x1a>
Z_GENLIST_PEEK_NEXT(slist, snode)
    59b6:	2c00      	cmp	r4, #0
    59b8:	d1ef      	bne.n	599a <gpio_fire_callbacks+0x1a>
    59ba:	4623      	mov	r3, r4
    59bc:	e7ed      	b.n	599a <gpio_fire_callbacks+0x1a>
		}
	}
}
    59be:	bd70      	pop	{r4, r5, r6, pc}

000059c0 <get_drive>:
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    59c0:	f020 00f9 	bic.w	r0, r0, #249	; 0xf9
    59c4:	0580      	lsls	r0, r0, #22
    59c6:	0d80      	lsrs	r0, r0, #22
    59c8:	f5b0 7f83 	cmp.w	r0, #262	; 0x106
    59cc:	d033      	beq.n	5a36 <get_drive+0x76>
    59ce:	d816      	bhi.n	59fe <get_drive+0x3e>
    59d0:	2806      	cmp	r0, #6
    59d2:	d02c      	beq.n	5a2e <get_drive+0x6e>
    59d4:	d906      	bls.n	59e4 <get_drive+0x24>
    59d6:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    59da:	d10d      	bne.n	59f8 <get_drive+0x38>
		*drive = NRF_GPIO_PIN_H0S1;
    59dc:	2301      	movs	r3, #1
    59de:	700b      	strb	r3, [r1, #0]
	return 0;
    59e0:	2000      	movs	r0, #0
		break;
    59e2:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    59e4:	b300      	cbz	r0, 5a28 <get_drive+0x68>
    59e6:	2802      	cmp	r0, #2
    59e8:	d103      	bne.n	59f2 <get_drive+0x32>
		*drive = NRF_GPIO_PIN_D0S1;
    59ea:	2304      	movs	r3, #4
    59ec:	700b      	strb	r3, [r1, #0]
	return 0;
    59ee:	2000      	movs	r0, #0
		break;
    59f0:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    59f2:	f06f 0015 	mvn.w	r0, #21
    59f6:	4770      	bx	lr
    59f8:	f06f 0015 	mvn.w	r0, #21
    59fc:	4770      	bx	lr
    59fe:	f240 2302 	movw	r3, #514	; 0x202
    5a02:	4298      	cmp	r0, r3
    5a04:	d01b      	beq.n	5a3e <get_drive+0x7e>
    5a06:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
    5a0a:	d103      	bne.n	5a14 <get_drive+0x54>
		*drive = NRF_GPIO_PIN_H0H1;
    5a0c:	2303      	movs	r3, #3
    5a0e:	700b      	strb	r3, [r1, #0]
	return 0;
    5a10:	2000      	movs	r0, #0
		break;
    5a12:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    5a14:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    5a18:	d103      	bne.n	5a22 <get_drive+0x62>
		*drive = NRF_GPIO_PIN_S0H1;
    5a1a:	2302      	movs	r3, #2
    5a1c:	700b      	strb	r3, [r1, #0]
	return 0;
    5a1e:	2000      	movs	r0, #0
		break;
    5a20:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    5a22:	f06f 0015 	mvn.w	r0, #21
    5a26:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
    5a28:	2000      	movs	r0, #0
    5a2a:	7008      	strb	r0, [r1, #0]
		break;
    5a2c:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
    5a2e:	2306      	movs	r3, #6
    5a30:	700b      	strb	r3, [r1, #0]
	return 0;
    5a32:	2000      	movs	r0, #0
		break;
    5a34:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
    5a36:	2307      	movs	r3, #7
    5a38:	700b      	strb	r3, [r1, #0]
	return 0;
    5a3a:	2000      	movs	r0, #0
		break;
    5a3c:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_D0H1;
    5a3e:	2305      	movs	r3, #5
    5a40:	700b      	strb	r3, [r1, #0]
	return 0;
    5a42:	2000      	movs	r0, #0
}
    5a44:	4770      	bx	lr

00005a46 <get_pull>:
	if (flags & GPIO_PULL_UP) {
    5a46:	f010 0f10 	tst.w	r0, #16
    5a4a:	d104      	bne.n	5a56 <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
    5a4c:	f010 0f20 	tst.w	r0, #32
    5a50:	d103      	bne.n	5a5a <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
    5a52:	2000      	movs	r0, #0
    5a54:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
    5a56:	2003      	movs	r0, #3
    5a58:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
    5a5a:	2001      	movs	r0, #1
}
    5a5c:	4770      	bx	lr

00005a5e <gpio_nrfx_port_get_raw>:
	return port->config;
    5a5e:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5a60:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    5a62:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
    5a64:	600b      	str	r3, [r1, #0]
}
    5a66:	2000      	movs	r0, #0
    5a68:	4770      	bx	lr

00005a6a <gpio_nrfx_port_set_masked_raw>:
	return port->config;
    5a6a:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5a6c:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
    5a6e:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
    5a72:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    5a76:	6098      	str	r0, [r3, #8]
    p_reg->OUTCLR = clr_mask;
    5a78:	60d9      	str	r1, [r3, #12]
}
    5a7a:	2000      	movs	r0, #0
    5a7c:	4770      	bx	lr

00005a7e <gpio_nrfx_port_set_bits_raw>:
	return port->config;
    5a7e:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5a80:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    5a82:	6099      	str	r1, [r3, #8]
}
    5a84:	2000      	movs	r0, #0
    5a86:	4770      	bx	lr

00005a88 <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
    5a88:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5a8a:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    5a8c:	60d9      	str	r1, [r3, #12]
}
    5a8e:	2000      	movs	r0, #0
    5a90:	4770      	bx	lr

00005a92 <gpio_nrfx_port_toggle_bits>:
	return port->config;
    5a92:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5a94:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    5a96:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
    5a98:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    5a9c:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    5a9e:	6090      	str	r0, [r2, #8]
    p_reg->OUTCLR = clr_mask;
    5aa0:	60d3      	str	r3, [r2, #12]
}
    5aa2:	2000      	movs	r0, #0
    5aa4:	4770      	bx	lr

00005aa6 <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
    5aa6:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    5aaa:	d007      	beq.n	5abc <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    5aac:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
    5ab0:	d00d      	beq.n	5ace <get_trigger+0x28>
    5ab2:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    5ab6:	d008      	beq.n	5aca <get_trigger+0x24>
    5ab8:	2001      	movs	r0, #1
}
    5aba:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    5abc:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    5ac0:	d001      	beq.n	5ac6 <get_trigger+0x20>
    5ac2:	2005      	movs	r0, #5
    5ac4:	4770      	bx	lr
    5ac6:	2004      	movs	r0, #4
    5ac8:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    5aca:	2002      	movs	r0, #2
    5acc:	4770      	bx	lr
    5ace:	2003      	movs	r0, #3
    5ad0:	4770      	bx	lr

00005ad2 <gpio_nrfx_manage_callback>:
{
    5ad2:	b508      	push	{r3, lr}
	return port->data;
    5ad4:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    5ad6:	3004      	adds	r0, #4
    5ad8:	f7ff ff33 	bl	5942 <gpio_manage_callback>
}
    5adc:	bd08      	pop	{r3, pc}

00005ade <nrfx_gpio_handler>:
{
    5ade:	b510      	push	{r4, lr}
    *p_pin = pin_number & 0x1F;
    5ae0:	f000 041f 	and.w	r4, r0, #31
	const struct device *port = get_dev(port_id);
    5ae4:	0940      	lsrs	r0, r0, #5
    5ae6:	f7fc fa0b 	bl	1f00 <get_dev>
	if (port == NULL) {
    5aea:	b130      	cbz	r0, 5afa <nrfx_gpio_handler+0x1c>
    5aec:	4601      	mov	r1, r0
	return port->data;
    5aee:	6900      	ldr	r0, [r0, #16]
	gpio_fire_callbacks(list, port, BIT(pin));
    5af0:	2201      	movs	r2, #1
    5af2:	40a2      	lsls	r2, r4
    5af4:	3004      	adds	r0, #4
    5af6:	f7ff ff43 	bl	5980 <gpio_fire_callbacks>
}
    5afa:	bd10      	pop	{r4, pc}

00005afc <endtx_isr>:
	const struct uarte_nrfx_config *config = dev->config;
    5afc:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    5afe:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
    5b00:	f04f 0120 	mov.w	r1, #32
    5b04:	f3ef 8311 	mrs	r3, BASEPRI
    5b08:	f381 8812 	msr	BASEPRI_MAX, r1
    5b0c:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5b10:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    5b14:	b131      	cbz	r1, 5b24 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5b16:	2100      	movs	r1, #0
    5b18:	f8c2 1120 	str.w	r1, [r2, #288]	; 0x120
    5b1c:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5b20:	2101      	movs	r1, #1
    5b22:	60d1      	str	r1, [r2, #12]
	__asm__ volatile(
    5b24:	f383 8811 	msr	BASEPRI, r3
    5b28:	f3bf 8f6f 	isb	sy
}
    5b2c:	4770      	bx	lr

00005b2e <uarte_nrfx_isr_int>:
{
    5b2e:	b538      	push	{r3, r4, r5, lr}
	const struct uarte_nrfx_config *config = dev->config;
    5b30:	6845      	ldr	r5, [r0, #4]
	return config->uarte_regs;
    5b32:	682c      	ldr	r4, [r5, #0]
    return p_reg->INTENSET & mask;
    5b34:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    5b38:	f413 7f80 	tst.w	r3, #256	; 0x100
    5b3c:	d002      	beq.n	5b44 <uarte_nrfx_isr_int+0x16>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5b3e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    5b42:	b9d3      	cbnz	r3, 5b7a <uarte_nrfx_isr_int+0x4c>
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    5b44:	686b      	ldr	r3, [r5, #4]
    5b46:	f013 0f10 	tst.w	r3, #16
    5b4a:	d015      	beq.n	5b78 <uarte_nrfx_isr_int+0x4a>
	__asm__ volatile(
    5b4c:	f04f 0220 	mov.w	r2, #32
    5b50:	f3ef 8311 	mrs	r3, BASEPRI
    5b54:	f382 8812 	msr	BASEPRI_MAX, r2
    5b58:	f3bf 8f6f 	isb	sy
    5b5c:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    5b60:	b112      	cbz	r2, 5b68 <uarte_nrfx_isr_int+0x3a>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    5b62:	2200      	movs	r2, #0
    5b64:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    5b68:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    5b6c:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
	__asm__ volatile(
    5b70:	f383 8811 	msr	BASEPRI, r3
    5b74:	f3bf 8f6f 	isb	sy
}
    5b78:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
    5b7a:	f7ff ffbf 	bl	5afc <endtx_isr>
    5b7e:	e7e1      	b.n	5b44 <uarte_nrfx_isr_int+0x16>

00005b80 <uarte_nrfx_configure>:
{
    5b80:	b570      	push	{r4, r5, r6, lr}
    5b82:	b082      	sub	sp, #8
    5b84:	4605      	mov	r5, r0
    5b86:	460c      	mov	r4, r1
	struct uarte_nrfx_data *data = dev->data;
    5b88:	6906      	ldr	r6, [r0, #16]
	switch (cfg->stop_bits) {
    5b8a:	794b      	ldrb	r3, [r1, #5]
    5b8c:	2b01      	cmp	r3, #1
    5b8e:	d006      	beq.n	5b9e <uarte_nrfx_configure+0x1e>
    5b90:	2b03      	cmp	r3, #3
    5b92:	d011      	beq.n	5bb8 <uarte_nrfx_configure+0x38>
    5b94:	f06f 0285 	mvn.w	r2, #133	; 0x85
}
    5b98:	4610      	mov	r0, r2
    5b9a:	b002      	add	sp, #8
    5b9c:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
    5b9e:	2300      	movs	r3, #0
    5ba0:	f88d 3002 	strb.w	r3, [sp, #2]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    5ba4:	79a3      	ldrb	r3, [r4, #6]
    5ba6:	2b03      	cmp	r3, #3
    5ba8:	d146      	bne.n	5c38 <uarte_nrfx_configure+0xb8>
	switch (cfg->flow_ctrl) {
    5baa:	79e3      	ldrb	r3, [r4, #7]
    5bac:	b143      	cbz	r3, 5bc0 <uarte_nrfx_configure+0x40>
    5bae:	2b01      	cmp	r3, #1
    5bb0:	d015      	beq.n	5bde <uarte_nrfx_configure+0x5e>
    5bb2:	f06f 0285 	mvn.w	r2, #133	; 0x85
    5bb6:	e7ef      	b.n	5b98 <uarte_nrfx_configure+0x18>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    5bb8:	2310      	movs	r3, #16
    5bba:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
    5bbe:	e7f1      	b.n	5ba4 <uarte_nrfx_configure+0x24>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
    5bc0:	2300      	movs	r3, #0
    5bc2:	f88d 3000 	strb.w	r3, [sp]
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
    5bc6:	2300      	movs	r3, #0
    5bc8:	f8ad 3004 	strh.w	r3, [sp, #4]
	switch (cfg->parity) {
    5bcc:	7923      	ldrb	r3, [r4, #4]
    5bce:	2b01      	cmp	r3, #1
    5bd0:	d02a      	beq.n	5c28 <uarte_nrfx_configure+0xa8>
    5bd2:	2b02      	cmp	r3, #2
    5bd4:	d024      	beq.n	5c20 <uarte_nrfx_configure+0xa0>
    5bd6:	b133      	cbz	r3, 5be6 <uarte_nrfx_configure+0x66>
    5bd8:	f06f 0285 	mvn.w	r2, #133	; 0x85
    5bdc:	e7dc      	b.n	5b98 <uarte_nrfx_configure+0x18>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
    5bde:	2301      	movs	r3, #1
    5be0:	f88d 3000 	strb.w	r3, [sp]
		break;
    5be4:	e7ef      	b.n	5bc6 <uarte_nrfx_configure+0x46>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
    5be6:	f88d 3001 	strb.w	r3, [sp, #1]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    5bea:	6821      	ldr	r1, [r4, #0]
    5bec:	4628      	mov	r0, r5
    5bee:	f7fc fa9d 	bl	212c <baudrate_set>
    5bf2:	4602      	mov	r2, r0
    5bf4:	bb18      	cbnz	r0, 5c3e <uarte_nrfx_configure+0xbe>
	const struct uarte_nrfx_config *config = dev->config;
    5bf6:	686b      	ldr	r3, [r5, #4]
	return config->uarte_regs;
    5bf8:	6819      	ldr	r1, [r3, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    5bfa:	f89d 3001 	ldrb.w	r3, [sp, #1]
                    | (uint32_t)p_cfg->stop
    5bfe:	f89d 0002 	ldrb.w	r0, [sp, #2]
    5c02:	4303      	orrs	r3, r0
                    | (uint32_t)p_cfg->paritytype
    5c04:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    5c08:	4303      	orrs	r3, r0
                    | (uint32_t)p_cfg->hwfc;
    5c0a:	f89d 0000 	ldrb.w	r0, [sp]
    5c0e:	4303      	orrs	r3, r0
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    5c10:	f8c1 356c 	str.w	r3, [r1, #1388]	; 0x56c
	data->uart_config = *cfg;
    5c14:	3604      	adds	r6, #4
    5c16:	e894 0003 	ldmia.w	r4, {r0, r1}
    5c1a:	e886 0003 	stmia.w	r6, {r0, r1}
	return 0;
    5c1e:	e7bb      	b.n	5b98 <uarte_nrfx_configure+0x18>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    5c20:	230e      	movs	r3, #14
    5c22:	f88d 3001 	strb.w	r3, [sp, #1]
		break;
    5c26:	e7e0      	b.n	5bea <uarte_nrfx_configure+0x6a>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    5c28:	230e      	movs	r3, #14
    5c2a:	f88d 3001 	strb.w	r3, [sp, #1]
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
    5c2e:	f44f 7380 	mov.w	r3, #256	; 0x100
    5c32:	f8ad 3004 	strh.w	r3, [sp, #4]
		break;
    5c36:	e7d8      	b.n	5bea <uarte_nrfx_configure+0x6a>
		return -ENOTSUP;
    5c38:	f06f 0285 	mvn.w	r2, #133	; 0x85
    5c3c:	e7ac      	b.n	5b98 <uarte_nrfx_configure+0x18>
		return -ENOTSUP;
    5c3e:	f06f 0285 	mvn.w	r2, #133	; 0x85
    5c42:	e7a9      	b.n	5b98 <uarte_nrfx_configure+0x18>

00005c44 <uarte_nrfx_config_get>:
{
    5c44:	460a      	mov	r2, r1
	struct uarte_nrfx_data *data = dev->data;
    5c46:	6903      	ldr	r3, [r0, #16]
	*cfg = data->uart_config;
    5c48:	3304      	adds	r3, #4
    5c4a:	e893 0003 	ldmia.w	r3, {r0, r1}
    5c4e:	e882 0003 	stmia.w	r2, {r0, r1}
}
    5c52:	2000      	movs	r0, #0
    5c54:	4770      	bx	lr

00005c56 <uarte_nrfx_err_check>:
	const struct uarte_nrfx_config *config = dev->config;
    5c56:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    5c58:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    5c5a:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    5c5e:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    5c62:	4770      	bx	lr

00005c64 <is_tx_ready>:
	const struct uarte_nrfx_config *config = dev->config;
    5c64:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    5c66:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    5c68:	685b      	ldr	r3, [r3, #4]
    5c6a:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5c6e:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    5c72:	b929      	cbnz	r1, 5c80 <is_tx_ready+0x1c>
    5c74:	b933      	cbnz	r3, 5c84 <is_tx_ready+0x20>
    5c76:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
    5c7a:	b92b      	cbnz	r3, 5c88 <is_tx_ready+0x24>
    5c7c:	2000      	movs	r0, #0
    5c7e:	4770      	bx	lr
    5c80:	2001      	movs	r0, #1
    5c82:	4770      	bx	lr
    5c84:	2000      	movs	r0, #0
    5c86:	4770      	bx	lr
    5c88:	2001      	movs	r0, #1
}
    5c8a:	4770      	bx	lr

00005c8c <uarte_enable>:
	const struct uarte_nrfx_config *config = dev->config;
    5c8c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    5c8e:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    5c90:	2208      	movs	r2, #8
    5c92:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    5c96:	4770      	bx	lr

00005c98 <tx_start>:
{
    5c98:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
    5c9a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    5c9c:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    5c9e:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    5ca2:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5ca6:	2200      	movs	r2, #0
    5ca8:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    5cac:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
    5cb0:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
    5cb4:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    5cb8:	685b      	ldr	r3, [r3, #4]
    5cba:	f013 0f10 	tst.w	r3, #16
    5cbe:	d102      	bne.n	5cc6 <tx_start+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5cc0:	2301      	movs	r3, #1
    5cc2:	60a3      	str	r3, [r4, #8]
}
    5cc4:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
    5cc6:	2101      	movs	r1, #1
    5cc8:	f7ff ffe0 	bl	5c8c <uarte_enable>
    p_reg->INTENSET = mask;
    5ccc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    5cd0:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    5cd4:	e7f4      	b.n	5cc0 <tx_start+0x28>

00005cd6 <uarte_nrfx_poll_in>:
{
    5cd6:	b410      	push	{r4}
	const struct uarte_nrfx_data *data = dev->data;
    5cd8:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    5cda:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    5cdc:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5cde:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    5ce2:	b15a      	cbz	r2, 5cfc <uarte_nrfx_poll_in+0x26>
	*c = *data->rx_data;
    5ce4:	6962      	ldr	r2, [r4, #20]
    5ce6:	7812      	ldrb	r2, [r2, #0]
    5ce8:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5cea:	2000      	movs	r0, #0
    5cec:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    5cf0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5cf4:	2201      	movs	r2, #1
    5cf6:	601a      	str	r2, [r3, #0]
}
    5cf8:	bc10      	pop	{r4}
    5cfa:	4770      	bx	lr
		return -1;
    5cfc:	f04f 30ff 	mov.w	r0, #4294967295
    5d00:	e7fa      	b.n	5cf8 <uarte_nrfx_poll_in+0x22>

00005d02 <k_msleep>:
{
    5d02:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
    5d04:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    5d08:	17c1      	asrs	r1, r0, #31
    5d0a:	03c9      	lsls	r1, r1, #15
    5d0c:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    5d10:	03c0      	lsls	r0, r0, #15
    5d12:	f240 33e7 	movw	r3, #999	; 0x3e7
    5d16:	18c0      	adds	r0, r0, r3
    5d18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5d1c:	f04f 0300 	mov.w	r3, #0
    5d20:	f141 0100 	adc.w	r1, r1, #0
    5d24:	f7fa fa16 	bl	154 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    5d28:	f7fe fb88 	bl	443c <z_impl_k_sleep>
}
    5d2c:	bd08      	pop	{r3, pc}

00005d2e <wait_tx_ready>:
{
    5d2e:	b570      	push	{r4, r5, r6, lr}
    5d30:	4606      	mov	r6, r0
    5d32:	e013      	b.n	5d5c <wait_tx_ready+0x2e>
		if (res) {
    5d34:	b17d      	cbz	r5, 5d56 <wait_tx_ready+0x28>
	__asm__ volatile(
    5d36:	f04f 0320 	mov.w	r3, #32
    5d3a:	f3ef 8411 	mrs	r4, BASEPRI
    5d3e:	f383 8812 	msr	BASEPRI_MAX, r3
    5d42:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    5d46:	4630      	mov	r0, r6
    5d48:	f7ff ff8c 	bl	5c64 <is_tx_ready>
    5d4c:	b998      	cbnz	r0, 5d76 <wait_tx_ready+0x48>
	__asm__ volatile(
    5d4e:	f384 8811 	msr	BASEPRI, r4
    5d52:	f3bf 8f6f 	isb	sy
			k_msleep(1);
    5d56:	2001      	movs	r0, #1
    5d58:	f7ff ffd3 	bl	5d02 <k_msleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    5d5c:	2464      	movs	r4, #100	; 0x64
    5d5e:	4630      	mov	r0, r6
    5d60:	f7ff ff80 	bl	5c64 <is_tx_ready>
    5d64:	4605      	mov	r5, r0
    5d66:	2800      	cmp	r0, #0
    5d68:	d1e4      	bne.n	5d34 <wait_tx_ready+0x6>
    5d6a:	2001      	movs	r0, #1
    5d6c:	f000 f9af 	bl	60ce <nrfx_busy_wait>
    5d70:	3c01      	subs	r4, #1
    5d72:	d1f4      	bne.n	5d5e <wait_tx_ready+0x30>
    5d74:	e7de      	b.n	5d34 <wait_tx_ready+0x6>
}
    5d76:	4620      	mov	r0, r4
    5d78:	bd70      	pop	{r4, r5, r6, pc}

00005d7a <pinctrl_apply_state>:
 * @retval -ENOENT If given state id does not exist.
 * @retval -errno Negative errno for other failures.
 */
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
				      uint8_t id)
{
    5d7a:	b510      	push	{r4, lr}
    5d7c:	b082      	sub	sp, #8
    5d7e:	4604      	mov	r4, r0
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    5d80:	aa01      	add	r2, sp, #4
    5d82:	f000 f8e1 	bl	5f48 <pinctrl_lookup_state>
	if (ret < 0) {
    5d86:	2800      	cmp	r0, #0
    5d88:	db05      	blt.n	5d96 <pinctrl_apply_state+0x1c>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    5d8a:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    5d8c:	6822      	ldr	r2, [r4, #0]
    5d8e:	7919      	ldrb	r1, [r3, #4]
    5d90:	6818      	ldr	r0, [r3, #0]
    5d92:	f7fc fd3b 	bl	280c <pinctrl_configure_pins>
}
    5d96:	b002      	add	sp, #8
    5d98:	bd10      	pop	{r4, pc}

00005d9a <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
    5d9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5d9e:	4604      	mov	r4, r0
	const struct uarte_nrfx_config *config = dev->config;
    5da0:	6847      	ldr	r7, [r0, #4]
	return config->uarte_regs;
    5da2:	683e      	ldr	r6, [r7, #0]
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    5da4:	f8d0 8010 	ldr.w	r8, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    5da8:	2100      	movs	r1, #0
    5daa:	f8c6 1500 	str.w	r1, [r6, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
    5dae:	f8c8 0000 	str.w	r0, [r8]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    5db2:	68f8      	ldr	r0, [r7, #12]
    5db4:	f7ff ffe1 	bl	5d7a <pinctrl_apply_state>
	if (err < 0) {
    5db8:	1e05      	subs	r5, r0, #0
    5dba:	db35      	blt.n	5e28 <uarte_instance_init+0x8e>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    5dbc:	f108 0104 	add.w	r1, r8, #4
    5dc0:	4620      	mov	r0, r4
    5dc2:	f7ff fedd 	bl	5b80 <uarte_nrfx_configure>
	if (err) {
    5dc6:	4605      	mov	r5, r0
    5dc8:	bb70      	cbnz	r0, 5e28 <uarte_instance_init+0x8e>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    5dca:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    5dcc:	f013 0f02 	tst.w	r3, #2
    5dd0:	d12d      	bne.n	5e2e <uarte_instance_init+0x94>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    5dd2:	2308      	movs	r3, #8
    5dd4:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    5dd8:	7a3b      	ldrb	r3, [r7, #8]
    5dda:	b95b      	cbnz	r3, 5df4 <uarte_instance_init+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5ddc:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
    5de0:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, data->rx_data, 1);
    5de4:	f8d8 3014 	ldr.w	r3, [r8, #20]

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    5de8:	f8c6 3534 	str.w	r3, [r6, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    5dec:	2301      	movs	r3, #1
    5dee:	f8c6 3538 	str.w	r3, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5df2:	6033      	str	r3, [r6, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    5df4:	687b      	ldr	r3, [r7, #4]
    5df6:	f013 0f02 	tst.w	r3, #2
    5dfa:	d103      	bne.n	5e04 <uarte_instance_init+0x6a>
    p_reg->INTENSET = mask;
    5dfc:	f44f 7380 	mov.w	r3, #256	; 0x100
    5e00:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    5e04:	687b      	ldr	r3, [r7, #4]
    5e06:	f013 0f10 	tst.w	r3, #16
    5e0a:	d003      	beq.n	5e14 <uarte_instance_init+0x7a>
    5e0c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    5e10:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, data->char_out, 0);
    5e14:	f8d8 3010 	ldr.w	r3, [r8, #16]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    5e18:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    5e1c:	2300      	movs	r3, #0
    5e1e:	f8c6 3548 	str.w	r3, [r6, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5e22:	2301      	movs	r3, #1
    5e24:	60b3      	str	r3, [r6, #8]
    5e26:	60f3      	str	r3, [r6, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    5e28:	4628      	mov	r0, r5
    5e2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
    5e2e:	4641      	mov	r1, r8
    5e30:	4630      	mov	r0, r6
    5e32:	f7fc fa51 	bl	22d8 <endtx_stoptx_ppi_init>
		if (err < 0) {
    5e36:	2800      	cmp	r0, #0
    5e38:	dacb      	bge.n	5dd2 <uarte_instance_init+0x38>
			return err;
    5e3a:	4605      	mov	r5, r0
    5e3c:	e7f4      	b.n	5e28 <uarte_instance_init+0x8e>

00005e3e <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    5e3e:	b510      	push	{r4, lr}
    5e40:	4604      	mov	r4, r0
    5e42:	2200      	movs	r2, #0
    5e44:	2101      	movs	r1, #1
    5e46:	2008      	movs	r0, #8
    5e48:	f7ff faee 	bl	5428 <z_arm_irq_priority_set>
    5e4c:	2008      	movs	r0, #8
    5e4e:	f7ff fae6 	bl	541e <arch_irq_enable>
    5e52:	2100      	movs	r1, #0
    5e54:	4620      	mov	r0, r4
    5e56:	f7ff ffa0 	bl	5d9a <uarte_instance_init>
    5e5a:	bd10      	pop	{r4, pc}

00005e5c <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    5e5c:	4770      	bx	lr

00005e5e <counter_sub>:
	return (a - b) & COUNTER_MAX;
    5e5e:	1a40      	subs	r0, r0, r1
}
    5e60:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    5e64:	4770      	bx	lr

00005e66 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    5e66:	f100 0350 	add.w	r3, r0, #80	; 0x50
    5e6a:	009b      	lsls	r3, r3, #2
    5e6c:	b29b      	uxth	r3, r3
    5e6e:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    5e72:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    5e76:	2200      	movs	r2, #0
    5e78:	601a      	str	r2, [r3, #0]
    5e7a:	681b      	ldr	r3, [r3, #0]
}
    5e7c:	4770      	bx	lr

00005e7e <absolute_time_to_cc>:
}
    5e7e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    5e82:	4770      	bx	lr

00005e84 <full_int_lock>:
	__asm__ volatile(
    5e84:	f04f 0320 	mov.w	r3, #32
    5e88:	f3ef 8011 	mrs	r0, BASEPRI
    5e8c:	f383 8812 	msr	BASEPRI_MAX, r3
    5e90:	f3bf 8f6f 	isb	sy
}
    5e94:	4770      	bx	lr

00005e96 <full_int_unlock>:
	__asm__ volatile(
    5e96:	f380 8811 	msr	BASEPRI, r0
    5e9a:	f3bf 8f6f 	isb	sy
}
    5e9e:	4770      	bx	lr

00005ea0 <set_absolute_alarm>:
{
    5ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5ea2:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
    5ea4:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
    5ea8:	f7fc fa40 	bl	232c <get_comparator>
    5eac:	4607      	mov	r7, r0
    5eae:	e019      	b.n	5ee4 <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
    5eb0:	2013      	movs	r0, #19
    5eb2:	f000 fd0f 	bl	68d4 <z_impl_k_busy_wait>
}
    5eb6:	e022      	b.n	5efe <set_absolute_alarm+0x5e>
		event_clear(chan);
    5eb8:	4630      	mov	r0, r6
    5eba:	f7ff ffd4 	bl	5e66 <event_clear>
		event_enable(chan);
    5ebe:	4630      	mov	r0, r6
    5ec0:	f7fc fa3c 	bl	233c <event_enable>
		set_comparator(chan, cc_val);
    5ec4:	4629      	mov	r1, r5
    5ec6:	4630      	mov	r0, r6
    5ec8:	f7fc fa26 	bl	2318 <set_comparator>
		now2 = counter();
    5ecc:	f7fc fa4a 	bl	2364 <counter>
	} while ((now2 != now) &&
    5ed0:	4284      	cmp	r4, r0
    5ed2:	d01e      	beq.n	5f12 <set_absolute_alarm+0x72>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    5ed4:	1c81      	adds	r1, r0, #2
    5ed6:	4628      	mov	r0, r5
    5ed8:	f7ff ffc1 	bl	5e5e <counter_sub>
	} while ((now2 != now) &&
    5edc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    5ee0:	d917      	bls.n	5f12 <set_absolute_alarm+0x72>
		prev_cc = cc_val;
    5ee2:	462f      	mov	r7, r5
		now = counter();
    5ee4:	f7fc fa3e 	bl	2364 <counter>
    5ee8:	4604      	mov	r4, r0
		set_comparator(chan, now);
    5eea:	4601      	mov	r1, r0
    5eec:	4630      	mov	r0, r6
    5eee:	f7fc fa13 	bl	2318 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
    5ef2:	4621      	mov	r1, r4
    5ef4:	4638      	mov	r0, r7
    5ef6:	f7ff ffb2 	bl	5e5e <counter_sub>
    5efa:	2801      	cmp	r0, #1
    5efc:	d0d8      	beq.n	5eb0 <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    5efe:	1ca7      	adds	r7, r4, #2
    5f00:	4639      	mov	r1, r7
    5f02:	4628      	mov	r0, r5
    5f04:	f7ff ffab 	bl	5e5e <counter_sub>
    5f08:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    5f0c:	d9d4      	bls.n	5eb8 <set_absolute_alarm+0x18>
			cc_val = now + 2;
    5f0e:	463d      	mov	r5, r7
    5f10:	e7d2      	b.n	5eb8 <set_absolute_alarm+0x18>
}
    5f12:	4628      	mov	r0, r5
    5f14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00005f16 <compare_set>:
{
    5f16:	b5f0      	push	{r4, r5, r6, r7, lr}
    5f18:	b083      	sub	sp, #12
    5f1a:	4604      	mov	r4, r0
    5f1c:	4617      	mov	r7, r2
    5f1e:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
    5f20:	f7fc fa26 	bl	2370 <compare_int_lock>
    5f24:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
    5f26:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5f28:	9301      	str	r3, [sp, #4]
    5f2a:	9b08      	ldr	r3, [sp, #32]
    5f2c:	9300      	str	r3, [sp, #0]
    5f2e:	463a      	mov	r2, r7
    5f30:	462b      	mov	r3, r5
    5f32:	4620      	mov	r0, r4
    5f34:	f7fc faf8 	bl	2528 <compare_set_nolocks>
    5f38:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
    5f3a:	4631      	mov	r1, r6
    5f3c:	4620      	mov	r0, r4
    5f3e:	f7fc fa6f 	bl	2420 <compare_int_unlock>
}
    5f42:	4628      	mov	r0, r5
    5f44:	b003      	add	sp, #12
    5f46:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005f48 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    5f48:	b410      	push	{r4}
	*state = &config->states[0];
    5f4a:	6843      	ldr	r3, [r0, #4]
    5f4c:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    5f4e:	e001      	b.n	5f54 <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
    5f50:	3408      	adds	r4, #8
    5f52:	6014      	str	r4, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    5f54:	6814      	ldr	r4, [r2, #0]
    5f56:	7a03      	ldrb	r3, [r0, #8]
    5f58:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    5f5c:	3b01      	subs	r3, #1
    5f5e:	f8d0 c004 	ldr.w	ip, [r0, #4]
    5f62:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
    5f66:	429c      	cmp	r4, r3
    5f68:	d804      	bhi.n	5f74 <pinctrl_lookup_state+0x2c>
		if (id == (*state)->id) {
    5f6a:	7963      	ldrb	r3, [r4, #5]
    5f6c:	428b      	cmp	r3, r1
    5f6e:	d1ef      	bne.n	5f50 <pinctrl_lookup_state+0x8>
			return 0;
    5f70:	2000      	movs	r0, #0
    5f72:	e001      	b.n	5f78 <pinctrl_lookup_state+0x30>
	}

	return -ENOENT;
    5f74:	f06f 0001 	mvn.w	r0, #1
}
    5f78:	bc10      	pop	{r4}
    5f7a:	4770      	bx	lr

00005f7c <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    5f7c:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    5f7e:	2000      	movs	r0, #0
    5f80:	f7ff fa91 	bl	54a6 <sys_arch_reboot>

00005f84 <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
    5f84:	b508      	push	{r3, lr}

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    5f86:	f7fe fc37 	bl	47f8 <nrf_cc3xx_platform_init_no_rng>
#endif

	return res;
}
    5f8a:	bd08      	pop	{r3, pc}

00005f8c <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
    5f8c:	b510      	push	{r4, lr}
    5f8e:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    5f90:	f7fb f82e 	bl	ff0 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    5f94:	f7fb f940 	bl	1218 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
    5f98:	4620      	mov	r0, r4
    5f9a:	f7ff fff3 	bl	5f84 <hw_cc3xx_init_internal>
	return res;
}
    5f9e:	bd10      	pop	{r4, pc}

00005fa0 <nrf53_errata_42>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    5fa0:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    5fa4:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    5fa8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    5fac:	2a07      	cmp	r2, #7
    5fae:	d001      	beq.n	5fb4 <nrf53_errata_42+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    5fb0:	2000      	movs	r0, #0
    5fb2:	4770      	bx	lr
                    switch(var2)
    5fb4:	3b02      	subs	r3, #2
    5fb6:	2b00      	cmp	r3, #0
    5fb8:	d804      	bhi.n	5fc4 <nrf53_errata_42+0x24>
    5fba:	e8df f003 	tbb	[pc, r3]
    5fbe:	01          	.byte	0x01
    5fbf:	00          	.byte	0x00
    5fc0:	2001      	movs	r0, #1
    5fc2:	4770      	bx	lr
                            return false;
    5fc4:	2000      	movs	r0, #0
    #endif
}
    5fc6:	4770      	bx	lr

00005fc8 <nrf53_errata_46>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    5fc8:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    5fcc:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    5fd0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    5fd4:	2a07      	cmp	r2, #7
    5fd6:	d001      	beq.n	5fdc <nrf53_errata_46+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    5fd8:	2000      	movs	r0, #0
    5fda:	4770      	bx	lr
                    switch(var2)
    5fdc:	2b04      	cmp	r3, #4
    5fde:	d007      	beq.n	5ff0 <nrf53_errata_46+0x28>
    5fe0:	d808      	bhi.n	5ff4 <nrf53_errata_46+0x2c>
    5fe2:	3b02      	subs	r3, #2
    5fe4:	2b01      	cmp	r3, #1
    5fe6:	d801      	bhi.n	5fec <nrf53_errata_46+0x24>
    5fe8:	2001      	movs	r0, #1
    #endif
}
    5fea:	4770      	bx	lr
                            return false;
    5fec:	2000      	movs	r0, #0
    5fee:	4770      	bx	lr
                            return false;
    5ff0:	2000      	movs	r0, #0
    5ff2:	4770      	bx	lr
                            return false;
    5ff4:	2000      	movs	r0, #0
    5ff6:	4770      	bx	lr

00005ff8 <nrf53_errata_49>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    5ff8:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    5ffc:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    6000:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    6004:	2a07      	cmp	r2, #7
    6006:	d001      	beq.n	600c <nrf53_errata_49+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    6008:	2000      	movs	r0, #0
    600a:	4770      	bx	lr
                    switch(var2)
    600c:	3b02      	subs	r3, #2
    600e:	2b00      	cmp	r3, #0
    6010:	d804      	bhi.n	601c <nrf53_errata_49+0x24>
    6012:	e8df f003 	tbb	[pc, r3]
    6016:	01          	.byte	0x01
    6017:	00          	.byte	0x00
    6018:	2001      	movs	r0, #1
    601a:	4770      	bx	lr
                            return false;
    601c:	2000      	movs	r0, #0
    #endif
}
    601e:	4770      	bx	lr

00006020 <nrf53_errata_55>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    6020:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    6024:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    6028:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    602c:	2a07      	cmp	r2, #7
    602e:	d001      	beq.n	6034 <nrf53_errata_55+0x14>
                            return true;
                    }
                }
            #endif
        #endif
        return false;
    6030:	2000      	movs	r0, #0
    6032:	4770      	bx	lr
                            return true;
    6034:	2001      	movs	r0, #1
    #endif
}
    6036:	4770      	bx	lr

00006038 <nrf53_errata_64>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    6038:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    603c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    6040:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    6044:	2a07      	cmp	r2, #7
    6046:	d001      	beq.n	604c <nrf53_errata_64+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    6048:	2000      	movs	r0, #0
    604a:	4770      	bx	lr
                    switch(var2)
    604c:	3b02      	subs	r3, #2
    604e:	2b00      	cmp	r3, #0
    6050:	d804      	bhi.n	605c <nrf53_errata_64+0x24>
    6052:	e8df f003 	tbb	[pc, r3]
    6056:	01          	.byte	0x01
    6057:	00          	.byte	0x00
    6058:	2001      	movs	r0, #1
    605a:	4770      	bx	lr
                            return false;
    605c:	2000      	movs	r0, #0
    #endif
}
    605e:	4770      	bx	lr

00006060 <nrf53_errata_69>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    6060:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    6064:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    6068:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    606c:	2a07      	cmp	r2, #7
    606e:	d001      	beq.n	6074 <nrf53_errata_69+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    6070:	2000      	movs	r0, #0
    6072:	4770      	bx	lr
                    switch(var2)
    6074:	3b02      	subs	r3, #2
    6076:	2b00      	cmp	r3, #0
    6078:	d804      	bhi.n	6084 <nrf53_errata_69+0x24>
    607a:	e8df f003 	tbb	[pc, r3]
    607e:	01          	.byte	0x01
    607f:	00          	.byte	0x00
    6080:	2001      	movs	r0, #1
    6082:	4770      	bx	lr
                            return false;
    6084:	2000      	movs	r0, #0
    #endif
}
    6086:	4770      	bx	lr

00006088 <nrf53_errata_97>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    6088:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    608c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    6090:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    6094:	2a07      	cmp	r2, #7
    6096:	d001      	beq.n	609c <nrf53_errata_97+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    6098:	2000      	movs	r0, #0
    609a:	4770      	bx	lr
                    switch(var2)
    609c:	3b02      	subs	r3, #2
    609e:	2b00      	cmp	r3, #0
    60a0:	d804      	bhi.n	60ac <nrf53_errata_97+0x24>
    60a2:	e8df f003 	tbb	[pc, r3]
    60a6:	01          	.byte	0x01
    60a7:	00          	.byte	0x00
    60a8:	2001      	movs	r0, #1
    60aa:	4770      	bx	lr
                            return false;
    60ac:	2000      	movs	r0, #0
    #endif
}
    60ae:	4770      	bx	lr

000060b0 <nrf53_errata_140>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    60b0:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    60b4:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    60b8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    60bc:	2a07      	cmp	r2, #7
    60be:	d001      	beq.n	60c4 <nrf53_errata_140+0x14>
                            return true;
                    }
                }
            #endif
        #endif
        return false;
    60c0:	2000      	movs	r0, #0
    60c2:	4770      	bx	lr
                            return true;
    60c4:	2001      	movs	r0, #1
    #endif
}
    60c6:	4770      	bx	lr

000060c8 <nrfx_isr>:
#include <nrfx.h>
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
    60c8:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
    60ca:	4780      	blx	r0
}
    60cc:	bd08      	pop	{r3, pc}

000060ce <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
    60ce:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
    60d0:	f000 fc00 	bl	68d4 <z_impl_k_busy_wait>
	if (IS_ENABLED(CONFIG_SYS_CLOCK_EXISTS)) {
		k_busy_wait(usec_to_wait);
	} else {
		nrfx_coredep_delay_us(usec_to_wait);
	}
}
    60d4:	bd08      	pop	{r3, pc}

000060d6 <nrf_clock_is_running>:
    switch (domain)
    60d6:	2903      	cmp	r1, #3
    60d8:	d82f      	bhi.n	613a <nrf_clock_is_running+0x64>
    60da:	e8df f001 	tbb	[pc, r1]
    60de:	0f02      	.short	0x0f02
    60e0:	291c      	.short	0x291c
            if (p_clk_src != NULL)
    60e2:	b122      	cbz	r2, 60ee <nrf_clock_is_running+0x18>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    60e4:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
    60e8:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    60ec:	7013      	strb	r3, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    60ee:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
    60f2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    60f6:	d122      	bne.n	613e <nrf_clock_is_running+0x68>
    return false;
    60f8:	2000      	movs	r0, #0
    60fa:	4770      	bx	lr
            if (p_clk_src != NULL)
    60fc:	b122      	cbz	r2, 6108 <nrf_clock_is_running+0x32>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    60fe:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
    6102:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    6106:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    6108:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
    610c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    6110:	d117      	bne.n	6142 <nrf_clock_is_running+0x6c>
    return false;
    6112:	2000      	movs	r0, #0
    6114:	4770      	bx	lr
            if (p_clk_src != NULL)
    6116:	b122      	cbz	r2, 6122 <nrf_clock_is_running+0x4c>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
    6118:	f8d0 345c 	ldr.w	r3, [r0, #1116]	; 0x45c
    611c:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    6120:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    6122:	f8d0 345c 	ldr.w	r3, [r0, #1116]	; 0x45c
    6126:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    612a:	d10c      	bne.n	6146 <nrf_clock_is_running+0x70>
    return false;
    612c:	2000      	movs	r0, #0
    612e:	4770      	bx	lr
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
    6130:	f8d0 0454 	ldr.w	r0, [r0, #1108]	; 0x454
    6134:	f3c0 4000 	ubfx	r0, r0, #16, #1
    6138:	4770      	bx	lr
    switch (domain)
    613a:	2000      	movs	r0, #0
    613c:	4770      	bx	lr
                return true;
    613e:	2001      	movs	r0, #1
    6140:	4770      	bx	lr
                return true;
    6142:	2001      	movs	r0, #1
    6144:	4770      	bx	lr
                return true;
    6146:	2001      	movs	r0, #1
}
    6148:	4770      	bx	lr

0000614a <clock_initial_lfclksrc_get>:
}
    614a:	2001      	movs	r0, #1
    614c:	4770      	bx	lr

0000614e <nrfx_power_clock_irq_init>:
extern "C" {
#endif


__STATIC_INLINE void nrfx_power_clock_irq_init(void)
{
    614e:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    6150:	2005      	movs	r0, #5
    6152:	f7fb f8b5 	bl	12c0 <arch_irq_is_enabled>
    6156:	b100      	cbz	r0, 615a <nrfx_power_clock_irq_init+0xc>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    }
}
    6158:	bd08      	pop	{r3, pc}
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    615a:	2005      	movs	r0, #5
    615c:	f7ff f95f 	bl	541e <arch_irq_enable>
}
    6160:	e7fa      	b.n	6158 <nrfx_power_clock_irq_init+0xa>

00006162 <clock_stop>:
{
    6162:	b570      	push	{r4, r5, r6, lr}
    6164:	b082      	sub	sp, #8
    6166:	4606      	mov	r6, r0
    switch (domain)
    6168:	2803      	cmp	r0, #3
    616a:	d855      	bhi.n	6218 <clock_stop+0xb6>
    616c:	e8df f000 	tbb	[pc, r0]
    6170:	31231702 	.word	0x31231702
    p_reg->INTENCLR = mask;
    6174:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6178:	2202      	movs	r2, #2
    617a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    617e:	2200      	movs	r2, #0
    6180:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    6184:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6188:	2201      	movs	r2, #1
    618a:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    618c:	2301      	movs	r3, #1
    618e:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    6192:	429e      	cmp	r6, r3
    6194:	d02b      	beq.n	61ee <clock_stop+0x8c>
    6196:	2500      	movs	r5, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    6198:	f242 7410 	movw	r4, #10000	; 0x2710
    619c:	e02f      	b.n	61fe <clock_stop+0x9c>
    p_reg->INTENCLR = mask;
    619e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    61a2:	2201      	movs	r2, #1
    61a4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    61a8:	2100      	movs	r1, #0
    61aa:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    61ae:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    61b2:	605a      	str	r2, [r3, #4]
}
    61b4:	e7ea      	b.n	618c <clock_stop+0x2a>
    p_reg->INTENCLR = mask;
    61b6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    61ba:	f44f 7200 	mov.w	r2, #512	; 0x200
    61be:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    61c2:	2200      	movs	r2, #0
    61c4:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    61c8:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    61cc:	2201      	movs	r2, #1
    61ce:	625a      	str	r2, [r3, #36]	; 0x24
}
    61d0:	e7dc      	b.n	618c <clock_stop+0x2a>
    p_reg->INTENCLR = mask;
    61d2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    61d6:	f44f 7280 	mov.w	r2, #256	; 0x100
    61da:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    61de:	2200      	movs	r2, #0
    61e0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    61e4:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    61e8:	2201      	movs	r2, #1
    61ea:	61da      	str	r2, [r3, #28]
}
    61ec:	e7ce      	b.n	618c <clock_stop+0x2a>
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    61ee:	f10d 0507 	add.w	r5, sp, #7
    61f2:	e7d1      	b.n	6198 <clock_stop+0x36>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    61f4:	2001      	movs	r0, #1
    61f6:	f7ff ff6a 	bl	60ce <nrfx_busy_wait>
    61fa:	3c01      	subs	r4, #1
    61fc:	d00c      	beq.n	6218 <clock_stop+0xb6>
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
    61fe:	462a      	mov	r2, r5
    6200:	4631      	mov	r1, r6
    6202:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
    6206:	f7ff ff66 	bl	60d6 <nrf_clock_is_running>
    620a:	b128      	cbz	r0, 6218 <clock_stop+0xb6>
    620c:	2d00      	cmp	r5, #0
    620e:	d0f1      	beq.n	61f4 <clock_stop+0x92>
    6210:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6214:	2b01      	cmp	r3, #1
    6216:	d0ed      	beq.n	61f4 <clock_stop+0x92>
}
    6218:	b002      	add	sp, #8
    621a:	bd70      	pop	{r4, r5, r6, pc}

0000621c <clock_lfclksrc_tweak>:
{
    621c:	b538      	push	{r3, r4, r5, lr}
    621e:	4604      	mov	r4, r0
    bool is_correct_clk = (*p_lfclksrc == NRFX_CLOCK_CONFIG_LF_SRC);
    6220:	7803      	ldrb	r3, [r0, #0]
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    6222:	2b02      	cmp	r3, #2
    6224:	d006      	beq.n	6234 <clock_lfclksrc_tweak+0x18>
    6226:	2b01      	cmp	r3, #1
    6228:	d000      	beq.n	622c <clock_lfclksrc_tweak+0x10>
    622a:	2300      	movs	r3, #0
    if (!is_correct_clk)
    622c:	461d      	mov	r5, r3
    622e:	b11b      	cbz	r3, 6238 <clock_lfclksrc_tweak+0x1c>
}
    6230:	4628      	mov	r0, r5
    6232:	bd38      	pop	{r3, r4, r5, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    6234:	2301      	movs	r3, #1
    6236:	e7f9      	b.n	622c <clock_lfclksrc_tweak+0x10>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    6238:	2000      	movs	r0, #0
    623a:	f7ff ff92 	bl	6162 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    623e:	f7ff ff84 	bl	614a <clock_initial_lfclksrc_get>
    6242:	7020      	strb	r0, [r4, #0]
    6244:	e7f4      	b.n	6230 <clock_lfclksrc_tweak+0x14>

00006246 <nrfx_clock_enable>:
{
    6246:	b508      	push	{r3, lr}
    nrfx_power_clock_irq_init();
    6248:	f7ff ff81 	bl	614e <nrfx_power_clock_irq_init>
    nrf_clock_lf_src_set(NRF_CLOCK, clock_initial_lfclksrc_get());
    624c:	f7ff ff7d 	bl	614a <clock_initial_lfclksrc_get>
    p_reg->LFCLKSRC = (uint32_t)(source);
    6250:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6254:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
}

#if NRF_CLOCK_HAS_HFCLKSRC
NRF_STATIC_INLINE void nrf_clock_hf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLKSRC = (uint32_t)(source);
    6258:	2201      	movs	r2, #1
    625a:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
    625e:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
}
    6262:	bd08      	pop	{r3, pc}

00006264 <nrfx_clock_start>:
    switch (domain)
    6264:	2803      	cmp	r0, #3
    6266:	d871      	bhi.n	634c <nrfx_clock_start+0xe8>
    6268:	e8df f000 	tbb	[pc, r0]
    626c:	62544802 	.word	0x62544802
{
    6270:	b500      	push	{lr}
    6272:	b083      	sub	sp, #12
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    6274:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    6278:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    627c:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    6280:	f88d 3007 	strb.w	r3, [sp, #7]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6284:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    6288:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    628c:	d11d      	bne.n	62ca <nrfx_clock_start+0x66>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    628e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6292:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    6296:	f013 0f01 	tst.w	r3, #1
    629a:	d11b      	bne.n	62d4 <nrfx_clock_start+0x70>
                    lfclksrc = clock_initial_lfclksrc_get();
    629c:	f7ff ff55 	bl	614a <clock_initial_lfclksrc_get>
    62a0:	f88d 0007 	strb.w	r0, [sp, #7]
                nrf_clock_lf_src_set(NRF_CLOCK, lfclksrc);
    62a4:	f89d 2007 	ldrb.w	r2, [sp, #7]
    p_reg->LFCLKSRC = (uint32_t)(source);
    62a8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    62ac:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    62b0:	2200      	movs	r2, #0
    62b2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    62b6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    62ba:	2202      	movs	r2, #2
    62bc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    62c0:	2201      	movs	r2, #1
    62c2:	609a      	str	r2, [r3, #8]
}
    62c4:	b003      	add	sp, #12
    62c6:	f85d fb04 	ldr.w	pc, [sp], #4
                    (void)clock_lfclksrc_tweak(&lfclksrc);
    62ca:	f10d 0007 	add.w	r0, sp, #7
    62ce:	f7ff ffa5 	bl	621c <clock_lfclksrc_tweak>
    62d2:	e7e7      	b.n	62a4 <nrfx_clock_start+0x40>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    62d4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    62d8:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    62dc:	f003 0303 	and.w	r3, r3, #3
                    lfclksrc = nrf_clock_lf_srccopy_get(NRF_CLOCK);
    62e0:	f88d 3007 	strb.w	r3, [sp, #7]
                    if (clock_lfclksrc_tweak(&lfclksrc))
    62e4:	f10d 0007 	add.w	r0, sp, #7
    62e8:	f7ff ff98 	bl	621c <clock_lfclksrc_tweak>
    62ec:	2800      	cmp	r0, #0
    62ee:	d0d9      	beq.n	62a4 <nrfx_clock_start+0x40>
    p_reg->INTENSET = mask;
    62f0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    62f4:	2202      	movs	r2, #2
    62f6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                        break;
    62fa:	e7e3      	b.n	62c4 <nrfx_clock_start+0x60>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    62fc:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6300:	2200      	movs	r2, #0
    6302:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    6306:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    630a:	2201      	movs	r2, #1
    630c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6310:	601a      	str	r2, [r3, #0]
}
    6312:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6314:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6318:	2200      	movs	r2, #0
    631a:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    631e:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
    6322:	f44f 7200 	mov.w	r2, #512	; 0x200
    6326:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    632a:	2201      	movs	r2, #1
    632c:	621a      	str	r2, [r3, #32]
}
    632e:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6330:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6334:	2200      	movs	r2, #0
    6336:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    633a:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
    633e:	f44f 7280 	mov.w	r2, #256	; 0x100
    6342:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6346:	2201      	movs	r2, #1
    6348:	619a      	str	r2, [r3, #24]
}
    634a:	4770      	bx	lr
    634c:	4770      	bx	lr

0000634e <nrfx_clock_stop>:
{
    634e:	b508      	push	{r3, lr}
    clock_stop(domain);
    6350:	f7ff ff07 	bl	6162 <clock_stop>
}
    6354:	bd08      	pop	{r3, pc}

00006356 <nrf_gpiote_event_configure>:
{
    6356:	b410      	push	{r4}
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    6358:	f501 71a2 	add.w	r1, r1, #324	; 0x144
    635c:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    6360:	f424 344f 	bic.w	r4, r4, #211968	; 0x33c00
    6364:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    6368:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    636c:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    6370:	0212      	lsls	r2, r2, #8
    6372:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    6376:	041b      	lsls	r3, r3, #16
    6378:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    637c:	431a      	orrs	r2, r3
    637e:	4314      	orrs	r4, r2
    6380:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
    6384:	bc10      	pop	{r4}
    6386:	4770      	bx	lr

00006388 <nrf_gpiote_task_configure>:
{
    6388:	b410      	push	{r4}
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    638a:	f501 71a2 	add.w	r1, r1, #324	; 0x144
    638e:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    6392:	f424 1499 	bic.w	r4, r4, #1253376	; 0x132000
    6396:	f424 54f8 	bic.w	r4, r4, #7936	; 0x1f00
    639a:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    639e:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    63a2:	0212      	lsls	r2, r2, #8
    63a4:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    63a8:	041b      	lsls	r3, r3, #16
    63aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    63ae:	431a      	orrs	r2, r3
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    63b0:	f89d 3004 	ldrb.w	r3, [sp, #4]
    63b4:	051b      	lsls	r3, r3, #20
    63b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    63ba:	431a      	orrs	r2, r3
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    63bc:	4314      	orrs	r4, r2
    63be:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
    63c2:	bc10      	pop	{r4}
    63c4:	4770      	bx	lr

000063c6 <nrf_gpio_cfg_sense_set>:
{
    63c6:	b500      	push	{lr}
    63c8:	b085      	sub	sp, #20
    63ca:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    63ce:	f10d 030f 	add.w	r3, sp, #15
    63d2:	9301      	str	r3, [sp, #4]
    63d4:	2100      	movs	r1, #0
    63d6:	9100      	str	r1, [sp, #0]
    63d8:	460b      	mov	r3, r1
    63da:	460a      	mov	r2, r1
    63dc:	f7fc fcc6 	bl	2d6c <nrf_gpio_reconfigure>
}
    63e0:	b005      	add	sp, #20
    63e2:	f85d fb04 	ldr.w	pc, [sp], #4

000063e6 <pin_is_task_output>:
{
    63e6:	b510      	push	{r4, lr}
    63e8:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    63ea:	f7fc fd71 	bl	2ed0 <pin_is_output>
    63ee:	b128      	cbz	r0, 63fc <pin_is_task_output+0x16>
    63f0:	4620      	mov	r0, r4
    63f2:	f7fc fd57 	bl	2ea4 <pin_in_use_by_te>
    63f6:	b118      	cbz	r0, 6400 <pin_is_task_output+0x1a>
    63f8:	2001      	movs	r0, #1
    63fa:	e000      	b.n	63fe <pin_is_task_output+0x18>
    63fc:	2000      	movs	r0, #0
}
    63fe:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    6400:	2000      	movs	r0, #0
    6402:	e7fc      	b.n	63fe <pin_is_task_output+0x18>

00006404 <pin_is_input>:
{
    6404:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
    6406:	f7fc fd63 	bl	2ed0 <pin_is_output>
    640a:	f080 0001 	eor.w	r0, r0, #1
}
    640e:	b2c0      	uxtb	r0, r0
    6410:	bd08      	pop	{r3, pc}

00006412 <gpiote_polarity_to_trigger>:
}
    6412:	4770      	bx	lr

00006414 <gpiote_trigger_to_polarity>:
}
    6414:	4770      	bx	lr

00006416 <is_level>:
}
    6416:	2803      	cmp	r0, #3
    6418:	bf94      	ite	ls
    641a:	2000      	movls	r0, #0
    641c:	2001      	movhi	r0, #1
    641e:	4770      	bx	lr

00006420 <latch_pending_read_and_check>:
{
    6420:	b510      	push	{r4, lr}
    6422:	4604      	mov	r4, r0
    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);
    6424:	4602      	mov	r2, r0
    6426:	2102      	movs	r1, #2
    6428:	2000      	movs	r0, #0
    642a:	f7fc fd11 	bl	2e50 <nrf_gpio_latches_read_and_clear>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    642e:	2300      	movs	r3, #0
    6430:	2b01      	cmp	r3, #1
    6432:	d804      	bhi.n	643e <latch_pending_read_and_check+0x1e>
        if (latch[port_idx])
    6434:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    6438:	b91a      	cbnz	r2, 6442 <latch_pending_read_and_check+0x22>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    643a:	3301      	adds	r3, #1
    643c:	e7f8      	b.n	6430 <latch_pending_read_and_check+0x10>
    return false;
    643e:	2000      	movs	r0, #0
}
    6440:	bd10      	pop	{r4, pc}
            return true;
    6442:	2001      	movs	r0, #1
    6444:	e7fc      	b.n	6440 <latch_pending_read_and_check+0x20>

00006446 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    6446:	b160      	cbz	r0, 6462 <z_device_is_ready+0x1c>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    6448:	68c3      	ldr	r3, [r0, #12]
    644a:	785a      	ldrb	r2, [r3, #1]
    644c:	f012 0f01 	tst.w	r2, #1
    6450:	d003      	beq.n	645a <z_device_is_ready+0x14>
    6452:	781b      	ldrb	r3, [r3, #0]
    6454:	b11b      	cbz	r3, 645e <z_device_is_ready+0x18>
    6456:	2000      	movs	r0, #0
    6458:	4770      	bx	lr
    645a:	2000      	movs	r0, #0
    645c:	4770      	bx	lr
    645e:	2001      	movs	r0, #1
    6460:	4770      	bx	lr
		return false;
    6462:	2000      	movs	r0, #0
}
    6464:	4770      	bx	lr

00006466 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    6466:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6468:	4605      	mov	r5, r0
    646a:	460e      	mov	r6, r1
	__asm__ volatile(
    646c:	f04f 0320 	mov.w	r3, #32
    6470:	f3ef 8711 	mrs	r7, BASEPRI
    6474:	f383 8812 	msr	BASEPRI_MAX, r3
    6478:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    647c:	f7fe f808 	bl	4490 <z_impl_z_current_get>
    6480:	4604      	mov	r4, r0

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    6482:	4631      	mov	r1, r6
    6484:	4628      	mov	r0, r5
    6486:	f7ff fd79 	bl	5f7c <k_sys_fatal_error_handler>
	__asm__ volatile(
    648a:	f387 8811 	msr	BASEPRI, r7
    648e:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    6492:	4620      	mov	r0, r4
    6494:	f7fb f9d2 	bl	183c <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    6498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000649a <z_early_memset>:
{
    649a:	b508      	push	{r3, lr}
	(void) memset(dst, c, n);
    649c:	f7ff f8d5 	bl	564a <memset>
}
    64a0:	bd08      	pop	{r3, pc}

000064a2 <z_early_memcpy>:
{
    64a2:	b508      	push	{r3, lr}
	(void) memcpy(dst, src, n);
    64a4:	f7ff f8a2 	bl	55ec <memcpy>
}
    64a8:	bd08      	pop	{r3, pc}

000064aa <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    64aa:	68c2      	ldr	r2, [r0, #12]
    64ac:	6903      	ldr	r3, [r0, #16]
    64ae:	431a      	orrs	r2, r3
    64b0:	f012 0203 	ands.w	r2, r2, #3
    64b4:	d10d      	bne.n	64d2 <create_free_list+0x28>
	slab->free_list = NULL;
    64b6:	2100      	movs	r1, #0
    64b8:	6141      	str	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    64ba:	e005      	b.n	64c8 <create_free_list+0x1e>
		*(char **)p = slab->free_list;
    64bc:	6941      	ldr	r1, [r0, #20]
    64be:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
    64c0:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
    64c2:	68c1      	ldr	r1, [r0, #12]
    64c4:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    64c6:	3201      	adds	r2, #1
    64c8:	6881      	ldr	r1, [r0, #8]
    64ca:	4291      	cmp	r1, r2
    64cc:	d8f6      	bhi.n	64bc <create_free_list+0x12>
	return 0;
    64ce:	2000      	movs	r0, #0
    64d0:	4770      	bx	lr
		return -EINVAL;
    64d2:	f06f 0015 	mvn.w	r0, #21
}
    64d6:	4770      	bx	lr

000064d8 <k_mem_slab_init>:
{
    64d8:	b510      	push	{r4, lr}
    64da:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
    64dc:	6083      	str	r3, [r0, #8]
	slab->block_size = block_size;
    64de:	60c2      	str	r2, [r0, #12]
	slab->buffer = buffer;
    64e0:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
    64e2:	2300      	movs	r3, #0
    64e4:	6183      	str	r3, [r0, #24]
	rc = create_free_list(slab);
    64e6:	f7ff ffe0 	bl	64aa <create_free_list>
	if (rc < 0) {
    64ea:	2800      	cmp	r0, #0
    64ec:	db01      	blt.n	64f2 <k_mem_slab_init+0x1a>
	list->head = (sys_dnode_t *)list;
    64ee:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
    64f0:	6064      	str	r4, [r4, #4]
}
    64f2:	bd10      	pop	{r4, pc}

000064f4 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    64f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    64f8:	4604      	mov	r4, r0
    64fa:	460d      	mov	r5, r1
	__asm__ volatile(
    64fc:	f04f 0320 	mov.w	r3, #32
    6500:	f3ef 8611 	mrs	r6, BASEPRI
    6504:	f383 8812 	msr	BASEPRI_MAX, r3
    6508:	f3bf 8f6f 	isb	sy
    650c:	4637      	mov	r7, r6
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    650e:	6943      	ldr	r3, [r0, #20]
    6510:	b16b      	cbz	r3, 652e <k_mem_slab_free+0x3a>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
    6512:	682b      	ldr	r3, [r5, #0]
    6514:	6962      	ldr	r2, [r4, #20]
    6516:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    6518:	682b      	ldr	r3, [r5, #0]
    651a:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    651c:	69a3      	ldr	r3, [r4, #24]
    651e:	3b01      	subs	r3, #1
    6520:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    6522:	f387 8811 	msr	BASEPRI, r7
    6526:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    652a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    652e:	f100 0808 	add.w	r8, r0, #8
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    6532:	f000 f92e 	bl	6792 <z_unpend_first_thread>
		if (pending_thread != NULL) {
    6536:	2800      	cmp	r0, #0
    6538:	d0eb      	beq.n	6512 <k_mem_slab_free+0x1e>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    653a:	682a      	ldr	r2, [r5, #0]
    653c:	2100      	movs	r1, #0
    653e:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    6542:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    6544:	f000 f88e 	bl	6664 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    6548:	4631      	mov	r1, r6
    654a:	4640      	mov	r0, r8
    654c:	f7fd fc6e 	bl	3e2c <z_reschedule>
			return;
    6550:	e7eb      	b.n	652a <k_mem_slab_free+0x36>

00006552 <setup_thread_stack>:
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    6552:	3207      	adds	r2, #7
    6554:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
    6558:	f8c0 1098 	str.w	r1, [r0, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
    655c:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
    6560:	2300      	movs	r3, #0
    6562:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
}
    6566:	1888      	adds	r0, r1, r2
    6568:	4770      	bx	lr

0000656a <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    656a:	f3ef 8005 	mrs	r0, IPSR
}
    656e:	3800      	subs	r0, #0
    6570:	bf18      	it	ne
    6572:	2001      	movne	r0, #1
    6574:	4770      	bx	lr

00006576 <z_impl_k_thread_start>:
{
    6576:	b508      	push	{r3, lr}
	z_sched_start(thread);
    6578:	f7fd fd82 	bl	4080 <z_sched_start>
}
    657c:	bd08      	pop	{r3, pc}

0000657e <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
    657e:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
    6580:	2400      	movs	r4, #0
    6582:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
    6584:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    6586:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
    6588:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
    658a:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
    658c:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
    658e:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
    6590:	bc10      	pop	{r4}
    6592:	4770      	bx	lr

00006594 <z_pm_save_idle_exit>:
{
    6594:	b508      	push	{r3, lr}
	pm_system_resume();
    6596:	f7fa fc31 	bl	dfc <pm_system_resume>
	sys_clock_idle_exit();
    659a:	f7ff fc5f 	bl	5e5c <sys_clock_idle_exit>
}
    659e:	bd08      	pop	{r3, pc}

000065a0 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
    65a0:	4288      	cmp	r0, r1
    65a2:	da00      	bge.n	65a6 <new_prio_for_inheritance+0x6>
    65a4:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    65a6:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
    65aa:	db01      	blt.n	65b0 <new_prio_for_inheritance+0x10>
    65ac:	4608      	mov	r0, r1
    65ae:	4770      	bx	lr
    65b0:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
    65b4:	4770      	bx	lr

000065b6 <adjust_owner_prio>:
{
    65b6:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
    65b8:	6880      	ldr	r0, [r0, #8]
    65ba:	f990 300e 	ldrsb.w	r3, [r0, #14]
    65be:	428b      	cmp	r3, r1
    65c0:	d101      	bne.n	65c6 <adjust_owner_prio+0x10>
	return false;
    65c2:	2000      	movs	r0, #0
}
    65c4:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
    65c6:	f7fd fdb1 	bl	412c <z_set_prio>
    65ca:	e7fb      	b.n	65c4 <adjust_owner_prio+0xe>

000065cc <z_impl_k_mutex_init>:
{
    65cc:	4603      	mov	r3, r0
	mutex->owner = NULL;
    65ce:	2000      	movs	r0, #0
    65d0:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
    65d2:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
    65d4:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
    65d6:	605b      	str	r3, [r3, #4]
}
    65d8:	4770      	bx	lr

000065da <thread_active_elsewhere>:
}
    65da:	2000      	movs	r0, #0
    65dc:	4770      	bx	lr

000065de <pended_on_thread>:
}
    65de:	6880      	ldr	r0, [r0, #8]
    65e0:	4770      	bx	lr

000065e2 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
    65e2:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    65e6:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
    65ea:	4283      	cmp	r3, r0
    65ec:	d001      	beq.n	65f2 <z_sched_prio_cmp+0x10>
		return b2 - b1;
    65ee:	1ac0      	subs	r0, r0, r3
    65f0:	4770      	bx	lr
	return 0;
    65f2:	2000      	movs	r0, #0
}
    65f4:	4770      	bx	lr

000065f6 <z_reschedule_irqlock>:
{
    65f6:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    65f8:	4603      	mov	r3, r0
    65fa:	b928      	cbnz	r0, 6608 <z_reschedule_irqlock+0x12>
    65fc:	f3ef 8205 	mrs	r2, IPSR
    6600:	b912      	cbnz	r2, 6608 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
    6602:	f7fa fe8b 	bl	131c <arch_swap>
	return ret;
    6606:	e003      	b.n	6610 <z_reschedule_irqlock+0x1a>
    6608:	f383 8811 	msr	BASEPRI, r3
    660c:	f3bf 8f6f 	isb	sy
}
    6610:	bd08      	pop	{r3, pc}

00006612 <z_reschedule_unlocked>:
{
    6612:	b508      	push	{r3, lr}
	__asm__ volatile(
    6614:	f04f 0320 	mov.w	r3, #32
    6618:	f3ef 8011 	mrs	r0, BASEPRI
    661c:	f383 8812 	msr	BASEPRI_MAX, r3
    6620:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    6624:	f7ff ffe7 	bl	65f6 <z_reschedule_irqlock>
}
    6628:	bd08      	pop	{r3, pc}

0000662a <z_priq_dumb_remove>:
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    662a:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
    662c:	680b      	ldr	r3, [r1, #0]

	prev->next = next;
    662e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    6630:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    6632:	2300      	movs	r3, #0
    6634:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
    6636:	604b      	str	r3, [r1, #4]
}
    6638:	4770      	bx	lr

0000663a <unpend_thread_no_timeout>:
{
    663a:	b510      	push	{r4, lr}
    663c:	4604      	mov	r4, r0
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    663e:	f7ff ffce 	bl	65de <pended_on_thread>
    6642:	4621      	mov	r1, r4
    6644:	f7ff fff1 	bl	662a <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    6648:	7b63      	ldrb	r3, [r4, #13]
    664a:	f023 0302 	bic.w	r3, r3, #2
    664e:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    6650:	2300      	movs	r3, #0
    6652:	60a3      	str	r3, [r4, #8]
}
    6654:	bd10      	pop	{r4, pc}

00006656 <z_priq_dumb_best>:
{
    6656:	4603      	mov	r3, r0
	return list->head == list;
    6658:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    665a:	4283      	cmp	r3, r0
    665c:	d000      	beq.n	6660 <z_priq_dumb_best+0xa>
}
    665e:	4770      	bx	lr
	struct k_thread *thread = NULL;
    6660:	2000      	movs	r0, #0
	return thread;
    6662:	e7fc      	b.n	665e <z_priq_dumb_best+0x8>

00006664 <z_ready_thread>:
{
    6664:	b538      	push	{r3, r4, r5, lr}
    6666:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    6668:	2300      	movs	r3, #0
    666a:	f04f 0220 	mov.w	r2, #32
    666e:	f3ef 8511 	mrs	r5, BASEPRI
    6672:	f382 8812 	msr	BASEPRI_MAX, r2
    6676:	f3bf 8f6f 	isb	sy
    667a:	e004      	b.n	6686 <z_ready_thread+0x22>
	__asm__ volatile(
    667c:	f385 8811 	msr	BASEPRI, r5
    6680:	f3bf 8f6f 	isb	sy
    6684:	2301      	movs	r3, #1
    6686:	b943      	cbnz	r3, 669a <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
    6688:	4620      	mov	r0, r4
    668a:	f7ff ffa6 	bl	65da <thread_active_elsewhere>
    668e:	2800      	cmp	r0, #0
    6690:	d1f4      	bne.n	667c <z_ready_thread+0x18>
			ready_thread(thread);
    6692:	4620      	mov	r0, r4
    6694:	f7fd fcb8 	bl	4008 <ready_thread>
    6698:	e7f0      	b.n	667c <z_ready_thread+0x18>
}
    669a:	bd38      	pop	{r3, r4, r5, pc}

0000669c <z_thread_timeout>:
{
    669c:	b570      	push	{r4, r5, r6, lr}
    669e:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    66a0:	f1a0 0618 	sub.w	r6, r0, #24
	LOCKED(&sched_spinlock) {
    66a4:	2300      	movs	r3, #0
	__asm__ volatile(
    66a6:	f04f 0220 	mov.w	r2, #32
    66aa:	f3ef 8511 	mrs	r5, BASEPRI
    66ae:	f382 8812 	msr	BASEPRI_MAX, r2
    66b2:	f3bf 8f6f 	isb	sy
    66b6:	e011      	b.n	66dc <z_thread_timeout+0x40>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    66b8:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    66bc:	f023 0204 	bic.w	r2, r3, #4
    66c0:	f804 2c0b 	strb.w	r2, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    66c4:	f023 0314 	bic.w	r3, r3, #20
    66c8:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    66cc:	4630      	mov	r0, r6
    66ce:	f7fd fc9b 	bl	4008 <ready_thread>
	__asm__ volatile(
    66d2:	f385 8811 	msr	BASEPRI, r5
    66d6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    66da:	2301      	movs	r3, #1
    66dc:	b963      	cbnz	r3, 66f8 <z_thread_timeout+0x5c>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
    66de:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
    66e2:	f013 0f28 	tst.w	r3, #40	; 0x28
    66e6:	d1f4      	bne.n	66d2 <z_thread_timeout+0x36>
			if (thread->base.pended_on != NULL) {
    66e8:	f854 3c10 	ldr.w	r3, [r4, #-16]
    66ec:	2b00      	cmp	r3, #0
    66ee:	d0e3      	beq.n	66b8 <z_thread_timeout+0x1c>
				unpend_thread_no_timeout(thread);
    66f0:	4630      	mov	r0, r6
    66f2:	f7ff ffa2 	bl	663a <unpend_thread_no_timeout>
    66f6:	e7df      	b.n	66b8 <z_thread_timeout+0x1c>
}
    66f8:	bd70      	pop	{r4, r5, r6, pc}

000066fa <unpend_all>:
{
    66fa:	b538      	push	{r3, r4, r5, lr}
    66fc:	4605      	mov	r5, r0
	return list->head == list;
    66fe:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6700:	42a5      	cmp	r5, r4
    6702:	d00e      	beq.n	6722 <unpend_all+0x28>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    6704:	b16c      	cbz	r4, 6722 <unpend_all+0x28>
		unpend_thread_no_timeout(thread);
    6706:	4620      	mov	r0, r4
    6708:	f7ff ff97 	bl	663a <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    670c:	f104 0018 	add.w	r0, r4, #24
    6710:	f000 f87c 	bl	680c <z_abort_timeout>
    6714:	2300      	movs	r3, #0
    6716:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
		ready_thread(thread);
    671a:	4620      	mov	r0, r4
    671c:	f7fd fc74 	bl	4008 <ready_thread>
    6720:	e7ed      	b.n	66fe <unpend_all+0x4>
}
    6722:	bd38      	pop	{r3, r4, r5, pc}

00006724 <add_to_waitq_locked>:
{
    6724:	b570      	push	{r4, r5, r6, lr}
    6726:	4605      	mov	r5, r0
    6728:	460e      	mov	r6, r1
	unready_thread(thread);
    672a:	f7fd fcc7 	bl	40bc <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    672e:	7b6b      	ldrb	r3, [r5, #13]
    6730:	f043 0302 	orr.w	r3, r3, #2
    6734:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
    6736:	b1fe      	cbz	r6, 6778 <add_to_waitq_locked+0x54>
		thread->base.pended_on = wait_q;
    6738:	60ae      	str	r6, [r5, #8]
	return list->head == list;
    673a:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    673c:	42a6      	cmp	r6, r4
    673e:	d108      	bne.n	6752 <add_to_waitq_locked+0x2e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6740:	2400      	movs	r4, #0
    6742:	e006      	b.n	6752 <add_to_waitq_locked+0x2e>
	sys_dnode_t *const prev = successor->prev;
    6744:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    6746:	606b      	str	r3, [r5, #4]
	node->next = successor;
    6748:	602c      	str	r4, [r5, #0]
	prev->next = node;
    674a:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    674c:	6065      	str	r5, [r4, #4]
}
    674e:	e013      	b.n	6778 <add_to_waitq_locked+0x54>
    6750:	2400      	movs	r4, #0
    6752:	b164      	cbz	r4, 676e <add_to_waitq_locked+0x4a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    6754:	4621      	mov	r1, r4
    6756:	4628      	mov	r0, r5
    6758:	f7ff ff43 	bl	65e2 <z_sched_prio_cmp>
    675c:	2800      	cmp	r0, #0
    675e:	dcf1      	bgt.n	6744 <add_to_waitq_locked+0x20>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    6760:	2c00      	cmp	r4, #0
    6762:	d0f6      	beq.n	6752 <add_to_waitq_locked+0x2e>
	return (node == list->tail) ? NULL : node->next;
    6764:	6873      	ldr	r3, [r6, #4]
    6766:	429c      	cmp	r4, r3
    6768:	d0f2      	beq.n	6750 <add_to_waitq_locked+0x2c>
    676a:	6824      	ldr	r4, [r4, #0]
    676c:	e7f1      	b.n	6752 <add_to_waitq_locked+0x2e>
	sys_dnode_t *const tail = list->tail;
    676e:	6873      	ldr	r3, [r6, #4]
	node->next = list;
    6770:	602e      	str	r6, [r5, #0]
	node->prev = tail;
    6772:	606b      	str	r3, [r5, #4]
	tail->next = node;
    6774:	601d      	str	r5, [r3, #0]
	list->tail = node;
    6776:	6075      	str	r5, [r6, #4]
}
    6778:	bd70      	pop	{r4, r5, r6, pc}

0000677a <pend_locked>:
{
    677a:	b570      	push	{r4, r5, r6, lr}
    677c:	4604      	mov	r4, r0
    677e:	4616      	mov	r6, r2
    6780:	461d      	mov	r5, r3
	add_to_waitq_locked(thread, wait_q);
    6782:	f7ff ffcf 	bl	6724 <add_to_waitq_locked>
	add_thread_timeout(thread, timeout);
    6786:	4632      	mov	r2, r6
    6788:	462b      	mov	r3, r5
    678a:	4620      	mov	r0, r4
    678c:	f7fd faf0 	bl	3d70 <add_thread_timeout>
}
    6790:	bd70      	pop	{r4, r5, r6, pc}

00006792 <z_unpend_first_thread>:
{
    6792:	b570      	push	{r4, r5, r6, lr}
    6794:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    6796:	2300      	movs	r3, #0
	__asm__ volatile(
    6798:	f04f 0220 	mov.w	r2, #32
    679c:	f3ef 8511 	mrs	r5, BASEPRI
    67a0:	f382 8812 	msr	BASEPRI_MAX, r2
    67a4:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
    67a8:	461c      	mov	r4, r3
    67aa:	e004      	b.n	67b6 <z_unpend_first_thread+0x24>
	__asm__ volatile(
    67ac:	f385 8811 	msr	BASEPRI, r5
    67b0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    67b4:	2301      	movs	r3, #1
    67b6:	b963      	cbnz	r3, 67d2 <z_unpend_first_thread+0x40>
		thread = _priq_wait_best(&wait_q->waitq);
    67b8:	4630      	mov	r0, r6
    67ba:	f7ff ff4c 	bl	6656 <z_priq_dumb_best>
		if (thread != NULL) {
    67be:	4604      	mov	r4, r0
    67c0:	2800      	cmp	r0, #0
    67c2:	d0f3      	beq.n	67ac <z_unpend_first_thread+0x1a>
			unpend_thread_no_timeout(thread);
    67c4:	f7ff ff39 	bl	663a <unpend_thread_no_timeout>
    67c8:	f104 0018 	add.w	r0, r4, #24
    67cc:	f000 f81e 	bl	680c <z_abort_timeout>
    67d0:	e7ec      	b.n	67ac <z_unpend_first_thread+0x1a>
}
    67d2:	4620      	mov	r0, r4
    67d4:	bd70      	pop	{r4, r5, r6, pc}

000067d6 <init_ready_q>:
	sys_dlist_init(&rq->runq);
    67d6:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
    67d8:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
    67da:	6083      	str	r3, [r0, #8]
}
    67dc:	4770      	bx	lr

000067de <remove_timeout>:
{
    67de:	b510      	push	{r4, lr}
    67e0:	4604      	mov	r4, r0
	if (next(t) != NULL) {
    67e2:	f7fd feb7 	bl	4554 <next>
    67e6:	b148      	cbz	r0, 67fc <remove_timeout+0x1e>
    67e8:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
    67ea:	6903      	ldr	r3, [r0, #16]
    67ec:	6941      	ldr	r1, [r0, #20]
    67ee:	6920      	ldr	r0, [r4, #16]
    67f0:	181b      	adds	r3, r3, r0
    67f2:	6960      	ldr	r0, [r4, #20]
    67f4:	eb41 0100 	adc.w	r1, r1, r0
    67f8:	6113      	str	r3, [r2, #16]
    67fa:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
    67fc:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    67fe:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
    6800:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    6802:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    6804:	2300      	movs	r3, #0
    6806:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    6808:	6063      	str	r3, [r4, #4]
}
    680a:	bd10      	pop	{r4, pc}

0000680c <z_abort_timeout>:
{
    680c:	b570      	push	{r4, r5, r6, lr}
    680e:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
    6810:	2300      	movs	r3, #0
	__asm__ volatile(
    6812:	f04f 0220 	mov.w	r2, #32
    6816:	f3ef 8611 	mrs	r6, BASEPRI
    681a:	f382 8812 	msr	BASEPRI_MAX, r2
    681e:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
    6822:	f06f 0015 	mvn.w	r0, #21
    6826:	e004      	b.n	6832 <z_abort_timeout+0x26>
	__asm__ volatile(
    6828:	f386 8811 	msr	BASEPRI, r6
    682c:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    6830:	2301      	movs	r3, #1
    6832:	461d      	mov	r5, r3
    6834:	b93b      	cbnz	r3, 6846 <z_abort_timeout+0x3a>
	return node->next != NULL;
    6836:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
    6838:	2b00      	cmp	r3, #0
    683a:	d0f5      	beq.n	6828 <z_abort_timeout+0x1c>
			remove_timeout(to);
    683c:	4620      	mov	r0, r4
    683e:	f7ff ffce 	bl	67de <remove_timeout>
			ret = 0;
    6842:	4628      	mov	r0, r5
    6844:	e7f0      	b.n	6828 <z_abort_timeout+0x1c>
}
    6846:	bd70      	pop	{r4, r5, r6, pc}

00006848 <z_get_next_timeout_expiry>:
{
    6848:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
    684a:	2300      	movs	r3, #0
	__asm__ volatile(
    684c:	f04f 0220 	mov.w	r2, #32
    6850:	f3ef 8411 	mrs	r4, BASEPRI
    6854:	f382 8812 	msr	BASEPRI_MAX, r2
    6858:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
    685c:	f04f 30ff 	mov.w	r0, #4294967295
    6860:	e006      	b.n	6870 <z_get_next_timeout_expiry+0x28>
		ret = next_timeout();
    6862:	f7fd fe8f 	bl	4584 <next_timeout>
	__asm__ volatile(
    6866:	f384 8811 	msr	BASEPRI, r4
    686a:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    686e:	2301      	movs	r3, #1
    6870:	2b00      	cmp	r3, #0
    6872:	d0f6      	beq.n	6862 <z_get_next_timeout_expiry+0x1a>
}
    6874:	bd10      	pop	{r4, pc}

00006876 <z_set_timeout_expiry>:
{
    6876:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6878:	4606      	mov	r6, r0
    687a:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
    687c:	2300      	movs	r3, #0
	__asm__ volatile(
    687e:	f04f 0220 	mov.w	r2, #32
    6882:	f3ef 8511 	mrs	r5, BASEPRI
    6886:	f382 8812 	msr	BASEPRI_MAX, r2
    688a:	f3bf 8f6f 	isb	sy
    688e:	e00a      	b.n	68a6 <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
    6890:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
    6892:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    6896:	2801      	cmp	r0, #1
    6898:	dd00      	ble.n	689c <z_set_timeout_expiry+0x26>
    689a:	b97c      	cbnz	r4, 68bc <z_set_timeout_expiry+0x46>
	__asm__ volatile(
    689c:	f385 8811 	msr	BASEPRI, r5
    68a0:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    68a4:	2301      	movs	r3, #1
    68a6:	461c      	mov	r4, r3
    68a8:	b97b      	cbnz	r3, 68ca <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
    68aa:	f7fd fe6b 	bl	4584 <next_timeout>
			      || (ticks <= next_to);
    68ae:	f1b0 3fff 	cmp.w	r0, #4294967295
    68b2:	d0ed      	beq.n	6890 <z_set_timeout_expiry+0x1a>
    68b4:	42b0      	cmp	r0, r6
    68b6:	dbec      	blt.n	6892 <z_set_timeout_expiry+0x1c>
    68b8:	2401      	movs	r4, #1
    68ba:	e7ea      	b.n	6892 <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    68bc:	4639      	mov	r1, r7
    68be:	42b0      	cmp	r0, r6
    68c0:	bfa8      	it	ge
    68c2:	4630      	movge	r0, r6
    68c4:	f7fb ff22 	bl	270c <sys_clock_set_timeout>
    68c8:	e7e8      	b.n	689c <z_set_timeout_expiry+0x26>
}
    68ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000068cc <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    68cc:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    68ce:	f7fd ff6b 	bl	47a8 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    68d2:	bd08      	pop	{r3, pc}

000068d4 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    68d4:	b900      	cbnz	r0, 68d8 <z_impl_k_busy_wait+0x4>
    68d6:	4770      	bx	lr
{
    68d8:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    68da:	f7fe fd58 	bl	538e <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    68de:	bd08      	pop	{r3, pc}

000068e0 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    68e0:	4770      	bx	lr
	...
