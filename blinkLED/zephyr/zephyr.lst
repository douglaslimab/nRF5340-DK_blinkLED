
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	a8 18 00 20 e5 16 00 00 b9 53 00 00 9d 16 00 00     ... .....S......
  10:	9d 16 00 00 9d 16 00 00 9d 16 00 00 9d 16 00 00     ................
	...
  2c:	61 13 00 00 9d 16 00 00 00 00 00 00 05 13 00 00     a...............
  3c:	9d 16 00 00                                         ....

00000040 <_irq_vector_table>:
  40:	f1 13 00 00 f1 13 00 00 f1 13 00 00 f1 13 00 00     ................
  50:	f1 13 00 00 f1 13 00 00 f1 13 00 00 f1 13 00 00     ................
  60:	f1 13 00 00 f1 13 00 00 f1 13 00 00 f1 13 00 00     ................
  70:	f1 13 00 00 f1 13 00 00 f1 13 00 00 f1 13 00 00     ................
  80:	f1 13 00 00 f1 13 00 00 f1 13 00 00 f1 13 00 00     ................
  90:	f1 13 00 00 f1 13 00 00 f1 13 00 00 f1 13 00 00     ................
  a0:	f1 13 00 00 f1 13 00 00 f1 13 00 00 f1 13 00 00     ................
  b0:	f1 13 00 00 f1 13 00 00 f1 13 00 00 f1 13 00 00     ................
  c0:	f1 13 00 00 f1 13 00 00 f1 13 00 00 f1 13 00 00     ................
  d0:	f1 13 00 00 f1 13 00 00 f1 13 00 00 f1 13 00 00     ................
  e0:	f1 13 00 00 f1 13 00 00 f1 13 00 00 f1 13 00 00     ................
  f0:	f1 13 00 00 f1 13 00 00 f1 13 00 00 f1 13 00 00     ................
 100:	f1 13 00 00 f1 13 00 00 f1 13 00 00 f1 13 00 00     ................
 110:	f1 13 00 00 f1 13 00 00 f1 13 00 00 f1 13 00 00     ................
 120:	f1 13 00 00 f1 13 00 00 f1 13 00 00 f1 13 00 00     ................
 130:	f1 13 00 00 f1 13 00 00 f1 13 00 00 f1 13 00 00     ................
 140:	f1 13 00 00 f1 13 00 00 f1 13 00 00 f1 13 00 00     ................
 150:	f1 13 00 00                                         ....

Disassembly of section text:

00000154 <__aeabi_uldivmod>:
     154:	b953      	cbnz	r3, 16c <__aeabi_uldivmod+0x18>
     156:	b94a      	cbnz	r2, 16c <__aeabi_uldivmod+0x18>
     158:	2900      	cmp	r1, #0
     15a:	bf08      	it	eq
     15c:	2800      	cmpeq	r0, #0
     15e:	bf1c      	itt	ne
     160:	f04f 31ff 	movne.w	r1, #4294967295
     164:	f04f 30ff 	movne.w	r0, #4294967295
     168:	f000 b80c 	b.w	184 <__aeabi_idiv0>
     16c:	f1ad 0c08 	sub.w	ip, sp, #8
     170:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     174:	f000 f808 	bl	188 <__udivmoddi4>
     178:	f8dd e004 	ldr.w	lr, [sp, #4]
     17c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     180:	b004      	add	sp, #16
     182:	4770      	bx	lr

00000184 <__aeabi_idiv0>:
     184:	4770      	bx	lr
     186:	bf00      	nop

00000188 <__udivmoddi4>:
     188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     18c:	4686      	mov	lr, r0
     18e:	468c      	mov	ip, r1
     190:	4608      	mov	r0, r1
     192:	9e08      	ldr	r6, [sp, #32]
     194:	4615      	mov	r5, r2
     196:	4674      	mov	r4, lr
     198:	4619      	mov	r1, r3
     19a:	2b00      	cmp	r3, #0
     19c:	f040 80c1 	bne.w	322 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa2>
     1a0:	4285      	cmp	r5, r0
     1a2:	fab2 f282 	clz	r2, r2
     1a6:	d945      	bls.n	234 <CONFIG_SRAM_SIZE+0x74>
     1a8:	b14a      	cbz	r2, 1be <__udivmoddi4+0x36>
     1aa:	f1c2 0320 	rsb	r3, r2, #32
     1ae:	fa00 fc02 	lsl.w	ip, r0, r2
     1b2:	4095      	lsls	r5, r2
     1b4:	4094      	lsls	r4, r2
     1b6:	fa2e f303 	lsr.w	r3, lr, r3
     1ba:	ea43 0c0c 	orr.w	ip, r3, ip
     1be:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1c2:	b2a8      	uxth	r0, r5
     1c4:	0c23      	lsrs	r3, r4, #16
     1c6:	fbbc f8fe 	udiv	r8, ip, lr
     1ca:	fb0e cc18 	mls	ip, lr, r8, ip
     1ce:	fb08 f900 	mul.w	r9, r8, r0
     1d2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     1d6:	4599      	cmp	r9, r3
     1d8:	d928      	bls.n	22c <CONFIG_SRAM_SIZE+0x6c>
     1da:	18eb      	adds	r3, r5, r3
     1dc:	f108 37ff 	add.w	r7, r8, #4294967295
     1e0:	d204      	bcs.n	1ec <CONFIG_SRAM_SIZE+0x2c>
     1e2:	4599      	cmp	r9, r3
     1e4:	d902      	bls.n	1ec <CONFIG_SRAM_SIZE+0x2c>
     1e6:	f1a8 0702 	sub.w	r7, r8, #2
     1ea:	442b      	add	r3, r5
     1ec:	eba3 0309 	sub.w	r3, r3, r9
     1f0:	b2a4      	uxth	r4, r4
     1f2:	fbb3 fcfe 	udiv	ip, r3, lr
     1f6:	fb0e 331c 	mls	r3, lr, ip, r3
     1fa:	fb0c f000 	mul.w	r0, ip, r0
     1fe:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     202:	42a0      	cmp	r0, r4
     204:	d914      	bls.n	230 <CONFIG_SRAM_SIZE+0x70>
     206:	192c      	adds	r4, r5, r4
     208:	f10c 33ff 	add.w	r3, ip, #4294967295
     20c:	d204      	bcs.n	218 <CONFIG_SRAM_SIZE+0x58>
     20e:	42a0      	cmp	r0, r4
     210:	d902      	bls.n	218 <CONFIG_SRAM_SIZE+0x58>
     212:	f1ac 0302 	sub.w	r3, ip, #2
     216:	442c      	add	r4, r5
     218:	1a24      	subs	r4, r4, r0
     21a:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
     21e:	b11e      	cbz	r6, 228 <CONFIG_SRAM_SIZE+0x68>
     220:	40d4      	lsrs	r4, r2
     222:	2300      	movs	r3, #0
     224:	6034      	str	r4, [r6, #0]
     226:	6073      	str	r3, [r6, #4]
     228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     22c:	4647      	mov	r7, r8
     22e:	e7dd      	b.n	1ec <CONFIG_SRAM_SIZE+0x2c>
     230:	4663      	mov	r3, ip
     232:	e7f1      	b.n	218 <CONFIG_SRAM_SIZE+0x58>
     234:	bb92      	cbnz	r2, 29c <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1c>
     236:	1b43      	subs	r3, r0, r5
     238:	2101      	movs	r1, #1
     23a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     23e:	b2af      	uxth	r7, r5
     240:	0c20      	lsrs	r0, r4, #16
     242:	fbb3 fcfe 	udiv	ip, r3, lr
     246:	fb0e 331c 	mls	r3, lr, ip, r3
     24a:	fb0c f807 	mul.w	r8, ip, r7
     24e:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     252:	4598      	cmp	r8, r3
     254:	d961      	bls.n	31a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x9a>
     256:	18eb      	adds	r3, r5, r3
     258:	f10c 30ff 	add.w	r0, ip, #4294967295
     25c:	d204      	bcs.n	268 <CONFIG_SRAM_SIZE+0xa8>
     25e:	4598      	cmp	r8, r3
     260:	d902      	bls.n	268 <CONFIG_SRAM_SIZE+0xa8>
     262:	f1ac 0002 	sub.w	r0, ip, #2
     266:	442b      	add	r3, r5
     268:	eba3 0308 	sub.w	r3, r3, r8
     26c:	b2a4      	uxth	r4, r4
     26e:	fbb3 fcfe 	udiv	ip, r3, lr
     272:	fb0e 331c 	mls	r3, lr, ip, r3
     276:	fb0c f707 	mul.w	r7, ip, r7
     27a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     27e:	42a7      	cmp	r7, r4
     280:	d94d      	bls.n	31e <CONFIG_PM_PARTITION_SIZE_PROVISION+0x9e>
     282:	192c      	adds	r4, r5, r4
     284:	f10c 33ff 	add.w	r3, ip, #4294967295
     288:	d204      	bcs.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
     28a:	42a7      	cmp	r7, r4
     28c:	d902      	bls.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
     28e:	f1ac 0302 	sub.w	r3, ip, #2
     292:	442c      	add	r4, r5
     294:	1be4      	subs	r4, r4, r7
     296:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     29a:	e7c0      	b.n	21e <CONFIG_SRAM_SIZE+0x5e>
     29c:	f1c2 0320 	rsb	r3, r2, #32
     2a0:	4095      	lsls	r5, r2
     2a2:	4094      	lsls	r4, r2
     2a4:	fa20 f103 	lsr.w	r1, r0, r3
     2a8:	fa2e f303 	lsr.w	r3, lr, r3
     2ac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     2b0:	4090      	lsls	r0, r2
     2b2:	b2af      	uxth	r7, r5
     2b4:	4303      	orrs	r3, r0
     2b6:	fbb1 fcfe 	udiv	ip, r1, lr
     2ba:	fb0e 101c 	mls	r0, lr, ip, r1
     2be:	0c19      	lsrs	r1, r3, #16
     2c0:	fb0c f807 	mul.w	r8, ip, r7
     2c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     2c8:	4588      	cmp	r8, r1
     2ca:	d922      	bls.n	312 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x92>
     2cc:	1869      	adds	r1, r5, r1
     2ce:	f10c 30ff 	add.w	r0, ip, #4294967295
     2d2:	d204      	bcs.n	2de <CONFIG_PM_PARTITION_SIZE_PROVISION+0x5e>
     2d4:	4588      	cmp	r8, r1
     2d6:	d902      	bls.n	2de <CONFIG_PM_PARTITION_SIZE_PROVISION+0x5e>
     2d8:	f1ac 0002 	sub.w	r0, ip, #2
     2dc:	4429      	add	r1, r5
     2de:	eba1 0108 	sub.w	r1, r1, r8
     2e2:	b29b      	uxth	r3, r3
     2e4:	fbb1 fcfe 	udiv	ip, r1, lr
     2e8:	fb0e 111c 	mls	r1, lr, ip, r1
     2ec:	fb0c f707 	mul.w	r7, ip, r7
     2f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     2f4:	429f      	cmp	r7, r3
     2f6:	d90e      	bls.n	316 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x96>
     2f8:	18eb      	adds	r3, r5, r3
     2fa:	f10c 31ff 	add.w	r1, ip, #4294967295
     2fe:	d204      	bcs.n	30a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8a>
     300:	429f      	cmp	r7, r3
     302:	d902      	bls.n	30a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8a>
     304:	f1ac 0102 	sub.w	r1, ip, #2
     308:	442b      	add	r3, r5
     30a:	1bdb      	subs	r3, r3, r7
     30c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     310:	e793      	b.n	23a <CONFIG_SRAM_SIZE+0x7a>
     312:	4660      	mov	r0, ip
     314:	e7e3      	b.n	2de <CONFIG_PM_PARTITION_SIZE_PROVISION+0x5e>
     316:	4661      	mov	r1, ip
     318:	e7f7      	b.n	30a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8a>
     31a:	4660      	mov	r0, ip
     31c:	e7a4      	b.n	268 <CONFIG_SRAM_SIZE+0xa8>
     31e:	4663      	mov	r3, ip
     320:	e7b8      	b.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
     322:	4283      	cmp	r3, r0
     324:	d906      	bls.n	334 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xb4>
     326:	b916      	cbnz	r6, 32e <CONFIG_PM_PARTITION_SIZE_PROVISION+0xae>
     328:	2100      	movs	r1, #0
     32a:	4608      	mov	r0, r1
     32c:	e77c      	b.n	228 <CONFIG_SRAM_SIZE+0x68>
     32e:	e9c6 e000 	strd	lr, r0, [r6]
     332:	e7f9      	b.n	328 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa8>
     334:	fab3 f783 	clz	r7, r3
     338:	b98f      	cbnz	r7, 35e <CONFIG_PM_PARTITION_SIZE_PROVISION+0xde>
     33a:	4283      	cmp	r3, r0
     33c:	d301      	bcc.n	342 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xc2>
     33e:	4572      	cmp	r2, lr
     340:	d808      	bhi.n	354 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd4>
     342:	ebbe 0402 	subs.w	r4, lr, r2
     346:	eb60 0303 	sbc.w	r3, r0, r3
     34a:	2001      	movs	r0, #1
     34c:	469c      	mov	ip, r3
     34e:	b91e      	cbnz	r6, 358 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd8>
     350:	2100      	movs	r1, #0
     352:	e769      	b.n	228 <CONFIG_SRAM_SIZE+0x68>
     354:	4638      	mov	r0, r7
     356:	e7fa      	b.n	34e <CONFIG_PM_PARTITION_SIZE_PROVISION+0xce>
     358:	e9c6 4c00 	strd	r4, ip, [r6]
     35c:	e7f8      	b.n	350 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd0>
     35e:	f1c7 0c20 	rsb	ip, r7, #32
     362:	40bb      	lsls	r3, r7
     364:	fa0e f507 	lsl.w	r5, lr, r7
     368:	fa22 f40c 	lsr.w	r4, r2, ip
     36c:	fa2e f10c 	lsr.w	r1, lr, ip
     370:	40ba      	lsls	r2, r7
     372:	431c      	orrs	r4, r3
     374:	fa20 f30c 	lsr.w	r3, r0, ip
     378:	40b8      	lsls	r0, r7
     37a:	ea4f 4914 	mov.w	r9, r4, lsr #16
     37e:	4301      	orrs	r1, r0
     380:	fa1f fe84 	uxth.w	lr, r4
     384:	fbb3 f8f9 	udiv	r8, r3, r9
     388:	fb09 3018 	mls	r0, r9, r8, r3
     38c:	0c0b      	lsrs	r3, r1, #16
     38e:	fb08 fa0e 	mul.w	sl, r8, lr
     392:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     396:	459a      	cmp	sl, r3
     398:	d940      	bls.n	41c <CONFIG_FLASH_SIZE+0x1c>
     39a:	18e3      	adds	r3, r4, r3
     39c:	f108 30ff 	add.w	r0, r8, #4294967295
     3a0:	d204      	bcs.n	3ac <CONFIG_PM_PARTITION_SIZE_PROVISION+0x12c>
     3a2:	459a      	cmp	sl, r3
     3a4:	d902      	bls.n	3ac <CONFIG_PM_PARTITION_SIZE_PROVISION+0x12c>
     3a6:	f1a8 0002 	sub.w	r0, r8, #2
     3aa:	4423      	add	r3, r4
     3ac:	eba3 030a 	sub.w	r3, r3, sl
     3b0:	b289      	uxth	r1, r1
     3b2:	fbb3 f8f9 	udiv	r8, r3, r9
     3b6:	fb09 3318 	mls	r3, r9, r8, r3
     3ba:	fb08 fe0e 	mul.w	lr, r8, lr
     3be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     3c2:	458e      	cmp	lr, r1
     3c4:	d92c      	bls.n	420 <CONFIG_FLASH_SIZE+0x20>
     3c6:	1861      	adds	r1, r4, r1
     3c8:	f108 33ff 	add.w	r3, r8, #4294967295
     3cc:	d204      	bcs.n	3d8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x158>
     3ce:	458e      	cmp	lr, r1
     3d0:	d902      	bls.n	3d8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x158>
     3d2:	f1a8 0302 	sub.w	r3, r8, #2
     3d6:	4421      	add	r1, r4
     3d8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     3dc:	eba1 010e 	sub.w	r1, r1, lr
     3e0:	fba0 9802 	umull	r9, r8, r0, r2
     3e4:	4541      	cmp	r1, r8
     3e6:	46ce      	mov	lr, r9
     3e8:	4643      	mov	r3, r8
     3ea:	d302      	bcc.n	3f2 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x172>
     3ec:	d106      	bne.n	3fc <CONFIG_PM_PARTITION_SIZE_PROVISION+0x17c>
     3ee:	454d      	cmp	r5, r9
     3f0:	d204      	bcs.n	3fc <CONFIG_PM_PARTITION_SIZE_PROVISION+0x17c>
     3f2:	3801      	subs	r0, #1
     3f4:	ebb9 0e02 	subs.w	lr, r9, r2
     3f8:	eb68 0304 	sbc.w	r3, r8, r4
     3fc:	2e00      	cmp	r6, #0
     3fe:	d0a7      	beq.n	350 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd0>
     400:	ebb5 020e 	subs.w	r2, r5, lr
     404:	eb61 0103 	sbc.w	r1, r1, r3
     408:	fa01 fc0c 	lsl.w	ip, r1, ip
     40c:	fa22 f307 	lsr.w	r3, r2, r7
     410:	40f9      	lsrs	r1, r7
     412:	ea4c 0303 	orr.w	r3, ip, r3
     416:	e9c6 3100 	strd	r3, r1, [r6]
     41a:	e799      	b.n	350 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd0>
     41c:	4640      	mov	r0, r8
     41e:	e7c5      	b.n	3ac <CONFIG_PM_PARTITION_SIZE_PROVISION+0x12c>
     420:	4643      	mov	r3, r8
     422:	e7d9      	b.n	3d8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x158>

00000424 <main>:
 * See the sample documentation for information on how to fix this.
 */
static const struct gpio_dt_spec led = GPIO_DT_SPEC_GET(LED0_NODE, gpios);

void main(void)
{
     424:	b508      	push	{r3, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
     426:	480b      	ldr	r0, [pc, #44]	; (454 <main+0x30>)
     428:	f005 ffc9 	bl	63be <z_device_is_ready>
	int ret;

	if (!device_is_ready(led.port)) {
     42c:	b900      	cbnz	r0, 430 <main+0xc>
		if (ret < 0) {
			return;
		}
		k_msleep(SLEEP_TIME_MS);
	}
}
     42e:	bd08      	pop	{r3, pc}
	ret = gpio_pin_configure_dt(&led, GPIO_OUTPUT_ACTIVE);
     430:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
     434:	4808      	ldr	r0, [pc, #32]	; (458 <main+0x34>)
     436:	f004 fb71 	bl	4b1c <gpio_pin_configure_dt>
	if (ret < 0) {
     43a:	2800      	cmp	r0, #0
     43c:	da04      	bge.n	448 <main+0x24>
     43e:	e7f6      	b.n	42e <main+0xa>
		k_msleep(SLEEP_TIME_MS);
     440:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     444:	f004 fb7f 	bl	4b46 <k_msleep>
		ret = gpio_pin_toggle_dt(&led);
     448:	4803      	ldr	r0, [pc, #12]	; (458 <main+0x34>)
     44a:	f004 fb72 	bl	4b32 <gpio_pin_toggle_dt>
		if (ret < 0) {
     44e:	2800      	cmp	r0, #0
     450:	daf6      	bge.n	440 <main+0x1c>
     452:	e7ec      	b.n	42e <main+0xa>
     454:	000068e4 	.word	0x000068e4
     458:	00006bb8 	.word	0x00006bb8

0000045c <char_out>:

	return c;
}

static int char_out(int c, void *ctx_p)
{
     45c:	b508      	push	{r3, lr}
	(void) ctx_p;
	return _char_out(c);
     45e:	4b02      	ldr	r3, [pc, #8]	; (468 <char_out+0xc>)
     460:	681b      	ldr	r3, [r3, #0]
     462:	4798      	blx	r3
}
     464:	bd08      	pop	{r3, pc}
     466:	bf00      	nop
     468:	20000000 	.word	0x20000000

0000046c <__printk_hook_install>:
	_char_out = fn;
     46c:	4b01      	ldr	r3, [pc, #4]	; (474 <__printk_hook_install+0x8>)
     46e:	6018      	str	r0, [r3, #0]
}
     470:	4770      	bx	lr
     472:	bf00      	nop
     474:	20000000 	.word	0x20000000

00000478 <vprintk>:

void vprintk(const char *fmt, va_list ap)
{
     478:	b500      	push	{lr}
     47a:	b083      	sub	sp, #12
     47c:	4602      	mov	r2, r0
     47e:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
     480:	2100      	movs	r1, #0
     482:	9100      	str	r1, [sp, #0]
     484:	4802      	ldr	r0, [pc, #8]	; (490 <vprintk+0x18>)
     486:	f000 f91d 	bl	6c4 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
     48a:	b003      	add	sp, #12
     48c:	f85d fb04 	ldr.w	pc, [sp], #4
     490:	0000045d 	.word	0x0000045d

00000494 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     494:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     498:	b083      	sub	sp, #12
     49a:	4604      	mov	r4, r0
     49c:	4608      	mov	r0, r1
     49e:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     4a0:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     4a2:	f013 0f08 	tst.w	r3, #8
     4a6:	d105      	bne.n	4b4 <process_event+0x20>
     4a8:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
     4ac:	2300      	movs	r3, #0
     4ae:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
     4b0:	9301      	str	r3, [sp, #4]
}
     4b2:	e055      	b.n	560 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x78>
		if (evt == EVT_COMPLETE) {
     4b4:	2901      	cmp	r1, #1
     4b6:	d009      	beq.n	4cc <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     4b8:	f043 0320 	orr.w	r3, r3, #32
     4bc:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     4be:	f385 8811 	msr	BASEPRI, r5
     4c2:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     4c6:	b003      	add	sp, #12
     4c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     4cc:	f043 0310 	orr.w	r3, r3, #16
     4d0:	8323      	strh	r3, [r4, #24]
     4d2:	e7f4      	b.n	4be <process_event+0x2a>
			evt = process_recheck(mgr);
     4d4:	4620      	mov	r0, r4
     4d6:	f004 fb90 	bl	4bfa <process_recheck>
     4da:	e043      	b.n	564 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x7c>
			res = mgr->last_res;
     4dc:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
     4e0:	464a      	mov	r2, r9
     4e2:	4669      	mov	r1, sp
     4e4:	4620      	mov	r0, r4
     4e6:	f004 fba1 	bl	4c2c <process_complete>
		onoff_transition_fn transit = NULL;
     4ea:	f04f 0800 	mov.w	r8, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     4ee:	8b23      	ldrh	r3, [r4, #24]
     4f0:	f003 0707 	and.w	r7, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     4f4:	42b7      	cmp	r7, r6
     4f6:	d069      	beq.n	5cc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe4>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     4f8:	68a2      	ldr	r2, [r4, #8]
     4fa:	2a00      	cmp	r2, #0
     4fc:	d066      	beq.n	5cc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe4>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     4fe:	2201      	movs	r2, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     500:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
     504:	8323      	strh	r3, [r4, #24]
     506:	f385 8811 	msr	BASEPRI, r5
     50a:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     50e:	2a00      	cmp	r2, #0
     510:	d164      	bne.n	5dc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xf4>
     512:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
     514:	b12b      	cbz	r3, 522 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x3a>
				notify_all(mgr, &clients, state, res);
     516:	464b      	mov	r3, r9
     518:	463a      	mov	r2, r7
     51a:	4669      	mov	r1, sp
     51c:	4620      	mov	r0, r4
     51e:	f004 fbfe 	bl	4d1e <notify_all>
			if (transit != NULL) {
     522:	f1b8 0f00 	cmp.w	r8, #0
     526:	d002      	beq.n	52e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x46>
				transit(mgr, transition_complete);
     528:	4934      	ldr	r1, [pc, #208]	; (5fc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x114>)
     52a:	4620      	mov	r0, r4
     52c:	47c0      	blx	r8
	__asm__ volatile(
     52e:	f04f 0320 	mov.w	r3, #32
     532:	f3ef 8511 	mrs	r5, BASEPRI
     536:	f383 8812 	msr	BASEPRI_MAX, r3
     53a:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     53e:	8b23      	ldrh	r3, [r4, #24]
     540:	f023 0308 	bic.w	r3, r3, #8
     544:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     546:	8b23      	ldrh	r3, [r4, #24]
     548:	f013 0f10 	tst.w	r3, #16
     54c:	d04c      	beq.n	5e8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x100>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     54e:	f023 0310 	bic.w	r3, r3, #16
     552:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
     554:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     556:	8b26      	ldrh	r6, [r4, #24]
     558:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
     55c:	2800      	cmp	r0, #0
     55e:	d0ae      	beq.n	4be <process_event+0x2a>
		if (evt == EVT_RECHECK) {
     560:	2802      	cmp	r0, #2
     562:	d0b7      	beq.n	4d4 <process_event+0x40>
		if (evt == EVT_NOP) {
     564:	2800      	cmp	r0, #0
     566:	d0aa      	beq.n	4be <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
     568:	3801      	subs	r0, #1
     56a:	2804      	cmp	r0, #4
     56c:	d82a      	bhi.n	5c4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xdc>
     56e:	a301      	add	r3, pc, #4	; (adr r3, 574 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8c>)
     570:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
     574:	000004dd 	.word	0x000004dd
     578:	000005c5 	.word	0x000005c5
     57c:	00000589 	.word	0x00000589
     580:	0000059d 	.word	0x0000059d
     584:	000005b1 	.word	0x000005b1
			transit = mgr->transitions->start;
     588:	6923      	ldr	r3, [r4, #16]
     58a:	f8d3 8000 	ldr.w	r8, [r3]
			set_state(mgr, ONOFF_STATE_TO_ON);
     58e:	2106      	movs	r1, #6
     590:	4620      	mov	r0, r4
     592:	f004 fb08 	bl	4ba6 <set_state>
		res = 0;
     596:	f04f 0900 	mov.w	r9, #0
     59a:	e7a8      	b.n	4ee <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6>
			transit = mgr->transitions->stop;
     59c:	6923      	ldr	r3, [r4, #16]
     59e:	f8d3 8004 	ldr.w	r8, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
     5a2:	2104      	movs	r1, #4
     5a4:	4620      	mov	r0, r4
     5a6:	f004 fafe 	bl	4ba6 <set_state>
		res = 0;
     5aa:	f04f 0900 	mov.w	r9, #0
     5ae:	e79e      	b.n	4ee <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6>
			transit = mgr->transitions->reset;
     5b0:	6923      	ldr	r3, [r4, #16]
     5b2:	f8d3 8008 	ldr.w	r8, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
     5b6:	2105      	movs	r1, #5
     5b8:	4620      	mov	r0, r4
     5ba:	f004 faf4 	bl	4ba6 <set_state>
		res = 0;
     5be:	f04f 0900 	mov.w	r9, #0
     5c2:	e794      	b.n	4ee <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6>
		if (evt == EVT_NOP) {
     5c4:	f04f 0800 	mov.w	r8, #0
     5c8:	46c1      	mov	r9, r8
     5ca:	e790      	b.n	4ee <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6>
     5cc:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
     5ce:	b10a      	cbz	r2, 5d4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xec>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     5d0:	2200      	movs	r2, #0
     5d2:	e795      	b.n	500 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x18>
		    || (transit != NULL)) {
     5d4:	f1b8 0f00 	cmp.w	r8, #0
     5d8:	d192      	bne.n	500 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x18>
     5da:	e7b4      	b.n	546 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x5e>
				notify_monitors(mgr, state, res);
     5dc:	464a      	mov	r2, r9
     5de:	4639      	mov	r1, r7
     5e0:	4620      	mov	r0, r4
     5e2:	f004 fae8 	bl	4bb6 <notify_monitors>
     5e6:	e794      	b.n	512 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2a>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     5e8:	f013 0f20 	tst.w	r3, #32
     5ec:	d004      	beq.n	5f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x110>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     5ee:	f023 0320 	bic.w	r3, r3, #32
     5f2:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
     5f4:	2002      	movs	r0, #2
     5f6:	e7ae      	b.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
		evt = EVT_NOP;
     5f8:	2000      	movs	r0, #0
     5fa:	e7ac      	b.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     5fc:	00004d4d 	.word	0x00004d4d

00000600 <extract_flags>:
 *
 * @return a pointer the first character that follows the flags.
 */
static inline const char *extract_flags(struct conversion *conv,
					const char *sp)
{
     600:	4684      	mov	ip, r0
     602:	4608      	mov	r0, r1
	bool loop = true;
     604:	2201      	movs	r2, #1
     606:	e026      	b.n	656 <extract_flags+0x56>

	do {
		switch (*sp) {
		case '-':
			conv->flag_dash = true;
     608:	f89c 3000 	ldrb.w	r3, [ip]
     60c:	f043 0304 	orr.w	r3, r3, #4
     610:	f88c 3000 	strb.w	r3, [ip]
			conv->flag_zero = true;
			break;
		default:
			loop = false;
		}
		if (loop) {
     614:	b1f2      	cbz	r2, 654 <extract_flags+0x54>
			++sp;
     616:	3001      	adds	r0, #1
     618:	e01c      	b.n	654 <extract_flags+0x54>
			conv->flag_plus = true;
     61a:	f89c 3000 	ldrb.w	r3, [ip]
     61e:	f043 0308 	orr.w	r3, r3, #8
     622:	f88c 3000 	strb.w	r3, [ip]
			break;
     626:	e7f5      	b.n	614 <extract_flags+0x14>
			conv->flag_space = true;
     628:	f89c 3000 	ldrb.w	r3, [ip]
     62c:	f043 0310 	orr.w	r3, r3, #16
     630:	f88c 3000 	strb.w	r3, [ip]
			break;
     634:	e7ee      	b.n	614 <extract_flags+0x14>
			conv->flag_hash = true;
     636:	f89c 3000 	ldrb.w	r3, [ip]
     63a:	f043 0320 	orr.w	r3, r3, #32
     63e:	f88c 3000 	strb.w	r3, [ip]
			break;
     642:	e7e7      	b.n	614 <extract_flags+0x14>
			conv->flag_zero = true;
     644:	f89c 3000 	ldrb.w	r3, [ip]
     648:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     64c:	f88c 3000 	strb.w	r3, [ip]
			break;
     650:	e7e0      	b.n	614 <extract_flags+0x14>
		switch (*sp) {
     652:	2200      	movs	r2, #0
		}
	} while (loop);
     654:	b342      	cbz	r2, 6a8 <extract_flags+0xa8>
		switch (*sp) {
     656:	7803      	ldrb	r3, [r0, #0]
     658:	3b20      	subs	r3, #32
     65a:	2b10      	cmp	r3, #16
     65c:	d8f9      	bhi.n	652 <extract_flags+0x52>
     65e:	a101      	add	r1, pc, #4	; (adr r1, 664 <extract_flags+0x64>)
     660:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
     664:	00000629 	.word	0x00000629
     668:	00000653 	.word	0x00000653
     66c:	00000653 	.word	0x00000653
     670:	00000637 	.word	0x00000637
     674:	00000653 	.word	0x00000653
     678:	00000653 	.word	0x00000653
     67c:	00000653 	.word	0x00000653
     680:	00000653 	.word	0x00000653
     684:	00000653 	.word	0x00000653
     688:	00000653 	.word	0x00000653
     68c:	00000653 	.word	0x00000653
     690:	0000061b 	.word	0x0000061b
     694:	00000653 	.word	0x00000653
     698:	00000609 	.word	0x00000609
     69c:	00000653 	.word	0x00000653
     6a0:	00000653 	.word	0x00000653
     6a4:	00000645 	.word	0x00000645

	/* zero && dash => !zero */
	if (conv->flag_zero && conv->flag_dash) {
     6a8:	f89c 3000 	ldrb.w	r3, [ip]
     6ac:	f003 0344 	and.w	r3, r3, #68	; 0x44
     6b0:	2b44      	cmp	r3, #68	; 0x44
     6b2:	d000      	beq.n	6b6 <extract_flags+0xb6>
	}

	/* space && plus => !plus, handled in emitter code */

	return sp;
}
     6b4:	4770      	bx	lr
		conv->flag_zero = false;
     6b6:	f89c 3000 	ldrb.w	r3, [ip]
     6ba:	f36f 1386 	bfc	r3, #6, #1
     6be:	f88c 3000 	strb.w	r3, [ip]
     6c2:	e7f7      	b.n	6b4 <extract_flags+0xb4>

000006c4 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
     6c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     6c8:	b091      	sub	sp, #68	; 0x44
     6ca:	4606      	mov	r6, r0
     6cc:	460d      	mov	r5, r1
     6ce:	4691      	mov	r9, r2
     6d0:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     6d2:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     6d4:	f899 0000 	ldrb.w	r0, [r9]
     6d8:	2800      	cmp	r0, #0
     6da:	f000 82b9 	beq.w	c50 <CONFIG_ISR_STACK_SIZE+0x450>
		if (*fp != '%') {
     6de:	2825      	cmp	r0, #37	; 0x25
     6e0:	d008      	beq.n	6f4 <z_cbvprintf_impl+0x30>
			OUTC(*fp++);
     6e2:	f109 0901 	add.w	r9, r9, #1
     6e6:	4629      	mov	r1, r5
     6e8:	47b0      	blx	r6
     6ea:	2800      	cmp	r0, #0
     6ec:	f2c0 82b1 	blt.w	c52 <CONFIG_ISR_STACK_SIZE+0x452>
     6f0:	3401      	adds	r4, #1
			continue;
     6f2:	e7ef      	b.n	6d4 <z_cbvprintf_impl+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
     6f4:	2300      	movs	r3, #0
     6f6:	9304      	str	r3, [sp, #16]
     6f8:	9305      	str	r3, [sp, #20]
     6fa:	9306      	str	r3, [sp, #24]
     6fc:	9307      	str	r3, [sp, #28]
     6fe:	9308      	str	r3, [sp, #32]
     700:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
     702:	4649      	mov	r1, r9
     704:	a806      	add	r0, sp, #24
     706:	f004 fd3d 	bl	5184 <extract_conversion>
     70a:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
     70c:	f89d 3019 	ldrb.w	r3, [sp, #25]
     710:	f013 0f01 	tst.w	r3, #1
     714:	f000 8097 	beq.w	846 <CONFIG_ISR_STACK_SIZE+0x46>
			width = va_arg(ap, int);
     718:	9b03      	ldr	r3, [sp, #12]
     71a:	1d1a      	adds	r2, r3, #4
     71c:	9203      	str	r2, [sp, #12]
     71e:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
     720:	2f00      	cmp	r7, #0
     722:	f2c0 8088 	blt.w	836 <CONFIG_ISR_STACK_SIZE+0x36>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
     726:	f89d 3019 	ldrb.w	r3, [sp, #25]
     72a:	f013 0f04 	tst.w	r3, #4
     72e:	f000 809c 	beq.w	86a <CONFIG_ISR_STACK_SIZE+0x6a>
			int arg = va_arg(ap, int);
     732:	9b03      	ldr	r3, [sp, #12]
     734:	1d1a      	adds	r2, r3, #4
     736:	9203      	str	r2, [sp, #12]
     738:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
     73c:	f1ba 0f00 	cmp.w	sl, #0
     740:	f2c0 808a 	blt.w	858 <CONFIG_ISR_STACK_SIZE+0x58>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
     744:	2300      	movs	r3, #0
     746:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
     748:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
     74a:	f89d 301a 	ldrb.w	r3, [sp, #26]
     74e:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
     752:	f89d 1019 	ldrb.w	r1, [sp, #25]
     756:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
     75a:	2b01      	cmp	r3, #1
     75c:	f000 808e 	beq.w	87c <CONFIG_ISR_STACK_SIZE+0x7c>
			if (length_mod == LENGTH_HH) {
				value->sint = (signed char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
     760:	2b02      	cmp	r3, #2
     762:	f000 80d3 	beq.w	90c <CONFIG_ISR_STACK_SIZE+0x10c>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
     766:	2b04      	cmp	r3, #4
     768:	f000 8124 	beq.w	9b4 <CONFIG_ISR_STACK_SIZE+0x1b4>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
     76c:	2b03      	cmp	r3, #3
     76e:	f000 813b 	beq.w	9e8 <CONFIG_ISR_STACK_SIZE+0x1e8>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
     772:	f89d 8018 	ldrb.w	r8, [sp, #24]
     776:	f018 0b03 	ands.w	fp, r8, #3
     77a:	f040 813b 	bne.w	9f4 <CONFIG_ISR_STACK_SIZE+0x1f4>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
     77e:	f89d 301b 	ldrb.w	r3, [sp, #27]
     782:	3b25      	subs	r3, #37	; 0x25
     784:	2b53      	cmp	r3, #83	; 0x53
     786:	f200 81ca 	bhi.w	b1e <CONFIG_ISR_STACK_SIZE+0x31e>
     78a:	e8df f013 	tbh	[pc, r3, lsl #1]
     78e:	0140      	.short	0x0140
     790:	01c801c8 	.word	0x01c801c8
     794:	01c801c8 	.word	0x01c801c8
     798:	01c801c8 	.word	0x01c801c8
     79c:	01c801c8 	.word	0x01c801c8
     7a0:	01c801c8 	.word	0x01c801c8
     7a4:	01c801c8 	.word	0x01c801c8
     7a8:	01c801c8 	.word	0x01c801c8
     7ac:	01c801c8 	.word	0x01c801c8
     7b0:	01c801c8 	.word	0x01c801c8
     7b4:	01c801c8 	.word	0x01c801c8
     7b8:	01c801c8 	.word	0x01c801c8
     7bc:	01c801c8 	.word	0x01c801c8
     7c0:	01c801c8 	.word	0x01c801c8
     7c4:	01c801c8 	.word	0x01c801c8
     7c8:	01c801c8 	.word	0x01c801c8
     7cc:	01c801c8 	.word	0x01c801c8
     7d0:	01c801c8 	.word	0x01c801c8
     7d4:	01c801c8 	.word	0x01c801c8
     7d8:	01c801c8 	.word	0x01c801c8
     7dc:	01c801c8 	.word	0x01c801c8
     7e0:	01c801c8 	.word	0x01c801c8
     7e4:	01c801c8 	.word	0x01c801c8
     7e8:	01c801c8 	.word	0x01c801c8
     7ec:	01c801c8 	.word	0x01c801c8
     7f0:	01c801c8 	.word	0x01c801c8
     7f4:	01c80181 	.word	0x01c80181
     7f8:	01c801c8 	.word	0x01c801c8
     7fc:	01c801c8 	.word	0x01c801c8
     800:	01c801c8 	.word	0x01c801c8
     804:	01c801c8 	.word	0x01c801c8
     808:	015e01c8 	.word	0x015e01c8
     80c:	01c80167 	.word	0x01c80167
     810:	01c801c8 	.word	0x01c801c8
     814:	016701c8 	.word	0x016701c8
     818:	01c801c8 	.word	0x01c801c8
     81c:	01c801c8 	.word	0x01c801c8
     820:	018101bd 	.word	0x018101bd
     824:	01c801a1 	.word	0x01c801a1
     828:	014d01c8 	.word	0x014d01c8
     82c:	018101c8 	.word	0x018101c8
     830:	01c801c8 	.word	0x01c801c8
     834:	0181      	.short	0x0181
				conv->flag_dash = true;
     836:	f89d 3018 	ldrb.w	r3, [sp, #24]
     83a:	f043 0304 	orr.w	r3, r3, #4
     83e:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
     842:	427f      	negs	r7, r7
     844:	e76f      	b.n	726 <z_cbvprintf_impl+0x62>
		} else if (conv->width_present) {
     846:	f99d 3018 	ldrsb.w	r3, [sp, #24]
     84a:	2b00      	cmp	r3, #0
     84c:	db02      	blt.n	854 <CONFIG_ISR_STACK_SIZE+0x54>
		int width = -1;
     84e:	f04f 37ff 	mov.w	r7, #4294967295
     852:	e768      	b.n	726 <z_cbvprintf_impl+0x62>
			width = conv->width_value;
     854:	9f07      	ldr	r7, [sp, #28]
     856:	e766      	b.n	726 <z_cbvprintf_impl+0x62>
				conv->prec_present = false;
     858:	f89d 3019 	ldrb.w	r3, [sp, #25]
     85c:	f36f 0341 	bfc	r3, #1, #1
     860:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
     864:	f04f 3aff 	mov.w	sl, #4294967295
     868:	e76c      	b.n	744 <z_cbvprintf_impl+0x80>
		} else if (conv->prec_present) {
     86a:	f013 0f02 	tst.w	r3, #2
     86e:	d002      	beq.n	876 <CONFIG_ISR_STACK_SIZE+0x76>
			precision = conv->prec_value;
     870:	f8dd a020 	ldr.w	sl, [sp, #32]
     874:	e766      	b.n	744 <z_cbvprintf_impl+0x80>
		int precision = -1;
     876:	f04f 3aff 	mov.w	sl, #4294967295
     87a:	e763      	b.n	744 <z_cbvprintf_impl+0x80>
			switch (length_mod) {
     87c:	1ecb      	subs	r3, r1, #3
     87e:	2b04      	cmp	r3, #4
     880:	d804      	bhi.n	88c <CONFIG_ISR_STACK_SIZE+0x8c>
     882:	e8df f003 	tbb	[pc, r3]
     886:	1d0b      	.short	0x1d0b
     888:	3529      	.short	0x3529
     88a:	35          	.byte	0x35
     88b:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
     88c:	9b03      	ldr	r3, [sp, #12]
     88e:	1d1a      	adds	r2, r3, #4
     890:	9203      	str	r2, [sp, #12]
     892:	681b      	ldr	r3, [r3, #0]
     894:	17da      	asrs	r2, r3, #31
     896:	9304      	str	r3, [sp, #16]
     898:	9205      	str	r2, [sp, #20]
				break;
     89a:	e006      	b.n	8aa <CONFIG_ISR_STACK_SIZE+0xaa>
					value->sint = va_arg(ap, long);
     89c:	9b03      	ldr	r3, [sp, #12]
     89e:	1d1a      	adds	r2, r3, #4
     8a0:	9203      	str	r2, [sp, #12]
     8a2:	681b      	ldr	r3, [r3, #0]
     8a4:	17da      	asrs	r2, r3, #31
     8a6:	9304      	str	r3, [sp, #16]
     8a8:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
     8aa:	2901      	cmp	r1, #1
     8ac:	d028      	beq.n	900 <CONFIG_ISR_STACK_SIZE+0x100>
			} else if (length_mod == LENGTH_H) {
     8ae:	2902      	cmp	r1, #2
     8b0:	f47f af5f 	bne.w	772 <z_cbvprintf_impl+0xae>
				value->sint = (short)value->sint;
     8b4:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
     8b8:	17da      	asrs	r2, r3, #31
     8ba:	9304      	str	r3, [sp, #16]
     8bc:	9205      	str	r2, [sp, #20]
     8be:	e758      	b.n	772 <z_cbvprintf_impl+0xae>
					(sint_value_type)va_arg(ap, long long);
     8c0:	9b03      	ldr	r3, [sp, #12]
     8c2:	3307      	adds	r3, #7
     8c4:	f023 0307 	bic.w	r3, r3, #7
     8c8:	f103 0208 	add.w	r2, r3, #8
     8cc:	9203      	str	r2, [sp, #12]
     8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
     8d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
     8d6:	e7e8      	b.n	8aa <CONFIG_ISR_STACK_SIZE+0xaa>
					(sint_value_type)va_arg(ap, intmax_t);
     8d8:	9b03      	ldr	r3, [sp, #12]
     8da:	3307      	adds	r3, #7
     8dc:	f023 0307 	bic.w	r3, r3, #7
     8e0:	f103 0208 	add.w	r2, r3, #8
     8e4:	9203      	str	r2, [sp, #12]
     8e6:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
     8ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
     8ee:	e7dc      	b.n	8aa <CONFIG_ISR_STACK_SIZE+0xaa>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     8f0:	9b03      	ldr	r3, [sp, #12]
     8f2:	1d1a      	adds	r2, r3, #4
     8f4:	9203      	str	r2, [sp, #12]
     8f6:	681b      	ldr	r3, [r3, #0]
     8f8:	17da      	asrs	r2, r3, #31
				value->sint =
     8fa:	9304      	str	r3, [sp, #16]
     8fc:	9205      	str	r2, [sp, #20]
				break;
     8fe:	e7d4      	b.n	8aa <CONFIG_ISR_STACK_SIZE+0xaa>
				value->sint = (signed char)value->sint;
     900:	f99d 3010 	ldrsb.w	r3, [sp, #16]
     904:	17da      	asrs	r2, r3, #31
     906:	9304      	str	r3, [sp, #16]
     908:	9205      	str	r2, [sp, #20]
     90a:	e732      	b.n	772 <z_cbvprintf_impl+0xae>
			switch (length_mod) {
     90c:	1ecb      	subs	r3, r1, #3
     90e:	2b04      	cmp	r3, #4
     910:	d804      	bhi.n	91c <CONFIG_ISR_STACK_SIZE+0x11c>
     912:	e8df f003 	tbb	[pc, r3]
     916:	1f0b      	.short	0x1f0b
     918:	4135      	.short	0x4135
     91a:	41          	.byte	0x41
     91b:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
     91c:	9b03      	ldr	r3, [sp, #12]
     91e:	1d1a      	adds	r2, r3, #4
     920:	9203      	str	r2, [sp, #12]
     922:	681b      	ldr	r3, [r3, #0]
     924:	9304      	str	r3, [sp, #16]
     926:	2300      	movs	r3, #0
     928:	9305      	str	r3, [sp, #20]
				break;
     92a:	e01e      	b.n	96a <CONFIG_ISR_STACK_SIZE+0x16a>
				    && (conv->specifier == 'c')) {
     92c:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
     930:	2b63      	cmp	r3, #99	; 0x63
     932:	d007      	beq.n	944 <CONFIG_ISR_STACK_SIZE+0x144>
					value->uint = va_arg(ap, unsigned long);
     934:	9b03      	ldr	r3, [sp, #12]
     936:	1d1a      	adds	r2, r3, #4
     938:	9203      	str	r2, [sp, #12]
     93a:	681b      	ldr	r3, [r3, #0]
     93c:	9304      	str	r3, [sp, #16]
     93e:	2300      	movs	r3, #0
     940:	9305      	str	r3, [sp, #20]
     942:	e012      	b.n	96a <CONFIG_ISR_STACK_SIZE+0x16a>
					value->uint = (wchar_t)va_arg(ap,
     944:	9b03      	ldr	r3, [sp, #12]
     946:	1d1a      	adds	r2, r3, #4
     948:	9203      	str	r2, [sp, #12]
     94a:	681b      	ldr	r3, [r3, #0]
     94c:	9304      	str	r3, [sp, #16]
     94e:	2300      	movs	r3, #0
     950:	9305      	str	r3, [sp, #20]
     952:	e00a      	b.n	96a <CONFIG_ISR_STACK_SIZE+0x16a>
					(uint_value_type)va_arg(ap,
     954:	9b03      	ldr	r3, [sp, #12]
     956:	3307      	adds	r3, #7
     958:	f023 0307 	bic.w	r3, r3, #7
     95c:	f103 0208 	add.w	r2, r3, #8
     960:	9203      	str	r2, [sp, #12]
     962:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
     966:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
     96a:	2901      	cmp	r1, #1
     96c:	d01c      	beq.n	9a8 <CONFIG_ISR_STACK_SIZE+0x1a8>
			} else if (length_mod == LENGTH_H) {
     96e:	2902      	cmp	r1, #2
     970:	f47f aeff 	bne.w	772 <z_cbvprintf_impl+0xae>
				value->uint = (unsigned short)value->uint;
     974:	f8bd 3010 	ldrh.w	r3, [sp, #16]
     978:	9304      	str	r3, [sp, #16]
     97a:	2300      	movs	r3, #0
     97c:	9305      	str	r3, [sp, #20]
     97e:	e6f8      	b.n	772 <z_cbvprintf_impl+0xae>
					(uint_value_type)va_arg(ap,
     980:	9b03      	ldr	r3, [sp, #12]
     982:	3307      	adds	r3, #7
     984:	f023 0307 	bic.w	r3, r3, #7
     988:	f103 0208 	add.w	r2, r3, #8
     98c:	9203      	str	r2, [sp, #12]
     98e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
     992:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
     996:	e7e8      	b.n	96a <CONFIG_ISR_STACK_SIZE+0x16a>
					(uint_value_type)va_arg(ap, size_t);
     998:	9b03      	ldr	r3, [sp, #12]
     99a:	1d1a      	adds	r2, r3, #4
     99c:	9203      	str	r2, [sp, #12]
     99e:	681b      	ldr	r3, [r3, #0]
				value->uint =
     9a0:	9304      	str	r3, [sp, #16]
     9a2:	2300      	movs	r3, #0
     9a4:	9305      	str	r3, [sp, #20]
				break;
     9a6:	e7e0      	b.n	96a <CONFIG_ISR_STACK_SIZE+0x16a>
				value->uint = (unsigned char)value->uint;
     9a8:	f89d 3010 	ldrb.w	r3, [sp, #16]
     9ac:	9304      	str	r3, [sp, #16]
     9ae:	2300      	movs	r3, #0
     9b0:	9305      	str	r3, [sp, #20]
     9b2:	e6de      	b.n	772 <z_cbvprintf_impl+0xae>
			if (length_mod == LENGTH_UPPER_L) {
     9b4:	2908      	cmp	r1, #8
     9b6:	d00b      	beq.n	9d0 <CONFIG_ISR_STACK_SIZE+0x1d0>
				value->dbl = va_arg(ap, double);
     9b8:	9b03      	ldr	r3, [sp, #12]
     9ba:	3307      	adds	r3, #7
     9bc:	f023 0307 	bic.w	r3, r3, #7
     9c0:	f103 0208 	add.w	r2, r3, #8
     9c4:	9203      	str	r2, [sp, #12]
     9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
     9ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
     9ce:	e6d0      	b.n	772 <z_cbvprintf_impl+0xae>
				value->ldbl = va_arg(ap, long double);
     9d0:	9b03      	ldr	r3, [sp, #12]
     9d2:	3307      	adds	r3, #7
     9d4:	f023 0307 	bic.w	r3, r3, #7
     9d8:	f103 0208 	add.w	r2, r3, #8
     9dc:	9203      	str	r2, [sp, #12]
     9de:	e9d3 2300 	ldrd	r2, r3, [r3]
     9e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
     9e6:	e6c4      	b.n	772 <z_cbvprintf_impl+0xae>
			value->ptr = va_arg(ap, void *);
     9e8:	9b03      	ldr	r3, [sp, #12]
     9ea:	1d1a      	adds	r2, r3, #4
     9ec:	9203      	str	r2, [sp, #12]
     9ee:	681b      	ldr	r3, [r3, #0]
     9f0:	9304      	str	r3, [sp, #16]
     9f2:	e6be      	b.n	772 <z_cbvprintf_impl+0xae>
			OUTS(sp, fp);
     9f4:	9f02      	ldr	r7, [sp, #8]
     9f6:	463b      	mov	r3, r7
     9f8:	464a      	mov	r2, r9
     9fa:	4629      	mov	r1, r5
     9fc:	4630      	mov	r0, r6
     9fe:	f004 fc67 	bl	52d0 <outs>
     a02:	2800      	cmp	r0, #0
     a04:	f2c0 8125 	blt.w	c52 <CONFIG_ISR_STACK_SIZE+0x452>
     a08:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
     a0a:	46b9      	mov	r9, r7
			continue;
     a0c:	e662      	b.n	6d4 <z_cbvprintf_impl+0x10>
		case '%':
			OUTC('%');
     a0e:	4629      	mov	r1, r5
     a10:	2025      	movs	r0, #37	; 0x25
     a12:	47b0      	blx	r6
     a14:	2800      	cmp	r0, #0
     a16:	f2c0 811c 	blt.w	c52 <CONFIG_ISR_STACK_SIZE+0x452>
     a1a:	3401      	adds	r4, #1
		char sign = 0;
     a1c:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
     a1e:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
     a22:	f04f 0900 	mov.w	r9, #0
			break;
     a26:	e07f      	b.n	b28 <CONFIG_ISR_STACK_SIZE+0x328>
		case 's': {
			bps = (const char *)value->ptr;
     a28:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
     a2c:	f1ba 0f00 	cmp.w	sl, #0
     a30:	db07      	blt.n	a42 <CONFIG_ISR_STACK_SIZE+0x242>
				len = strnlen(bps, precision);
     a32:	4651      	mov	r1, sl
     a34:	4648      	mov	r0, r9
     a36:	f004 fd8b 	bl	5550 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
     a3a:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
     a3e:	46d8      	mov	r8, fp
			precision = -1;

			break;
     a40:	e072      	b.n	b28 <CONFIG_ISR_STACK_SIZE+0x328>
				len = strlen(bps);
     a42:	4648      	mov	r0, r9
     a44:	f004 fd7b 	bl	553e <strlen>
     a48:	e7f7      	b.n	a3a <CONFIG_ISR_STACK_SIZE+0x23a>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     a4a:	9b04      	ldr	r3, [sp, #16]
     a4c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
     a50:	46d8      	mov	r8, fp
			bpe = buf + 1;
     a52:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
     a56:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
     a5a:	e065      	b.n	b28 <CONFIG_ISR_STACK_SIZE+0x328>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
     a5c:	f018 0f08 	tst.w	r8, #8
     a60:	d105      	bne.n	a6e <CONFIG_ISR_STACK_SIZE+0x26e>
				sign = '+';
			} else if (conv->flag_space) {
     a62:	f018 0810 	ands.w	r8, r8, #16
     a66:	d004      	beq.n	a72 <CONFIG_ISR_STACK_SIZE+0x272>
				sign = ' ';
     a68:	f04f 0820 	mov.w	r8, #32
     a6c:	e001      	b.n	a72 <CONFIG_ISR_STACK_SIZE+0x272>
				sign = '+';
     a6e:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
     a72:	9a04      	ldr	r2, [sp, #16]
     a74:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
     a76:	2b00      	cmp	r3, #0
     a78:	db02      	blt.n	a80 <CONFIG_ISR_STACK_SIZE+0x280>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
     a7a:	9204      	str	r2, [sp, #16]
     a7c:	9305      	str	r3, [sp, #20]
     a7e:	e008      	b.n	a92 <CONFIG_ISR_STACK_SIZE+0x292>
				value->uint = (uint_value_type)-sint;
     a80:	4252      	negs	r2, r2
     a82:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     a86:	9204      	str	r2, [sp, #16]
     a88:	9305      	str	r3, [sp, #20]
				sign = '-';
     a8a:	f04f 082d 	mov.w	r8, #45	; 0x2d
     a8e:	e000      	b.n	a92 <CONFIG_ISR_STACK_SIZE+0x292>
		switch (conv->specifier) {
     a90:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
     a92:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
     a96:	9300      	str	r3, [sp, #0]
     a98:	ab0a      	add	r3, sp, #40	; 0x28
     a9a:	aa06      	add	r2, sp, #24
     a9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
     aa0:	f004 fba7 	bl	51f2 <encode_uint>
     aa4:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
     aa6:	f1ba 0f00 	cmp.w	sl, #0
     aaa:	db6c      	blt.n	b86 <CONFIG_ISR_STACK_SIZE+0x386>
				size_t len = bpe - bps;
     aac:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
     ab0:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
     ab4:	f89d 2018 	ldrb.w	r2, [sp, #24]
     ab8:	f36f 1286 	bfc	r2, #6, #1
     abc:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
     ac0:	459a      	cmp	sl, r3
     ac2:	d963      	bls.n	b8c <CONFIG_ISR_STACK_SIZE+0x38c>
					conv->pad0_value = precision - (int)len;
     ac4:	ebaa 0303 	sub.w	r3, sl, r3
     ac8:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
     aca:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
     ace:	e02b      	b.n	b28 <CONFIG_ISR_STACK_SIZE+0x328>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
     ad0:	9804      	ldr	r0, [sp, #16]
     ad2:	b928      	cbnz	r0, ae0 <CONFIG_ISR_STACK_SIZE+0x2e0>
		char sign = 0;
     ad4:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
     ad6:	f8df a180 	ldr.w	sl, [pc, #384]	; c58 <CONFIG_ISR_STACK_SIZE+0x458>
			bps = "(nil)";
     ada:	f1aa 0905 	sub.w	r9, sl, #5
     ade:	e023      	b.n	b28 <CONFIG_ISR_STACK_SIZE+0x328>
				bps = encode_uint((uintptr_t)value->ptr, conv,
     ae0:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
     ae4:	9300      	str	r3, [sp, #0]
     ae6:	ab0a      	add	r3, sp, #40	; 0x28
     ae8:	aa06      	add	r2, sp, #24
     aea:	2100      	movs	r1, #0
     aec:	f004 fb81 	bl	51f2 <encode_uint>
     af0:	4681      	mov	r9, r0
				conv->altform_0c = true;
     af2:	f89d 301a 	ldrb.w	r3, [sp, #26]
     af6:	f043 0310 	orr.w	r3, r3, #16
     afa:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
     afe:	2378      	movs	r3, #120	; 0x78
     b00:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
     b04:	46d8      	mov	r8, fp
				goto prec_int_pad0;
     b06:	e7ce      	b.n	aa6 <CONFIG_ISR_STACK_SIZE+0x2a6>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
     b08:	4622      	mov	r2, r4
     b0a:	9904      	ldr	r1, [sp, #16]
     b0c:	a806      	add	r0, sp, #24
     b0e:	f004 fbc0 	bl	5292 <store_count>
		char sign = 0;
     b12:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
     b14:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
     b18:	f04f 0900 	mov.w	r9, #0
			}

			break;
     b1c:	e004      	b.n	b28 <CONFIG_ISR_STACK_SIZE+0x328>
		switch (conv->specifier) {
     b1e:	46d8      	mov	r8, fp
     b20:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
     b24:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
     b28:	f1b9 0f00 	cmp.w	r9, #0
     b2c:	f000 808d 	beq.w	c4a <CONFIG_ISR_STACK_SIZE+0x44a>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
     b30:	ebaa 0309 	sub.w	r3, sl, r9
		int pad_len = 0;

		if (sign != 0) {
     b34:	f1b8 0f00 	cmp.w	r8, #0
     b38:	d000      	beq.n	b3c <CONFIG_ISR_STACK_SIZE+0x33c>
			nj_len += 1U;
     b3a:	3301      	adds	r3, #1
		}

		if (conv->altform_0c) {
     b3c:	f89d 201a 	ldrb.w	r2, [sp, #26]
     b40:	f012 0f10 	tst.w	r2, #16
     b44:	d025      	beq.n	b92 <CONFIG_ISR_STACK_SIZE+0x392>
			nj_len += 2U;
     b46:	3302      	adds	r3, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
     b48:	9907      	ldr	r1, [sp, #28]
     b4a:	440b      	add	r3, r1
		if (conv->pad_fp) {
     b4c:	f012 0f40 	tst.w	r2, #64	; 0x40
     b50:	d001      	beq.n	b56 <CONFIG_ISR_STACK_SIZE+0x356>
			nj_len += conv->pad0_pre_exp;
     b52:	9a08      	ldr	r2, [sp, #32]
     b54:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
     b56:	2f00      	cmp	r7, #0
     b58:	dd31      	ble.n	bbe <CONFIG_ISR_STACK_SIZE+0x3be>
			width -= (int)nj_len;
     b5a:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
     b5c:	f89d 3018 	ldrb.w	r3, [sp, #24]
     b60:	f013 0f04 	tst.w	r3, #4
     b64:	d12b      	bne.n	bbe <CONFIG_ISR_STACK_SIZE+0x3be>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
     b66:	f013 0f40 	tst.w	r3, #64	; 0x40
     b6a:	d017      	beq.n	b9c <CONFIG_ISR_STACK_SIZE+0x39c>
					if (sign != 0) {
     b6c:	f1b8 0f00 	cmp.w	r8, #0
     b70:	d017      	beq.n	ba2 <CONFIG_ISR_STACK_SIZE+0x3a2>
						OUTC(sign);
     b72:	4629      	mov	r1, r5
     b74:	4640      	mov	r0, r8
     b76:	47b0      	blx	r6
     b78:	2800      	cmp	r0, #0
     b7a:	db6a      	blt.n	c52 <CONFIG_ISR_STACK_SIZE+0x452>
     b7c:	3401      	adds	r4, #1
						sign = 0;
     b7e:	46d8      	mov	r8, fp
					}
					pad = '0';
     b80:	f04f 0b30 	mov.w	fp, #48	; 0x30
     b84:	e00f      	b.n	ba6 <CONFIG_ISR_STACK_SIZE+0x3a6>
		const char *bpe = buf + sizeof(buf);
     b86:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
     b8a:	e7cd      	b.n	b28 <CONFIG_ISR_STACK_SIZE+0x328>
     b8c:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
     b90:	e7ca      	b.n	b28 <CONFIG_ISR_STACK_SIZE+0x328>
		} else if (conv->altform_0) {
     b92:	f012 0f08 	tst.w	r2, #8
     b96:	d0d7      	beq.n	b48 <CONFIG_ISR_STACK_SIZE+0x348>
			nj_len += 1U;
     b98:	3301      	adds	r3, #1
     b9a:	e7d5      	b.n	b48 <CONFIG_ISR_STACK_SIZE+0x348>
				char pad = ' ';
     b9c:	f04f 0b20 	mov.w	fp, #32
     ba0:	e001      	b.n	ba6 <CONFIG_ISR_STACK_SIZE+0x3a6>
					pad = '0';
     ba2:	f04f 0b30 	mov.w	fp, #48	; 0x30
     ba6:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
     ba8:	1e5f      	subs	r7, r3, #1
     baa:	2b00      	cmp	r3, #0
     bac:	dd07      	ble.n	bbe <CONFIG_ISR_STACK_SIZE+0x3be>
					OUTC(pad);
     bae:	4629      	mov	r1, r5
     bb0:	4658      	mov	r0, fp
     bb2:	47b0      	blx	r6
     bb4:	2800      	cmp	r0, #0
     bb6:	db4c      	blt.n	c52 <CONFIG_ISR_STACK_SIZE+0x452>
     bb8:	3401      	adds	r4, #1
				while (width-- > 0) {
     bba:	463b      	mov	r3, r7
     bbc:	e7f4      	b.n	ba8 <CONFIG_ISR_STACK_SIZE+0x3a8>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
     bbe:	f1b8 0f00 	cmp.w	r8, #0
     bc2:	d005      	beq.n	bd0 <CONFIG_ISR_STACK_SIZE+0x3d0>
			OUTC(sign);
     bc4:	4629      	mov	r1, r5
     bc6:	4640      	mov	r0, r8
     bc8:	47b0      	blx	r6
     bca:	2800      	cmp	r0, #0
     bcc:	db41      	blt.n	c52 <CONFIG_ISR_STACK_SIZE+0x452>
     bce:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
     bd0:	f89d 301a 	ldrb.w	r3, [sp, #26]
     bd4:	f3c3 1200 	ubfx	r2, r3, #4, #1
     bd8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
     bdc:	431a      	orrs	r2, r3
     bde:	d005      	beq.n	bec <CONFIG_ISR_STACK_SIZE+0x3ec>
				OUTC('0');
     be0:	4629      	mov	r1, r5
     be2:	2030      	movs	r0, #48	; 0x30
     be4:	47b0      	blx	r6
     be6:	2800      	cmp	r0, #0
     be8:	db33      	blt.n	c52 <CONFIG_ISR_STACK_SIZE+0x452>
     bea:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
     bec:	f89d 301a 	ldrb.w	r3, [sp, #26]
     bf0:	f013 0f10 	tst.w	r3, #16
     bf4:	d006      	beq.n	c04 <CONFIG_ISR_STACK_SIZE+0x404>
				OUTC(conv->specifier);
     bf6:	4629      	mov	r1, r5
     bf8:	f89d 001b 	ldrb.w	r0, [sp, #27]
     bfc:	47b0      	blx	r6
     bfe:	2800      	cmp	r0, #0
     c00:	db27      	blt.n	c52 <CONFIG_ISR_STACK_SIZE+0x452>
     c02:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
     c04:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
     c06:	f103 38ff 	add.w	r8, r3, #4294967295
     c0a:	2b00      	cmp	r3, #0
     c0c:	dd07      	ble.n	c1e <CONFIG_ISR_STACK_SIZE+0x41e>
				OUTC('0');
     c0e:	4629      	mov	r1, r5
     c10:	2030      	movs	r0, #48	; 0x30
     c12:	47b0      	blx	r6
     c14:	2800      	cmp	r0, #0
     c16:	db1c      	blt.n	c52 <CONFIG_ISR_STACK_SIZE+0x452>
     c18:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
     c1a:	4643      	mov	r3, r8
     c1c:	e7f3      	b.n	c06 <CONFIG_ISR_STACK_SIZE+0x406>
			}

			OUTS(bps, bpe);
     c1e:	4653      	mov	r3, sl
     c20:	464a      	mov	r2, r9
     c22:	4629      	mov	r1, r5
     c24:	4630      	mov	r0, r6
     c26:	f004 fb53 	bl	52d0 <outs>
     c2a:	2800      	cmp	r0, #0
     c2c:	db11      	blt.n	c52 <CONFIG_ISR_STACK_SIZE+0x452>
     c2e:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
     c30:	2f00      	cmp	r7, #0
     c32:	dd07      	ble.n	c44 <CONFIG_ISR_STACK_SIZE+0x444>
			OUTC(' ');
     c34:	4629      	mov	r1, r5
     c36:	2020      	movs	r0, #32
     c38:	47b0      	blx	r6
     c3a:	2800      	cmp	r0, #0
     c3c:	db09      	blt.n	c52 <CONFIG_ISR_STACK_SIZE+0x452>
     c3e:	3401      	adds	r4, #1
			--width;
     c40:	3f01      	subs	r7, #1
     c42:	e7f5      	b.n	c30 <CONFIG_ISR_STACK_SIZE+0x430>
		fp = extract_conversion(conv, sp);
     c44:	f8dd 9008 	ldr.w	r9, [sp, #8]
     c48:	e544      	b.n	6d4 <z_cbvprintf_impl+0x10>
     c4a:	f8dd 9008 	ldr.w	r9, [sp, #8]
     c4e:	e541      	b.n	6d4 <z_cbvprintf_impl+0x10>
		}
	}

	return count;
     c50:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
     c52:	b011      	add	sp, #68	; 0x44
     c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     c58:	00006bc5 	.word	0x00006bc5

00000c5c <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
     c5c:	b508      	push	{r3, lr}
     c5e:	f04f 0220 	mov.w	r2, #32
     c62:	f3ef 8311 	mrs	r3, BASEPRI
     c66:	f382 8812 	msr	BASEPRI_MAX, r2
     c6a:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
     c6e:	f004 fbd6 	bl	541e <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
     c72:	4803      	ldr	r0, [pc, #12]	; (c80 <sys_reboot+0x24>)
     c74:	f003 ff7f 	bl	4b76 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
     c78:	f000 fac0 	bl	11fc <arch_cpu_idle>
     c7c:	e7fc      	b.n	c78 <sys_reboot+0x1c>
     c7e:	bf00      	nop
     c80:	00006bc8 	.word	0x00006bc8

00000c84 <nrfx_coredep_delay_us>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
     c84:	b168      	cbz	r0, ca2 <nrfx_coredep_delay_us+0x1e>
{
     c86:	b508      	push	{r3, lr}
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
     c88:	4a06      	ldr	r2, [pc, #24]	; (ca4 <nrfx_coredep_delay_us+0x20>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
     c8a:	4b07      	ldr	r3, [pc, #28]	; (ca8 <nrfx_coredep_delay_us+0x24>)
     c8c:	681b      	ldr	r3, [r3, #0]
     c8e:	4907      	ldr	r1, [pc, #28]	; (cac <nrfx_coredep_delay_us+0x28>)
     c90:	fba1 1303 	umull	r1, r3, r1, r3
     c94:	0c9b      	lsrs	r3, r3, #18
    delay_cycles(cycles);
     c96:	fb00 f003 	mul.w	r0, r0, r3
     c9a:	f042 0301 	orr.w	r3, r2, #1
     c9e:	4798      	blx	r3
}
     ca0:	bd08      	pop	{r3, pc}
     ca2:	4770      	bx	lr
     ca4:	00006bb0 	.word	0x00006bb0
     ca8:	20000048 	.word	0x20000048
     cac:	431bde83 	.word	0x431bde83

00000cb0 <nordicsemi_nrf53_init>:
     cb0:	f04f 0320 	mov.w	r3, #32
     cb4:	f3ef 8c11 	mrs	ip, BASEPRI
     cb8:	f383 8812 	msr	BASEPRI_MAX, r3
     cbc:	f3bf 8f6f 	isb	sy

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_cache_enable(NRF_CACHE_Type * p_reg)
{
    p_reg->ENABLE = CACHE_ENABLE_ENABLE_Enabled;
     cc0:	2101      	movs	r1, #1
     cc2:	4b12      	ldr	r3, [pc, #72]	; (d0c <nordicsemi_nrf53_init+0x5c>)
     cc4:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
     cc8:	4a11      	ldr	r2, [pc, #68]	; (d10 <nordicsemi_nrf53_init+0x60>)
     cca:	2302      	movs	r3, #2
     ccc:	f8c2 36d0 	str.w	r3, [r2, #1744]	; 0x6d0

#if NRF_GPIO_HAS_SEL
NRF_STATIC_INLINE void nrf_gpio_pin_control_select(uint32_t pin_number, nrf_gpio_pin_sel_t ctrl)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
     cd0:	4810      	ldr	r0, [pc, #64]	; (d14 <nordicsemi_nrf53_init+0x64>)
     cd2:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
     cd6:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (ctrl << GPIO_PIN_CNF_MCUSEL_Pos);
     cda:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
     cde:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
     ce2:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
     ce6:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (ctrl << GPIO_PIN_CNF_MCUSEL_Pos);
     cea:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
     cee:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
     cf2:	f8c2 1704 	str.w	r1, [r2, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
     cf6:	f8c2 1904 	str.w	r1, [r2, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
     cfa:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
	__asm__ volatile(
     cfe:	f38c 8811 	msr	BASEPRI, ip
     d02:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     d06:	2000      	movs	r0, #0
     d08:	4770      	bx	lr
     d0a:	bf00      	nop
     d0c:	50001000 	.word	0x50001000
     d10:	50004000 	.word	0x50004000
     d14:	50842500 	.word	0x50842500

00000d18 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
     d18:	2806      	cmp	r0, #6
     d1a:	d000      	beq.n	d1e <pm_state_set+0x6>
     d1c:	4770      	bx	lr
{
     d1e:	b508      	push	{r3, lr}
	case PM_STATE_SOFT_OFF:
		nrf_regulators_system_off(NRF_REGULATORS);
     d20:	4801      	ldr	r0, [pc, #4]	; (d28 <pm_state_set+0x10>)
     d22:	f004 faf4 	bl	530e <nrf_regulators_system_off>
     d26:	bf00      	nop
     d28:	50004000 	.word	0x50004000

00000d2c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
     d2c:	f001 be86 	b.w	2a3c <SystemInit>

00000d30 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
     d30:	b570      	push	{r4, r5, r6, lr}
     d32:	4605      	mov	r5, r0
	__asm__ volatile(
     d34:	f04f 0320 	mov.w	r3, #32
     d38:	f3ef 8611 	mrs	r6, BASEPRI
     d3c:	f383 8812 	msr	BASEPRI_MAX, r3
     d40:	f3bf 8f6f 	isb	sy
     d44:	4b0e      	ldr	r3, [pc, #56]	; (d80 <pm_state_notify+0x50>)
     d46:	681c      	ldr	r4, [r3, #0]
     d48:	e00d      	b.n	d66 <pm_state_notify+0x36>
	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
		if (entering_state) {
			callback = notifier->state_entry;
		} else {
			callback = notifier->state_exit;
     d4a:	68a2      	ldr	r2, [r4, #8]
		}

		if (callback) {
     d4c:	b13a      	cbz	r2, d5e <pm_state_notify+0x2e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
     d4e:	4b0d      	ldr	r3, [pc, #52]	; (d84 <pm_state_notify+0x54>)
     d50:	7d1b      	ldrb	r3, [r3, #20]
     d52:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     d56:	490c      	ldr	r1, [pc, #48]	; (d88 <pm_state_notify+0x58>)
     d58:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
     d5c:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
     d5e:	4623      	mov	r3, r4
	return node->next;
     d60:	6824      	ldr	r4, [r4, #0]
     d62:	b104      	cbz	r4, d66 <pm_state_notify+0x36>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
     d64:	b123      	cbz	r3, d70 <pm_state_notify+0x40>
     d66:	b12c      	cbz	r4, d74 <pm_state_notify+0x44>
		if (entering_state) {
     d68:	2d00      	cmp	r5, #0
     d6a:	d0ee      	beq.n	d4a <pm_state_notify+0x1a>
			callback = notifier->state_entry;
     d6c:	6862      	ldr	r2, [r4, #4]
     d6e:	e7ed      	b.n	d4c <pm_state_notify+0x1c>
     d70:	461c      	mov	r4, r3
     d72:	e7f8      	b.n	d66 <pm_state_notify+0x36>
	__asm__ volatile(
     d74:	f386 8811 	msr	BASEPRI, r6
     d78:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
     d7c:	bd70      	pop	{r4, r5, r6, pc}
     d7e:	bf00      	nop
     d80:	20000330 	.word	0x20000330
     d84:	20000950 	.word	0x20000950
     d88:	20000324 	.word	0x20000324

00000d8c <pm_exit_pos_ops>:
{
     d8c:	b508      	push	{r3, lr}
	if (pm_state_exit_post_ops != NULL) {
     d8e:	4b06      	ldr	r3, [pc, #24]	; (da8 <pm_exit_pos_ops+0x1c>)
     d90:	b123      	cbz	r3, d9c <pm_exit_pos_ops+0x10>
		pm_state_exit_post_ops(info->state, info->substate_id);
     d92:	7841      	ldrb	r1, [r0, #1]
     d94:	7800      	ldrb	r0, [r0, #0]
     d96:	f004 fac1 	bl	531c <pm_state_exit_post_ops>
}
     d9a:	bd08      	pop	{r3, pc}
     d9c:	2300      	movs	r3, #0
     d9e:	f383 8811 	msr	BASEPRI, r3
     da2:	f3bf 8f6f 	isb	sy
     da6:	e7f8      	b.n	d9a <pm_exit_pos_ops+0xe>
     da8:	0000531d 	.word	0x0000531d

00000dac <pm_system_resume>:

void pm_system_resume(void)
{
     dac:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
     dae:	4b0e      	ldr	r3, [pc, #56]	; (de8 <pm_system_resume+0x3c>)
     db0:	7d1c      	ldrb	r4, [r3, #20]
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
     db2:	4621      	mov	r1, r4
     db4:	480d      	ldr	r0, [pc, #52]	; (dec <pm_system_resume+0x40>)
     db6:	f004 fab7 	bl	5328 <atomic_test_and_clear_bit>
     dba:	b900      	cbnz	r0, dbe <pm_system_resume+0x12>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
			0, 0};
	}
}
     dbc:	bd70      	pop	{r4, r5, r6, pc}
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
     dbe:	0065      	lsls	r5, r4, #1
     dc0:	eb04 0044 	add.w	r0, r4, r4, lsl #1
     dc4:	4e0a      	ldr	r6, [pc, #40]	; (df0 <pm_system_resume+0x44>)
     dc6:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     dca:	f7ff ffdf 	bl	d8c <pm_exit_pos_ops>
		pm_state_notify(false);
     dce:	2000      	movs	r0, #0
     dd0:	f7ff ffae 	bl	d30 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
     dd4:	192b      	adds	r3, r5, r4
     dd6:	0099      	lsls	r1, r3, #2
     dd8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
     ddc:	2200      	movs	r2, #0
     dde:	5072      	str	r2, [r6, r1]
     de0:	605a      	str	r2, [r3, #4]
     de2:	609a      	str	r2, [r3, #8]
}
     de4:	e7ea      	b.n	dbc <pm_system_resume+0x10>
     de6:	bf00      	nop
     de8:	20000950 	.word	0x20000950
     dec:	20000338 	.word	0x20000338
     df0:	20000324 	.word	0x20000324

00000df4 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
     df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     df6:	4605      	mov	r5, r0
	uint8_t id = CURRENT_CPU;
     df8:	4b38      	ldr	r3, [pc, #224]	; (edc <pm_system_suspend+0xe8>)
     dfa:	7d1c      	ldrb	r4, [r3, #20]
	__asm__ volatile(
     dfc:	f04f 0320 	mov.w	r3, #32
     e00:	f3ef 8611 	mrs	r6, BASEPRI
     e04:	f383 8812 	msr	BASEPRI_MAX, r3
     e08:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
     e0c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
     e10:	4b33      	ldr	r3, [pc, #204]	; (ee0 <pm_system_suspend+0xec>)
     e12:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
     e16:	2b00      	cmp	r3, #0
     e18:	d039      	beq.n	e8e <pm_system_suspend+0x9a>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
     e1a:	4b32      	ldr	r3, [pc, #200]	; (ee4 <pm_system_suspend+0xf0>)
     e1c:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
     e20:	4f2f      	ldr	r7, [pc, #188]	; (ee0 <pm_system_suspend+0xec>)
     e22:	ea4f 0e82 	mov.w	lr, r2, lsl #2
     e26:	eb07 0382 	add.w	r3, r7, r2, lsl #2
     e2a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
     e2e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
     e32:	2300      	movs	r3, #0
     e34:	f807 300e 	strb.w	r3, [r7, lr]
	__asm__ volatile(
     e38:	f386 8811 	msr	BASEPRI, r6
     e3c:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
     e40:	eb04 0344 	add.w	r3, r4, r4, lsl #1
     e44:	4a27      	ldr	r2, [pc, #156]	; (ee4 <pm_system_suspend+0xf0>)
     e46:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
     e4a:	2b00      	cmp	r3, #0
     e4c:	d044      	beq.n	ed8 <pm_system_suspend+0xe4>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
     e4e:	f1b5 3fff 	cmp.w	r5, #4294967295
     e52:	d12b      	bne.n	eac <pm_system_suspend+0xb8>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
     e54:	f002 ffd8 	bl	3e08 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
     e58:	2001      	movs	r0, #1
     e5a:	f7ff ff69 	bl	d30 <pm_state_notify>
	atomic_set_bit(z_post_ops_required, id);
     e5e:	4621      	mov	r1, r4
     e60:	4821      	ldr	r0, [pc, #132]	; (ee8 <pm_system_suspend+0xf4>)
     e62:	f004 fa79 	bl	5358 <atomic_set_bit>
	if (pm_state_set != NULL) {
     e66:	4b21      	ldr	r3, [pc, #132]	; (eec <pm_system_suspend+0xf8>)
     e68:	b15b      	cbz	r3, e82 <pm_system_suspend+0x8e>
		pm_state_set(info->state, info->substate_id);
     e6a:	4a1e      	ldr	r2, [pc, #120]	; (ee4 <pm_system_suspend+0xf0>)
     e6c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
     e70:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     e74:	eb04 0444 	add.w	r4, r4, r4, lsl #1
     e78:	7859      	ldrb	r1, [r3, #1]
     e7a:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
     e7e:	f7ff ff4b 	bl	d18 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
     e82:	f7ff ff93 	bl	dac <pm_system_resume>
	k_sched_unlock();
     e86:	f003 f9c1 	bl	420c <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
     e8a:	2001      	movs	r0, #1
}
     e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		info = pm_policy_next_state(id, ticks);
     e8e:	4601      	mov	r1, r0
     e90:	4620      	mov	r0, r4
     e92:	f000 f831 	bl	ef8 <pm_policy_next_state>
		if (info != NULL) {
     e96:	2800      	cmp	r0, #0
     e98:	d0ce      	beq.n	e38 <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
     e9a:	eb04 0144 	add.w	r1, r4, r4, lsl #1
     e9e:	4b11      	ldr	r3, [pc, #68]	; (ee4 <pm_system_suspend+0xf0>)
     ea0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
     ea4:	c807      	ldmia	r0, {r0, r1, r2}
     ea6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
     eaa:	e7c5      	b.n	e38 <pm_system_suspend+0x44>
		     k_us_to_ticks_ceil32(
     eac:	eb04 0244 	add.w	r2, r4, r4, lsl #1
     eb0:	4b0c      	ldr	r3, [pc, #48]	; (ee4 <pm_system_suspend+0xf0>)
     eb2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     eb6:	6898      	ldr	r0, [r3, #8]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
     eb8:	0c41      	lsrs	r1, r0, #17
     eba:	03c0      	lsls	r0, r0, #15
     ebc:	4b0c      	ldr	r3, [pc, #48]	; (ef0 <pm_system_suspend+0xfc>)
     ebe:	18c0      	adds	r0, r0, r3
     ec0:	4a0c      	ldr	r2, [pc, #48]	; (ef4 <pm_system_suspend+0x100>)
     ec2:	f04f 0300 	mov.w	r3, #0
     ec6:	f141 0100 	adc.w	r1, r1, #0
     eca:	f7ff f943 	bl	154 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
     ece:	2101      	movs	r1, #1
     ed0:	1a28      	subs	r0, r5, r0
     ed2:	f005 fc8c 	bl	67ee <z_set_timeout_expiry>
     ed6:	e7bd      	b.n	e54 <pm_system_suspend+0x60>
		return false;
     ed8:	2000      	movs	r0, #0
     eda:	e7d7      	b.n	e8c <pm_system_suspend+0x98>
     edc:	20000950 	.word	0x20000950
     ee0:	20000318 	.word	0x20000318
     ee4:	20000324 	.word	0x20000324
     ee8:	20000338 	.word	0x20000338
     eec:	00000d19 	.word	0x00000d19
     ef0:	000f423f 	.word	0x000f423f
     ef4:	000f4240 	.word	0x000f4240

00000ef8 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
     ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     efc:	b082      	sub	sp, #8
     efe:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
     f00:	a901      	add	r1, sp, #4
     f02:	f000 f845 	bl	f90 <pm_state_cpu_get_all>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
     f06:	1e44      	subs	r4, r0, #1
     f08:	b224      	sxth	r4, r4
     f0a:	e007      	b.n	f1c <pm_policy_next_state+0x24>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
		    (exit_latency >= max_latency_ticks)) {
			continue;
		}

		if ((ticks == K_TICKS_FOREVER) ||
     f0c:	f1b6 3fff 	cmp.w	r6, #4294967295
     f10:	d033      	beq.n	f7a <pm_policy_next_state+0x82>
		    (ticks >= (min_residency + exit_latency))) {
     f12:	4480      	add	r8, r0
		if ((ticks == K_TICKS_FOREVER) ||
     f14:	45b0      	cmp	r8, r6
     f16:	d930      	bls.n	f7a <pm_policy_next_state+0x82>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
     f18:	3c01      	subs	r4, #1
     f1a:	b224      	sxth	r4, r4
     f1c:	2c00      	cmp	r4, #0
     f1e:	db2b      	blt.n	f78 <pm_policy_next_state+0x80>
		const struct pm_state_info *state = &cpu_states[i];
     f20:	9b01      	ldr	r3, [sp, #4]
     f22:	eb04 0244 	add.w	r2, r4, r4, lsl #1
     f26:	eb03 0582 	add.w	r5, r3, r2, lsl #2
		if (pm_policy_state_lock_is_active(state->state, state->substate_id)) {
     f2a:	7869      	ldrb	r1, [r5, #1]
     f2c:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
     f30:	f004 fa21 	bl	5376 <pm_policy_state_lock_is_active>
     f34:	2800      	cmp	r0, #0
     f36:	d1ef      	bne.n	f18 <pm_policy_next_state+0x20>
		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
     f38:	6868      	ldr	r0, [r5, #4]
     f3a:	0c41      	lsrs	r1, r0, #17
     f3c:	03c0      	lsls	r0, r0, #15
     f3e:	4f11      	ldr	r7, [pc, #68]	; (f84 <pm_policy_next_state+0x8c>)
     f40:	19c0      	adds	r0, r0, r7
     f42:	4a11      	ldr	r2, [pc, #68]	; (f88 <pm_policy_next_state+0x90>)
     f44:	f04f 0300 	mov.w	r3, #0
     f48:	f141 0100 	adc.w	r1, r1, #0
     f4c:	f7ff f902 	bl	154 <__aeabi_uldivmod>
     f50:	4680      	mov	r8, r0
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);
     f52:	68ab      	ldr	r3, [r5, #8]
     f54:	0c59      	lsrs	r1, r3, #17
     f56:	03db      	lsls	r3, r3, #15
     f58:	19d8      	adds	r0, r3, r7
     f5a:	4a0b      	ldr	r2, [pc, #44]	; (f88 <pm_policy_next_state+0x90>)
     f5c:	f04f 0300 	mov.w	r3, #0
     f60:	f141 0100 	adc.w	r1, r1, #0
     f64:	f7ff f8f6 	bl	154 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
     f68:	4b08      	ldr	r3, [pc, #32]	; (f8c <pm_policy_next_state+0x94>)
     f6a:	681b      	ldr	r3, [r3, #0]
     f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
     f70:	d0cc      	beq.n	f0c <pm_policy_next_state+0x14>
     f72:	4283      	cmp	r3, r0
     f74:	d8ca      	bhi.n	f0c <pm_policy_next_state+0x14>
     f76:	e7cf      	b.n	f18 <pm_policy_next_state+0x20>
			return state;
		}
	}

	return NULL;
     f78:	2500      	movs	r5, #0
}
     f7a:	4628      	mov	r0, r5
     f7c:	b002      	add	sp, #8
     f7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     f82:	bf00      	nop
     f84:	000f423f 	.word	0x000f423f
     f88:	000f4240 	.word	0x000f4240
     f8c:	20000004 	.word	0x20000004

00000f90 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
     f90:	b908      	cbnz	r0, f96 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
     f92:	4b02      	ldr	r3, [pc, #8]	; (f9c <pm_state_cpu_get_all+0xc>)
     f94:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
     f96:	2000      	movs	r0, #0
     f98:	4770      	bx	lr
     f9a:	bf00      	nop
     f9c:	00006bf4 	.word	0x00006bf4

00000fa0 <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
     fa0:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
     fa2:	4802      	ldr	r0, [pc, #8]	; (fac <nrf_cc3xx_platform_abort_init+0xc>)
     fa4:	f003 fc50 	bl	4848 <nrf_cc3xx_platform_set_abort>
}
     fa8:	bd08      	pop	{r3, pc}
     faa:	bf00      	nop
     fac:	00006bf4 	.word	0x00006bf4

00000fb0 <mutex_flags_unknown>:
                    NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_HW_MUTEX :
                    NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID
};

static bool mutex_flags_unknown(uint32_t flags){
    switch(flags){
     fb0:	f5b0 0f68 	cmp.w	r0, #15204352	; 0xe80000
     fb4:	d017      	beq.n	fe6 <mutex_flags_unknown+0x36>
     fb6:	d80c      	bhi.n	fd2 <mutex_flags_unknown+0x22>
     fb8:	f640 63ba 	movw	r3, #3770	; 0xeba
     fbc:	4298      	cmp	r0, r3
     fbe:	d014      	beq.n	fea <mutex_flags_unknown+0x3a>
     fc0:	f5b0 3f68 	cmp.w	r0, #237568	; 0x3a000
     fc4:	d013      	beq.n	fee <mutex_flags_unknown+0x3e>
     fc6:	283a      	cmp	r0, #58	; 0x3a
     fc8:	d001      	beq.n	fce <mutex_flags_unknown+0x1e>
        case NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID:
        case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_HW_MUTEX:
        case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
            return false;
        default:
            return true;
     fca:	2001      	movs	r0, #1
     fcc:	4770      	bx	lr
    switch(flags){
     fce:	2000      	movs	r0, #0
     fd0:	4770      	bx	lr
     fd2:	4b09      	ldr	r3, [pc, #36]	; (ff8 <mutex_flags_unknown+0x48>)
     fd4:	4298      	cmp	r0, r3
     fd6:	d00c      	beq.n	ff2 <mutex_flags_unknown+0x42>
     fd8:	4b08      	ldr	r3, [pc, #32]	; (ffc <mutex_flags_unknown+0x4c>)
     fda:	4298      	cmp	r0, r3
     fdc:	d001      	beq.n	fe2 <mutex_flags_unknown+0x32>
            return true;
     fde:	2001      	movs	r0, #1
    }
}
     fe0:	4770      	bx	lr
    switch(flags){
     fe2:	2000      	movs	r0, #0
     fe4:	4770      	bx	lr
     fe6:	2000      	movs	r0, #0
     fe8:	4770      	bx	lr
     fea:	2000      	movs	r0, #0
     fec:	4770      	bx	lr
     fee:	2000      	movs	r0, #0
     ff0:	4770      	bx	lr
     ff2:	2000      	movs	r0, #0
     ff4:	4770      	bx	lr
     ff6:	bf00      	nop
     ff8:	3a00003a 	.word	0x3a00003a
     ffc:	a95c5f2c 	.word	0xa95c5f2c

00001000 <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    1000:	b328      	cbz	r0, 104e <mutex_unlock_platform+0x4e>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1002:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    1004:	6843      	ldr	r3, [r0, #4]
    1006:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    100a:	d00a      	beq.n	1022 <mutex_unlock_platform+0x22>
    100c:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    1010:	d014      	beq.n	103c <mutex_unlock_platform+0x3c>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1012:	4912      	ldr	r1, [pc, #72]	; (105c <mutex_unlock_platform+0x5c>)
    1014:	428b      	cmp	r3, r1
    1016:	d01f      	beq.n	1058 <mutex_unlock_platform+0x58>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    1018:	6800      	ldr	r0, [r0, #0]
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    101a:	f002 fdd9 	bl	3bd0 <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    101e:	2000      	movs	r0, #0
    1020:	e014      	b.n	104c <mutex_unlock_platform+0x4c>
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
    1022:	6803      	ldr	r3, [r0, #0]
 * @return true if @a new_value is written, false otherwise.
 */
static inline bool atomic_cas(atomic_t *target, atomic_val_t old_value,
			  atomic_val_t new_value)
{
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    1024:	2200      	movs	r2, #0
    1026:	e8d3 1fef 	ldaex	r1, [r3]
    102a:	2901      	cmp	r1, #1
    102c:	d103      	bne.n	1036 <mutex_unlock_platform+0x36>
    102e:	e8c3 2fe0 	stlex	r0, r2, [r3]
    1032:	2800      	cmp	r0, #0
    1034:	d1f7      	bne.n	1026 <mutex_unlock_platform+0x26>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1036:	d10d      	bne.n	1054 <mutex_unlock_platform+0x54>
    1038:	4610      	mov	r0, r2
    103a:	e007      	b.n	104c <mutex_unlock_platform+0x4c>
        nrf_mutex_unlock(NRF_MUTEX, *((uint8_t *)mutex->mutex));
    103c:	6803      	ldr	r3, [r0, #0]
    103e:	781b      	ldrb	r3, [r3, #0]
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
}

NRF_STATIC_INLINE void nrf_mutex_unlock(NRF_MUTEX_Type * p_reg, uint8_t mutex)
{
    p_reg->MUTEX[mutex] = MUTEX_MUTEX_MUTEX_Unlocked;
    1040:	f503 7380 	add.w	r3, r3, #256	; 0x100
    1044:	2000      	movs	r0, #0
    1046:	4a06      	ldr	r2, [pc, #24]	; (1060 <mutex_unlock_platform+0x60>)
    1048:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    }
}
    104c:	bd08      	pop	{r3, pc}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    104e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    1052:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1054:	4803      	ldr	r0, [pc, #12]	; (1064 <mutex_unlock_platform+0x64>)
    1056:	e7f9      	b.n	104c <mutex_unlock_platform+0x4c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1058:	4803      	ldr	r0, [pc, #12]	; (1068 <mutex_unlock_platform+0x68>)
    105a:	e7f7      	b.n	104c <mutex_unlock_platform+0x4c>
    105c:	a95c5f2c 	.word	0xa95c5f2c
    1060:	50030000 	.word	0x50030000
    1064:	ffff8fe9 	.word	0xffff8fe9
    1068:	ffff8fea 	.word	0xffff8fea

0000106c <mutex_lock_platform>:
    if(mutex == NULL) {
    106c:	b388      	cbz	r0, 10d2 <mutex_lock_platform+0x66>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    106e:	b508      	push	{r3, lr}
    switch (mutex->flags) {
    1070:	6843      	ldr	r3, [r0, #4]
    1072:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    1076:	d00f      	beq.n	1098 <mutex_lock_platform+0x2c>
    1078:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    107c:	d019      	beq.n	10b2 <mutex_lock_platform+0x46>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    107e:	4916      	ldr	r1, [pc, #88]	; (10d8 <mutex_lock_platform+0x6c>)
    1080:	428b      	cmp	r3, r1
    1082:	d024      	beq.n	10ce <mutex_lock_platform+0x62>
        p_mutex = (struct k_mutex *)mutex->mutex;
    1084:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    1086:	f04f 32ff 	mov.w	r2, #4294967295
    108a:	f04f 33ff 	mov.w	r3, #4294967295
    108e:	f002 fd1b 	bl	3ac8 <z_impl_k_mutex_lock>
        if (ret == 0) {
    1092:	b168      	cbz	r0, 10b0 <mutex_lock_platform+0x44>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
    1094:	4811      	ldr	r0, [pc, #68]	; (10dc <mutex_lock_platform+0x70>)
    1096:	e00b      	b.n	10b0 <mutex_lock_platform+0x44>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
    1098:	6803      	ldr	r3, [r0, #0]
    109a:	2201      	movs	r2, #1
    109c:	e8d3 1fef 	ldaex	r1, [r3]
    10a0:	2900      	cmp	r1, #0
    10a2:	d103      	bne.n	10ac <mutex_lock_platform+0x40>
    10a4:	e8c3 2fe0 	stlex	r0, r2, [r3]
    10a8:	2800      	cmp	r0, #0
    10aa:	d1f7      	bne.n	109c <mutex_lock_platform+0x30>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    10ac:	d10b      	bne.n	10c6 <mutex_lock_platform+0x5a>
    10ae:	2000      	movs	r0, #0
}
    10b0:	bd08      	pop	{r3, pc}
        return nrf_mutex_lock(NRF_MUTEX, *((uint8_t *)mutex->mutex)) ?
    10b2:	6803      	ldr	r3, [r0, #0]
    10b4:	781b      	ldrb	r3, [r3, #0]
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
    10b6:	f503 7380 	add.w	r3, r3, #256	; 0x100
    10ba:	4a09      	ldr	r2, [pc, #36]	; (10e0 <mutex_lock_platform+0x74>)
    10bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                       NRF_CC3XX_PLATFORM_SUCCESS :
    10c0:	b91b      	cbnz	r3, 10ca <mutex_lock_platform+0x5e>
    10c2:	2000      	movs	r0, #0
    10c4:	e7f4      	b.n	10b0 <mutex_lock_platform+0x44>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    10c6:	4805      	ldr	r0, [pc, #20]	; (10dc <mutex_lock_platform+0x70>)
    10c8:	e7f2      	b.n	10b0 <mutex_lock_platform+0x44>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    10ca:	4804      	ldr	r0, [pc, #16]	; (10dc <mutex_lock_platform+0x70>)
    10cc:	e7f0      	b.n	10b0 <mutex_lock_platform+0x44>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    10ce:	4805      	ldr	r0, [pc, #20]	; (10e4 <mutex_lock_platform+0x78>)
    10d0:	e7ee      	b.n	10b0 <mutex_lock_platform+0x44>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    10d2:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    10d6:	4770      	bx	lr
    10d8:	a95c5f2c 	.word	0xa95c5f2c
    10dc:	ffff8fe9 	.word	0xffff8fe9
    10e0:	50030000 	.word	0x50030000
    10e4:	ffff8fea 	.word	0xffff8fea

000010e8 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    10e8:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    10ea:	4604      	mov	r4, r0
    10ec:	b1a8      	cbz	r0, 111a <mutex_free_platform+0x32>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    10ee:	6863      	ldr	r3, [r4, #4]
    10f0:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    10f4:	d010      	beq.n	1118 <mutex_free_platform+0x30>
    10f6:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    10fa:	d00d      	beq.n	1118 <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    10fc:	4a0c      	ldr	r2, [pc, #48]	; (1130 <mutex_free_platform+0x48>)
    10fe:	4293      	cmp	r3, r2
    1100:	d00a      	beq.n	1118 <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    1102:	f413 6f68 	tst.w	r3, #3712	; 0xe80
    1106:	d00d      	beq.n	1124 <mutex_free_platform+0x3c>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    1108:	4621      	mov	r1, r4
    110a:	480a      	ldr	r0, [pc, #40]	; (1134 <mutex_free_platform+0x4c>)
    110c:	f005 f9ae 	bl	646c <k_mem_slab_free>
        mutex->mutex = NULL;
    1110:	2300      	movs	r3, #0
    1112:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    1114:	4b06      	ldr	r3, [pc, #24]	; (1130 <mutex_free_platform+0x48>)
    1116:	6063      	str	r3, [r4, #4]
}
    1118:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    111a:	4b07      	ldr	r3, [pc, #28]	; (1138 <mutex_free_platform+0x50>)
    111c:	685b      	ldr	r3, [r3, #4]
    111e:	4807      	ldr	r0, [pc, #28]	; (113c <mutex_free_platform+0x54>)
    1120:	4798      	blx	r3
    1122:	e7e4      	b.n	10ee <mutex_free_platform+0x6>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1124:	2214      	movs	r2, #20
    1126:	2100      	movs	r1, #0
    1128:	6820      	ldr	r0, [r4, #0]
    112a:	f004 fa4a 	bl	55c2 <memset>
    112e:	e7f1      	b.n	1114 <mutex_free_platform+0x2c>
    1130:	a95c5f2c 	.word	0xa95c5f2c
    1134:	2000083c 	.word	0x2000083c
    1138:	200000d4 	.word	0x200000d4
    113c:	00006bfc 	.word	0x00006bfc

00001140 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1140:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    1142:	4604      	mov	r4, r0
    1144:	b368      	cbz	r0, 11a2 <mutex_init_platform+0x62>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    1146:	6860      	ldr	r0, [r4, #4]
    1148:	f5b0 3f68 	cmp.w	r0, #237568	; 0x3a000
    114c:	d028      	beq.n	11a0 <mutex_init_platform+0x60>
    114e:	f5b0 0f68 	cmp.w	r0, #15204352	; 0xe80000
    1152:	d025      	beq.n	11a0 <mutex_init_platform+0x60>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
    1154:	4b17      	ldr	r3, [pc, #92]	; (11b4 <mutex_init_platform+0x74>)
    1156:	4298      	cmp	r0, r3
    1158:	d028      	beq.n	11ac <mutex_init_platform+0x6c>
        mutex_flags_unknown(mutex->flags)) {
    115a:	f7ff ff29 	bl	fb0 <mutex_flags_unknown>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
    115e:	b1c0      	cbz	r0, 1192 <mutex_init_platform+0x52>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    1160:	f04f 32ff 	mov.w	r2, #4294967295
    1164:	f04f 33ff 	mov.w	r3, #4294967295
    1168:	4621      	mov	r1, r4
    116a:	4813      	ldr	r0, [pc, #76]	; (11b8 <mutex_init_platform+0x78>)
    116c:	f002 fb7e 	bl	386c <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    1170:	b908      	cbnz	r0, 1176 <mutex_init_platform+0x36>
    1172:	6823      	ldr	r3, [r4, #0]
    1174:	b91b      	cbnz	r3, 117e <mutex_init_platform+0x3e>
            platform_abort_apis.abort_fn(
    1176:	4b11      	ldr	r3, [pc, #68]	; (11bc <mutex_init_platform+0x7c>)
    1178:	685b      	ldr	r3, [r3, #4]
    117a:	4811      	ldr	r0, [pc, #68]	; (11c0 <mutex_init_platform+0x80>)
    117c:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    117e:	2214      	movs	r2, #20
    1180:	2100      	movs	r1, #0
    1182:	6820      	ldr	r0, [r4, #0]
    1184:	f004 fa1d 	bl	55c2 <memset>
        mutex->flags = 0;
    1188:	2300      	movs	r3, #0
    118a:	6063      	str	r3, [r4, #4]
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    118c:	f44f 6368 	mov.w	r3, #3712	; 0xe80
    1190:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    1192:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    1194:	f005 f9d6 	bl	6544 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    1198:	6863      	ldr	r3, [r4, #4]
    119a:	f043 033a 	orr.w	r3, r3, #58	; 0x3a
    119e:	6063      	str	r3, [r4, #4]
}
    11a0:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    11a2:	4b06      	ldr	r3, [pc, #24]	; (11bc <mutex_init_platform+0x7c>)
    11a4:	685b      	ldr	r3, [r3, #4]
    11a6:	4807      	ldr	r0, [pc, #28]	; (11c4 <mutex_init_platform+0x84>)
    11a8:	4798      	blx	r3
    11aa:	e7cc      	b.n	1146 <mutex_init_platform+0x6>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
    11ac:	6823      	ldr	r3, [r4, #0]
    11ae:	2b00      	cmp	r3, #0
    11b0:	d1d3      	bne.n	115a <mutex_init_platform+0x1a>
    11b2:	e7d5      	b.n	1160 <mutex_init_platform+0x20>
    11b4:	a95c5f2c 	.word	0xa95c5f2c
    11b8:	2000083c 	.word	0x2000083c
    11bc:	200000d4 	.word	0x200000d4
    11c0:	00006c24 	.word	0x00006c24
    11c4:	00006bfc 	.word	0x00006bfc

000011c8 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    11c8:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    11ca:	2340      	movs	r3, #64	; 0x40
    11cc:	2214      	movs	r2, #20
    11ce:	4904      	ldr	r1, [pc, #16]	; (11e0 <nrf_cc3xx_platform_mutex_init+0x18>)
    11d0:	4804      	ldr	r0, [pc, #16]	; (11e4 <nrf_cc3xx_platform_mutex_init+0x1c>)
    11d2:	f005 f93d 	bl	6450 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    11d6:	4904      	ldr	r1, [pc, #16]	; (11e8 <nrf_cc3xx_platform_mutex_init+0x20>)
    11d8:	4804      	ldr	r0, [pc, #16]	; (11ec <nrf_cc3xx_platform_mutex_init+0x24>)
    11da:	f003 fba7 	bl	492c <nrf_cc3xx_platform_set_mutexes>
}
    11de:	bd08      	pop	{r3, pc}
    11e0:	2000033c 	.word	0x2000033c
    11e4:	2000083c 	.word	0x2000083c
    11e8:	00006c54 	.word	0x00006c54
    11ec:	00006c68 	.word	0x00006c68

000011f0 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    11f0:	4901      	ldr	r1, [pc, #4]	; (11f8 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    11f2:	2210      	movs	r2, #16
	str	r2, [r1]
    11f4:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    11f6:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    11f8:	e000ed10 	.word	0xe000ed10

000011fc <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    11fc:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    11fe:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    1200:	f380 8811 	msr	BASEPRI, r0
	isb
    1204:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    1208:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    120c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    120e:	b662      	cpsie	i
	isb
    1210:	f3bf 8f6f 	isb	sy

	bx	lr
    1214:	4770      	bx	lr
    1216:	bf00      	nop

00001218 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    1218:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    121a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    121c:	f381 8811 	msr	BASEPRI, r1

	wfe
    1220:	bf20      	wfe

	msr	BASEPRI, r0
    1222:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    1226:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    1228:	4770      	bx	lr
    122a:	bf00      	nop

0000122c <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    122c:	2800      	cmp	r0, #0
    122e:	db07      	blt.n	1240 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1230:	f000 021f 	and.w	r2, r0, #31
    1234:	0940      	lsrs	r0, r0, #5
    1236:	2301      	movs	r3, #1
    1238:	4093      	lsls	r3, r2
    123a:	4a02      	ldr	r2, [pc, #8]	; (1244 <__NVIC_EnableIRQ+0x18>)
    123c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
    1240:	4770      	bx	lr
    1242:	bf00      	nop
    1244:	e000e100 	.word	0xe000e100

00001248 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    1248:	2800      	cmp	r0, #0
    124a:	db08      	blt.n	125e <__NVIC_SetPriority+0x16>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    124c:	0149      	lsls	r1, r1, #5
    124e:	b2c9      	uxtb	r1, r1
    1250:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
    1254:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
    1258:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
    125c:	4770      	bx	lr
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    125e:	f000 000f 	and.w	r0, r0, #15
    1262:	0149      	lsls	r1, r1, #5
    1264:	b2c9      	uxtb	r1, r1
    1266:	4b01      	ldr	r3, [pc, #4]	; (126c <__NVIC_SetPriority+0x24>)
    1268:	5419      	strb	r1, [r3, r0]
  }
}
    126a:	4770      	bx	lr
    126c:	e000ed14 	.word	0xe000ed14

00001270 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    1270:	0942      	lsrs	r2, r0, #5
    1272:	4b05      	ldr	r3, [pc, #20]	; (1288 <arch_irq_is_enabled+0x18>)
    1274:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1278:	f000 001f 	and.w	r0, r0, #31
    127c:	2301      	movs	r3, #1
    127e:	fa03 f000 	lsl.w	r0, r3, r0
}
    1282:	4010      	ands	r0, r2
    1284:	4770      	bx	lr
    1286:	bf00      	nop
    1288:	e000e100 	.word	0xe000e100

0000128c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    128c:	bf30      	wfi
    b z_SysNmiOnReset
    128e:	f7ff bffd 	b.w	128c <z_SysNmiOnReset>
    1292:	bf00      	nop

00001294 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    1294:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1296:	4b0b      	ldr	r3, [pc, #44]	; (12c4 <z_arm_prep_c+0x30>)
    1298:	4a0b      	ldr	r2, [pc, #44]	; (12c8 <z_arm_prep_c+0x34>)
    129a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    129e:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    12a0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    12a4:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    12a8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    12ac:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    12b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    12b4:	f002 fa26 	bl	3704 <z_bss_zero>
	z_data_copy();
    12b8:	f003 f900 	bl	44bc <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    12bc:	f000 f9f8 	bl	16b0 <z_arm_interrupt_init>
	z_cstart();
    12c0:	f002 fa7c 	bl	37bc <z_cstart>
    12c4:	e000ed00 	.word	0xe000ed00
    12c8:	00000000 	.word	0x00000000

000012cc <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    12cc:	4a0a      	ldr	r2, [pc, #40]	; (12f8 <arch_swap+0x2c>)
    12ce:	6893      	ldr	r3, [r2, #8]
    12d0:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
    12d4:	4909      	ldr	r1, [pc, #36]	; (12fc <arch_swap+0x30>)
    12d6:	6809      	ldr	r1, [r1, #0]
    12d8:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    12dc:	4908      	ldr	r1, [pc, #32]	; (1300 <arch_swap+0x34>)
    12de:	684b      	ldr	r3, [r1, #4]
    12e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    12e4:	604b      	str	r3, [r1, #4]
    12e6:	2300      	movs	r3, #0
    12e8:	f383 8811 	msr	BASEPRI, r3
    12ec:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    12f0:	6893      	ldr	r3, [r2, #8]
}
    12f2:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    12f6:	4770      	bx	lr
    12f8:	20000950 	.word	0x20000950
    12fc:	00006dc0 	.word	0x00006dc0
    1300:	e000ed00 	.word	0xe000ed00

00001304 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1304:	4914      	ldr	r1, [pc, #80]	; (1358 <z_arm_pendsv+0x54>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1306:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1308:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    130c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    130e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    1312:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1316:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    1318:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    131c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    1320:	4f0e      	ldr	r7, [pc, #56]	; (135c <z_arm_pendsv+0x58>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1322:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    1326:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    1328:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    132a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    132c:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
    1330:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1332:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    1336:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    133a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    133e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    1342:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    1346:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    134a:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    134c:	f004 f83a 	bl	53c4 <configure_builtin_stack_guard>
    pop {r2, lr}
    1350:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    1354:	4770      	bx	lr
    1356:	0000      	.short	0x0000
    ldr r1, =_kernel
    1358:	20000950 	.word	0x20000950
    ldr v4, =_SCS_ICSR
    135c:	e000ed04 	.word	0xe000ed04

00001360 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    1360:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1364:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1366:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    136a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    136e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    1370:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1374:	2902      	cmp	r1, #2
    beq _oops
    1376:	d0ff      	beq.n	1378 <_oops>

00001378 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1378:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    137a:	f004 f806 	bl	538a <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    137e:	bd01      	pop	{r0, pc}

00001380 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    1380:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    1382:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    1386:	490e      	ldr	r1, [pc, #56]	; (13c0 <arch_new_thread+0x40>)
    1388:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    138c:	f021 0101 	bic.w	r1, r1, #1
    1390:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    1394:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    1398:	9b01      	ldr	r3, [sp, #4]
    139a:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    139e:	9b02      	ldr	r3, [sp, #8]
    13a0:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    13a4:	9b03      	ldr	r3, [sp, #12]
    13a6:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    13aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    13ae:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe = (struct __basic_sf *)
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
    13b2:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    13b4:	2300      	movs	r3, #0
    13b6:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    13ba:	bc10      	pop	{r4}
    13bc:	4770      	bx	lr
    13be:	bf00      	nop
    13c0:	00004b93 	.word	0x00004b93

000013c4 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    13c4:	4b09      	ldr	r3, [pc, #36]	; (13ec <arch_switch_to_main_thread+0x28>)
    13c6:	6098      	str	r0, [r3, #8]
#endif

#if defined(CONFIG_BUILTIN_STACK_GUARD)
	/* Set PSPLIM register for built-in stack guarding of main thread. */
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
	__set_PSPLIM(main_thread->stack_info.start);
    13c8:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    13cc:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    13d0:	4610      	mov	r0, r2
    13d2:	f381 8809 	msr	PSP, r1
    13d6:	2100      	movs	r1, #0
    13d8:	b663      	cpsie	if
    13da:	f381 8811 	msr	BASEPRI, r1
    13de:	f3bf 8f6f 	isb	sy
    13e2:	2200      	movs	r2, #0
    13e4:	2300      	movs	r3, #0
    13e6:	f003 fbd4 	bl	4b92 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    13ea:	bf00      	nop
    13ec:	20000950 	.word	0x20000950

000013f0 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    13f0:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    13f2:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    13f4:	4a0b      	ldr	r2, [pc, #44]	; (1424 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    13f6:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    13f8:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    13fa:	bf1e      	ittt	ne
	movne	r1, #0
    13fc:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    13fe:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    1400:	f005 f884 	blne	650c <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1404:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    1406:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    140a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    140e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    1412:	4905      	ldr	r1, [pc, #20]	; (1428 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1414:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1416:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    1418:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    141a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    141e:	4903      	ldr	r1, [pc, #12]	; (142c <_isr_wrapper+0x3c>)
	bx r1
    1420:	4708      	bx	r1
    1422:	0000      	.short	0x0000
	ldr r2, =_kernel
    1424:	20000950 	.word	0x20000950
	ldr r1, =_sw_isr_table
    1428:	00006914 	.word	0x00006914
	ldr r1, =z_arm_int_exit
    142c:	00001431 	.word	0x00001431

00001430 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    1430:	4b04      	ldr	r3, [pc, #16]	; (1444 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    1432:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    1434:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    1436:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    1438:	d003      	beq.n	1442 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    143a:	4903      	ldr	r1, [pc, #12]	; (1448 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    143c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    1440:	600a      	str	r2, [r1, #0]

00001442 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    1442:	4770      	bx	lr
	ldr r3, =_kernel
    1444:	20000950 	.word	0x20000950
	ldr r1, =_SCS_ICSR
    1448:	e000ed04 	.word	0xe000ed04

0000144c <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    144c:	b510      	push	{r4, lr}
    144e:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1450:	4b18      	ldr	r3, [pc, #96]	; (14b4 <mem_manage_fault+0x68>)
    1452:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    1454:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1458:	f013 0f02 	tst.w	r3, #2
    145c:	d00b      	beq.n	1476 <mem_manage_fault+0x2a>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    145e:	4b15      	ldr	r3, [pc, #84]	; (14b4 <mem_manage_fault+0x68>)
    1460:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    1462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1464:	f013 0f80 	tst.w	r3, #128	; 0x80
    1468:	d005      	beq.n	1476 <mem_manage_fault+0x2a>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    146a:	b121      	cbz	r1, 1476 <mem_manage_fault+0x2a>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    146c:	4a11      	ldr	r2, [pc, #68]	; (14b4 <mem_manage_fault+0x68>)
    146e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1470:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    1474:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    1476:	4b0f      	ldr	r3, [pc, #60]	; (14b4 <mem_manage_fault+0x68>)
    1478:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    147a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    147c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    147e:	f013 0f10 	tst.w	r3, #16
    1482:	d101      	bne.n	1488 <mem_manage_fault+0x3c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    1484:	4b0b      	ldr	r3, [pc, #44]	; (14b4 <mem_manage_fault+0x68>)
    1486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1488:	4b0a      	ldr	r3, [pc, #40]	; (14b4 <mem_manage_fault+0x68>)
    148a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    148c:	f013 0f20 	tst.w	r3, #32
    1490:	d004      	beq.n	149c <mem_manage_fault+0x50>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    1492:	4a08      	ldr	r2, [pc, #32]	; (14b4 <mem_manage_fault+0x68>)
    1494:	6a53      	ldr	r3, [r2, #36]	; 0x24
    1496:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    149a:	6253      	str	r3, [r2, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    149c:	4a05      	ldr	r2, [pc, #20]	; (14b4 <mem_manage_fault+0x68>)
    149e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    14a0:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    14a4:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    14a6:	2101      	movs	r1, #1
    14a8:	f003 ff91 	bl	53ce <memory_fault_recoverable>
    14ac:	7020      	strb	r0, [r4, #0]

	return reason;
}
    14ae:	2000      	movs	r0, #0
    14b0:	bd10      	pop	{r4, pc}
    14b2:	bf00      	nop
    14b4:	e000ed00 	.word	0xe000ed00

000014b8 <bus_fault>:
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
    14b8:	b510      	push	{r4, lr}
    14ba:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    14bc:	4b12      	ldr	r3, [pc, #72]	; (1508 <bus_fault+0x50>)
    14be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    14c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    14c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    14c4:	f413 7f00 	tst.w	r3, #512	; 0x200
    14c8:	d00b      	beq.n	14e2 <bus_fault+0x2a>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    14ca:	4b0f      	ldr	r3, [pc, #60]	; (1508 <bus_fault+0x50>)
    14cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    14ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    14d0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    14d4:	d005      	beq.n	14e2 <bus_fault+0x2a>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    14d6:	b121      	cbz	r1, 14e2 <bus_fault+0x2a>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    14d8:	4a0b      	ldr	r2, [pc, #44]	; (1508 <bus_fault+0x50>)
    14da:	6a93      	ldr	r3, [r2, #40]	; 0x28
    14dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    14e0:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    14e2:	4b09      	ldr	r3, [pc, #36]	; (1508 <bus_fault+0x50>)
    14e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    14e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    14e8:	f413 7f80 	tst.w	r3, #256	; 0x100
    14ec:	d101      	bne.n	14f2 <bus_fault+0x3a>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    14ee:	4b06      	ldr	r3, [pc, #24]	; (1508 <bus_fault+0x50>)
    14f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    14f2:	4a05      	ldr	r2, [pc, #20]	; (1508 <bus_fault+0x50>)
    14f4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    14f6:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    14fa:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    14fc:	2101      	movs	r1, #1
    14fe:	f003 ff66 	bl	53ce <memory_fault_recoverable>
    1502:	7020      	strb	r0, [r4, #0]

	return reason;
}
    1504:	2000      	movs	r0, #0
    1506:	bd10      	pop	{r4, pc}
    1508:	e000ed00 	.word	0xe000ed00

0000150c <usage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    150c:	4b0a      	ldr	r3, [pc, #40]	; (1538 <usage_fault+0x2c>)
    150e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1510:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    1512:	6a98      	ldr	r0, [r3, #40]	; 0x28
    1514:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
    1518:	d10b      	bne.n	1532 <usage_fault+0x26>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    151a:	4b07      	ldr	r3, [pc, #28]	; (1538 <usage_fault+0x2c>)
    151c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    151e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1520:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1522:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1524:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1526:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    152a:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    152e:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    1530:	4770      	bx	lr
		reason = K_ERR_STACK_CHK_FAIL;
    1532:	2002      	movs	r0, #2
    1534:	e7f1      	b.n	151a <usage_fault+0xe>
    1536:	bf00      	nop
    1538:	e000ed00 	.word	0xe000ed00

0000153c <z_arm_is_synchronous_svc>:
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

static inline bool z_arm_is_synchronous_svc(z_arch_esf_t *esf)
{
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    153c:	6981      	ldr	r1, [r0, #24]
	/* Note: ARMv6-M does not support CCR.BFHFNMIGN so this access
	 * could generate a fault if the pc was invalid.
	 */
	uint16_t fault_insn = *(ret_addr - 1);
#else
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    153e:	4b0d      	ldr	r3, [pc, #52]	; (1574 <z_arm_is_synchronous_svc+0x38>)
    1540:	695a      	ldr	r2, [r3, #20]
    1542:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    1546:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    1548:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    154c:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();

	uint16_t fault_insn = *(ret_addr - 1);
    1550:	f831 1c02 	ldrh.w	r1, [r1, #-2]

	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    1554:	695a      	ldr	r2, [r3, #20]
    1556:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    155a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    155c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1560:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
#endif /* ARMV6_M_ARMV8_M_BASELINE && !ARMV8_M_BASELINE */

	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    1564:	f64d 7302 	movw	r3, #57090	; 0xdf02
    1568:	4299      	cmp	r1, r3
    156a:	d001      	beq.n	1570 <z_arm_is_synchronous_svc+0x34>
		((fault_insn & 0x00ff) == _SVC_CALL_RUNTIME_EXCEPT)) {
		return true;
	}
#undef _SVC_OPCODE
	return false;
    156c:	2000      	movs	r0, #0
    156e:	4770      	bx	lr
		return true;
    1570:	2001      	movs	r0, #1
}
    1572:	4770      	bx	lr
    1574:	e000ed00 	.word	0xe000ed00

00001578 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
    1578:	b538      	push	{r3, r4, r5, lr}
    157a:	4605      	mov	r5, r0
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
    157c:	2300      	movs	r3, #0
    157e:	700b      	strb	r3, [r1, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1580:	4b1a      	ldr	r3, [pc, #104]	; (15ec <hard_fault+0x74>)
    1582:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    1584:	f010 0002 	ands.w	r0, r0, #2
    1588:	d12d      	bne.n	15e6 <hard_fault+0x6e>
    158a:	460c      	mov	r4, r1
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    158c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    158e:	2b00      	cmp	r3, #0
    1590:	db2a      	blt.n	15e8 <hard_fault+0x70>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    1592:	4b16      	ldr	r3, [pc, #88]	; (15ec <hard_fault+0x74>)
    1594:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    1596:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
    159a:	d025      	beq.n	15e8 <hard_fault+0x70>
		PR_EXC("  Fault escalation (see below)");
		if (z_arm_is_synchronous_svc(esf)) {
    159c:	4628      	mov	r0, r5
    159e:	f7ff ffcd 	bl	153c <z_arm_is_synchronous_svc>
    15a2:	b108      	cbz	r0, 15a8 <hard_fault+0x30>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
			reason = esf->basic.r0;
    15a4:	6828      	ldr	r0, [r5, #0]
    15a6:	e01f      	b.n	15e8 <hard_fault+0x70>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    15a8:	4b10      	ldr	r3, [pc, #64]	; (15ec <hard_fault+0x74>)
    15aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    15ac:	f013 0fff 	tst.w	r3, #255	; 0xff
    15b0:	d10d      	bne.n	15ce <hard_fault+0x56>
			reason = mem_manage_fault(esf, 1, recoverable);
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    15b2:	4b0e      	ldr	r3, [pc, #56]	; (15ec <hard_fault+0x74>)
    15b4:	6a98      	ldr	r0, [r3, #40]	; 0x28
    15b6:	f410 407f 	ands.w	r0, r0, #65280	; 0xff00
    15ba:	d10e      	bne.n	15da <hard_fault+0x62>
			reason = bus_fault(esf, 1, recoverable);
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    15bc:	4b0b      	ldr	r3, [pc, #44]	; (15ec <hard_fault+0x74>)
    15be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    15c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    15c4:	d310      	bcc.n	15e8 <hard_fault+0x70>
			reason = usage_fault(esf);
    15c6:	4628      	mov	r0, r5
    15c8:	f7ff ffa0 	bl	150c <usage_fault>
    15cc:	e00c      	b.n	15e8 <hard_fault+0x70>
			reason = mem_manage_fault(esf, 1, recoverable);
    15ce:	4622      	mov	r2, r4
    15d0:	2101      	movs	r1, #1
    15d2:	4628      	mov	r0, r5
    15d4:	f7ff ff3a 	bl	144c <mem_manage_fault>
    15d8:	e006      	b.n	15e8 <hard_fault+0x70>
			reason = bus_fault(esf, 1, recoverable);
    15da:	4622      	mov	r2, r4
    15dc:	2101      	movs	r1, #1
    15de:	4628      	mov	r0, r5
    15e0:	f7ff ff6a 	bl	14b8 <bus_fault>
    15e4:	e000      	b.n	15e8 <hard_fault+0x70>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    15e6:	2000      	movs	r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
    15e8:	bd38      	pop	{r3, r4, r5, pc}
    15ea:	bf00      	nop
    15ec:	e000ed00 	.word	0xe000ed00

000015f0 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    15f0:	b570      	push	{r4, r5, r6, lr}
    15f2:	b08a      	sub	sp, #40	; 0x28
    15f4:	460c      	mov	r4, r1
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    15f6:	4b22      	ldr	r3, [pc, #136]	; (1680 <z_arm_fault+0x90>)
    15f8:	6859      	ldr	r1, [r3, #4]
    15fa:	f3c1 0108 	ubfx	r1, r1, #0, #9
    15fe:	2300      	movs	r3, #0
    1600:	f383 8811 	msr	BASEPRI, r3
    1604:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    1608:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    160c:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    1610:	d115      	bne.n	163e <z_arm_fault+0x4e>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    1612:	f002 030c 	and.w	r3, r2, #12
    1616:	2b08      	cmp	r3, #8
    1618:	d014      	beq.n	1644 <z_arm_fault+0x54>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    161a:	f012 0f08 	tst.w	r2, #8
    161e:	d00b      	beq.n	1638 <z_arm_fault+0x48>
	*nested_exc = false;
    1620:	2600      	movs	r6, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    1622:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    1626:	4620      	mov	r0, r4
    1628:	f003 fed6 	bl	53d8 <fault_handle>
    162c:	4605      	mov	r5, r0
	if (recoverable) {
    162e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    1632:	b153      	cbz	r3, 164a <z_arm_fault+0x5a>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    1634:	b00a      	add	sp, #40	; 0x28
    1636:	bd70      	pop	{r4, r5, r6, pc}
			ptr_esf = (z_arch_esf_t *)msp;
    1638:	4604      	mov	r4, r0
			*nested_exc = true;
    163a:	2601      	movs	r6, #1
    163c:	e7f1      	b.n	1622 <z_arm_fault+0x32>
	*nested_exc = false;
    163e:	2600      	movs	r6, #0
		return NULL;
    1640:	4634      	mov	r4, r6
    1642:	e7ee      	b.n	1622 <z_arm_fault+0x32>
	*nested_exc = false;
    1644:	2600      	movs	r6, #0
		return NULL;
    1646:	4634      	mov	r4, r6
    1648:	e7eb      	b.n	1622 <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    164a:	2220      	movs	r2, #32
    164c:	4621      	mov	r1, r4
    164e:	a801      	add	r0, sp, #4
    1650:	f003 ff88 	bl	5564 <memcpy>
	if (nested_exc) {
    1654:	b14e      	cbz	r6, 166a <z_arm_fault+0x7a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    1656:	9b08      	ldr	r3, [sp, #32]
    1658:	f3c3 0208 	ubfx	r2, r3, #0, #9
    165c:	b95a      	cbnz	r2, 1676 <z_arm_fault+0x86>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    165e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    1662:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    1666:	9308      	str	r3, [sp, #32]
    1668:	e005      	b.n	1676 <z_arm_fault+0x86>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    166a:	9b08      	ldr	r3, [sp, #32]
    166c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    1670:	f023 0301 	bic.w	r3, r3, #1
    1674:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
    1676:	a901      	add	r1, sp, #4
    1678:	4628      	mov	r0, r5
    167a:	f003 fe82 	bl	5382 <z_arm_fatal_error>
    167e:	e7d9      	b.n	1634 <z_arm_fault+0x44>
    1680:	e000ed00 	.word	0xe000ed00

00001684 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1684:	4b04      	ldr	r3, [pc, #16]	; (1698 <z_arm_fault_init+0x14>)
    1686:	695a      	ldr	r2, [r3, #20]
    1688:	f042 0210 	orr.w	r2, r2, #16
    168c:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    168e:	695a      	ldr	r2, [r3, #20]
    1690:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    1694:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    1696:	4770      	bx	lr
    1698:	e000ed00 	.word	0xe000ed00

0000169c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    169c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    16a0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    16a4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    16a6:	4672      	mov	r2, lr
	bl z_arm_fault
    16a8:	f7ff ffa2 	bl	15f0 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    16ac:	bd01      	pop	{r0, pc}
    16ae:	bf00      	nop

000016b0 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    16b0:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    16b2:	e007      	b.n	16c4 <z_arm_interrupt_init+0x14>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    16b4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    16b8:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    16bc:	2120      	movs	r1, #32
    16be:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    16c2:	3201      	adds	r2, #1
    16c4:	2a44      	cmp	r2, #68	; 0x44
    16c6:	dc09      	bgt.n	16dc <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    16c8:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    16ca:	2b00      	cmp	r3, #0
    16cc:	daf2      	bge.n	16b4 <z_arm_interrupt_init+0x4>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    16ce:	f003 030f 	and.w	r3, r3, #15
    16d2:	4903      	ldr	r1, [pc, #12]	; (16e0 <z_arm_interrupt_init+0x30>)
    16d4:	4419      	add	r1, r3
    16d6:	2320      	movs	r3, #32
    16d8:	760b      	strb	r3, [r1, #24]
    16da:	e7f2      	b.n	16c2 <z_arm_interrupt_init+0x12>
	}
}
    16dc:	4770      	bx	lr
    16de:	bf00      	nop
    16e0:	e000ecfc 	.word	0xe000ecfc

000016e4 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_DEBUG_THREAD_INFO)
    /* Clear z_sys_post_kernel flag for RTOS aware debuggers */
    movs.n r0, #0
    16e4:	2000      	movs	r0, #0
    ldr r1, =z_sys_post_kernel
    16e6:	4915      	ldr	r1, [pc, #84]	; (173c <__start+0x58>)
    strb r0, [r1]
    16e8:	7008      	strb	r0, [r1, #0]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    16ea:	2000      	movs	r0, #0
    msr CONTROL, r0
    16ec:	f380 8814 	msr	CONTROL, r0
    isb
    16f0:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    16f4:	2000      	movs	r0, #0
    msr MSPLIM, r0
    16f6:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    16fa:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    16fe:	f7ff fb15 	bl	d2c <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    1702:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    1704:	490e      	ldr	r1, [pc, #56]	; (1740 <__start+0x5c>)
    str r0, [r1]
    1706:	6008      	str	r0, [r1, #0]
    dsb
    1708:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    170c:	480d      	ldr	r0, [pc, #52]	; (1744 <__start+0x60>)
    msr msp, r0
    170e:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    1712:	f000 f841 	bl	1798 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1716:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1718:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    171c:	480a      	ldr	r0, [pc, #40]	; (1748 <__start+0x64>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    171e:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    1722:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1724:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    1728:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    172c:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    172e:	4308      	orrs	r0, r1
    msr CONTROL, r0
    1730:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    1734:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    1738:	f7ff fdac 	bl	1294 <z_arm_prep_c>
    ldr r1, =z_sys_post_kernel
    173c:	20000b67 	.word	0x20000b67
    ldr r1, =_SCS_MPU_CTRL
    1740:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1744:	200018a8 	.word	0x200018a8
    ldr r0, =z_interrupt_stacks
    1748:	20000b68 	.word	0x20000b68

0000174c <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
    174c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    1750:	4905      	ldr	r1, [pc, #20]	; (1768 <__NVIC_SystemReset+0x1c>)
    1752:	68ca      	ldr	r2, [r1, #12]
    1754:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    1758:	4b04      	ldr	r3, [pc, #16]	; (176c <__NVIC_SystemReset+0x20>)
    175a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    175c:	60cb      	str	r3, [r1, #12]
    175e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    1762:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    1764:	e7fd      	b.n	1762 <__NVIC_SystemReset+0x16>
    1766:	bf00      	nop
    1768:	e000ed00 	.word	0xe000ed00
    176c:	05fa0004 	.word	0x05fa0004

00001770 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    1770:	4b08      	ldr	r3, [pc, #32]	; (1794 <z_arm_clear_arm_mpu_config+0x24>)
    1772:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
	int num_regions =
    1776:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    177a:	2300      	movs	r3, #0
    177c:	e006      	b.n	178c <z_arm_clear_arm_mpu_config+0x1c>
* \param mpu Pointer to MPU to be used.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
    177e:	4a05      	ldr	r2, [pc, #20]	; (1794 <z_arm_clear_arm_mpu_config+0x24>)
    1780:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  mpu->RLAR = 0U;
    1784:	2100      	movs	r1, #0
    1786:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    178a:	3301      	adds	r3, #1
    178c:	4283      	cmp	r3, r0
    178e:	dbf6      	blt.n	177e <z_arm_clear_arm_mpu_config+0xe>
		ARM_MPU_ClrRegion(i);
	}
}
    1790:	4770      	bx	lr
    1792:	bf00      	nop
    1794:	e000ed00 	.word	0xe000ed00

00001798 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    1798:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    179a:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    179c:	2400      	movs	r4, #0
    179e:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    17a2:	f7ff ffe5 	bl	1770 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    17a6:	4623      	mov	r3, r4
    17a8:	e008      	b.n	17bc <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    17aa:	f103 0120 	add.w	r1, r3, #32
    17ae:	4a0e      	ldr	r2, [pc, #56]	; (17e8 <z_arm_init_arch_hw_at_boot+0x50>)
    17b0:	f04f 30ff 	mov.w	r0, #4294967295
    17b4:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    17b8:	3301      	adds	r3, #1
    17ba:	b2db      	uxtb	r3, r3
    17bc:	2b0f      	cmp	r3, #15
    17be:	d9f4      	bls.n	17aa <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    17c0:	2300      	movs	r3, #0
    17c2:	e008      	b.n	17d6 <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    17c4:	f103 0160 	add.w	r1, r3, #96	; 0x60
    17c8:	4a07      	ldr	r2, [pc, #28]	; (17e8 <z_arm_init_arch_hw_at_boot+0x50>)
    17ca:	f04f 30ff 	mov.w	r0, #4294967295
    17ce:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    17d2:	3301      	adds	r3, #1
    17d4:	b2db      	uxtb	r3, r3
    17d6:	2b0f      	cmp	r3, #15
    17d8:	d9f4      	bls.n	17c4 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    17da:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    17dc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    17e0:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    17e4:	bd10      	pop	{r4, pc}
    17e6:	bf00      	nop
    17e8:	e000e100 	.word	0xe000e100

000017ec <z_impl_k_thread_abort>:
#include <kswap.h>
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    17ec:	b508      	push	{r3, lr}
	if (_current == thread) {
    17ee:	4b0a      	ldr	r3, [pc, #40]	; (1818 <z_impl_k_thread_abort+0x2c>)
    17f0:	689b      	ldr	r3, [r3, #8]
    17f2:	4283      	cmp	r3, r0
    17f4:	d002      	beq.n	17fc <z_impl_k_thread_abort+0x10>
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
		}
	}

	z_thread_abort(thread);
    17f6:	f002 fe29 	bl	444c <z_thread_abort>
}
    17fa:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    17fc:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    1800:	2b00      	cmp	r3, #0
    1802:	d0f8      	beq.n	17f6 <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1804:	4b05      	ldr	r3, [pc, #20]	; (181c <z_impl_k_thread_abort+0x30>)
    1806:	685a      	ldr	r2, [r3, #4]
    1808:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    180c:	605a      	str	r2, [r3, #4]
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    180e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    1810:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    1814:	625a      	str	r2, [r3, #36]	; 0x24
    1816:	e7ee      	b.n	17f6 <z_impl_k_thread_abort+0xa>
    1818:	20000950 	.word	0x20000950
    181c:	e000ed00 	.word	0xe000ed00

00001820 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    1820:	b510      	push	{r4, lr}
    1822:	b084      	sub	sp, #16
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    1824:	4c0a      	ldr	r4, [pc, #40]	; (1850 <z_arm_configure_static_mpu_regions+0x30>)
    1826:	4623      	mov	r3, r4
    1828:	4a0a      	ldr	r2, [pc, #40]	; (1854 <z_arm_configure_static_mpu_regions+0x34>)
    182a:	2101      	movs	r1, #1
    182c:	480a      	ldr	r0, [pc, #40]	; (1858 <z_arm_configure_static_mpu_regions+0x38>)
    182e:	f003 fe64 	bl	54fa <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    1832:	2300      	movs	r3, #0
    1834:	9301      	str	r3, [sp, #4]
    1836:	9302      	str	r3, [sp, #8]
    1838:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    183a:	4b08      	ldr	r3, [pc, #32]	; (185c <z_arm_configure_static_mpu_regions+0x3c>)
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    183c:	9301      	str	r3, [sp, #4]
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    183e:	1ae4      	subs	r4, r4, r3
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    1840:	9402      	str	r4, [sp, #8]
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    1842:	2101      	movs	r1, #1
    1844:	a801      	add	r0, sp, #4
    1846:	f003 fe5c 	bl	5502 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    184a:	b004      	add	sp, #16
    184c:	bd10      	pop	{r4, pc}
    184e:	bf00      	nop
    1850:	20070000 	.word	0x20070000
    1854:	20000000 	.word	0x20000000
    1858:	00006c78 	.word	0x00006c78
    185c:	20000190 	.word	0x20000190

00001860 <mpu_init>:
static struct dynamic_region_info dyn_reg_info[MPU_DYNAMIC_REGION_AREAS_NUM];
#if defined(CONFIG_CPU_CORTEX_M23) || defined(CONFIG_CPU_CORTEX_M33) || \
	defined(CONFIG_CPU_CORTEX_M55)
static inline void mpu_set_mair0(uint32_t mair0)
{
	MPU->MAIR0 = mair0;
    1860:	4b02      	ldr	r3, [pc, #8]	; (186c <mpu_init+0xc>)
    1862:	4a03      	ldr	r2, [pc, #12]	; (1870 <mpu_init+0x10>)
    1864:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
{
	/* Configure the cache-ability attributes for all the
	 * different types of memory regions.
	 */
	mpu_set_mair0(MPU_MAIR_ATTRS);
}
    1868:	4770      	bx	lr
    186a:	bf00      	nop
    186c:	e000ed00 	.word	0xe000ed00
    1870:	0044ffaa 	.word	0x0044ffaa

00001874 <mpu_set_region>:
	MPU->RNR = rnr;
    1874:	4b03      	ldr	r3, [pc, #12]	; (1884 <mpu_set_region+0x10>)
    1876:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	MPU->RBAR = rbar;
    187a:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
	MPU->RLAR = rlar;
    187e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
static void mpu_set_region(uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
	mpu_set_rnr(rnr);
	mpu_set_rbar(rbar);
	mpu_set_rlar(rlar);
}
    1882:	4770      	bx	lr
    1884:	e000ed00 	.word	0xe000ed00

00001888 <mpu_region_get_conf>:
	MPU->RNR = rnr;
    1888:	4b0e      	ldr	r3, [pc, #56]	; (18c4 <mpu_region_get_conf+0x3c>)
    188a:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
    188e:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	return MPU->RBAR;
    1892:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
static inline void mpu_region_get_access_attr(const uint32_t index,
	arm_mpu_region_attr_t *attr)
{
	mpu_set_rnr(index);

	attr->rbar = mpu_get_rbar() &
    1896:	7a0a      	ldrb	r2, [r1, #8]
    1898:	f360 0204 	bfi	r2, r0, #0, #5
    189c:	720a      	strb	r2, [r1, #8]
	return MPU->RLAR;
    189e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    18a2:	f3c2 0242 	ubfx	r2, r2, #1, #3
    18a6:	7a08      	ldrb	r0, [r1, #8]
    18a8:	f362 1047 	bfi	r0, r2, #5, #3
    18ac:	7208      	strb	r0, [r1, #8]
	return MPU->RBAR;
    18ae:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
	 * - Access Permissions
	 */
	mpu_region_get_access_attr(index, &region_conf->attr);

	/* Region base address */
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    18b2:	f022 021f 	bic.w	r2, r2, #31
    18b6:	600a      	str	r2, [r1, #0]
	return MPU->RLAR;
    18b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0

	/* Region limit address */
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
    18bc:	f023 031f 	bic.w	r3, r3, #31
    18c0:	60cb      	str	r3, [r1, #12]
}
    18c2:	4770      	bx	lr
    18c4:	e000ed00 	.word	0xe000ed00

000018c8 <mpu_configure_regions_and_partition>:
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    18c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    18cc:	b087      	sub	sp, #28
    18ce:	4681      	mov	r9, r0
    18d0:	9100      	str	r1, [sp, #0]
    18d2:	9301      	str	r3, [sp, #4]
	int i;
	int reg_index = start_reg_index;
    18d4:	4614      	mov	r4, r2

	for (i = 0; i < regions_num; i++) {
    18d6:	2700      	movs	r7, #0
    18d8:	e034      	b.n	1944 <mpu_configure_regions_and_partition+0x7c>
		 */
		uint32_t u_reg_base = mpu_region_get_base(u_reg_index);
		uint32_t u_reg_last = mpu_region_get_last_addr(u_reg_index);
		uint32_t reg_last = regions[i].start + regions[i].size - 1;

		if ((regions[i].start == u_reg_base) &&
    18da:	45d8      	cmp	r8, fp
    18dc:	d165      	bne.n	19aa <mpu_configure_regions_and_partition+0xe2>
			 * underlying region. In this case we simply
			 * update the partition attributes of the
			 * underlying region with those of the new
			 * region.
			 */
			mpu_configure_region(u_reg_index, &regions[i]);
    18de:	4629      	mov	r1, r5
    18e0:	b2c0      	uxtb	r0, r0
    18e2:	f003 fdda 	bl	549a <mpu_configure_region>
    18e6:	e02c      	b.n	1942 <mpu_configure_regions_and_partition+0x7a>
	MPU->RNR = rnr;
    18e8:	4a58      	ldr	r2, [pc, #352]	; (1a4c <mpu_configure_regions_and_partition+0x184>)
    18ea:	f8c2 6098 	str.w	r6, [r2, #152]	; 0x98
	return MPU->RBAR;
    18ee:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
    18f2:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
    18f6:	f021 011f 	bic.w	r1, r1, #31
    18fa:	430b      	orrs	r3, r1
	MPU->RBAR = rbar;
    18fc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
			 */
			mpu_region_set_base(u_reg_index,
				regions[i].start + regions[i].size);

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    1900:	4629      	mov	r1, r5
    1902:	b2e0      	uxtb	r0, r4
    1904:	f003 fdc9 	bl	549a <mpu_configure_region>
    1908:	4604      	mov	r4, r0

			if (reg_index == -EINVAL) {
    190a:	f110 0f16 	cmn.w	r0, #22
    190e:	f000 8096 	beq.w	1a3e <mpu_configure_regions_and_partition+0x176>
				return reg_index;
			}

			reg_index++;
    1912:	3401      	adds	r4, #1
    1914:	e015      	b.n	1942 <mpu_configure_regions_and_partition+0x7a>
			 * underlying region; the end of the underlying
			 * region needs to be set to the start of the
			 * new region.
			 */
			mpu_region_set_limit(u_reg_index,
				regions[i].start - 1);
    1916:	3b01      	subs	r3, #1
	MPU->RNR = rnr;
    1918:	494c      	ldr	r1, [pc, #304]	; (1a4c <mpu_configure_regions_and_partition+0x184>)
    191a:	f8c1 6098 	str.w	r6, [r1, #152]	; 0x98
	return MPU->RLAR;
    191e:	f8d1 20a0 	ldr.w	r2, [r1, #160]	; 0xa0
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    1922:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    1926:	f023 031f 	bic.w	r3, r3, #31
    192a:	4313      	orrs	r3, r2
	MPU->RLAR = rlar;
    192c:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    1930:	4629      	mov	r1, r5
    1932:	b2e0      	uxtb	r0, r4
    1934:	f003 fdb1 	bl	549a <mpu_configure_region>
    1938:	4604      	mov	r4, r0

			if (reg_index == -EINVAL) {
    193a:	f110 0f16 	cmn.w	r0, #22
    193e:	d07e      	beq.n	1a3e <mpu_configure_regions_and_partition+0x176>
				return reg_index;
			}

			reg_index++;
    1940:	3401      	adds	r4, #1
	for (i = 0; i < regions_num; i++) {
    1942:	3701      	adds	r7, #1
    1944:	9b00      	ldr	r3, [sp, #0]
    1946:	429f      	cmp	r7, r3
    1948:	da79      	bge.n	1a3e <mpu_configure_regions_and_partition+0x176>
		if (regions[i].size == 0U) {
    194a:	eb07 0547 	add.w	r5, r7, r7, lsl #1
    194e:	ea4f 0a85 	mov.w	sl, r5, lsl #2
    1952:	eb09 0585 	add.w	r5, r9, r5, lsl #2
    1956:	686e      	ldr	r6, [r5, #4]
    1958:	2e00      	cmp	r6, #0
    195a:	d0f2      	beq.n	1942 <mpu_configure_regions_and_partition+0x7a>
		if (do_sanity_check &&
    195c:	9b01      	ldr	r3, [sp, #4]
    195e:	b123      	cbz	r3, 196a <mpu_configure_regions_and_partition+0xa2>
			(!mpu_partition_is_valid(&regions[i]))) {
    1960:	4628      	mov	r0, r5
    1962:	f003 fd7d 	bl	5460 <mpu_partition_is_valid>
		if (do_sanity_check &&
    1966:	2800      	cmp	r0, #0
    1968:	d065      	beq.n	1a36 <mpu_configure_regions_and_partition+0x16e>
			get_region_index(regions[i].start, regions[i].size);
    196a:	4631      	mov	r1, r6
    196c:	f859 000a 	ldr.w	r0, [r9, sl]
    1970:	f003 fdb2 	bl	54d8 <get_region_index>
    1974:	4606      	mov	r6, r0
		if ((u_reg_index == -EINVAL) ||
    1976:	f110 0f16 	cmn.w	r0, #22
    197a:	d05f      	beq.n	1a3c <mpu_configure_regions_and_partition+0x174>
    197c:	42a0      	cmp	r0, r4
    197e:	da62      	bge.n	1a46 <mpu_configure_regions_and_partition+0x17e>
	MPU->RNR = rnr;
    1980:	4b32      	ldr	r3, [pc, #200]	; (1a4c <mpu_configure_regions_and_partition+0x184>)
    1982:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	return MPU->RBAR;
    1986:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    198a:	f022 021f 	bic.w	r2, r2, #31
	MPU->RNR = rnr;
    198e:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	return MPU->RLAR;
    1992:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    1996:	f043 081f 	orr.w	r8, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    199a:	f859 300a 	ldr.w	r3, [r9, sl]
    199e:	6869      	ldr	r1, [r5, #4]
    19a0:	4419      	add	r1, r3
    19a2:	f101 3bff 	add.w	fp, r1, #4294967295
		if ((regions[i].start == u_reg_base) &&
    19a6:	429a      	cmp	r2, r3
    19a8:	d097      	beq.n	18da <mpu_configure_regions_and_partition+0x12>
		} else if (regions[i].start == u_reg_base) {
    19aa:	429a      	cmp	r2, r3
    19ac:	d09c      	beq.n	18e8 <mpu_configure_regions_and_partition+0x20>
		} else if (reg_last == u_reg_last) {
    19ae:	45d8      	cmp	r8, fp
    19b0:	d0b1      	beq.n	1916 <mpu_configure_regions_and_partition+0x4e>
			/* The new regions lies strictly inside the
			 * underlying region, which needs to split
			 * into two regions.
			 */
			mpu_region_set_limit(u_reg_index,
				regions[i].start - 1);
    19b2:	3b01      	subs	r3, #1
	MPU->RNR = rnr;
    19b4:	4925      	ldr	r1, [pc, #148]	; (1a4c <mpu_configure_regions_and_partition+0x184>)
    19b6:	f8c1 6098 	str.w	r6, [r1, #152]	; 0x98
	return MPU->RLAR;
    19ba:	f8d1 20a0 	ldr.w	r2, [r1, #160]	; 0xa0
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    19be:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    19c2:	f023 031f 	bic.w	r3, r3, #31
    19c6:	4313      	orrs	r3, r2
	MPU->RLAR = rlar;
    19c8:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    19cc:	4629      	mov	r1, r5
    19ce:	b2e0      	uxtb	r0, r4
    19d0:	f003 fd63 	bl	549a <mpu_configure_region>
    19d4:	4604      	mov	r4, r0

			if (reg_index == -EINVAL) {
    19d6:	f110 0f16 	cmn.w	r0, #22
    19da:	d030      	beq.n	1a3e <mpu_configure_regions_and_partition+0x176>
				return reg_index;
			}
			reg_index++;
    19dc:	3001      	adds	r0, #1
	MPU->RNR = rnr;
    19de:	4b1b      	ldr	r3, [pc, #108]	; (1a4c <mpu_configure_regions_and_partition+0x184>)
    19e0:	f8c3 6098 	str.w	r6, [r3, #152]	; 0x98
	return MPU->RBAR;
    19e4:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    19e8:	f89d 2010 	ldrb.w	r2, [sp, #16]
    19ec:	f361 0204 	bfi	r2, r1, #0, #5
    19f0:	f88d 2010 	strb.w	r2, [sp, #16]
	return MPU->RLAR;
    19f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    19f8:	f3c3 0342 	ubfx	r3, r3, #1, #3
    19fc:	b2d2      	uxtb	r2, r2
    19fe:	f363 1247 	bfi	r2, r3, #5, #3
    1a02:	f88d 2010 	strb.w	r2, [sp, #16]
			 */
			struct arm_mpu_region fill_region;

			mpu_region_get_access_attr(u_reg_index,
				&fill_region.attr);
			fill_region.base = regions[i].start +
    1a06:	f859 300a 	ldr.w	r3, [r9, sl]
				regions[i].size;
    1a0a:	686a      	ldr	r2, [r5, #4]
			fill_region.base = regions[i].start +
    1a0c:	4413      	add	r3, r2
    1a0e:	9302      	str	r3, [sp, #8]
			fill_region.attr.r_limit =
			REGION_LIMIT_ADDR((regions[i].start +
    1a10:	f023 031f 	bic.w	r3, r3, #31
    1a14:	eba8 080b 	sub.w	r8, r8, fp
    1a18:	4443      	add	r3, r8
    1a1a:	3b01      	subs	r3, #1
    1a1c:	f023 031f 	bic.w	r3, r3, #31
			fill_region.attr.r_limit =
    1a20:	9305      	str	r3, [sp, #20]
				regions[i].size), (u_reg_last - reg_last));

			reg_index =
				region_allocate_and_init(reg_index,
    1a22:	a902      	add	r1, sp, #8
    1a24:	b2c0      	uxtb	r0, r0
    1a26:	f003 fd2d 	bl	5484 <region_allocate_and_init>
    1a2a:	4604      	mov	r4, r0
					(const struct arm_mpu_region *)
						&fill_region);

			if (reg_index == -EINVAL) {
    1a2c:	f110 0f16 	cmn.w	r0, #22
    1a30:	d005      	beq.n	1a3e <mpu_configure_regions_and_partition+0x176>
				return reg_index;
			}

			reg_index++;
    1a32:	3401      	adds	r4, #1
    1a34:	e785      	b.n	1942 <mpu_configure_regions_and_partition+0x7a>
			return -EINVAL;
    1a36:	f06f 0415 	mvn.w	r4, #21
    1a3a:	e000      	b.n	1a3e <mpu_configure_regions_and_partition+0x176>
			return -EINVAL;
    1a3c:	4604      	mov	r4, r0
		}
	}

	return reg_index;
}
    1a3e:	4620      	mov	r0, r4
    1a40:	b007      	add	sp, #28
    1a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
    1a46:	f06f 0415 	mvn.w	r4, #21
    1a4a:	e7f8      	b.n	1a3e <mpu_configure_regions_and_partition+0x176>
    1a4c:	e000ed00 	.word	0xe000ed00

00001a50 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    1a50:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    1a52:	4c03      	ldr	r4, [pc, #12]	; (1a60 <mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    1a54:	2301      	movs	r3, #1
    1a56:	7822      	ldrb	r2, [r4, #0]
    1a58:	f7ff ff36 	bl	18c8 <mpu_configure_regions_and_partition>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    1a5c:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    1a5e:	bd10      	pop	{r4, pc}
    1a60:	20000b64 	.word	0x20000b64

00001a64 <mpu_mark_areas_for_dynamic_regions>:
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
		const struct z_arm_mpu_partition dyn_region_areas[],
		const uint8_t dyn_region_areas_num)
{
    1a64:	b570      	push	{r4, r5, r6, lr}
    1a66:	4605      	mov	r5, r0
    1a68:	460e      	mov	r6, r1
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    1a6a:	2400      	movs	r4, #0
    1a6c:	e000      	b.n	1a70 <mpu_mark_areas_for_dynamic_regions+0xc>
    1a6e:	3401      	adds	r4, #1
    1a70:	42a6      	cmp	r6, r4
    1a72:	dd1e      	ble.n	1ab2 <mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    1a74:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    1a78:	009a      	lsls	r2, r3, #2
    1a7a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    1a7e:	6859      	ldr	r1, [r3, #4]
    1a80:	2900      	cmp	r1, #0
    1a82:	d0f4      	beq.n	1a6e <mpu_mark_areas_for_dynamic_regions+0xa>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    1a84:	58a8      	ldr	r0, [r5, r2]
    1a86:	f003 fd27 	bl	54d8 <get_region_index>
		dyn_reg_info[i].index =
    1a8a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    1a8e:	4a0b      	ldr	r2, [pc, #44]	; (1abc <mpu_mark_areas_for_dynamic_regions+0x58>)
    1a90:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    1a94:	f110 0f16 	cmn.w	r0, #22
    1a98:	d00c      	beq.n	1ab4 <mpu_mark_areas_for_dynamic_regions+0x50>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    1a9a:	4b09      	ldr	r3, [pc, #36]	; (1ac0 <mpu_mark_areas_for_dynamic_regions+0x5c>)
    1a9c:	781b      	ldrb	r3, [r3, #0]
    1a9e:	4298      	cmp	r0, r3
    1aa0:	da09      	bge.n	1ab6 <mpu_mark_areas_for_dynamic_regions+0x52>

			return -EINVAL;
		}

		/* Store default configuration */
		mpu_region_get_conf(dyn_reg_info[i].index,
    1aa2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    1aa6:	eb02 0183 	add.w	r1, r2, r3, lsl #2
    1aaa:	3104      	adds	r1, #4
    1aac:	f7ff feec 	bl	1888 <mpu_region_get_conf>
    1ab0:	e7dd      	b.n	1a6e <mpu_mark_areas_for_dynamic_regions+0xa>
			&dyn_reg_info[i].region_conf);
	}

	return 0;
    1ab2:	2000      	movs	r0, #0
}
    1ab4:	bd70      	pop	{r4, r5, r6, pc}
			return -EINVAL;
    1ab6:	f06f 0015 	mvn.w	r0, #21
    1aba:	e7fb      	b.n	1ab4 <mpu_mark_areas_for_dynamic_regions+0x50>
    1abc:	20000858 	.word	0x20000858
    1ac0:	20000b64 	.word	0x20000b64

00001ac4 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    1ac4:	4b04      	ldr	r3, [pc, #16]	; (1ad8 <arm_core_mpu_enable+0x14>)
    1ac6:	2205      	movs	r2, #5
    1ac8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    1acc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1ad0:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    1ad4:	4770      	bx	lr
    1ad6:	bf00      	nop
    1ad8:	e000ed00 	.word	0xe000ed00

00001adc <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    1adc:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    1ae0:	4b02      	ldr	r3, [pc, #8]	; (1aec <arm_core_mpu_disable+0x10>)
    1ae2:	2200      	movs	r2, #0
    1ae4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    1ae8:	4770      	bx	lr
    1aea:	bf00      	nop
    1aec:	e000ed00 	.word	0xe000ed00

00001af0 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    1af0:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    1af2:	4b0e      	ldr	r3, [pc, #56]	; (1b2c <z_arm_mpu_init+0x3c>)
    1af4:	681d      	ldr	r5, [r3, #0]
    1af6:	2d08      	cmp	r5, #8
    1af8:	d815      	bhi.n	1b26 <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    1afa:	f7ff ffef 	bl	1adc <arm_core_mpu_disable>
	}
#endif
#endif /* CONFIG_NOCACHE_MEMORY */

	/* Architecture-specific configuration */
	mpu_init();
    1afe:	f7ff feaf 	bl	1860 <mpu_init>

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1b02:	2400      	movs	r4, #0
    1b04:	e007      	b.n	1b16 <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    1b06:	4b09      	ldr	r3, [pc, #36]	; (1b2c <z_arm_mpu_init+0x3c>)
    1b08:	6859      	ldr	r1, [r3, #4]
    1b0a:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    1b0e:	4620      	mov	r0, r4
    1b10:	f003 fc92 	bl	5438 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1b14:	3401      	adds	r4, #1
    1b16:	42a5      	cmp	r5, r4
    1b18:	d8f5      	bhi.n	1b06 <z_arm_mpu_init+0x16>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    1b1a:	4b05      	ldr	r3, [pc, #20]	; (1b30 <z_arm_mpu_init+0x40>)
    1b1c:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    1b1e:	f7ff ffd1 	bl	1ac4 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    1b22:	2000      	movs	r0, #0
}
    1b24:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    1b26:	f04f 30ff 	mov.w	r0, #4294967295
    1b2a:	e7fb      	b.n	1b24 <z_arm_mpu_init+0x34>
    1b2c:	00006c84 	.word	0x00006c84
    1b30:	20000b64 	.word	0x20000b64

00001b34 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    1b34:	4b01      	ldr	r3, [pc, #4]	; (1b3c <__stdout_hook_install+0x8>)
    1b36:	6018      	str	r0, [r3, #0]
}
    1b38:	4770      	bx	lr
    1b3a:	bf00      	nop
    1b3c:	20000028 	.word	0x20000028

00001b40 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    1b40:	4800      	ldr	r0, [pc, #0]	; (1b44 <get_hf_flags+0x4>)
    1b42:	4770      	bx	lr
    1b44:	200008f8 	.word	0x200008f8

00001b48 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    1b48:	4b03      	ldr	r3, [pc, #12]	; (1b58 <get_subsys+0x10>)
    1b4a:	1ac0      	subs	r0, r0, r3
    1b4c:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
    1b4e:	4b03      	ldr	r3, [pc, #12]	; (1b5c <get_subsys+0x14>)
    1b50:	fb03 f000 	mul.w	r0, r3, r0
    1b54:	4770      	bx	lr
    1b56:	bf00      	nop
    1b58:	20000880 	.word	0x20000880
    1b5c:	b6db6db7 	.word	0xb6db6db7

00001b60 <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1b60:	b538      	push	{r3, r4, r5, lr}
    1b62:	4605      	mov	r5, r0
    1b64:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1b66:	f7ff ffef 	bl	1b48 <get_subsys>
    1b6a:	4601      	mov	r1, r0
    1b6c:	2240      	movs	r2, #64	; 0x40
    1b6e:	4803      	ldr	r0, [pc, #12]	; (1b7c <onoff_stop+0x1c>)
    1b70:	f003 fdf7 	bl	5762 <stop>
    1b74:	4601      	mov	r1, r0
	notify(mgr, res);
    1b76:	4628      	mov	r0, r5
    1b78:	47a0      	blx	r4
}
    1b7a:	bd38      	pop	{r3, r4, r5, pc}
    1b7c:	000068b4 	.word	0x000068b4

00001b80 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1b80:	b530      	push	{r4, r5, lr}
    1b82:	b083      	sub	sp, #12
    1b84:	4605      	mov	r5, r0
    1b86:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1b88:	f7ff ffde 	bl	1b48 <get_subsys>
    1b8c:	4601      	mov	r1, r0
    1b8e:	2340      	movs	r3, #64	; 0x40
    1b90:	9300      	str	r3, [sp, #0]
    1b92:	4623      	mov	r3, r4
    1b94:	4a05      	ldr	r2, [pc, #20]	; (1bac <onoff_start+0x2c>)
    1b96:	4806      	ldr	r0, [pc, #24]	; (1bb0 <onoff_start+0x30>)
    1b98:	f003 fdfd 	bl	5796 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    1b9c:	1e01      	subs	r1, r0, #0
    1b9e:	db01      	blt.n	1ba4 <onoff_start+0x24>
		notify(mgr, err);
	}
}
    1ba0:	b003      	add	sp, #12
    1ba2:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    1ba4:	4628      	mov	r0, r5
    1ba6:	47a0      	blx	r4
}
    1ba8:	e7fa      	b.n	1ba0 <onoff_start+0x20>
    1baa:	bf00      	nop
    1bac:	000057df 	.word	0x000057df
    1bb0:	000068b4 	.word	0x000068b4

00001bb4 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    1bb4:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    1bb6:	2805      	cmp	r0, #5
    1bb8:	d815      	bhi.n	1be6 <clock_event_handler+0x32>
    1bba:	e8df f000 	tbb	[pc, r0]
    1bbe:	1a03      	.short	0x1a03
    1bc0:	10151414 	.word	0x10151414
	case NRFX_CLOCK_EVT_HFCLK_STARTED:
	{
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    1bc4:	2100      	movs	r1, #0
    1bc6:	480d      	ldr	r0, [pc, #52]	; (1bfc <clock_event_handler+0x48>)
    1bc8:	f003 fd56 	bl	5678 <get_sub_data>

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    1bcc:	6883      	ldr	r3, [r0, #8]
    1bce:	f013 0f07 	tst.w	r3, #7
    1bd2:	d108      	bne.n	1be6 <clock_event_handler+0x32>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    1bd4:	2100      	movs	r1, #0
    1bd6:	4809      	ldr	r0, [pc, #36]	; (1bfc <clock_event_handler+0x48>)
    1bd8:	f003 fdb1 	bl	573e <clkstarted_handle>
    1bdc:	e003      	b.n	1be6 <clock_event_handler+0x32>

		break;
	}
#if NRF_CLOCK_HAS_HFCLK192M
	case NRFX_CLOCK_EVT_HFCLK192M_STARTED:
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
    1bde:	2102      	movs	r1, #2
    1be0:	4806      	ldr	r0, [pc, #24]	; (1bfc <clock_event_handler+0x48>)
    1be2:	f003 fdac 	bl	573e <clkstarted_handle>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
    1be6:	bd08      	pop	{r3, pc}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
    1be8:	2103      	movs	r1, #3
    1bea:	4804      	ldr	r0, [pc, #16]	; (1bfc <clock_event_handler+0x48>)
    1bec:	f003 fda7 	bl	573e <clkstarted_handle>
		break;
    1bf0:	e7f9      	b.n	1be6 <clock_event_handler+0x32>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    1bf2:	2101      	movs	r1, #1
    1bf4:	4801      	ldr	r0, [pc, #4]	; (1bfc <clock_event_handler+0x48>)
    1bf6:	f003 fda2 	bl	573e <clkstarted_handle>
}
    1bfa:	e7f4      	b.n	1be6 <clock_event_handler+0x32>
    1bfc:	000068b4 	.word	0x000068b4

00001c00 <generic_hfclk_start>:
{
    1c00:	b510      	push	{r4, lr}
    1c02:	b082      	sub	sp, #8
	__asm__ volatile(
    1c04:	f04f 0320 	mov.w	r3, #32
    1c08:	f3ef 8411 	mrs	r4, BASEPRI
    1c0c:	f383 8812 	msr	BASEPRI_MAX, r3
    1c10:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    1c14:	4a14      	ldr	r2, [pc, #80]	; (1c68 <generic_hfclk_start+0x68>)
    1c16:	6813      	ldr	r3, [r2, #0]
    1c18:	f043 0102 	orr.w	r1, r3, #2
    1c1c:	6011      	str	r1, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    1c1e:	f013 0f01 	tst.w	r3, #1
    1c22:	d109      	bne.n	1c38 <generic_hfclk_start+0x38>
	bool already_started = false;
    1c24:	2300      	movs	r3, #0
	__asm__ volatile(
    1c26:	f384 8811 	msr	BASEPRI, r4
    1c2a:	f3bf 8f6f 	isb	sy
	if (already_started) {
    1c2e:	b9b3      	cbnz	r3, 1c5e <generic_hfclk_start+0x5e>
	hfclk_start();
    1c30:	f003 fddd 	bl	57ee <hfclk_start>
}
    1c34:	b002      	add	sp, #8
    1c36:	bd10      	pop	{r4, pc}
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
    1c38:	f10d 0207 	add.w	r2, sp, #7
    1c3c:	2101      	movs	r1, #1
    1c3e:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
    1c42:	f003 fcdf 	bl	5604 <nrf_clock_is_running>
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    1c46:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1c4a:	2b01      	cmp	r3, #1
    1c4c:	d001      	beq.n	1c52 <generic_hfclk_start+0x52>
	bool already_started = false;
    1c4e:	2300      	movs	r3, #0
    1c50:	e7e9      	b.n	1c26 <generic_hfclk_start+0x26>
			set_on_state(get_hf_flags());
    1c52:	f7ff ff75 	bl	1b40 <get_hf_flags>
    1c56:	f003 fd5f 	bl	5718 <set_on_state>
			already_started = true;
    1c5a:	2301      	movs	r3, #1
    1c5c:	e7e3      	b.n	1c26 <generic_hfclk_start+0x26>
		clkstarted_handle(CLOCK_DEVICE,
    1c5e:	2100      	movs	r1, #0
    1c60:	4802      	ldr	r0, [pc, #8]	; (1c6c <generic_hfclk_start+0x6c>)
    1c62:	f003 fd6c 	bl	573e <clkstarted_handle>
		return;
    1c66:	e7e5      	b.n	1c34 <generic_hfclk_start+0x34>
    1c68:	20000920 	.word	0x20000920
    1c6c:	000068b4 	.word	0x000068b4

00001c70 <generic_hfclk_stop>:
{
    1c70:	b508      	push	{r3, lr}
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1c72:	4b08      	ldr	r3, [pc, #32]	; (1c94 <generic_hfclk_stop+0x24>)
    1c74:	e8d3 2fef 	ldaex	r2, [r3]
    1c78:	f022 0102 	bic.w	r1, r2, #2
    1c7c:	e8c3 1fe0 	stlex	r0, r1, [r3]
    1c80:	2800      	cmp	r0, #0
    1c82:	d1f7      	bne.n	1c74 <generic_hfclk_stop+0x4>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    1c84:	f012 0f01 	tst.w	r2, #1
    1c88:	d000      	beq.n	1c8c <generic_hfclk_stop+0x1c>
}
    1c8a:	bd08      	pop	{r3, pc}
	hfclk_stop();
    1c8c:	f003 fdc3 	bl	5816 <hfclk_stop>
    1c90:	e7fb      	b.n	1c8a <generic_hfclk_stop+0x1a>
    1c92:	bf00      	nop
    1c94:	20000920 	.word	0x20000920

00001c98 <lfclk_spinwait>:
{
    1c98:	b570      	push	{r4, r5, r6, lr}
    1c9a:	b082      	sub	sp, #8
    1c9c:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    1c9e:	2801      	cmp	r0, #1
    1ca0:	d107      	bne.n	1cb2 <lfclk_spinwait+0x1a>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    1ca2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1ca6:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    1caa:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    1cae:	2b02      	cmp	r3, #2
    1cb0:	d037      	beq.n	1d22 <lfclk_spinwait+0x8a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    1cb2:	f004 fc16 	bl	64e2 <k_is_in_isr>
    1cb6:	4604      	mov	r4, r0
    1cb8:	b910      	cbnz	r0, 1cc0 <lfclk_spinwait+0x28>
	return !z_sys_post_kernel;
    1cba:	4b2b      	ldr	r3, [pc, #172]	; (1d68 <lfclk_spinwait+0xd0>)
    1cbc:	781b      	ldrb	r3, [r3, #0]
    1cbe:	b97b      	cbnz	r3, 1ce0 <lfclk_spinwait+0x48>
	__asm__ volatile(
    1cc0:	f04f 0320 	mov.w	r3, #32
    1cc4:	f3ef 8611 	mrs	r6, BASEPRI
    1cc8:	f383 8812 	msr	BASEPRI_MAX, r3
    1ccc:	f3bf 8f6f 	isb	sy
    1cd0:	2401      	movs	r4, #1
	if (!isr_mode) {
    1cd2:	b994      	cbnz	r4, 1cfa <lfclk_spinwait+0x62>
    p_reg->INTENCLR = mask;
    1cd4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1cd8:	2202      	movs	r2, #2
    1cda:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    1cde:	e00c      	b.n	1cfa <lfclk_spinwait+0x62>
	int key = isr_mode ? irq_lock() : 0;
    1ce0:	2600      	movs	r6, #0
    1ce2:	e7f6      	b.n	1cd2 <lfclk_spinwait+0x3a>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    1ce4:	b1fc      	cbz	r4, 1d26 <lfclk_spinwait+0x8e>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    1ce6:	4630      	mov	r0, r6
    1ce8:	f7ff fa96 	bl	1218 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    1cec:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1cf0:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    1cf4:	b2db      	uxtb	r3, r3
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    1cf6:	2b01      	cmp	r3, #1
    1cf8:	d019      	beq.n	1d2e <lfclk_spinwait+0x96>
    1cfa:	f10d 0207 	add.w	r2, sp, #7
    1cfe:	2100      	movs	r1, #0
    1d00:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
    1d04:	f003 fc7e 	bl	5604 <nrf_clock_is_running>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    1d08:	2800      	cmp	r0, #0
    1d0a:	d0eb      	beq.n	1ce4 <lfclk_spinwait+0x4c>
		 && ((type == target_type)
    1d0c:	f89d 3007 	ldrb.w	r3, [sp, #7]
	while (!(nrfx_clock_is_running(d, (void *)&type)
    1d10:	2b02      	cmp	r3, #2
    1d12:	d001      	beq.n	1d18 <lfclk_spinwait+0x80>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    1d14:	2d01      	cmp	r5, #1
    1d16:	d1e5      	bne.n	1ce4 <lfclk_spinwait+0x4c>
	if (isr_mode) {
    1d18:	b304      	cbz	r4, 1d5c <lfclk_spinwait+0xc4>
	__asm__ volatile(
    1d1a:	f386 8811 	msr	BASEPRI, r6
    1d1e:	f3bf 8f6f 	isb	sy
}
    1d22:	b002      	add	sp, #8
    1d24:	bd70      	pop	{r4, r5, r6, pc}
				k_msleep(1);
    1d26:	2001      	movs	r0, #1
    1d28:	f003 fd89 	bl	583e <k_msleep>
    1d2c:	e7de      	b.n	1cec <lfclk_spinwait+0x54>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    1d2e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1d32:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    1d36:	2b00      	cmp	r3, #0
    1d38:	d0df      	beq.n	1cfa <lfclk_spinwait+0x62>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1d3a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1d3e:	2200      	movs	r2, #0
    1d40:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    1d44:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    1d48:	2202      	movs	r2, #2
    1d4a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1d4e:	4a07      	ldr	r2, [pc, #28]	; (1d6c <lfclk_spinwait+0xd4>)
    1d50:	2120      	movs	r1, #32
    1d52:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1d56:	2201      	movs	r2, #1
    1d58:	609a      	str	r2, [r3, #8]
}
    1d5a:	e7ce      	b.n	1cfa <lfclk_spinwait+0x62>
    p_reg->INTENSET = mask;
    1d5c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1d60:	2202      	movs	r2, #2
    1d62:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    1d66:	e7dc      	b.n	1d22 <lfclk_spinwait+0x8a>
    1d68:	20000b67 	.word	0x20000b67
    1d6c:	e000e100 	.word	0xe000e100

00001d70 <api_blocking_start>:
{
    1d70:	b500      	push	{lr}
    1d72:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1d74:	f8cd d000 	str.w	sp, [sp]
    1d78:	f8cd d004 	str.w	sp, [sp, #4]
    1d7c:	2300      	movs	r3, #0
    1d7e:	9302      	str	r3, [sp, #8]
    1d80:	2301      	movs	r3, #1
    1d82:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1d84:	466b      	mov	r3, sp
    1d86:	4a07      	ldr	r2, [pc, #28]	; (1da4 <api_blocking_start+0x34>)
    1d88:	f003 fd21 	bl	57ce <api_start>
	if (err < 0) {
    1d8c:	2800      	cmp	r0, #0
    1d8e:	db05      	blt.n	1d9c <api_blocking_start+0x2c>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    1d90:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    1d94:	2300      	movs	r3, #0
    1d96:	4668      	mov	r0, sp
    1d98:	f001 ff7c 	bl	3c94 <z_impl_k_sem_take>
}
    1d9c:	b005      	add	sp, #20
    1d9e:	f85d fb04 	ldr.w	pc, [sp], #4
    1da2:	bf00      	nop
    1da4:	0000586b 	.word	0x0000586b

00001da8 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    1da8:	b570      	push	{r4, r5, r6, lr}
    1daa:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1dac:	2200      	movs	r2, #0
    1dae:	2101      	movs	r1, #1
    1db0:	2005      	movs	r0, #5
    1db2:	f003 faf5 	bl	53a0 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    1db6:	4811      	ldr	r0, [pc, #68]	; (1dfc <clk_init+0x54>)
    1db8:	f000 ff32 	bl	2c20 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    1dbc:	4b10      	ldr	r3, [pc, #64]	; (1e00 <clk_init+0x58>)
    1dbe:	4298      	cmp	r0, r3
    1dc0:	d119      	bne.n	1df6 <clk_init+0x4e>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    1dc2:	f004 f9fc 	bl	61be <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    1dc6:	2400      	movs	r4, #0
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    1dc8:	2c03      	cmp	r4, #3
    1dca:	d812      	bhi.n	1df2 <clk_init+0x4a>
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    1dcc:	4621      	mov	r1, r4
    1dce:	4630      	mov	r0, r6
    1dd0:	f003 fc52 	bl	5678 <get_sub_data>
    1dd4:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
    1dd6:	4621      	mov	r1, r4
    1dd8:	4630      	mov	r0, r6
    1dda:	f003 fc58 	bl	568e <get_onoff_manager>
    1dde:	4909      	ldr	r1, [pc, #36]	; (1e04 <clk_init+0x5c>)
    1de0:	f002 ffc2 	bl	4d68 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    1de4:	2800      	cmp	r0, #0
    1de6:	db05      	blt.n	1df4 <clk_init+0x4c>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1de8:	2301      	movs	r3, #1
    1dea:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    1dec:	441c      	add	r4, r3
    1dee:	b2e4      	uxtb	r4, r4
    1df0:	e7ea      	b.n	1dc8 <clk_init+0x20>
	}

	return 0;
    1df2:	2000      	movs	r0, #0
}
    1df4:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    1df6:	f06f 0004 	mvn.w	r0, #4
    1dfa:	e7fb      	b.n	1df4 <clk_init+0x4c>
    1dfc:	00001bb5 	.word	0x00001bb5
    1e00:	0bad0000 	.word	0x0bad0000
    1e04:	00006cbc 	.word	0x00006cbc

00001e08 <z_nrf_clock_control_lf_on>:
{
    1e08:	b510      	push	{r4, lr}
    1e0a:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1e0c:	4b0e      	ldr	r3, [pc, #56]	; (1e48 <z_nrf_clock_control_lf_on+0x40>)
    1e0e:	2101      	movs	r1, #1
    1e10:	e8d3 2fef 	ldaex	r2, [r3]
    1e14:	e8c3 1fe0 	stlex	r0, r1, [r3]
    1e18:	2800      	cmp	r0, #0
    1e1a:	d1f9      	bne.n	1e10 <z_nrf_clock_control_lf_on+0x8>
	if (atomic_set(&on, 1) == 0) {
    1e1c:	b11a      	cbz	r2, 1e26 <z_nrf_clock_control_lf_on+0x1e>
	switch (start_mode) {
    1e1e:	1e63      	subs	r3, r4, #1
    1e20:	2b01      	cmp	r3, #1
    1e22:	d90d      	bls.n	1e40 <z_nrf_clock_control_lf_on+0x38>
}
    1e24:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
    1e26:	4809      	ldr	r0, [pc, #36]	; (1e4c <z_nrf_clock_control_lf_on+0x44>)
    1e28:	f003 fc31 	bl	568e <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    1e2c:	4908      	ldr	r1, [pc, #32]	; (1e50 <z_nrf_clock_control_lf_on+0x48>)
    1e2e:	2300      	movs	r3, #0
    1e30:	604b      	str	r3, [r1, #4]
    1e32:	608b      	str	r3, [r1, #8]
    1e34:	60cb      	str	r3, [r1, #12]
    1e36:	2301      	movs	r3, #1
    1e38:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    1e3a:	f002 ffb2 	bl	4da2 <onoff_request>
    1e3e:	e7ee      	b.n	1e1e <z_nrf_clock_control_lf_on+0x16>
		lfclk_spinwait(start_mode);
    1e40:	4620      	mov	r0, r4
    1e42:	f7ff ff29 	bl	1c98 <lfclk_spinwait>
		break;
    1e46:	e7ed      	b.n	1e24 <z_nrf_clock_control_lf_on+0x1c>
    1e48:	2000087c 	.word	0x2000087c
    1e4c:	000068b4 	.word	0x000068b4
    1e50:	2000086c 	.word	0x2000086c

00001e54 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    1e54:	b510      	push	{r4, lr}
    1e56:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    1e58:	280a      	cmp	r0, #10
    1e5a:	d006      	beq.n	1e6a <console_out+0x16>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    1e5c:	b2e1      	uxtb	r1, r4
			     unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
					unsigned char out_char)
{
	const struct uart_driver_api *api =
    1e5e:	4806      	ldr	r0, [pc, #24]	; (1e78 <console_out+0x24>)
    1e60:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    1e62:	685b      	ldr	r3, [r3, #4]
    1e64:	4798      	blx	r3

	return c;
}
    1e66:	4620      	mov	r0, r4
    1e68:	bd10      	pop	{r4, pc}
	const struct uart_driver_api *api =
    1e6a:	4803      	ldr	r0, [pc, #12]	; (1e78 <console_out+0x24>)
    1e6c:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    1e6e:	685b      	ldr	r3, [r3, #4]
    1e70:	210d      	movs	r1, #13
    1e72:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
    1e74:	e7f2      	b.n	1e5c <console_out+0x8>
    1e76:	bf00      	nop
    1e78:	000068fc 	.word	0x000068fc

00001e7c <uart_console_hook_install>:
/**
 * @brief Install printk/stdout hook for UART console output
 */

static void uart_console_hook_install(void)
{
    1e7c:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
    1e7e:	4c04      	ldr	r4, [pc, #16]	; (1e90 <uart_console_hook_install+0x14>)
    1e80:	4620      	mov	r0, r4
    1e82:	f7ff fe57 	bl	1b34 <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
    1e86:	4620      	mov	r0, r4
    1e88:	f7fe faf0 	bl	46c <__printk_hook_install>
#endif
}
    1e8c:	bd10      	pop	{r4, pc}
    1e8e:	bf00      	nop
    1e90:	00001e55 	.word	0x00001e55

00001e94 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    1e94:	b508      	push	{r3, lr}
    1e96:	4805      	ldr	r0, [pc, #20]	; (1eac <uart_console_init+0x18>)
    1e98:	f004 fa91 	bl	63be <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
    1e9c:	b118      	cbz	r0, 1ea6 <uart_console_init+0x12>
		return -ENODEV;
	}

	uart_console_hook_install();
    1e9e:	f7ff ffed 	bl	1e7c <uart_console_hook_install>

	return 0;
    1ea2:	2000      	movs	r0, #0
}
    1ea4:	bd08      	pop	{r3, pc}
		return -ENODEV;
    1ea6:	f06f 0012 	mvn.w	r0, #18
    1eaa:	e7fb      	b.n	1ea4 <uart_console_init+0x10>
    1eac:	000068fc 	.word	0x000068fc

00001eb0 <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    1eb0:	b128      	cbz	r0, 1ebe <get_dev+0xe>
    1eb2:	2801      	cmp	r0, #1
    1eb4:	d101      	bne.n	1eba <get_dev+0xa>
    1eb6:	4803      	ldr	r0, [pc, #12]	; (1ec4 <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
    1eb8:	4770      	bx	lr
	const struct device *dev = NULL;
    1eba:	2000      	movs	r0, #0
    1ebc:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    1ebe:	4802      	ldr	r0, [pc, #8]	; (1ec8 <get_dev+0x18>)
    1ec0:	4770      	bx	lr
    1ec2:	bf00      	nop
    1ec4:	000068cc 	.word	0x000068cc
    1ec8:	000068e4 	.word	0x000068e4

00001ecc <gpio_nrfx_pin_interrupt_configure>:
{
    1ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ece:	b085      	sub	sp, #20
    1ed0:	460e      	mov	r6, r1
    1ed2:	4619      	mov	r1, r3
	return port->config;
    1ed4:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    1ed6:	7b1b      	ldrb	r3, [r3, #12]
    1ed8:	f006 051f 	and.w	r5, r6, #31
    1edc:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    1ee0:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
    1ee4:	d022      	beq.n	1f2c <gpio_nrfx_pin_interrupt_configure+0x60>
    1ee6:	4607      	mov	r7, r0
    1ee8:	4614      	mov	r4, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    1eea:	2300      	movs	r3, #0
    1eec:	9301      	str	r3, [sp, #4]
    1eee:	9302      	str	r3, [sp, #8]
		.trigger = get_trigger(mode, trig),
    1ef0:	4610      	mov	r0, r2
    1ef2:	f003 fd94 	bl	5a1e <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
    1ef6:	f88d 0004 	strb.w	r0, [sp, #4]
	return port->config;
    1efa:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    1efc:	6899      	ldr	r1, [r3, #8]
    1efe:	40f1      	lsrs	r1, r6
    1f00:	f011 0f01 	tst.w	r1, #1
    1f04:	d102      	bne.n	1f0c <gpio_nrfx_pin_interrupt_configure+0x40>
    1f06:	f1b4 7fa0 	cmp.w	r4, #20971520	; 0x1400000
    1f0a:	d014      	beq.n	1f36 <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    1f0c:	2300      	movs	r3, #0
    1f0e:	aa01      	add	r2, sp, #4
    1f10:	4619      	mov	r1, r3
    1f12:	4628      	mov	r0, r5
    1f14:	f001 f970 	bl	31f8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    1f18:	4b1a      	ldr	r3, [pc, #104]	; (1f84 <gpio_nrfx_pin_interrupt_configure+0xb8>)
    1f1a:	4298      	cmp	r0, r3
    1f1c:	d12f      	bne.n	1f7e <gpio_nrfx_pin_interrupt_configure+0xb2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    1f1e:	2101      	movs	r1, #1
    1f20:	4628      	mov	r0, r5
    1f22:	f001 facd 	bl	34c0 <nrfx_gpiote_trigger_enable>
	return 0;
    1f26:	2000      	movs	r0, #0
}
    1f28:	b005      	add	sp, #20
    1f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
    1f2c:	4628      	mov	r0, r5
    1f2e:	f001 faf9 	bl	3524 <nrfx_gpiote_trigger_disable>
		return 0;
    1f32:	2000      	movs	r0, #0
    1f34:	e7f8      	b.n	1f28 <gpio_nrfx_pin_interrupt_configure+0x5c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    1f36:	f005 031f 	and.w	r3, r5, #31

    return pin_number >> 5;
    1f3a:	096a      	lsrs	r2, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    1f3c:	2a01      	cmp	r2, #1
    1f3e:	d012      	beq.n	1f66 <gpio_nrfx_pin_interrupt_configure+0x9a>
        case 0: return NRF_P0;
    1f40:	4a11      	ldr	r2, [pc, #68]	; (1f88 <gpio_nrfx_pin_interrupt_configure+0xbc>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    1f42:	3380      	adds	r3, #128	; 0x80
    1f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    1f48:	f013 0f01 	tst.w	r3, #1
    1f4c:	d1de      	bne.n	1f0c <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    1f4e:	f10d 010f 	add.w	r1, sp, #15
    1f52:	4628      	mov	r0, r5
    1f54:	f001 fa58 	bl	3408 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    1f58:	4b0c      	ldr	r3, [pc, #48]	; (1f8c <gpio_nrfx_pin_interrupt_configure+0xc0>)
    1f5a:	4298      	cmp	r0, r3
    1f5c:	d005      	beq.n	1f6a <gpio_nrfx_pin_interrupt_configure+0x9e>
		trigger_config.p_in_channel = &ch;
    1f5e:	f10d 030f 	add.w	r3, sp, #15
    1f62:	9302      	str	r3, [sp, #8]
    1f64:	e7d2      	b.n	1f0c <gpio_nrfx_pin_interrupt_configure+0x40>
        case 1: return NRF_P1;
    1f66:	4a0a      	ldr	r2, [pc, #40]	; (1f90 <gpio_nrfx_pin_interrupt_configure+0xc4>)
    1f68:	e7eb      	b.n	1f42 <gpio_nrfx_pin_interrupt_configure+0x76>
			err = nrfx_gpiote_channel_alloc(&ch);
    1f6a:	f10d 000f 	add.w	r0, sp, #15
    1f6e:	f001 fa9f 	bl	34b0 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    1f72:	4b04      	ldr	r3, [pc, #16]	; (1f84 <gpio_nrfx_pin_interrupt_configure+0xb8>)
    1f74:	4298      	cmp	r0, r3
    1f76:	d0f2      	beq.n	1f5e <gpio_nrfx_pin_interrupt_configure+0x92>
				return -ENOMEM;
    1f78:	f06f 000b 	mvn.w	r0, #11
    1f7c:	e7d4      	b.n	1f28 <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EINVAL;
    1f7e:	f06f 0015 	mvn.w	r0, #21
    1f82:	e7d1      	b.n	1f28 <gpio_nrfx_pin_interrupt_configure+0x5c>
    1f84:	0bad0000 	.word	0x0bad0000
    1f88:	50842500 	.word	0x50842500
    1f8c:	0bad0004 	.word	0x0bad0004
    1f90:	50842800 	.word	0x50842800

00001f94 <gpio_nrfx_pin_configure>:
{
    1f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1f98:	b086      	sub	sp, #24
    1f9a:	460e      	mov	r6, r1
    1f9c:	4614      	mov	r4, r2
	return port->config;
    1f9e:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    1fa2:	f898 300c 	ldrb.w	r3, [r8, #12]
    1fa6:	f001 051f 	and.w	r5, r1, #31
    1faa:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    1fae:	f10d 0117 	add.w	r1, sp, #23
    1fb2:	4628      	mov	r0, r5
    1fb4:	f001 fa28 	bl	3408 <nrfx_gpiote_channel_get>
    1fb8:	4607      	mov	r7, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    1fba:	f414 3f40 	tst.w	r4, #196608	; 0x30000
    1fbe:	d039      	beq.n	2034 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x34>
	nrfx_gpiote_trigger_config_t trigger_config = {
    1fc0:	2100      	movs	r1, #0
    1fc2:	9103      	str	r1, [sp, #12]
    1fc4:	9104      	str	r1, [sp, #16]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    1fc6:	460b      	mov	r3, r1
    1fc8:	aa03      	add	r2, sp, #12
    1fca:	4628      	mov	r0, r5
    1fcc:	f001 f914 	bl	31f8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    1fd0:	4b32      	ldr	r3, [pc, #200]	; (209c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x9c>)
    1fd2:	4298      	cmp	r0, r3
    1fd4:	d15f      	bne.n	2096 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x96>
	if (free_ch) {
    1fd6:	429f      	cmp	r7, r3
    1fd8:	d03c      	beq.n	2054 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x54>
	if (flags & GPIO_OUTPUT) {
    1fda:	f414 3f00 	tst.w	r4, #131072	; 0x20000
    1fde:	d047      	beq.n	2070 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x70>
		int rv = get_drive(flags, &drive);
    1fe0:	f10d 0103 	add.w	r1, sp, #3
    1fe4:	4620      	mov	r0, r4
    1fe6:	f003 fca7 	bl	5938 <get_drive>
		if (rv != 0) {
    1fea:	4607      	mov	r7, r0
    1fec:	bb48      	cbnz	r0, 2042 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x42>
		nrfx_gpiote_output_config_t output_config = {
    1fee:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1ff2:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    1ff6:	f414 3f80 	tst.w	r4, #65536	; 0x10000
    1ffa:	bf0c      	ite	eq
    1ffc:	2301      	moveq	r3, #1
    1ffe:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
    2000:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
    2004:	4620      	mov	r0, r4
    2006:	f003 fcda 	bl	59be <get_pull>
		nrfx_gpiote_output_config_t output_config = {
    200a:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    200e:	f414 2f00 	tst.w	r4, #524288	; 0x80000
    2012:	d024      	beq.n	205e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x5e>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    2014:	f8d8 2004 	ldr.w	r2, [r8, #4]
    2018:	2301      	movs	r3, #1
    201a:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    201c:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    201e:	2200      	movs	r2, #0
    2020:	a901      	add	r1, sp, #4
    2022:	4628      	mov	r0, r5
    2024:	f001 f97e 	bl	3324 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2028:	4b1c      	ldr	r3, [pc, #112]	; (209c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x9c>)
    202a:	4298      	cmp	r0, r3
    202c:	d009      	beq.n	2042 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x42>
    202e:	f06f 0715 	mvn.w	r7, #21
    2032:	e006      	b.n	2042 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x42>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    2034:	4628      	mov	r0, r5
    2036:	f001 fa97 	bl	3568 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    203a:	4b18      	ldr	r3, [pc, #96]	; (209c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x9c>)
    203c:	429f      	cmp	r7, r3
    203e:	d004      	beq.n	204a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4a>
		return 0;
    2040:	2700      	movs	r7, #0
}
    2042:	4638      	mov	r0, r7
    2044:	b006      	add	sp, #24
    2046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			err = nrfx_gpiote_channel_free(ch);
    204a:	f89d 0017 	ldrb.w	r0, [sp, #23]
    204e:	f001 fa27 	bl	34a0 <nrfx_gpiote_channel_free>
    2052:	e7f5      	b.n	2040 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x40>
		err = nrfx_gpiote_channel_free(ch);
    2054:	f89d 0017 	ldrb.w	r0, [sp, #23]
    2058:	f001 fa22 	bl	34a0 <nrfx_gpiote_channel_free>
    205c:	e7bd      	b.n	1fda <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    205e:	f414 2f80 	tst.w	r4, #262144	; 0x40000
    2062:	d0dc      	beq.n	201e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1e>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    2064:	f8d8 2004 	ldr.w	r2, [r8, #4]
    2068:	2301      	movs	r3, #1
    206a:	40b3      	lsls	r3, r6
    p_reg->OUTCLR = clr_mask;
    206c:	60d3      	str	r3, [r2, #12]
}
    206e:	e7d6      	b.n	201e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1e>
		.pull = get_pull(flags)
    2070:	4620      	mov	r0, r4
    2072:	f003 fca4 	bl	59be <get_pull>
	nrfx_gpiote_input_config_t input_config = {
    2076:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    207a:	2300      	movs	r3, #0
    207c:	461a      	mov	r2, r3
    207e:	a902      	add	r1, sp, #8
    2080:	4628      	mov	r0, r5
    2082:	f001 f8b9 	bl	31f8 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2086:	4b05      	ldr	r3, [pc, #20]	; (209c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x9c>)
    2088:	4298      	cmp	r0, r3
    208a:	d101      	bne.n	2090 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x90>
    208c:	2700      	movs	r7, #0
    208e:	e7d8      	b.n	2042 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x42>
    2090:	f06f 0715 	mvn.w	r7, #21
    2094:	e7d5      	b.n	2042 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x42>
		return -EINVAL;
    2096:	f06f 0715 	mvn.w	r7, #21
    209a:	e7d2      	b.n	2042 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x42>
    209c:	0bad0000 	.word	0x0bad0000

000020a0 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    20a0:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    20a2:	f001 f9f3 	bl	348c <nrfx_gpiote_is_init>
    20a6:	b108      	cbz	r0, 20ac <gpio_nrfx_init+0xc>
		return 0;
    20a8:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    20aa:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
    20ac:	f001 f9c4 	bl	3438 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    20b0:	4b08      	ldr	r3, [pc, #32]	; (20d4 <gpio_nrfx_init+0x34>)
    20b2:	4298      	cmp	r0, r3
    20b4:	d10a      	bne.n	20cc <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    20b6:	2100      	movs	r1, #0
    20b8:	4807      	ldr	r0, [pc, #28]	; (20d8 <gpio_nrfx_init+0x38>)
    20ba:	f001 f99f 	bl	33fc <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    20be:	2200      	movs	r2, #0
    20c0:	2105      	movs	r1, #5
    20c2:	200d      	movs	r0, #13
    20c4:	f003 f96c 	bl	53a0 <z_arm_irq_priority_set>
	return 0;
    20c8:	2000      	movs	r0, #0
    20ca:	e7ee      	b.n	20aa <gpio_nrfx_init+0xa>
		return -EIO;
    20cc:	f06f 0004 	mvn.w	r0, #4
    20d0:	e7eb      	b.n	20aa <gpio_nrfx_init+0xa>
    20d2:	bf00      	nop
    20d4:	0bad0000 	.word	0x0bad0000
    20d8:	00005a57 	.word	0x00005a57

000020dc <baudrate_set>:
#endif
};

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = dev->config;
    20dc:	6843      	ldr	r3, [r0, #4]

	return config->uarte_regs;
    20de:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    20e0:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    20e4:	d06f      	beq.n	21c6 <baudrate_set+0xea>
    20e6:	d83a      	bhi.n	215e <baudrate_set+0x82>
    20e8:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    20ec:	d06e      	beq.n	21cc <baudrate_set+0xf0>
    20ee:	d90a      	bls.n	2106 <baudrate_set+0x2a>
    20f0:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    20f4:	d075      	beq.n	21e2 <baudrate_set+0x106>
    20f6:	d924      	bls.n	2142 <baudrate_set+0x66>
    20f8:	f647 2312 	movw	r3, #31250	; 0x7a12
    20fc:	4299      	cmp	r1, r3
    20fe:	d12b      	bne.n	2158 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    2100:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    2104:	e013      	b.n	212e <baudrate_set+0x52>
	switch (baudrate) {
    2106:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    210a:	d061      	beq.n	21d0 <baudrate_set+0xf4>
    210c:	d907      	bls.n	211e <baudrate_set+0x42>
    210e:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    2112:	d063      	beq.n	21dc <baudrate_set+0x100>
    2114:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    2118:	d110      	bne.n	213c <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    211a:	4b3c      	ldr	r3, [pc, #240]	; (220c <baudrate_set+0x130>)
    211c:	e007      	b.n	212e <baudrate_set+0x52>
	switch (baudrate) {
    211e:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    2122:	d058      	beq.n	21d6 <baudrate_set+0xfa>
    2124:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    2128:	d105      	bne.n	2136 <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
    212a:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    212e:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    2132:	2000      	movs	r0, #0
    2134:	4770      	bx	lr
	switch (baudrate) {
    2136:	f06f 0015 	mvn.w	r0, #21
    213a:	4770      	bx	lr
    213c:	f06f 0015 	mvn.w	r0, #21
    2140:	4770      	bx	lr
    2142:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    2146:	d04e      	beq.n	21e6 <baudrate_set+0x10a>
    2148:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    214c:	d101      	bne.n	2152 <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    214e:	4b30      	ldr	r3, [pc, #192]	; (2210 <baudrate_set+0x134>)
    2150:	e7ed      	b.n	212e <baudrate_set+0x52>
	switch (baudrate) {
    2152:	f06f 0015 	mvn.w	r0, #21
    2156:	4770      	bx	lr
    2158:	f06f 0015 	mvn.w	r0, #21
    215c:	4770      	bx	lr
    215e:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    2162:	d042      	beq.n	21ea <baudrate_set+0x10e>
    2164:	d909      	bls.n	217a <baudrate_set+0x9e>
    2166:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    216a:	d046      	beq.n	21fa <baudrate_set+0x11e>
    216c:	d91f      	bls.n	21ae <baudrate_set+0xd2>
    216e:	4b29      	ldr	r3, [pc, #164]	; (2214 <baudrate_set+0x138>)
    2170:	4299      	cmp	r1, r3
    2172:	d148      	bne.n	2206 <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    2174:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    2178:	e7d9      	b.n	212e <baudrate_set+0x52>
	switch (baudrate) {
    217a:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    217e:	d037      	beq.n	21f0 <baudrate_set+0x114>
    2180:	d905      	bls.n	218e <baudrate_set+0xb2>
    2182:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    2186:	d10f      	bne.n	21a8 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    2188:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    218c:	e7cf      	b.n	212e <baudrate_set+0x52>
	switch (baudrate) {
    218e:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    2192:	4299      	cmp	r1, r3
    2194:	d02e      	beq.n	21f4 <baudrate_set+0x118>
    2196:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    219a:	d102      	bne.n	21a2 <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    219c:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    21a0:	e7c5      	b.n	212e <baudrate_set+0x52>
	switch (baudrate) {
    21a2:	f06f 0015 	mvn.w	r0, #21
    21a6:	4770      	bx	lr
    21a8:	f06f 0015 	mvn.w	r0, #21
    21ac:	4770      	bx	lr
    21ae:	4b1a      	ldr	r3, [pc, #104]	; (2218 <baudrate_set+0x13c>)
    21b0:	4299      	cmp	r1, r3
    21b2:	d025      	beq.n	2200 <baudrate_set+0x124>
    21b4:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    21b8:	d102      	bne.n	21c0 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    21ba:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    21be:	e7b6      	b.n	212e <baudrate_set+0x52>
	switch (baudrate) {
    21c0:	f06f 0015 	mvn.w	r0, #21
    21c4:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    21c6:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    21ca:	e7b0      	b.n	212e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    21cc:	4b13      	ldr	r3, [pc, #76]	; (221c <baudrate_set+0x140>)
    21ce:	e7ae      	b.n	212e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    21d0:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    21d4:	e7ab      	b.n	212e <baudrate_set+0x52>
	switch (baudrate) {
    21d6:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    21da:	e7a8      	b.n	212e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    21dc:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    21e0:	e7a5      	b.n	212e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    21e2:	4b0f      	ldr	r3, [pc, #60]	; (2220 <baudrate_set+0x144>)
    21e4:	e7a3      	b.n	212e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    21e6:	4b0f      	ldr	r3, [pc, #60]	; (2224 <baudrate_set+0x148>)
    21e8:	e7a1      	b.n	212e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    21ea:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    21ee:	e79e      	b.n	212e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    21f0:	4b0d      	ldr	r3, [pc, #52]	; (2228 <baudrate_set+0x14c>)
    21f2:	e79c      	b.n	212e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    21f4:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    21f8:	e799      	b.n	212e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    21fa:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    21fe:	e796      	b.n	212e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    2200:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    2204:	e793      	b.n	212e <baudrate_set+0x52>
	switch (baudrate) {
    2206:	f06f 0015 	mvn.w	r0, #21
}
    220a:	4770      	bx	lr
    220c:	0013b000 	.word	0x0013b000
    2210:	004ea000 	.word	0x004ea000
    2214:	000f4240 	.word	0x000f4240
    2218:	0003d090 	.word	0x0003d090
    221c:	00275000 	.word	0x00275000
    2220:	0075c000 	.word	0x0075c000
    2224:	003af000 	.word	0x003af000
    2228:	013a9000 	.word	0x013a9000

0000222c <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    222c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    222e:	4605      	mov	r5, r0
    2230:	460e      	mov	r6, r1
	struct uarte_nrfx_data *data = dev->data;
    2232:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2234:	f004 f955 	bl	64e2 <k_is_in_isr>
    2238:	b910      	cbnz	r0, 2240 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    223a:	4b12      	ldr	r3, [pc, #72]	; (2284 <uarte_nrfx_poll_out+0x58>)
    223c:	781b      	ldrb	r3, [r3, #0]
    223e:	b983      	cbnz	r3, 2262 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    2240:	f04f 0320 	mov.w	r3, #32
    2244:	f3ef 8411 	mrs	r4, BASEPRI
    2248:	f383 8812 	msr	BASEPRI_MAX, r3
    224c:	f3bf 8f6f 	isb	sy
#endif

	if (isr_mode) {
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    2250:	4628      	mov	r0, r5
    2252:	f003 fcc3 	bl	5bdc <is_tx_ready>
    2256:	b940      	cbnz	r0, 226a <uarte_nrfx_poll_out+0x3e>
	__asm__ volatile(
    2258:	f384 8811 	msr	BASEPRI, r4
    225c:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    2260:	e7ee      	b.n	2240 <uarte_nrfx_poll_out+0x14>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
    2262:	4628      	mov	r0, r5
    2264:	f003 fd1f 	bl	5ca6 <wait_tx_ready>
    2268:	4604      	mov	r4, r0
	}

	*data->char_out = c;
    226a:	693b      	ldr	r3, [r7, #16]
    226c:	701e      	strb	r6, [r3, #0]
	tx_start(dev, data->char_out, 1);
    226e:	2201      	movs	r2, #1
    2270:	6939      	ldr	r1, [r7, #16]
    2272:	4628      	mov	r0, r5
    2274:	f003 fccc 	bl	5c10 <tx_start>
	__asm__ volatile(
    2278:	f384 8811 	msr	BASEPRI, r4
    227c:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    2280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2282:	bf00      	nop
    2284:	20000b67 	.word	0x20000b67

00002288 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    2288:	b538      	push	{r3, r4, r5, lr}
    228a:	4605      	mov	r5, r0
    228c:	460c      	mov	r4, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    228e:	f101 0018 	add.w	r0, r1, #24
    2292:	f000 fd3b 	bl	2d0c <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    2296:	4b0a      	ldr	r3, [pc, #40]	; (22c0 <endtx_stoptx_ppi_init+0x38>)
    2298:	4298      	cmp	r0, r3
    229a:	d10e      	bne.n	22ba <endtx_stoptx_ppi_init+0x32>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    229c:	7e23      	ldrb	r3, [r4, #24]
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    229e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    22a2:	f8c5 31a0 	str.w	r3, [r5, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    22a6:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    22aa:	7e22      	ldrb	r2, [r4, #24]
    22ac:	2301      	movs	r3, #1
    22ae:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    22b0:	4a04      	ldr	r2, [pc, #16]	; (22c4 <endtx_stoptx_ppi_init+0x3c>)
    22b2:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
    22b6:	2000      	movs	r0, #0
}
    22b8:	bd38      	pop	{r3, r4, r5, pc}
		return -EIO;
    22ba:	f06f 0004 	mvn.w	r0, #4
    22be:	e7fb      	b.n	22b8 <endtx_stoptx_ppi_init+0x30>
    22c0:	0bad0000 	.word	0x0bad0000
    22c4:	50017000 	.word	0x50017000

000022c8 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    22c8:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    22cc:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    22d0:	4b01      	ldr	r3, [pc, #4]	; (22d8 <set_comparator+0x10>)
    22d2:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    22d6:	4770      	bx	lr
    22d8:	50015000 	.word	0x50015000

000022dc <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    22dc:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    22e0:	4b01      	ldr	r3, [pc, #4]	; (22e8 <get_comparator+0xc>)
    22e2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
    22e6:	4770      	bx	lr
    22e8:	50015000 	.word	0x50015000

000022ec <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    22ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    22f0:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    22f2:	4a02      	ldr	r2, [pc, #8]	; (22fc <event_enable+0x10>)
    22f4:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    22f8:	4770      	bx	lr
    22fa:	bf00      	nop
    22fc:	50015000 	.word	0x50015000

00002300 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2300:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2304:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    2306:	4a02      	ldr	r2, [pc, #8]	; (2310 <event_disable+0x10>)
    2308:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    230c:	4770      	bx	lr
    230e:	bf00      	nop
    2310:	50015000 	.word	0x50015000

00002314 <counter>:
     return p_reg->COUNTER;
    2314:	4b01      	ldr	r3, [pc, #4]	; (231c <counter+0x8>)
    2316:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    231a:	4770      	bx	lr
    231c:	50015000 	.word	0x50015000

00002320 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    2320:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    2322:	2301      	movs	r3, #1
    2324:	4083      	lsls	r3, r0
    2326:	ea6f 0c03 	mvn.w	ip, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    232a:	4a0c      	ldr	r2, [pc, #48]	; (235c <compare_int_lock+0x3c>)
    232c:	e8d2 1fef 	ldaex	r1, [r2]
    2330:	ea01 0e0c 	and.w	lr, r1, ip
    2334:	e8c2 efe4 	stlex	r4, lr, [r2]
    2338:	2c00      	cmp	r4, #0
    233a:	d1f7      	bne.n	232c <compare_int_lock+0xc>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    233c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    2340:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    2342:	4807      	ldr	r0, [pc, #28]	; (2360 <compare_int_lock+0x40>)
    2344:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    2348:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    234c:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    2350:	420b      	tst	r3, r1
}
    2352:	bf14      	ite	ne
    2354:	2001      	movne	r0, #1
    2356:	2000      	moveq	r0, #0
    2358:	bd10      	pop	{r4, pc}
    235a:	bf00      	nop
    235c:	20000940 	.word	0x20000940
    2360:	50015000 	.word	0x50015000

00002364 <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
    2364:	b538      	push	{r3, r4, r5, lr}
    2366:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
    2368:	f003 fd48 	bl	5dfc <full_int_lock>
    236c:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    236e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2372:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
    2374:	4a14      	ldr	r2, [pc, #80]	; (23c8 <channel_processing_check_and_clear+0x64>)
    2376:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    237a:	4213      	tst	r3, r2
    237c:	d105      	bne.n	238a <channel_processing_check_and_clear+0x26>
	bool result = false;
    237e:	2400      	movs	r4, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
    2380:	4628      	mov	r0, r5
    2382:	f003 fd44 	bl	5e0e <full_int_unlock>

	return result;
}
    2386:	4620      	mov	r0, r4
    2388:	bd38      	pop	{r3, r4, r5, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    238a:	2301      	movs	r3, #1
    238c:	40a3      	lsls	r3, r4
    238e:	43db      	mvns	r3, r3
    2390:	4a0e      	ldr	r2, [pc, #56]	; (23cc <channel_processing_check_and_clear+0x68>)
    2392:	e8d2 1fef 	ldaex	r1, [r2]
    2396:	ea01 0003 	and.w	r0, r1, r3
    239a:	e8c2 0fec 	stlex	ip, r0, [r2]
    239e:	f1bc 0f00 	cmp.w	ip, #0
    23a2:	d1f6      	bne.n	2392 <channel_processing_check_and_clear+0x2e>
    23a4:	b949      	cbnz	r1, 23ba <channel_processing_check_and_clear+0x56>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    23a6:	f104 0350 	add.w	r3, r4, #80	; 0x50
    23aa:	009b      	lsls	r3, r3, #2
    23ac:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    23ae:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    23b2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    23b6:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    23b8:	b123      	cbz	r3, 23c4 <channel_processing_check_and_clear+0x60>
			event_clear(chan);
    23ba:	4620      	mov	r0, r4
    23bc:	f003 fd0f 	bl	5dde <event_clear>
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    23c0:	2401      	movs	r4, #1
    23c2:	e7dd      	b.n	2380 <channel_processing_check_and_clear+0x1c>
    23c4:	2400      	movs	r4, #0
    23c6:	e7db      	b.n	2380 <channel_processing_check_and_clear+0x1c>
    23c8:	50015000 	.word	0x50015000
    23cc:	2000093c 	.word	0x2000093c

000023d0 <compare_int_unlock>:
	if (key) {
    23d0:	b901      	cbnz	r1, 23d4 <compare_int_unlock+0x4>
}
    23d2:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    23d4:	2301      	movs	r3, #1
    23d6:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    23d8:	4a0d      	ldr	r2, [pc, #52]	; (2410 <compare_int_unlock+0x40>)
    23da:	e8d2 cfef 	ldaex	ip, [r2]
    23de:	ea4c 0c03 	orr.w	ip, ip, r3
    23e2:	e8c2 cfe1 	stlex	r1, ip, [r2]
    23e6:	2900      	cmp	r1, #0
    23e8:	d1f7      	bne.n	23da <compare_int_unlock+0xa>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    23ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    23ee:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    23f0:	4a08      	ldr	r2, [pc, #32]	; (2414 <compare_int_unlock+0x44>)
    23f2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    23f6:	4b08      	ldr	r3, [pc, #32]	; (2418 <compare_int_unlock+0x48>)
    23f8:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    23fc:	40c3      	lsrs	r3, r0
    23fe:	f013 0f01 	tst.w	r3, #1
    2402:	d0e6      	beq.n	23d2 <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2404:	4b05      	ldr	r3, [pc, #20]	; (241c <compare_int_unlock+0x4c>)
    2406:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    240a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    240e:	e7e0      	b.n	23d2 <compare_int_unlock+0x2>
    2410:	20000940 	.word	0x20000940
    2414:	50015000 	.word	0x50015000
    2418:	2000093c 	.word	0x2000093c
    241c:	e000e100 	.word	0xe000e100

00002420 <sys_clock_timeout_handler>:
{
    2420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2424:	4607      	mov	r7, r0
    2426:	4614      	mov	r4, r2
    2428:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    242a:	4610      	mov	r0, r2
    242c:	4619      	mov	r1, r3
    242e:	f003 fce2 	bl	5df6 <absolute_time_to_cc>
    2432:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    2434:	4b15      	ldr	r3, [pc, #84]	; (248c <sys_clock_timeout_handler+0x6c>)
    2436:	681a      	ldr	r2, [r3, #0]
    2438:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
    243a:	601c      	str	r4, [r3, #0]
    243c:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    243e:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    2442:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    2446:	d309      	bcc.n	245c <sys_clock_timeout_handler+0x3c>
	return false;
    2448:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    244a:	f002 f923 	bl	4694 <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
    244e:	4638      	mov	r0, r7
    2450:	f7ff ff44 	bl	22dc <get_comparator>
    2454:	42a8      	cmp	r0, r5
    2456:	d00e      	beq.n	2476 <sys_clock_timeout_handler+0x56>
}
    2458:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    245c:	4b0c      	ldr	r3, [pc, #48]	; (2490 <sys_clock_timeout_handler+0x70>)
    245e:	681b      	ldr	r3, [r3, #0]
    2460:	0a1a      	lsrs	r2, r3, #8
    2462:	061b      	lsls	r3, r3, #24
    2464:	eb15 0803 	adds.w	r8, r5, r3
    2468:	f142 0900 	adc.w	r9, r2, #0
    246c:	4b09      	ldr	r3, [pc, #36]	; (2494 <sys_clock_timeout_handler+0x74>)
    246e:	e9c3 8900 	strd	r8, r9, [r3]
		return true;
    2472:	2401      	movs	r4, #1
    2474:	e7e9      	b.n	244a <sys_clock_timeout_handler+0x2a>
		if (!anchor_updated) {
    2476:	b11c      	cbz	r4, 2480 <sys_clock_timeout_handler+0x60>
		event_enable(chan);
    2478:	4638      	mov	r0, r7
    247a:	f7ff ff37 	bl	22ec <event_enable>
}
    247e:	e7eb      	b.n	2458 <sys_clock_timeout_handler+0x38>
			set_comparator(chan, COUNTER_HALF_SPAN);
    2480:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    2484:	4638      	mov	r0, r7
    2486:	f7ff ff1f 	bl	22c8 <set_comparator>
    248a:	e7f5      	b.n	2478 <sys_clock_timeout_handler+0x58>
    248c:	200001a0 	.word	0x200001a0
    2490:	20000944 	.word	0x20000944
    2494:	200001a8 	.word	0x200001a8

00002498 <z_nrf_rtc_timer_read>:
{
    2498:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    249a:	4b0d      	ldr	r3, [pc, #52]	; (24d0 <z_nrf_rtc_timer_read+0x38>)
    249c:	681c      	ldr	r4, [r3, #0]
    249e:	0a25      	lsrs	r5, r4, #8
    24a0:	0624      	lsls	r4, r4, #24
  __ASM volatile ("dmb 0xF":::"memory");
    24a2:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    24a6:	f7ff ff35 	bl	2314 <counter>
    24aa:	4603      	mov	r3, r0
	val += cntr;
    24ac:	1900      	adds	r0, r0, r4
    24ae:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    24b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    24b6:	d20a      	bcs.n	24ce <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    24b8:	4b06      	ldr	r3, [pc, #24]	; (24d4 <z_nrf_rtc_timer_read+0x3c>)
    24ba:	e9d3 2300 	ldrd	r2, r3, [r3]
    24be:	4290      	cmp	r0, r2
    24c0:	eb71 0303 	sbcs.w	r3, r1, r3
    24c4:	d203      	bcs.n	24ce <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    24c6:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    24ca:	f141 0100 	adc.w	r1, r1, #0
}
    24ce:	bd38      	pop	{r3, r4, r5, pc}
    24d0:	20000944 	.word	0x20000944
    24d4:	200001a8 	.word	0x200001a8

000024d8 <compare_set_nolocks>:
{
    24d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    24da:	4606      	mov	r6, r0
    24dc:	4614      	mov	r4, r2
    24de:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    24e0:	4610      	mov	r0, r2
    24e2:	4619      	mov	r1, r3
    24e4:	f003 fc87 	bl	5df6 <absolute_time_to_cc>
    24e8:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    24ea:	f7ff ffd5 	bl	2498 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    24ee:	42a0      	cmp	r0, r4
    24f0:	eb71 0305 	sbcs.w	r3, r1, r5
    24f4:	d21d      	bcs.n	2532 <compare_set_nolocks+0x5a>
		if (target_time - curr_time > COUNTER_SPAN) {
    24f6:	1a20      	subs	r0, r4, r0
    24f8:	eb65 0101 	sbc.w	r1, r5, r1
    24fc:	4b19      	ldr	r3, [pc, #100]	; (2564 <compare_set_nolocks+0x8c>)
    24fe:	4298      	cmp	r0, r3
    2500:	f171 0100 	sbcs.w	r1, r1, #0
    2504:	d22b      	bcs.n	255e <compare_set_nolocks+0x86>
		if (target_time != cc_data[chan].target_time) {
    2506:	4b18      	ldr	r3, [pc, #96]	; (2568 <compare_set_nolocks+0x90>)
    2508:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    250c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    2510:	42ab      	cmp	r3, r5
    2512:	bf08      	it	eq
    2514:	42a2      	cmpeq	r2, r4
    2516:	d016      	beq.n	2546 <compare_set_nolocks+0x6e>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
    2518:	4639      	mov	r1, r7
    251a:	4630      	mov	r0, r6
    251c:	f003 fc7c 	bl	5e18 <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
    2520:	4639      	mov	r1, r7
    2522:	f003 fc58 	bl	5dd6 <counter_sub>
    2526:	1900      	adds	r0, r0, r4
    2528:	f145 0300 	adc.w	r3, r5, #0
    252c:	4604      	mov	r4, r0
    252e:	461d      	mov	r5, r3
    2530:	e009      	b.n	2546 <compare_set_nolocks+0x6e>
		atomic_or(&force_isr_mask, BIT(chan));
    2532:	2301      	movs	r3, #1
    2534:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2536:	4a0d      	ldr	r2, [pc, #52]	; (256c <compare_set_nolocks+0x94>)
    2538:	e8d2 0fef 	ldaex	r0, [r2]
    253c:	4318      	orrs	r0, r3
    253e:	e8c2 0fe1 	stlex	r1, r0, [r2]
    2542:	2900      	cmp	r1, #0
    2544:	d1f8      	bne.n	2538 <compare_set_nolocks+0x60>
	cc_data[chan].target_time = target_time;
    2546:	4b08      	ldr	r3, [pc, #32]	; (2568 <compare_set_nolocks+0x90>)
    2548:	0132      	lsls	r2, r6, #4
    254a:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    254e:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    2552:	9906      	ldr	r1, [sp, #24]
    2554:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    2556:	9b07      	ldr	r3, [sp, #28]
    2558:	6073      	str	r3, [r6, #4]
	return ret;
    255a:	2000      	movs	r0, #0
}
    255c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -EINVAL;
    255e:	f06f 0015 	mvn.w	r0, #21
    2562:	e7fb      	b.n	255c <compare_set_nolocks+0x84>
    2564:	01000001 	.word	0x01000001
    2568:	20000190 	.word	0x20000190
    256c:	2000093c 	.word	0x2000093c

00002570 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    2570:	b530      	push	{r4, r5, lr}
    2572:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
    2574:	2300      	movs	r3, #0
    2576:	4a1d      	ldr	r2, [pc, #116]	; (25ec <sys_clock_driver_init+0x7c>)
    2578:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    257c:	2b00      	cmp	r3, #0
    257e:	dd24      	ble.n	25ca <sys_clock_driver_init+0x5a>
    p_reg->INTENSET = mask;
    2580:	4c1a      	ldr	r4, [pc, #104]	; (25ec <sys_clock_driver_init+0x7c>)
    2582:	2502      	movs	r5, #2
    2584:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2588:	4b19      	ldr	r3, [pc, #100]	; (25f0 <sys_clock_driver_init+0x80>)
    258a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    258e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    2592:	2200      	movs	r2, #0
    2594:	2101      	movs	r1, #1
    2596:	2015      	movs	r0, #21
    2598:	f002 ff02 	bl	53a0 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    259c:	2015      	movs	r0, #21
    259e:	f002 fefa 	bl	5396 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    25a2:	2301      	movs	r3, #1
    25a4:	60a3      	str	r3, [r4, #8]
    25a6:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    25a8:	4a12      	ldr	r2, [pc, #72]	; (25f4 <sys_clock_driver_init+0x84>)
    25aa:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    25ac:	2400      	movs	r4, #0
    25ae:	9401      	str	r4, [sp, #4]
    25b0:	4b11      	ldr	r3, [pc, #68]	; (25f8 <sys_clock_driver_init+0x88>)
    25b2:	9300      	str	r3, [sp, #0]
    25b4:	4a11      	ldr	r2, [pc, #68]	; (25fc <sys_clock_driver_init+0x8c>)
    25b6:	2300      	movs	r3, #0
    25b8:	4620      	mov	r0, r4
    25ba:	f003 fc68 	bl	5e8e <compare_set>

	z_nrf_clock_control_lf_on(mode);
    25be:	4628      	mov	r0, r5
    25c0:	f7ff fc22 	bl	1e08 <z_nrf_clock_control_lf_on>

	return 0;
}
    25c4:	4620      	mov	r0, r4
    25c6:	b003      	add	sp, #12
    25c8:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    25ca:	4a0d      	ldr	r2, [pc, #52]	; (2600 <sys_clock_driver_init+0x90>)
    25cc:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    25d0:	f04f 30ff 	mov.w	r0, #4294967295
    25d4:	f04f 31ff 	mov.w	r1, #4294967295
    25d8:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    25dc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    25e0:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    25e2:	4902      	ldr	r1, [pc, #8]	; (25ec <sys_clock_driver_init+0x7c>)
    25e4:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    25e8:	3301      	adds	r3, #1
    25ea:	e7c7      	b.n	257c <sys_clock_driver_init+0xc>
    25ec:	50015000 	.word	0x50015000
    25f0:	e000e100 	.word	0xe000e100
    25f4:	20000940 	.word	0x20000940
    25f8:	00002421 	.word	0x00002421
    25fc:	007fffff 	.word	0x007fffff
    2600:	20000190 	.word	0x20000190

00002604 <process_channel>:
{
    2604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2608:	b082      	sub	sp, #8
    260a:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    260c:	f7ff feaa 	bl	2364 <channel_processing_check_and_clear>
    2610:	b910      	cbnz	r0, 2618 <process_channel+0x14>
}
    2612:	b002      	add	sp, #8
    2614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    2618:	f7ff ff3e 	bl	2498 <z_nrf_rtc_timer_read>
    261c:	4682      	mov	sl, r0
    261e:	460d      	mov	r5, r1
		mcu_critical_state = full_int_lock();
    2620:	f003 fbec 	bl	5dfc <full_int_lock>
    2624:	4606      	mov	r6, r0
		expire_time = cc_data[chan].target_time;
    2626:	4b13      	ldr	r3, [pc, #76]	; (2674 <process_channel+0x70>)
    2628:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    262c:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    2630:	45c2      	cmp	sl, r8
    2632:	eb75 0509 	sbcs.w	r5, r5, r9
    2636:	d20b      	bcs.n	2650 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    2638:	2500      	movs	r5, #0
		full_int_unlock(mcu_critical_state);
    263a:	4630      	mov	r0, r6
    263c:	f003 fbe7 	bl	5e0e <full_int_unlock>
		if (handler) {
    2640:	2d00      	cmp	r5, #0
    2642:	d0e6      	beq.n	2612 <process_channel+0xe>
			handler(chan, expire_time, user_context);
    2644:	9700      	str	r7, [sp, #0]
    2646:	4642      	mov	r2, r8
    2648:	464b      	mov	r3, r9
    264a:	4620      	mov	r0, r4
    264c:	47a8      	blx	r5
}
    264e:	e7e0      	b.n	2612 <process_channel+0xe>
			handler = cc_data[chan].callback;
    2650:	4a08      	ldr	r2, [pc, #32]	; (2674 <process_channel+0x70>)
    2652:	0123      	lsls	r3, r4, #4
    2654:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    2658:	58d5      	ldr	r5, [r2, r3]
			user_context = cc_data[chan].user_context;
    265a:	684f      	ldr	r7, [r1, #4]
			cc_data[chan].callback = NULL;
    265c:	2000      	movs	r0, #0
    265e:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    2660:	f04f 32ff 	mov.w	r2, #4294967295
    2664:	f04f 33ff 	mov.w	r3, #4294967295
    2668:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    266c:	4620      	mov	r0, r4
    266e:	f7ff fe47 	bl	2300 <event_disable>
    2672:	e7e2      	b.n	263a <process_channel+0x36>
    2674:	20000190 	.word	0x20000190

00002678 <rtc_nrf_isr>:
{
    2678:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    267a:	4b0e      	ldr	r3, [pc, #56]	; (26b4 <rtc_nrf_isr+0x3c>)
    267c:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    2680:	f013 0f02 	tst.w	r3, #2
    2684:	d00d      	beq.n	26a2 <rtc_nrf_isr+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2686:	4b0b      	ldr	r3, [pc, #44]	; (26b4 <rtc_nrf_isr+0x3c>)
    2688:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    268c:	b14b      	cbz	r3, 26a2 <rtc_nrf_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    268e:	4b09      	ldr	r3, [pc, #36]	; (26b4 <rtc_nrf_isr+0x3c>)
    2690:	2200      	movs	r2, #0
    2692:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    2696:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		overflow_cnt++;
    269a:	4a07      	ldr	r2, [pc, #28]	; (26b8 <rtc_nrf_isr+0x40>)
    269c:	6813      	ldr	r3, [r2, #0]
    269e:	3301      	adds	r3, #1
    26a0:	6013      	str	r3, [r2, #0]
{
    26a2:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    26a4:	2c00      	cmp	r4, #0
    26a6:	dd00      	ble.n	26aa <rtc_nrf_isr+0x32>
}
    26a8:	bd10      	pop	{r4, pc}
		process_channel(chan);
    26aa:	4620      	mov	r0, r4
    26ac:	f7ff ffaa 	bl	2604 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    26b0:	3401      	adds	r4, #1
    26b2:	e7f7      	b.n	26a4 <rtc_nrf_isr+0x2c>
    26b4:	50015000 	.word	0x50015000
    26b8:	20000944 	.word	0x20000944

000026bc <sys_clock_set_timeout>:
{
    26bc:	b510      	push	{r4, lr}
    26be:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    26c0:	f1b0 3fff 	cmp.w	r0, #4294967295
    26c4:	d006      	beq.n	26d4 <sys_clock_set_timeout+0x18>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    26c6:	2801      	cmp	r0, #1
    26c8:	dd06      	ble.n	26d8 <sys_clock_set_timeout+0x1c>
    26ca:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    26ce:	da05      	bge.n	26dc <sys_clock_set_timeout+0x20>
    26d0:	1e44      	subs	r4, r0, #1
    26d2:	e004      	b.n	26de <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    26d4:	480f      	ldr	r0, [pc, #60]	; (2714 <sys_clock_set_timeout+0x58>)
    26d6:	e7f8      	b.n	26ca <sys_clock_set_timeout+0xe>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    26d8:	2400      	movs	r4, #0
    26da:	e000      	b.n	26de <sys_clock_set_timeout+0x22>
    26dc:	4c0d      	ldr	r4, [pc, #52]	; (2714 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    26de:	f7ff fedb 	bl	2498 <z_nrf_rtc_timer_read>
    26e2:	4b0d      	ldr	r3, [pc, #52]	; (2718 <sys_clock_set_timeout+0x5c>)
    26e4:	681a      	ldr	r2, [r3, #0]
    26e6:	685b      	ldr	r3, [r3, #4]
    26e8:	1a80      	subs	r0, r0, r2
	if (unannounced >= COUNTER_HALF_SPAN) {
    26ea:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    26ee:	d300      	bcc.n	26f2 <sys_clock_set_timeout+0x36>
		ticks = 0;
    26f0:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    26f2:	4420      	add	r0, r4
    26f4:	1c41      	adds	r1, r0, #1
	if (cyc > MAX_CYCLES) {
    26f6:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    26fa:	d300      	bcc.n	26fe <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
    26fc:	4905      	ldr	r1, [pc, #20]	; (2714 <sys_clock_set_timeout+0x58>)
	uint64_t target_time = cyc + last_count;
    26fe:	2000      	movs	r0, #0
    2700:	1852      	adds	r2, r2, r1
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    2702:	9001      	str	r0, [sp, #4]
    2704:	4905      	ldr	r1, [pc, #20]	; (271c <sys_clock_set_timeout+0x60>)
    2706:	9100      	str	r1, [sp, #0]
    2708:	f143 0300 	adc.w	r3, r3, #0
    270c:	f003 fbbf 	bl	5e8e <compare_set>
}
    2710:	b002      	add	sp, #8
    2712:	bd10      	pop	{r4, pc}
    2714:	007fffff 	.word	0x007fffff
    2718:	200001a0 	.word	0x200001a0
    271c:	00002421 	.word	0x00002421

00002720 <sys_clock_elapsed>:
{
    2720:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    2722:	f7ff feb9 	bl	2498 <z_nrf_rtc_timer_read>
    2726:	4b02      	ldr	r3, [pc, #8]	; (2730 <sys_clock_elapsed+0x10>)
    2728:	681b      	ldr	r3, [r3, #0]
}
    272a:	1ac0      	subs	r0, r0, r3
    272c:	bd08      	pop	{r3, pc}
    272e:	bf00      	nop
    2730:	200001a0 	.word	0x200001a0

00002734 <nrf_gpio_cfg>:
{
    2734:	b430      	push	{r4, r5}
    *p_pin = pin_number & 0x1F;
    2736:	f000 0c1f 	and.w	ip, r0, #31
    return pin_number >> 5;
    273a:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    273c:	2801      	cmp	r0, #1
    273e:	d018      	beq.n	2772 <nrf_gpio_cfg+0x3e>
        case 0: return NRF_P0;
    2740:	4d0d      	ldr	r5, [pc, #52]	; (2778 <nrf_gpio_cfg+0x44>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    2742:	f10c 0080 	add.w	r0, ip, #128	; 0x80
    2746:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
    274a:	f004 4ce0 	and.w	ip, r4, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    274e:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
    2752:	ea41 0383 	orr.w	r3, r1, r3, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    2756:	f89d 2008 	ldrb.w	r2, [sp, #8]
    275a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    275e:	f89d 200c 	ldrb.w	r2, [sp, #12]
    2762:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    2766:	ea43 030c 	orr.w	r3, r3, ip
    reg->PIN_CNF[pin_number] = cnf;
    276a:	f845 3020 	str.w	r3, [r5, r0, lsl #2]
}
    276e:	bc30      	pop	{r4, r5}
    2770:	4770      	bx	lr
        case 1: return NRF_P1;
    2772:	4d02      	ldr	r5, [pc, #8]	; (277c <nrf_gpio_cfg+0x48>)
    2774:	e7e5      	b.n	2742 <nrf_gpio_cfg+0xe>
    2776:	bf00      	nop
    2778:	50842500 	.word	0x50842500
    277c:	50842800 	.word	0x50842800

00002780 <nrf_gpio_pin_write>:
    if (value == 0)
    2780:	b959      	cbnz	r1, 279a <nrf_gpio_pin_write+0x1a>
    *p_pin = pin_number & 0x1F;
    2782:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    2786:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2788:	2801      	cmp	r0, #1
    278a:	d004      	beq.n	2796 <nrf_gpio_pin_write+0x16>
        case 0: return NRF_P0;
    278c:	4a09      	ldr	r2, [pc, #36]	; (27b4 <nrf_gpio_pin_write+0x34>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    278e:	2301      	movs	r3, #1
    2790:	408b      	lsls	r3, r1
    p_reg->OUTCLR = clr_mask;
    2792:	60d3      	str	r3, [r2, #12]
}
    2794:	4770      	bx	lr
        case 1: return NRF_P1;
    2796:	4a08      	ldr	r2, [pc, #32]	; (27b8 <nrf_gpio_pin_write+0x38>)
    2798:	e7f9      	b.n	278e <nrf_gpio_pin_write+0xe>
    *p_pin = pin_number & 0x1F;
    279a:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    279e:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    27a0:	2801      	cmp	r0, #1
    27a2:	d004      	beq.n	27ae <nrf_gpio_pin_write+0x2e>
        case 0: return NRF_P0;
    27a4:	4a03      	ldr	r2, [pc, #12]	; (27b4 <nrf_gpio_pin_write+0x34>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    27a6:	2301      	movs	r3, #1
    27a8:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
    27aa:	6093      	str	r3, [r2, #8]
}
    27ac:	4770      	bx	lr
        case 1: return NRF_P1;
    27ae:	4a02      	ldr	r2, [pc, #8]	; (27b8 <nrf_gpio_pin_write+0x38>)
    27b0:	e7f9      	b.n	27a6 <nrf_gpio_pin_write+0x26>
    27b2:	bf00      	nop
    27b4:	50842500 	.word	0x50842500
    27b8:	50842800 	.word	0x50842800

000027bc <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    27bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    27c0:	b085      	sub	sp, #20
    27c2:	4607      	mov	r7, r0
    27c4:	468b      	mov	fp, r1
    27c6:	4690      	mov	r8, r2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    27c8:	2400      	movs	r4, #0
    27ca:	e022      	b.n	2812 <pinctrl_configure_pins+0x56>
		uint32_t write = NO_WRITE;
		nrf_gpio_pin_dir_t dir;
		nrf_gpio_pin_input_t input;

		if (pin == NRF_PIN_DISCONNECTED) {
			pin = 0xFFFFFFFFU;
    27cc:	f04f 35ff 	mov.w	r5, #4294967295
    27d0:	e02c      	b.n	282c <pinctrl_configure_pins+0x70>
		}

		switch (NRF_GET_FUN(pins[i])) {
#if defined(NRF_PSEL_UART)
		case NRF_FUN_UART_TX:
			NRF_PSEL_UART(reg, TXD) = pin;
    27d2:	f8c8 550c 	str.w	r5, [r8, #1292]	; 0x50c
			write = 1U;
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    27d6:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    27d8:	9603      	str	r6, [sp, #12]
			write = 1U;
    27da:	4631      	mov	r1, r6
		default:
			return -ENOTSUP;
		}

		/* configure GPIO properties */
		if (pin != NRF_PIN_DISCONNECTED) {
    27dc:	2d7f      	cmp	r5, #127	; 0x7f
    27de:	d016      	beq.n	280e <pinctrl_configure_pins+0x52>
			if (write != NO_WRITE) {
    27e0:	f1b1 3fff 	cmp.w	r1, #4294967295
    27e4:	f040 810e 	bne.w	2a04 <pinctrl_configure_pins+0x248>
				nrf_gpio_pin_write(pin, write);
			}

			/* force input and disconnected buffer for low power */
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    27e8:	f857 300a 	ldr.w	r3, [r7, sl]
    27ec:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    27f0:	d002      	beq.n	27f8 <pinctrl_configure_pins+0x3c>
				dir = NRF_GPIO_PIN_DIR_INPUT;
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    27f2:	2601      	movs	r6, #1
				dir = NRF_GPIO_PIN_DIR_INPUT;
    27f4:	2200      	movs	r2, #0
    27f6:	9203      	str	r2, [sp, #12]
			}

			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
    27f8:	2200      	movs	r2, #0
    27fa:	9201      	str	r2, [sp, #4]
    27fc:	f8cd 9000 	str.w	r9, [sp]
    2800:	f3c3 13c1 	ubfx	r3, r3, #7, #2
    2804:	4632      	mov	r2, r6
    2806:	9903      	ldr	r1, [sp, #12]
    2808:	4628      	mov	r0, r5
    280a:	f7ff ff93 	bl	2734 <nrf_gpio_cfg>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    280e:	3401      	adds	r4, #1
    2810:	b2e4      	uxtb	r4, r4
    2812:	455c      	cmp	r4, fp
    2814:	f080 80fa 	bcs.w	2a0c <pinctrl_configure_pins+0x250>
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    2818:	ea4f 0a84 	mov.w	sl, r4, lsl #2
    281c:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    2820:	f3c3 2943 	ubfx	r9, r3, #9, #4
		uint32_t pin = NRF_GET_PIN(pins[i]);
    2824:	f003 057f 	and.w	r5, r3, #127	; 0x7f
		if (pin == NRF_PIN_DISCONNECTED) {
    2828:	2d7f      	cmp	r5, #127	; 0x7f
    282a:	d0cf      	beq.n	27cc <pinctrl_configure_pins+0x10>
		switch (NRF_GET_FUN(pins[i])) {
    282c:	0c1b      	lsrs	r3, r3, #16
    282e:	2b22      	cmp	r3, #34	; 0x22
    2830:	f200 80ee 	bhi.w	2a10 <pinctrl_configure_pins+0x254>
    2834:	a201      	add	r2, pc, #4	; (adr r2, 283c <pinctrl_configure_pins+0x80>)
    2836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    283a:	bf00      	nop
    283c:	000027d3 	.word	0x000027d3
    2840:	000028c9 	.word	0x000028c9
    2844:	000028d7 	.word	0x000028d7
    2848:	000028e3 	.word	0x000028e3
    284c:	000028f1 	.word	0x000028f1
    2850:	000028ff 	.word	0x000028ff
    2854:	0000290b 	.word	0x0000290b
    2858:	00002a11 	.word	0x00002a11
    285c:	00002a11 	.word	0x00002a11
    2860:	00002a11 	.word	0x00002a11
    2864:	00002a11 	.word	0x00002a11
    2868:	00002919 	.word	0x00002919
    286c:	0000292d 	.word	0x0000292d
    2870:	00002a11 	.word	0x00002a11
    2874:	00002a11 	.word	0x00002a11
    2878:	00002a11 	.word	0x00002a11
    287c:	00002a11 	.word	0x00002a11
    2880:	00002a11 	.word	0x00002a11
    2884:	00002a11 	.word	0x00002a11
    2888:	00002a11 	.word	0x00002a11
    288c:	00002a11 	.word	0x00002a11
    2890:	00002a11 	.word	0x00002a11
    2894:	00002941 	.word	0x00002941
    2898:	00002953 	.word	0x00002953
    289c:	00002965 	.word	0x00002965
    28a0:	00002977 	.word	0x00002977
    28a4:	00002a11 	.word	0x00002a11
    28a8:	00002a11 	.word	0x00002a11
    28ac:	00002a11 	.word	0x00002a11
    28b0:	00002989 	.word	0x00002989
    28b4:	00002999 	.word	0x00002999
    28b8:	000029a5 	.word	0x000029a5
    28bc:	000029b5 	.word	0x000029b5
    28c0:	000029c5 	.word	0x000029c5
    28c4:	000029d5 	.word	0x000029d5
			NRF_PSEL_UART(reg, RXD) = pin;
    28c8:	f8c8 5514 	str.w	r5, [r8, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    28cc:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    28ce:	9603      	str	r6, [sp, #12]
		uint32_t write = NO_WRITE;
    28d0:	f04f 31ff 	mov.w	r1, #4294967295
			break;
    28d4:	e782      	b.n	27dc <pinctrl_configure_pins+0x20>
			NRF_PSEL_UART(reg, RTS) = pin;
    28d6:	f8c8 5508 	str.w	r5, [r8, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    28da:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    28dc:	9603      	str	r6, [sp, #12]
			write = 1U;
    28de:	4631      	mov	r1, r6
			break;
    28e0:	e77c      	b.n	27dc <pinctrl_configure_pins+0x20>
			NRF_PSEL_UART(reg, CTS) = pin;
    28e2:	f8c8 5510 	str.w	r5, [r8, #1296]	; 0x510
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    28e6:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    28e8:	9603      	str	r6, [sp, #12]
		uint32_t write = NO_WRITE;
    28ea:	f04f 31ff 	mov.w	r1, #4294967295
			break;
    28ee:	e775      	b.n	27dc <pinctrl_configure_pins+0x20>
			NRF_PSEL_SPIM(reg, SCK) = pin;
    28f0:	f8c8 5508 	str.w	r5, [r8, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    28f4:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    28f6:	2301      	movs	r3, #1
    28f8:	9303      	str	r3, [sp, #12]
			write = 0U;
    28fa:	4631      	mov	r1, r6
			break;
    28fc:	e76e      	b.n	27dc <pinctrl_configure_pins+0x20>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
    28fe:	f8c8 550c 	str.w	r5, [r8, #1292]	; 0x50c
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2902:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    2904:	9603      	str	r6, [sp, #12]
			write = 0U;
    2906:	2100      	movs	r1, #0
			break;
    2908:	e768      	b.n	27dc <pinctrl_configure_pins+0x20>
			NRF_PSEL_SPIM(reg, MISO) = pin;
    290a:	f8c8 5510 	str.w	r5, [r8, #1296]	; 0x510
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    290e:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2910:	9603      	str	r6, [sp, #12]
		uint32_t write = NO_WRITE;
    2912:	f04f 31ff 	mov.w	r1, #4294967295
			break;
    2916:	e761      	b.n	27dc <pinctrl_configure_pins+0x20>
			NRF_PSEL_TWIM(reg, SCL) = pin;
    2918:	f8c8 5508 	str.w	r5, [r8, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    291c:	f1b9 0f00 	cmp.w	r9, #0
    2920:	d060      	beq.n	29e4 <pinctrl_configure_pins+0x228>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    2922:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2924:	9603      	str	r6, [sp, #12]
		uint32_t write = NO_WRITE;
    2926:	f04f 31ff 	mov.w	r1, #4294967295
    292a:	e757      	b.n	27dc <pinctrl_configure_pins+0x20>
			NRF_PSEL_TWIM(reg, SDA) = pin;
    292c:	f8c8 550c 	str.w	r5, [r8, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    2930:	f1b9 0f00 	cmp.w	r9, #0
    2934:	d05e      	beq.n	29f4 <pinctrl_configure_pins+0x238>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    2936:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2938:	9603      	str	r6, [sp, #12]
		uint32_t write = NO_WRITE;
    293a:	f04f 31ff 	mov.w	r1, #4294967295
    293e:	e74d      	b.n	27dc <pinctrl_configure_pins+0x20>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
    2940:	f8c8 5560 	str.w	r5, [r8, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
    2944:	f857 100a 	ldr.w	r1, [r7, sl]
    2948:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    294c:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    294e:	9603      	str	r6, [sp, #12]
			break;
    2950:	e744      	b.n	27dc <pinctrl_configure_pins+0x20>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
    2952:	f8c8 5564 	str.w	r5, [r8, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
    2956:	f857 100a 	ldr.w	r1, [r7, sl]
    295a:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    295e:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    2960:	9603      	str	r6, [sp, #12]
			break;
    2962:	e73b      	b.n	27dc <pinctrl_configure_pins+0x20>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
    2964:	f8c8 5568 	str.w	r5, [r8, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
    2968:	f857 100a 	ldr.w	r1, [r7, sl]
    296c:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2970:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    2972:	9603      	str	r6, [sp, #12]
			break;
    2974:	e732      	b.n	27dc <pinctrl_configure_pins+0x20>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
    2976:	f8c8 556c 	str.w	r5, [r8, #1388]	; 0x56c
			write = NRF_GET_INVERT(pins[i]);
    297a:	f857 100a 	ldr.w	r1, [r7, sl]
    297e:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2982:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    2984:	9603      	str	r6, [sp, #12]
			break;
    2986:	e729      	b.n	27dc <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, SCK) = pin;
    2988:	f8c8 5524 	str.w	r5, [r8, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    298c:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    298e:	2300      	movs	r3, #0
    2990:	9303      	str	r3, [sp, #12]
		uint32_t write = NO_WRITE;
    2992:	f04f 31ff 	mov.w	r1, #4294967295
			break;
    2996:	e721      	b.n	27dc <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, CSN) = pin;
    2998:	f8c8 5528 	str.w	r5, [r8, #1320]	; 0x528
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    299c:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    299e:	9603      	str	r6, [sp, #12]
			write = 1U;
    29a0:	4631      	mov	r1, r6
			break;
    29a2:	e71b      	b.n	27dc <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, IO0) = pin;
    29a4:	f8c8 5530 	str.w	r5, [r8, #1328]	; 0x530
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    29a8:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    29aa:	2300      	movs	r3, #0
    29ac:	9303      	str	r3, [sp, #12]
		uint32_t write = NO_WRITE;
    29ae:	f04f 31ff 	mov.w	r1, #4294967295
			break;
    29b2:	e713      	b.n	27dc <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, IO1) = pin;
    29b4:	f8c8 5534 	str.w	r5, [r8, #1332]	; 0x534
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    29b8:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    29ba:	2300      	movs	r3, #0
    29bc:	9303      	str	r3, [sp, #12]
		uint32_t write = NO_WRITE;
    29be:	f04f 31ff 	mov.w	r1, #4294967295
			break;
    29c2:	e70b      	b.n	27dc <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, IO2) = pin;
    29c4:	f8c8 5538 	str.w	r5, [r8, #1336]	; 0x538
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    29c8:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    29ca:	2300      	movs	r3, #0
    29cc:	9303      	str	r3, [sp, #12]
		uint32_t write = NO_WRITE;
    29ce:	f04f 31ff 	mov.w	r1, #4294967295
			break;
    29d2:	e703      	b.n	27dc <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, IO3) = pin;
    29d4:	f8c8 553c 	str.w	r5, [r8, #1340]	; 0x53c
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    29d8:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    29da:	2300      	movs	r3, #0
    29dc:	9303      	str	r3, [sp, #12]
		uint32_t write = NO_WRITE;
    29de:	f04f 31ff 	mov.w	r1, #4294967295
			break;
    29e2:	e6fb      	b.n	27dc <pinctrl_configure_pins+0x20>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    29e4:	464e      	mov	r6, r9
			dir = NRF_GPIO_PIN_DIR_INPUT;
    29e6:	f8cd 900c 	str.w	r9, [sp, #12]
		uint32_t write = NO_WRITE;
    29ea:	f04f 31ff 	mov.w	r1, #4294967295
				drive = NRF_DRIVE_S0D1;
    29ee:	f04f 0906 	mov.w	r9, #6
    29f2:	e6f3      	b.n	27dc <pinctrl_configure_pins+0x20>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    29f4:	464e      	mov	r6, r9
			dir = NRF_GPIO_PIN_DIR_INPUT;
    29f6:	f8cd 900c 	str.w	r9, [sp, #12]
		uint32_t write = NO_WRITE;
    29fa:	f04f 31ff 	mov.w	r1, #4294967295
				drive = NRF_DRIVE_S0D1;
    29fe:	f04f 0906 	mov.w	r9, #6
    2a02:	e6eb      	b.n	27dc <pinctrl_configure_pins+0x20>
				nrf_gpio_pin_write(pin, write);
    2a04:	4628      	mov	r0, r5
    2a06:	f7ff febb 	bl	2780 <nrf_gpio_pin_write>
    2a0a:	e6ed      	b.n	27e8 <pinctrl_configure_pins+0x2c>
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    2a0c:	2000      	movs	r0, #0
    2a0e:	e001      	b.n	2a14 <pinctrl_configure_pins+0x258>
		switch (NRF_GET_FUN(pins[i])) {
    2a10:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    2a14:	b005      	add	sp, #20
    2a16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2a1a:	bf00      	nop

00002a1c <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
    2a1c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2a20:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
    2a24:	f002 0203 	and.w	r2, r2, #3
    2a28:	4b02      	ldr	r3, [pc, #8]	; (2a34 <SystemCoreClockUpdate+0x18>)
    2a2a:	40d3      	lsrs	r3, r2
    2a2c:	4a02      	ldr	r2, [pc, #8]	; (2a38 <SystemCoreClockUpdate+0x1c>)
    2a2e:	6013      	str	r3, [r2, #0]
#endif
}
    2a30:	4770      	bx	lr
    2a32:	bf00      	nop
    2a34:	07a12000 	.word	0x07a12000
    2a38:	20000048 	.word	0x20000048

00002a3c <SystemInit>:

void SystemInit(void)
{
    2a3c:	b508      	push	{r3, lr}
            SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
        #endif

        /* Workaround for Errata 97 "ERASEPROTECT, APPROTECT, or startup problems" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_97())
    2a3e:	f003 fadf 	bl	6000 <nrf53_errata_97>
    2a42:	b168      	cbz	r0, 2a60 <SystemInit+0x24>
        {
            if (*((volatile uint32_t *)0x50004A20ul) == 0)
    2a44:	4b4e      	ldr	r3, [pc, #312]	; (2b80 <SystemInit+0x144>)
    2a46:	f8d3 3a20 	ldr.w	r3, [r3, #2592]	; 0xa20
    2a4a:	b94b      	cbnz	r3, 2a60 <SystemInit+0x24>
            {
                *((volatile uint32_t *)0x50004A20ul) = 0xDul;
    2a4c:	4b4c      	ldr	r3, [pc, #304]	; (2b80 <SystemInit+0x144>)
    2a4e:	220d      	movs	r2, #13
    2a50:	f8c3 2a20 	str.w	r2, [r3, #2592]	; 0xa20
                *((volatile uint32_t *)0x5000491Cul) = 0x1ul;
    2a54:	2201      	movs	r2, #1
    2a56:	f8c3 291c 	str.w	r2, [r3, #2332]	; 0x91c
                *((volatile uint32_t *)0x5000491Cul) = 0x0ul;
    2a5a:	2200      	movs	r2, #0
    2a5c:	f8c3 291c 	str.w	r2, [r3, #2332]	; 0x91c
{
    2a60:	2200      	movs	r2, #0
    2a62:	e00b      	b.n	2a7c <SystemInit+0x40>
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
            #if defined ( __ICCARM__ )
                /* IAR will complain about the order of volatile pointer accesses. */
                #pragma diag_suppress=Pa082
            #endif
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    2a64:	f102 0360 	add.w	r3, r2, #96	; 0x60
    2a68:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    2a6c:	f851 1033 	ldr.w	r1, [r1, r3, lsl #3]
    2a70:	00db      	lsls	r3, r3, #3
    2a72:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
    2a76:	685b      	ldr	r3, [r3, #4]
    2a78:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    2a7a:	3201      	adds	r2, #1
    2a7c:	2a1f      	cmp	r2, #31
    2a7e:	d808      	bhi.n	2a92 <SystemInit+0x56>
    2a80:	f102 0360 	add.w	r3, r2, #96	; 0x60
    2a84:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    2a88:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
    2a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
    2a90:	d1e8      	bne.n	2a64 <SystemInit+0x28>
        }

        /* errata 64 must be before errata 42, as errata 42 is dependant on the changes in errata 64*/
        /* Workaround for Errata 64 "VREGMAIN has invalid configuration when CPU is running at 128 MHz" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_64())
    2a92:	f003 fa8d 	bl	5fb0 <nrf53_errata_64>
    2a96:	b130      	cbz	r0, 2aa6 <SystemInit+0x6a>
        {
            *((volatile uint32_t *)0x5000470Cul) = 0x29ul;
    2a98:	4b39      	ldr	r3, [pc, #228]	; (2b80 <SystemInit+0x144>)
    2a9a:	2229      	movs	r2, #41	; 0x29
    2a9c:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
    2aa0:	2203      	movs	r2, #3
    2aa2:	f8c3 273c 	str.w	r2, [r3, #1852]	; 0x73c
        }

        /* Workaround for Errata 42 "Reset value of HFCLKCTRL is invalid" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_42())
    2aa6:	f003 fa37 	bl	5f18 <nrf53_errata_42>
    2aaa:	b140      	cbz	r0, 2abe <SystemInit+0x82>
        {
            *((volatile uint32_t *)0x50039530ul) = 0xBEEF0044ul;
    2aac:	4b35      	ldr	r3, [pc, #212]	; (2b84 <SystemInit+0x148>)
    2aae:	4a36      	ldr	r2, [pc, #216]	; (2b88 <SystemInit+0x14c>)
    2ab0:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
            NRF_CLOCK_S->HFCLKCTRL = CLOCK_HFCLKCTRL_HCLK_Div2 << CLOCK_HFCLKCTRL_HCLK_Pos;
    2ab4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2ab8:	2201      	movs	r2, #1
    2aba:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
        }

        /* Workaround for Errata 46 "Higher power consumption of LFRC" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_46())
    2abe:	f003 fa3f 	bl	5f40 <nrf53_errata_46>
    2ac2:	b118      	cbz	r0, 2acc <SystemInit+0x90>
        {
            *((volatile uint32_t *)0x5003254Cul) = 0;
    2ac4:	4b31      	ldr	r3, [pc, #196]	; (2b8c <SystemInit+0x150>)
    2ac6:	2200      	movs	r2, #0
    2ac8:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
        }

        /* Workaround for Errata 49 "SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_49())
    2acc:	f003 fa50 	bl	5f70 <nrf53_errata_49>
    2ad0:	b168      	cbz	r0, 2aee <SystemInit+0xb2>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk)
    2ad2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2ad6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    2ada:	f013 0f01 	tst.w	r3, #1
    2ade:	d006      	beq.n	2aee <SystemInit+0xb2>
            {
                NRF_POWER_S->EVENTS_SLEEPENTER = 0;
    2ae0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2ae4:	2200      	movs	r2, #0
    2ae6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
                NRF_POWER_S->EVENTS_SLEEPEXIT = 0;
    2aea:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
            }
        }

        /* Workaround for Errata 55 "Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_55())
    2aee:	f003 fa53 	bl	5f98 <nrf53_errata_55>
    2af2:	b160      	cbz	r0, 2b0e <SystemInit+0xd2>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk){
    2af4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2af8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    2afc:	f013 0f01 	tst.w	r3, #1
    2b00:	d005      	beq.n	2b0e <SystemInit+0xd2>
                NRF_RESET_S->RESETREAS = ~RESET_RESETREAS_RESETPIN_Msk;
    2b02:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2b06:	f06f 0201 	mvn.w	r2, #1
    2b0a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            }
        }

        /* Workaround for Errata 69 "VREGMAIN configuration is not retained in System OFF" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_69())
    2b0e:	f003 fa63 	bl	5fd8 <nrf53_errata_69>
    2b12:	b118      	cbz	r0, 2b1c <SystemInit+0xe0>
        {
            *((volatile uint32_t *)0x5000470Cul) =0x65ul;
    2b14:	4b1a      	ldr	r3, [pc, #104]	; (2b80 <SystemInit+0x144>)
    2b16:	2265      	movs	r2, #101	; 0x65
    2b18:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
        }

        if (nrf53_errata_140())
    2b1c:	f003 fa84 	bl	6028 <nrf53_errata_140>
    2b20:	b120      	cbz	r0, 2b2c <SystemInit+0xf0>
        {
            if (*(volatile uint32_t *)0x50032420 & 0x80000000)
    2b22:	4b1a      	ldr	r3, [pc, #104]	; (2b8c <SystemInit+0x150>)
    2b24:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
    2b28:	2b00      	cmp	r3, #0
    2b2a:	db11      	blt.n	2b50 <SystemInit+0x114>

        #endif

        /* Allow Non-Secure code to run FPU instructions.
         * If only the secure code should control FPU power state these registers should be configured accordingly in the secure application code. */
        SCB->NSACR |= (3UL << 10);
    2b2c:	4a18      	ldr	r2, [pc, #96]	; (2b90 <SystemInit+0x154>)
    2b2e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    2b32:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    2b36:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                /* Do nothing, allow user code to handle APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load APPROTECT soft branch from UICR.
               If UICR->APPROTECT is disabled, CTRLAP->APPROTECT will be disabled. */
            NRF_CTRLAP_S->APPROTECT.DISABLE = NRF_UICR_S->APPROTECT;
    2b3a:	4a16      	ldr	r2, [pc, #88]	; (2b94 <SystemInit+0x158>)
    2b3c:	6811      	ldr	r1, [r2, #0]
    2b3e:	4b16      	ldr	r3, [pc, #88]	; (2b98 <SystemInit+0x15c>)
    2b40:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
                /* Do nothing, allow user code to handle SECURE APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load SECURE APPROTECT soft branch from UICR.
               If UICR->SECUREAPPROTECT is disabled, CTRLAP->SECUREAPPROTECT will be disabled. */
            NRF_CTRLAP_S->SECUREAPPROTECT.DISABLE = NRF_UICR_S->SECUREAPPROTECT;
    2b44:	69d2      	ldr	r2, [r2, #28]
    2b46:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
    2b4a:	f7ff ff67 	bl	2a1c <SystemCoreClockUpdate>
}
    2b4e:	bd08      	pop	{r3, pc}
                NRF_CLOCK_S->LFCLKSRC = CLOCK_LFCLKSRC_SRC_LFSYNT;
    2b50:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2b54:	2203      	movs	r2, #3
    2b56:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
                NRF_CLOCK_S->TASKS_LFCLKSTART = 1;
    2b5a:	2201      	movs	r2, #1
    2b5c:	609a      	str	r2, [r3, #8]
                while (NRF_CLOCK_S->EVENTS_LFCLKSTARTED == 0) {}
    2b5e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2b62:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    2b66:	2b00      	cmp	r3, #0
    2b68:	d0f9      	beq.n	2b5e <SystemInit+0x122>
                NRF_CLOCK_S->EVENTS_LFCLKSTARTED = 0;
    2b6a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2b6e:	2200      	movs	r2, #0
    2b70:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
                NRF_CLOCK_S->TASKS_LFCLKSTOP = 1;
    2b74:	2201      	movs	r2, #1
    2b76:	60da      	str	r2, [r3, #12]
                NRF_CLOCK_S->LFCLKSRC = CLOCK_LFCLKSRC_SRC_LFRC;
    2b78:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    2b7c:	e7d6      	b.n	2b2c <SystemInit+0xf0>
    2b7e:	bf00      	nop
    2b80:	50004000 	.word	0x50004000
    2b84:	50039000 	.word	0x50039000
    2b88:	beef0044 	.word	0xbeef0044
    2b8c:	50032000 	.word	0x50032000
    2b90:	e000ed00 	.word	0xe000ed00
    2b94:	00ff8000 	.word	0x00ff8000
    2b98:	50006000 	.word	0x50006000

00002b9c <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    2b9c:	b510      	push	{r4, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
    2b9e:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    2ba0:	fab4 f384 	clz	r3, r4
    2ba4:	f1c3 031f 	rsb	r3, r3, #31
    2ba8:	fa5f fc83 	uxtb.w	ip, r3
        if (idx < 0) {
    2bac:	2b00      	cmp	r3, #0
    2bae:	db12      	blt.n	2bd6 <nrfx_flag32_alloc+0x3a>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    2bb0:	2201      	movs	r2, #1
    2bb2:	fa02 f303 	lsl.w	r3, r2, r3
    2bb6:	ea24 0303 	bic.w	r3, r4, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    2bba:	e8d0 2fef 	ldaex	r2, [r0]
    2bbe:	42a2      	cmp	r2, r4
    2bc0:	d104      	bne.n	2bcc <nrfx_flag32_alloc+0x30>
    2bc2:	e8c0 3fee 	stlex	lr, r3, [r0]
    2bc6:	f1be 0f00 	cmp.w	lr, #0
    2bca:	d1f6      	bne.n	2bba <nrfx_flag32_alloc+0x1e>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    2bcc:	d1e7      	bne.n	2b9e <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
    2bce:	f881 c000 	strb.w	ip, [r1]

    return NRFX_SUCCESS;
    2bd2:	4802      	ldr	r0, [pc, #8]	; (2bdc <nrfx_flag32_alloc+0x40>)
}
    2bd4:	bd10      	pop	{r4, pc}
            return NRFX_ERROR_NO_MEM;
    2bd6:	4802      	ldr	r0, [pc, #8]	; (2be0 <nrfx_flag32_alloc+0x44>)
    2bd8:	e7fc      	b.n	2bd4 <nrfx_flag32_alloc+0x38>
    2bda:	bf00      	nop
    2bdc:	0bad0000 	.word	0x0bad0000
    2be0:	0bad0002 	.word	0x0bad0002

00002be4 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    2be4:	6803      	ldr	r3, [r0, #0]
    2be6:	40cb      	lsrs	r3, r1
    2be8:	f013 0f01 	tst.w	r3, #1
    2bec:	d111      	bne.n	2c12 <nrfx_flag32_free+0x2e>
{
    2bee:	b500      	push	{lr}
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
    2bf0:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    2bf2:	2301      	movs	r3, #1
    2bf4:	408b      	lsls	r3, r1
    2bf6:	4313      	orrs	r3, r2
    2bf8:	e8d0 cfef 	ldaex	ip, [r0]
    2bfc:	4594      	cmp	ip, r2
    2bfe:	d104      	bne.n	2c0a <nrfx_flag32_free+0x26>
    2c00:	e8c0 3fee 	stlex	lr, r3, [r0]
    2c04:	f1be 0f00 	cmp.w	lr, #0
    2c08:	d1f6      	bne.n	2bf8 <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    2c0a:	d1f1      	bne.n	2bf0 <nrfx_flag32_free+0xc>

    return NRFX_SUCCESS;
    2c0c:	4802      	ldr	r0, [pc, #8]	; (2c18 <nrfx_flag32_free+0x34>)
}
    2c0e:	f85d fb04 	ldr.w	pc, [sp], #4
        return NRFX_ERROR_INVALID_PARAM;
    2c12:	4802      	ldr	r0, [pc, #8]	; (2c1c <nrfx_flag32_free+0x38>)
}
    2c14:	4770      	bx	lr
    2c16:	bf00      	nop
    2c18:	0bad0000 	.word	0x0bad0000
    2c1c:	0bad0004 	.word	0x0bad0004

00002c20 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    2c20:	4b05      	ldr	r3, [pc, #20]	; (2c38 <nrfx_clock_init+0x18>)
    2c22:	791b      	ldrb	r3, [r3, #4]
    2c24:	b92b      	cbnz	r3, 2c32 <nrfx_clock_init+0x12>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    2c26:	4b04      	ldr	r3, [pc, #16]	; (2c38 <nrfx_clock_init+0x18>)
    2c28:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    2c2a:	2201      	movs	r2, #1
    2c2c:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    2c2e:	4803      	ldr	r0, [pc, #12]	; (2c3c <nrfx_clock_init+0x1c>)
    2c30:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    2c32:	4803      	ldr	r0, [pc, #12]	; (2c40 <nrfx_clock_init+0x20>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    2c34:	4770      	bx	lr
    2c36:	bf00      	nop
    2c38:	20000948 	.word	0x20000948
    2c3c:	0bad0000 	.word	0x0bad0000
    2c40:	0bad000c 	.word	0x0bad000c

00002c44 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    2c44:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2c46:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2c4a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    2c4e:	b163      	cbz	r3, 2c6a <nrfx_power_clock_irq_handler+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2c50:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2c54:	2000      	movs	r0, #0
    2c56:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    2c5a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    2c5e:	2201      	movs	r2, #1
    2c60:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    2c64:	4b28      	ldr	r3, [pc, #160]	; (2d08 <nrfx_power_clock_irq_handler+0xc4>)
    2c66:	681b      	ldr	r3, [r3, #0]
    2c68:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2c6a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2c6e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    2c72:	b1bb      	cbz	r3, 2ca4 <nrfx_power_clock_irq_handler+0x60>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2c74:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2c78:	2200      	movs	r2, #0
    2c7a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    2c7e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2c82:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    2c86:	f002 0203 	and.w	r2, r2, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2c8a:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    2c8e:	2a01      	cmp	r2, #1
    2c90:	d031      	beq.n	2cf6 <nrfx_power_clock_irq_handler+0xb2>
    p_reg->INTENCLR = mask;
    2c92:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2c96:	2202      	movs	r2, #2
    2c98:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        else
#endif
        {
            // After the LF clock external source start invoke user callback.
            nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_LF_STARTED_MASK);
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    2c9c:	4b1a      	ldr	r3, [pc, #104]	; (2d08 <nrfx_power_clock_irq_handler+0xc4>)
    2c9e:	681b      	ldr	r3, [r3, #0]
    2ca0:	2001      	movs	r0, #1
    2ca2:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2ca4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2ca8:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
    2cac:	b173      	cbz	r3, 2ccc <nrfx_power_clock_irq_handler+0x88>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2cae:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2cb2:	2200      	movs	r2, #0
    2cb4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    2cb8:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
    2cbc:	f44f 7280 	mov.w	r2, #256	; 0x100
    2cc0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
    2cc4:	4b10      	ldr	r3, [pc, #64]	; (2d08 <nrfx_power_clock_irq_handler+0xc4>)
    2cc6:	681b      	ldr	r3, [r3, #0]
    2cc8:	2004      	movs	r0, #4
    2cca:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2ccc:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2cd0:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
    2cd4:	b173      	cbz	r3, 2cf4 <nrfx_power_clock_irq_handler+0xb0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2cd6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2cda:	2200      	movs	r2, #0
    2cdc:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    2ce0:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
    2ce4:	f44f 7200 	mov.w	r2, #512	; 0x200
    2ce8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLK192MSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    2cec:	4b06      	ldr	r3, [pc, #24]	; (2d08 <nrfx_power_clock_irq_handler+0xc4>)
    2cee:	681b      	ldr	r3, [r3, #0]
    2cf0:	2005      	movs	r0, #5
    2cf2:	4798      	blx	r3
    }
#endif
}
    2cf4:	bd08      	pop	{r3, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
    2cf6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2cfa:	2202      	movs	r2, #2
    2cfc:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2d00:	2201      	movs	r2, #1
    2d02:	609a      	str	r2, [r3, #8]
}
    2d04:	e7ce      	b.n	2ca4 <nrfx_power_clock_irq_handler+0x60>
    2d06:	bf00      	nop
    2d08:	20000948 	.word	0x20000948

00002d0c <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    2d0c:	b508      	push	{r3, lr}
    2d0e:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
    2d10:	4801      	ldr	r0, [pc, #4]	; (2d18 <nrfx_dppi_channel_alloc+0xc>)
    2d12:	f7ff ff43 	bl	2b9c <nrfx_flag32_alloc>
}
    2d16:	bd08      	pop	{r3, pc}
    2d18:	2000004c 	.word	0x2000004c

00002d1c <nrf_gpio_reconfigure>:
{
    2d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d1e:	461c      	mov	r4, r3
    2d20:	9f05      	ldr	r7, [sp, #20]
    2d22:	9e06      	ldr	r6, [sp, #24]
    *p_pin = pin_number & 0x1F;
    2d24:	f000 0c1f 	and.w	ip, r0, #31
    return pin_number >> 5;
    2d28:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2d2a:	2801      	cmp	r0, #1
    2d2c:	d034      	beq.n	2d98 <nrf_gpio_reconfigure+0x7c>
        case 0: return NRF_P0;
    2d2e:	4d27      	ldr	r5, [pc, #156]	; (2dcc <nrf_gpio_reconfigure+0xb0>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    2d30:	f10c 0380 	add.w	r3, ip, #128	; 0x80
    2d34:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    2d38:	b381      	cbz	r1, 2d9c <nrf_gpio_reconfigure+0x80>
    2d3a:	2001      	movs	r0, #1
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    2d3c:	b382      	cbz	r2, 2da0 <nrf_gpio_reconfigure+0x84>
    2d3e:	f04f 0e02 	mov.w	lr, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    2d42:	ea40 000e 	orr.w	r0, r0, lr
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    2d46:	b374      	cbz	r4, 2da6 <nrf_gpio_reconfigure+0x8a>
    2d48:	f04f 0e0c 	mov.w	lr, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    2d4c:	ea40 000e 	orr.w	r0, r0, lr
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    2d50:	b367      	cbz	r7, 2dac <nrf_gpio_reconfigure+0x90>
    2d52:	f44f 6e70 	mov.w	lr, #3840	; 0xf00
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    2d56:	ea40 000e 	orr.w	r0, r0, lr
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    2d5a:	b356      	cbz	r6, 2db2 <nrf_gpio_reconfigure+0x96>
    2d5c:	f44f 3e40 	mov.w	lr, #196608	; 0x30000
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    2d60:	ea40 000e 	orr.w	r0, r0, lr
    cnf &= ~to_update;
    2d64:	ea23 0000 	bic.w	r0, r3, r0
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    2d68:	b331      	cbz	r1, 2db8 <nrf_gpio_reconfigure+0x9c>
    2d6a:	780b      	ldrb	r3, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    2d6c:	b332      	cbz	r2, 2dbc <nrf_gpio_reconfigure+0xa0>
    2d6e:	7812      	ldrb	r2, [r2, #0]
    2d70:	0052      	lsls	r2, r2, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    2d72:	4313      	orrs	r3, r2
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    2d74:	b324      	cbz	r4, 2dc0 <nrf_gpio_reconfigure+0xa4>
    2d76:	7822      	ldrb	r2, [r4, #0]
    2d78:	0092      	lsls	r2, r2, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    2d7a:	4313      	orrs	r3, r2
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    2d7c:	b317      	cbz	r7, 2dc4 <nrf_gpio_reconfigure+0xa8>
    2d7e:	783a      	ldrb	r2, [r7, #0]
    2d80:	0212      	lsls	r2, r2, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    2d82:	4313      	orrs	r3, r2
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    2d84:	b306      	cbz	r6, 2dc8 <nrf_gpio_reconfigure+0xac>
    2d86:	7832      	ldrb	r2, [r6, #0]
    2d88:	0412      	lsls	r2, r2, #16
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    2d8a:	4313      	orrs	r3, r2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    2d8c:	4303      	orrs	r3, r0
    reg->PIN_CNF[pin_number] = cnf;
    2d8e:	f10c 0c80 	add.w	ip, ip, #128	; 0x80
    2d92:	f845 302c 	str.w	r3, [r5, ip, lsl #2]
}
    2d96:	bdf0      	pop	{r4, r5, r6, r7, pc}
        case 1: return NRF_P1;
    2d98:	4d0d      	ldr	r5, [pc, #52]	; (2dd0 <nrf_gpio_reconfigure+0xb4>)
    2d9a:	e7c9      	b.n	2d30 <nrf_gpio_reconfigure+0x14>
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    2d9c:	2000      	movs	r0, #0
    2d9e:	e7cd      	b.n	2d3c <nrf_gpio_reconfigure+0x20>
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    2da0:	f04f 0e00 	mov.w	lr, #0
    2da4:	e7cd      	b.n	2d42 <nrf_gpio_reconfigure+0x26>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    2da6:	f04f 0e00 	mov.w	lr, #0
    2daa:	e7cf      	b.n	2d4c <nrf_gpio_reconfigure+0x30>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    2dac:	f04f 0e00 	mov.w	lr, #0
    2db0:	e7d1      	b.n	2d56 <nrf_gpio_reconfigure+0x3a>
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    2db2:	f04f 0e00 	mov.w	lr, #0
    2db6:	e7d3      	b.n	2d60 <nrf_gpio_reconfigure+0x44>
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    2db8:	2300      	movs	r3, #0
    2dba:	e7d7      	b.n	2d6c <nrf_gpio_reconfigure+0x50>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    2dbc:	2200      	movs	r2, #0
    2dbe:	e7d8      	b.n	2d72 <nrf_gpio_reconfigure+0x56>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    2dc0:	2200      	movs	r2, #0
    2dc2:	e7da      	b.n	2d7a <nrf_gpio_reconfigure+0x5e>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    2dc4:	2200      	movs	r2, #0
    2dc6:	e7dc      	b.n	2d82 <nrf_gpio_reconfigure+0x66>
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    2dc8:	2200      	movs	r2, #0
    2dca:	e7de      	b.n	2d8a <nrf_gpio_reconfigure+0x6e>
    2dcc:	50842500 	.word	0x50842500
    2dd0:	50842800 	.word	0x50842800

00002dd4 <nrf_gpio_cfg_default>:
    *p_pin = pin_number & 0x1F;
    2dd4:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    2dd8:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2dda:	2801      	cmp	r0, #1
    2ddc:	d00a      	beq.n	2df4 <nrf_gpio_cfg_default+0x20>
        case 0: return NRF_P0;
    2dde:	4906      	ldr	r1, [pc, #24]	; (2df8 <nrf_gpio_cfg_default+0x24>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    2de0:	3280      	adds	r2, #128	; 0x80
    2de2:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    2de6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    2dea:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
    2dee:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    2df2:	4770      	bx	lr
        case 1: return NRF_P1;
    2df4:	4901      	ldr	r1, [pc, #4]	; (2dfc <nrf_gpio_cfg_default+0x28>)
    2df6:	e7f3      	b.n	2de0 <nrf_gpio_cfg_default+0xc>
    2df8:	50842500 	.word	0x50842500
    2dfc:	50842800 	.word	0x50842800

00002e00 <nrf_gpio_latches_read_and_clear>:
{
    2e00:	b500      	push	{lr}
    2e02:	b083      	sub	sp, #12
    2e04:	4684      	mov	ip, r0
    2e06:	468e      	mov	lr, r1
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    2e08:	4b0c      	ldr	r3, [pc, #48]	; (2e3c <nrf_gpio_latches_read_and_clear+0x3c>)
    2e0a:	e893 0003 	ldmia.w	r3, {r0, r1}
    2e0e:	ab02      	add	r3, sp, #8
    2e10:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    2e14:	4663      	mov	r3, ip
    2e16:	e009      	b.n	2e2c <nrf_gpio_latches_read_and_clear+0x2c>
        *p_masks = gpio_regs[i]->LATCH;
    2e18:	a902      	add	r1, sp, #8
    2e1a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    2e1e:	f851 1c08 	ldr.w	r1, [r1, #-8]
    2e22:	6a08      	ldr	r0, [r1, #32]
    2e24:	f842 0b04 	str.w	r0, [r2], #4
        gpio_regs[i]->LATCH = *p_masks;
    2e28:	6208      	str	r0, [r1, #32]
    for (i = start_port; i < (start_port + length); i++)
    2e2a:	3301      	adds	r3, #1
    2e2c:	eb0c 000e 	add.w	r0, ip, lr
    2e30:	4298      	cmp	r0, r3
    2e32:	d8f1      	bhi.n	2e18 <nrf_gpio_latches_read_and_clear+0x18>
}
    2e34:	b003      	add	sp, #12
    2e36:	f85d fb04 	ldr.w	pc, [sp], #4
    2e3a:	bf00      	nop
    2e3c:	00006ba0 	.word	0x00006ba0

00002e40 <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    2e40:	3008      	adds	r0, #8
    2e42:	4b03      	ldr	r3, [pc, #12]	; (2e50 <pin_in_use+0x10>)
    2e44:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    2e48:	f000 0001 	and.w	r0, r0, #1
    2e4c:	4770      	bx	lr
    2e4e:	bf00      	nop
    2e50:	20000050 	.word	0x20000050

00002e54 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    2e54:	3008      	adds	r0, #8
    2e56:	4b03      	ldr	r3, [pc, #12]	; (2e64 <pin_in_use_by_te+0x10>)
    2e58:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    2e5c:	f3c0 1040 	ubfx	r0, r0, #5, #1
    2e60:	4770      	bx	lr
    2e62:	bf00      	nop
    2e64:	20000050 	.word	0x20000050

00002e68 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    2e68:	3008      	adds	r0, #8
    2e6a:	4b04      	ldr	r3, [pc, #16]	; (2e7c <pin_has_trigger+0x14>)
    2e6c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    2e70:	f010 001c 	ands.w	r0, r0, #28
    2e74:	bf18      	it	ne
    2e76:	2001      	movne	r0, #1
    2e78:	4770      	bx	lr
    2e7a:	bf00      	nop
    2e7c:	20000050 	.word	0x20000050

00002e80 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    2e80:	3008      	adds	r0, #8
    2e82:	4b03      	ldr	r3, [pc, #12]	; (2e90 <pin_is_output+0x10>)
    2e84:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    2e88:	f3c0 0040 	ubfx	r0, r0, #1, #1
    2e8c:	4770      	bx	lr
    2e8e:	bf00      	nop
    2e90:	20000050 	.word	0x20000050

00002e94 <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    2e94:	3008      	adds	r0, #8
    2e96:	4b02      	ldr	r3, [pc, #8]	; (2ea0 <pin_te_get+0xc>)
    2e98:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    2e9c:	0b40      	lsrs	r0, r0, #13
    2e9e:	4770      	bx	lr
    2ea0:	20000050 	.word	0x20000050

00002ea4 <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    2ea4:	2200      	movs	r2, #0
    2ea6:	e004      	b.n	2eb2 <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    2ea8:	f04f 33ff 	mov.w	r3, #4294967295
    2eac:	4283      	cmp	r3, r0
    2eae:	d00f      	beq.n	2ed0 <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    2eb0:	3201      	adds	r2, #1
    2eb2:	2a2f      	cmp	r2, #47	; 0x2f
    2eb4:	d80a      	bhi.n	2ecc <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    2eb6:	f102 0308 	add.w	r3, r2, #8
    2eba:	4906      	ldr	r1, [pc, #24]	; (2ed4 <handler_in_use+0x30>)
    2ebc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    2ec0:	f413 7f80 	tst.w	r3, #256	; 0x100
    2ec4:	d0f0      	beq.n	2ea8 <handler_in_use+0x4>
    2ec6:	f3c3 2343 	ubfx	r3, r3, #9, #4
    2eca:	e7ef      	b.n	2eac <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
    2ecc:	2000      	movs	r0, #0
    2ece:	4770      	bx	lr
            return true;
    2ed0:	2001      	movs	r0, #1
}
    2ed2:	4770      	bx	lr
    2ed4:	20000050 	.word	0x20000050

00002ed8 <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    2ed8:	2300      	movs	r3, #0
    2eda:	b113      	cbz	r3, 2ee2 <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
    2edc:	f04f 30ff 	mov.w	r0, #4294967295
}
    2ee0:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    2ee2:	4a07      	ldr	r2, [pc, #28]	; (2f00 <find_handler+0x28>)
    2ee4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    2ee8:	4282      	cmp	r2, r0
    2eea:	d001      	beq.n	2ef0 <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    2eec:	3301      	adds	r3, #1
    2eee:	e7f4      	b.n	2eda <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    2ef0:	4a03      	ldr	r2, [pc, #12]	; (2f00 <find_handler+0x28>)
    2ef2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    2ef6:	6852      	ldr	r2, [r2, #4]
    2ef8:	428a      	cmp	r2, r1
    2efa:	d1f7      	bne.n	2eec <find_handler+0x14>
            return i;
    2efc:	4618      	mov	r0, r3
    2efe:	4770      	bx	lr
    2f00:	20000050 	.word	0x20000050

00002f04 <get_initial_sense>:
    return NRFX_SUCCESS;
}

static inline nrf_gpio_pin_sense_t get_initial_sense(nrfx_gpiote_pin_t pin)
{
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    2f04:	f100 0208 	add.w	r2, r0, #8
    2f08:	4b0e      	ldr	r3, [pc, #56]	; (2f44 <get_initial_sense+0x40>)
    2f0a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    2f0e:	f3c3 0382 	ubfx	r3, r3, #2, #3
    nrf_gpio_pin_sense_t sense;

    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    2f12:	2b04      	cmp	r3, #4
    2f14:	d010      	beq.n	2f38 <get_initial_sense+0x34>
    {
        sense = NRF_GPIO_PIN_SENSE_LOW;
    }
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    2f16:	2b05      	cmp	r3, #5
    2f18:	d010      	beq.n	2f3c <get_initial_sense+0x38>
    *p_pin = pin_number & 0x1F;
    2f1a:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    2f1e:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2f20:	2801      	cmp	r0, #1
    2f22:	d007      	beq.n	2f34 <get_initial_sense+0x30>
        case 0: return NRF_P0;
    2f24:	4b08      	ldr	r3, [pc, #32]	; (2f48 <get_initial_sense+0x44>)
    return p_reg->IN;
    2f26:	691b      	ldr	r3, [r3, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    2f28:	40d3      	lsrs	r3, r2
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    }
    else
    {
        /* If edge detection start with sensing opposite state. */
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    2f2a:	f013 0f01 	tst.w	r3, #1
    2f2e:	d007      	beq.n	2f40 <get_initial_sense+0x3c>
    2f30:	2003      	movs	r0, #3
    2f32:	4770      	bx	lr
        case 1: return NRF_P1;
    2f34:	4b05      	ldr	r3, [pc, #20]	; (2f4c <get_initial_sense+0x48>)
    2f36:	e7f6      	b.n	2f26 <get_initial_sense+0x22>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    2f38:	2003      	movs	r0, #3
    2f3a:	4770      	bx	lr
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    2f3c:	2002      	movs	r0, #2
    2f3e:	4770      	bx	lr
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    2f40:	2002      	movs	r0, #2
    }

    return sense;
}
    2f42:	4770      	bx	lr
    2f44:	20000050 	.word	0x20000050
    2f48:	50842500 	.word	0x50842500
    2f4c:	50842800 	.word	0x50842800

00002f50 <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    2f50:	3008      	adds	r0, #8
    2f52:	4b06      	ldr	r3, [pc, #24]	; (2f6c <channel_handler_get+0x1c>)
    2f54:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    2f58:	f410 7f80 	tst.w	r0, #256	; 0x100
    2f5c:	d004      	beq.n	2f68 <channel_handler_get+0x18>
    2f5e:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
    2f62:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    2f66:	4770      	bx	lr
        return NULL;
    2f68:	2000      	movs	r0, #0
}
    2f6a:	4770      	bx	lr
    2f6c:	20000050 	.word	0x20000050

00002f70 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    2f70:	b570      	push	{r4, r5, r6, lr}
    2f72:	4604      	mov	r4, r0
    2f74:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
    2f76:	f7ff ffeb 	bl	2f50 <channel_handler_get>

    if (handler)
    2f7a:	b120      	cbz	r0, 2f86 <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
    2f7c:	6806      	ldr	r6, [r0, #0]
    2f7e:	6842      	ldr	r2, [r0, #4]
    2f80:	4629      	mov	r1, r5
    2f82:	4620      	mov	r0, r4
    2f84:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
    2f86:	4b04      	ldr	r3, [pc, #16]	; (2f98 <call_handler+0x28>)
    2f88:	689b      	ldr	r3, [r3, #8]
    2f8a:	b123      	cbz	r3, 2f96 <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    2f8c:	4a02      	ldr	r2, [pc, #8]	; (2f98 <call_handler+0x28>)
    2f8e:	68d2      	ldr	r2, [r2, #12]
    2f90:	4629      	mov	r1, r5
    2f92:	4620      	mov	r0, r4
    2f94:	4798      	blx	r3
    }
}
    2f96:	bd70      	pop	{r4, r5, r6, pc}
    2f98:	20000050 	.word	0x20000050

00002f9c <next_sense_cond_call_handler>:

static void next_sense_cond_call_handler(nrfx_gpiote_pin_t     pin,
                                         nrfx_gpiote_trigger_t trigger,
                                         nrf_gpio_pin_sense_t  sense)
{
    2f9c:	b570      	push	{r4, r5, r6, lr}
    2f9e:	4606      	mov	r6, r0
    2fa0:	460c      	mov	r4, r1
    2fa2:	4615      	mov	r5, r2
    if (is_level(trigger))
    2fa4:	4608      	mov	r0, r1
    2fa6:	f003 f9f2 	bl	638e <is_level>
    2faa:	b960      	cbnz	r0, 2fc6 <next_sense_cond_call_handler+0x2a>
    {
        /* Reconfigure sense to the opposite level, so the internal PINx.DETECT signal
         * can be deasserted. Therefore PORT event can be generated again,
         * unless some other PINx.DETECT signal is still active. */
        nrf_gpio_pin_sense_t next_sense = (sense == NRF_GPIO_PIN_SENSE_HIGH) ?
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    2fac:	2d02      	cmp	r5, #2
    2fae:	d026      	beq.n	2ffe <next_sense_cond_call_handler+0x62>
    2fb0:	2102      	movs	r1, #2

        nrf_gpio_cfg_sense_set(pin, next_sense);
    2fb2:	4630      	mov	r0, r6
    2fb4:	f003 f9c3 	bl	633e <nrf_gpio_cfg_sense_set>

        /* Invoke user handler only if the sensed pin level matches its polarity
         * configuration. Call handler unconditionally in case of toggle trigger or
         * level trigger. */
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    2fb8:	2c03      	cmp	r4, #3
    2fba:	d024      	beq.n	3006 <next_sense_cond_call_handler+0x6a>
    2fbc:	2d02      	cmp	r5, #2
    2fbe:	d020      	beq.n	3002 <next_sense_cond_call_handler+0x66>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    2fc0:	2d03      	cmp	r5, #3
    2fc2:	d025      	beq.n	3010 <next_sense_cond_call_handler+0x74>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
        {
            call_handler(pin, trigger);
        }
    }
}
    2fc4:	bd70      	pop	{r4, r5, r6, pc}
        call_handler(pin, trigger);
    2fc6:	4621      	mov	r1, r4
    2fc8:	4630      	mov	r0, r6
    2fca:	f7ff ffd1 	bl	2f70 <call_handler>
    *p_pin = pin_number & 0x1F;
    2fce:	f006 031f 	and.w	r3, r6, #31
    return pin_number >> 5;
    2fd2:	0972      	lsrs	r2, r6, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2fd4:	2a01      	cmp	r2, #1
    2fd6:	d010      	beq.n	2ffa <next_sense_cond_call_handler+0x5e>
        case 0: return NRF_P0;
    2fd8:	4a0f      	ldr	r2, [pc, #60]	; (3018 <next_sense_cond_call_handler+0x7c>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    2fda:	3380      	adds	r3, #128	; 0x80
    2fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2fe0:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
    2fe4:	429d      	cmp	r5, r3
    2fe6:	d1ed      	bne.n	2fc4 <next_sense_cond_call_handler+0x28>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    2fe8:	2100      	movs	r1, #0
    2fea:	4630      	mov	r0, r6
    2fec:	f003 f9a7 	bl	633e <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    2ff0:	4629      	mov	r1, r5
    2ff2:	4630      	mov	r0, r6
    2ff4:	f003 f9a3 	bl	633e <nrf_gpio_cfg_sense_set>
    2ff8:	e7e4      	b.n	2fc4 <next_sense_cond_call_handler+0x28>
        case 1: return NRF_P1;
    2ffa:	4a08      	ldr	r2, [pc, #32]	; (301c <next_sense_cond_call_handler+0x80>)
    2ffc:	e7ed      	b.n	2fda <next_sense_cond_call_handler+0x3e>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    2ffe:	2103      	movs	r1, #3
    3000:	e7d7      	b.n	2fb2 <next_sense_cond_call_handler+0x16>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    3002:	2c01      	cmp	r4, #1
    3004:	d1dc      	bne.n	2fc0 <next_sense_cond_call_handler+0x24>
            call_handler(pin, trigger);
    3006:	4621      	mov	r1, r4
    3008:	4630      	mov	r0, r6
    300a:	f7ff ffb1 	bl	2f70 <call_handler>
}
    300e:	e7d9      	b.n	2fc4 <next_sense_cond_call_handler+0x28>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    3010:	2c02      	cmp	r4, #2
    3012:	d1d7      	bne.n	2fc4 <next_sense_cond_call_handler+0x28>
    3014:	e7f7      	b.n	3006 <next_sense_cond_call_handler+0x6a>
    3016:	bf00      	nop
    3018:	50842500 	.word	0x50842500
    301c:	50842800 	.word	0x50842800

00003020 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3020:	f100 0208 	add.w	r2, r0, #8
    3024:	4b0e      	ldr	r3, [pc, #56]	; (3060 <release_handler+0x40>)
    3026:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    302a:	f413 7f80 	tst.w	r3, #256	; 0x100
    302e:	d016      	beq.n	305e <release_handler+0x3e>
{
    3030:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3032:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    3036:	4610      	mov	r0, r2
    3038:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    303c:	4a08      	ldr	r2, [pc, #32]	; (3060 <release_handler+0x40>)
    303e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
    3042:	4620      	mov	r0, r4
    3044:	f7ff ff2e 	bl	2ea4 <handler_in_use>
    3048:	b100      	cbz	r0, 304c <release_handler+0x2c>
}
    304a:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
    304c:	4804      	ldr	r0, [pc, #16]	; (3060 <release_handler+0x40>)
    304e:	2300      	movs	r3, #0
    3050:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    3054:	4621      	mov	r1, r4
    3056:	3074      	adds	r0, #116	; 0x74
    3058:	f7ff fdc4 	bl	2be4 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    305c:	e7f5      	b.n	304a <release_handler+0x2a>
    305e:	4770      	bx	lr
    3060:	20000050 	.word	0x20000050

00003064 <pin_handler_trigger_uninit>:
{
    3064:	b510      	push	{r4, lr}
    3066:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
    3068:	f7ff fef4 	bl	2e54 <pin_in_use_by_te>
    306c:	b150      	cbz	r0, 3084 <pin_handler_trigger_uninit+0x20>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    306e:	4620      	mov	r0, r4
    3070:	f7ff ff10 	bl	2e94 <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    3074:	4b08      	ldr	r3, [pc, #32]	; (3098 <pin_handler_trigger_uninit+0x34>)
    3076:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    307a:	2200      	movs	r2, #0
    307c:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
    3080:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
    3084:	4620      	mov	r0, r4
    3086:	f7ff ffcb 	bl	3020 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    308a:	3408      	adds	r4, #8
    308c:	4b03      	ldr	r3, [pc, #12]	; (309c <pin_handler_trigger_uninit+0x38>)
    308e:	2200      	movs	r2, #0
    3090:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
    3094:	bd10      	pop	{r4, pc}
    3096:	bf00      	nop
    3098:	5000d000 	.word	0x5000d000
    309c:	20000050 	.word	0x20000050

000030a0 <pin_handler_set>:
{
    30a0:	b570      	push	{r4, r5, r6, lr}
    30a2:	b082      	sub	sp, #8
    30a4:	4605      	mov	r5, r0
    30a6:	460e      	mov	r6, r1
    30a8:	4614      	mov	r4, r2
    release_handler(pin);
    30aa:	f7ff ffb9 	bl	3020 <release_handler>
    if (!handler)
    30ae:	b326      	cbz	r6, 30fa <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
    30b0:	4621      	mov	r1, r4
    30b2:	4630      	mov	r0, r6
    30b4:	f7ff ff10 	bl	2ed8 <find_handler>
    if (handler_id < 0)
    30b8:	1e03      	subs	r3, r0, #0
    30ba:	db13      	blt.n	30e4 <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
    30bc:	4910      	ldr	r1, [pc, #64]	; (3100 <pin_handler_set+0x60>)
    30be:	f841 6033 	str.w	r6, [r1, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    30c2:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
    30c6:	6054      	str	r4, [r2, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    30c8:	f105 0008 	add.w	r0, r5, #8
    30cc:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
    30d0:	025b      	lsls	r3, r3, #9
    30d2:	b29b      	uxth	r3, r3
    30d4:	4313      	orrs	r3, r2
    30d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    30da:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
    return NRFX_SUCCESS;
    30de:	4809      	ldr	r0, [pc, #36]	; (3104 <pin_handler_set+0x64>)
}
    30e0:	b002      	add	sp, #8
    30e2:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    30e4:	f10d 0107 	add.w	r1, sp, #7
    30e8:	4807      	ldr	r0, [pc, #28]	; (3108 <pin_handler_set+0x68>)
    30ea:	f7ff fd57 	bl	2b9c <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    30ee:	4b05      	ldr	r3, [pc, #20]	; (3104 <pin_handler_set+0x64>)
    30f0:	4298      	cmp	r0, r3
    30f2:	d1f5      	bne.n	30e0 <pin_handler_set+0x40>
        handler_id = (int32_t)id;
    30f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    30f8:	e7e0      	b.n	30bc <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
    30fa:	4802      	ldr	r0, [pc, #8]	; (3104 <pin_handler_set+0x64>)
    30fc:	e7f0      	b.n	30e0 <pin_handler_set+0x40>
    30fe:	bf00      	nop
    3100:	20000050 	.word	0x20000050
    3104:	0bad0000 	.word	0x0bad0000
    3108:	200000c4 	.word	0x200000c4

0000310c <port_event_handle>:
    }
    return false;
}

static void port_event_handle(void)
{
    310c:	b570      	push	{r4, r5, r6, lr}
    310e:	b082      	sub	sp, #8
    uint32_t latch[GPIO_COUNT];

    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);
    3110:	466a      	mov	r2, sp
    3112:	2102      	movs	r1, #2
    3114:	2000      	movs	r0, #0
    3116:	f7ff fe73 	bl	2e00 <nrf_gpio_latches_read_and_clear>
    311a:	e03e      	b.n	319a <port_event_handle+0x8e>
    311c:	4e21      	ldr	r6, [pc, #132]	; (31a4 <port_event_handle+0x98>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    311e:	f105 0380 	add.w	r3, r5, #128	; 0x80
    3122:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);

                nrf_bitmask_bit_clear(pin, latch);
                sense = nrf_gpio_pin_sense_get(pin);

                next_sense_cond_call_handler(pin, trigger, sense);
    3126:	f3c2 4201 	ubfx	r2, r2, #16, #2
    312a:	f7ff ff37 	bl	2f9c <next_sense_cond_call_handler>
    reg->LATCH = (1 << pin_number);
    312e:	2301      	movs	r3, #1
    3130:	40ab      	lsls	r3, r5
    3132:	6233      	str	r3, [r6, #32]
            while (latch[i])
    3134:	ab02      	add	r3, sp, #8
    3136:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    313a:	f853 0c08 	ldr.w	r0, [r3, #-8]
    313e:	b1f8      	cbz	r0, 3180 <port_event_handle+0x74>
                uint32_t pin = NRF_CTZ(latch[i]);
    3140:	fa90 f0a0 	rbit	r0, r0
    3144:	fab0 f080 	clz	r0, r0
                pin += 32 * i;
    3148:	eb00 1044 	add.w	r0, r0, r4, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    314c:	f100 0208 	add.w	r2, r0, #8
    3150:	4b15      	ldr	r3, [pc, #84]	; (31a8 <port_event_handle+0x9c>)
    3152:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
    3156:	f3c1 0182 	ubfx	r1, r1, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    315a:	08c5      	lsrs	r5, r0, #3
    bit = BITMASK_RELBIT_GET(bit);
    315c:	f000 0607 	and.w	r6, r0, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    3160:	f81d 2005 	ldrb.w	r2, [sp, r5]
    3164:	2301      	movs	r3, #1
    3166:	40b3      	lsls	r3, r6
    3168:	43db      	mvns	r3, r3
    316a:	b25b      	sxtb	r3, r3
    316c:	4013      	ands	r3, r2
    316e:	f80d 3005 	strb.w	r3, [sp, r5]
    *p_pin = pin_number & 0x1F;
    3172:	f000 051f 	and.w	r5, r0, #31
    return pin_number >> 5;
    3176:	0943      	lsrs	r3, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3178:	2b01      	cmp	r3, #1
    317a:	d0cf      	beq.n	311c <port_event_handle+0x10>
        case 0: return NRF_P0;
    317c:	4e0b      	ldr	r6, [pc, #44]	; (31ac <port_event_handle+0xa0>)
    317e:	e7ce      	b.n	311e <port_event_handle+0x12>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    3180:	3401      	adds	r4, #1
    3182:	2c01      	cmp	r4, #1
    3184:	d9d6      	bls.n	3134 <port_event_handle+0x28>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3186:	4b0a      	ldr	r3, [pc, #40]	; (31b0 <port_event_handle+0xa4>)
    3188:	2200      	movs	r2, #0
    318a:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    318e:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        }

        /* All pins have been handled, clear PORT, check latch again in case
         * something came between deciding to exit and clearing PORT event. */
        nrf_gpiote_event_clear(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT);
    } while (latch_pending_read_and_check(latch));
    3192:	4668      	mov	r0, sp
    3194:	f003 f900 	bl	6398 <latch_pending_read_and_check>
    3198:	b108      	cbz	r0, 319e <port_event_handle+0x92>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    319a:	2400      	movs	r4, #0
    319c:	e7f1      	b.n	3182 <port_event_handle+0x76>
}
    319e:	b002      	add	sp, #8
    31a0:	bd70      	pop	{r4, r5, r6, pc}
    31a2:	bf00      	nop
    31a4:	50842800 	.word	0x50842800
    31a8:	20000050 	.word	0x20000050
    31ac:	50842500 	.word	0x50842500
    31b0:	5000d000 	.word	0x5000d000

000031b4 <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
    31b4:	b538      	push	{r3, r4, r5, lr}
    31b6:	4604      	mov	r4, r0
    while (mask)
    31b8:	e018      	b.n	31ec <gpiote_evt_handle+0x38>
    {
        uint32_t ch = NRF_CTZ(mask);
    31ba:	fa94 f3a4 	rbit	r3, r4
    31be:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    31c2:	2201      	movs	r2, #1
    31c4:	409a      	lsls	r2, r3
    31c6:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    31ca:	4a0a      	ldr	r2, [pc, #40]	; (31f4 <gpiote_evt_handle+0x40>)
    31cc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    31d0:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    31d4:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    31d8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    31dc:	f3c0 4001 	ubfx	r0, r0, #16, #2
    31e0:	f003 f8d3 	bl	638a <gpiote_polarity_to_trigger>
    31e4:	4601      	mov	r1, r0
    31e6:	4628      	mov	r0, r5
    31e8:	f7ff fec2 	bl	2f70 <call_handler>
    while (mask)
    31ec:	2c00      	cmp	r4, #0
    31ee:	d1e4      	bne.n	31ba <gpiote_evt_handle+0x6>
    }
}
    31f0:	bd38      	pop	{r3, r4, r5, pc}
    31f2:	bf00      	nop
    31f4:	5000d000 	.word	0x5000d000

000031f8 <nrfx_gpiote_input_configure>:
{
    31f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    31fc:	b084      	sub	sp, #16
    31fe:	4604      	mov	r4, r0
    3200:	4615      	mov	r5, r2
    3202:	461e      	mov	r6, r3
    if (p_input_config)
    3204:	b309      	cbz	r1, 324a <nrfx_gpiote_input_configure+0x52>
    3206:	460f      	mov	r7, r1
        if (pin_is_task_output(pin))
    3208:	f003 f8a9 	bl	635e <pin_is_task_output>
    320c:	2800      	cmp	r0, #0
    320e:	d13f      	bne.n	3290 <nrfx_gpiote_input_configure+0x98>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    3210:	2300      	movs	r3, #0
    3212:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    3216:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    321a:	9301      	str	r3, [sp, #4]
    321c:	9300      	str	r3, [sp, #0]
    321e:	463b      	mov	r3, r7
    3220:	f10d 020f 	add.w	r2, sp, #15
    3224:	f10d 010e 	add.w	r1, sp, #14
    3228:	4620      	mov	r0, r4
    322a:	f7ff fd77 	bl	2d1c <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    322e:	4a39      	ldr	r2, [pc, #228]	; (3314 <nrfx_gpiote_input_configure+0x11c>)
    3230:	f104 0108 	add.w	r1, r4, #8
    3234:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    3238:	f023 0302 	bic.w	r3, r3, #2
    323c:	b29b      	uxth	r3, r3
    323e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    3242:	f043 0301 	orr.w	r3, r3, #1
    3246:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    324a:	b1bd      	cbz	r5, 327c <nrfx_gpiote_input_configure+0x84>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    324c:	782f      	ldrb	r7, [r5, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    324e:	f8d5 8004 	ldr.w	r8, [r5, #4]
        if (pin_is_output(pin))
    3252:	4620      	mov	r0, r4
    3254:	f7ff fe14 	bl	2e80 <pin_is_output>
    3258:	b1e0      	cbz	r0, 3294 <nrfx_gpiote_input_configure+0x9c>
            if (use_evt)
    325a:	f1b8 0f00 	cmp.w	r8, #0
    325e:	d153      	bne.n	3308 <nrfx_gpiote_input_configure+0x110>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    3260:	4a2c      	ldr	r2, [pc, #176]	; (3314 <nrfx_gpiote_input_configure+0x11c>)
    3262:	f104 0108 	add.w	r1, r4, #8
    3266:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    326a:	f023 031c 	bic.w	r3, r3, #28
    326e:	b29b      	uxth	r3, r3
    3270:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    3274:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
    3278:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
    327c:	2e00      	cmp	r6, #0
    327e:	d047      	beq.n	3310 <nrfx_gpiote_input_configure+0x118>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    3280:	6872      	ldr	r2, [r6, #4]
    3282:	6831      	ldr	r1, [r6, #0]
    3284:	4620      	mov	r0, r4
    3286:	f7ff ff0b 	bl	30a0 <pin_handler_set>
}
    328a:	b004      	add	sp, #16
    328c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return NRFX_ERROR_INVALID_PARAM;
    3290:	4821      	ldr	r0, [pc, #132]	; (3318 <nrfx_gpiote_input_configure+0x120>)
    3292:	e7fa      	b.n	328a <nrfx_gpiote_input_configure+0x92>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    3294:	4a1f      	ldr	r2, [pc, #124]	; (3314 <nrfx_gpiote_input_configure+0x11c>)
    3296:	f104 0108 	add.w	r1, r4, #8
    329a:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    329e:	f023 0320 	bic.w	r3, r3, #32
    32a2:	04db      	lsls	r3, r3, #19
    32a4:	0cdb      	lsrs	r3, r3, #19
    32a6:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            if (use_evt)
    32aa:	f1b8 0f00 	cmp.w	r8, #0
    32ae:	d0d7      	beq.n	3260 <nrfx_gpiote_input_configure+0x68>
                if (!edge)
    32b0:	2f03      	cmp	r7, #3
    32b2:	d82b      	bhi.n	330c <nrfx_gpiote_input_configure+0x114>
                uint8_t ch = *p_trigger_config->p_in_channel;
    32b4:	686b      	ldr	r3, [r5, #4]
    32b6:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    32b8:	b947      	cbnz	r7, 32cc <nrfx_gpiote_input_configure+0xd4>
    p_reg->CONFIG[idx] = 0;
    32ba:	4b18      	ldr	r3, [pc, #96]	; (331c <nrfx_gpiote_input_configure+0x124>)
    32bc:	f505 75a2 	add.w	r5, r5, #324	; 0x144
    32c0:	2200      	movs	r2, #0
    32c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    p_reg->CONFIG[idx] = 0;
    32c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#endif
}
    32ca:	e7c9      	b.n	3260 <nrfx_gpiote_input_configure+0x68>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
    32cc:	4638      	mov	r0, r7
    32ce:	f003 f85d 	bl	638c <gpiote_trigger_to_polarity>
    32d2:	4603      	mov	r3, r0
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    32d4:	4811      	ldr	r0, [pc, #68]	; (331c <nrfx_gpiote_input_configure+0x124>)
    32d6:	f505 71a2 	add.w	r1, r5, #324	; 0x144
    32da:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
    32de:	f022 0203 	bic.w	r2, r2, #3
    32e2:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
                    nrf_gpiote_event_configure(NRF_GPIOTE, ch, pin, polarity);
    32e6:	4622      	mov	r2, r4
    32e8:	4629      	mov	r1, r5
    32ea:	f002 fff0 	bl	62ce <nrf_gpiote_event_configure>
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    32ee:	4a09      	ldr	r2, [pc, #36]	; (3314 <nrfx_gpiote_input_configure+0x11c>)
    32f0:	f104 0108 	add.w	r1, r4, #8
    32f4:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    32f8:	036d      	lsls	r5, r5, #13
    32fa:	b2ad      	uxth	r5, r5
    32fc:	432b      	orrs	r3, r5
    32fe:	f043 0320 	orr.w	r3, r3, #32
    3302:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    3306:	e7ab      	b.n	3260 <nrfx_gpiote_input_configure+0x68>
                return NRFX_ERROR_INVALID_PARAM;
    3308:	4803      	ldr	r0, [pc, #12]	; (3318 <nrfx_gpiote_input_configure+0x120>)
    330a:	e7be      	b.n	328a <nrfx_gpiote_input_configure+0x92>
                    return NRFX_ERROR_INVALID_PARAM;
    330c:	4802      	ldr	r0, [pc, #8]	; (3318 <nrfx_gpiote_input_configure+0x120>)
    330e:	e7bc      	b.n	328a <nrfx_gpiote_input_configure+0x92>
        err = NRFX_SUCCESS;
    3310:	4803      	ldr	r0, [pc, #12]	; (3320 <nrfx_gpiote_input_configure+0x128>)
    3312:	e7ba      	b.n	328a <nrfx_gpiote_input_configure+0x92>
    3314:	20000050 	.word	0x20000050
    3318:	0bad0004 	.word	0x0bad0004
    331c:	5000d000 	.word	0x5000d000
    3320:	0bad0000 	.word	0x0bad0000

00003324 <nrfx_gpiote_output_configure>:
{
    3324:	b570      	push	{r4, r5, r6, lr}
    3326:	b084      	sub	sp, #16
    3328:	4604      	mov	r4, r0
    332a:	4615      	mov	r5, r2
    if (p_config)
    332c:	b329      	cbz	r1, 337a <nrfx_gpiote_output_configure+0x56>
    332e:	460e      	mov	r6, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    3330:	f003 f824 	bl	637c <pin_is_input>
    3334:	b120      	cbz	r0, 3340 <nrfx_gpiote_output_configure+0x1c>
    3336:	4620      	mov	r0, r4
    3338:	f7ff fd8c 	bl	2e54 <pin_in_use_by_te>
    333c:	2800      	cmp	r0, #0
    333e:	d13a      	bne.n	33b6 <nrfx_gpiote_output_configure+0x92>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    3340:	4620      	mov	r0, r4
    3342:	f7ff fd91 	bl	2e68 <pin_has_trigger>
    3346:	b110      	cbz	r0, 334e <nrfx_gpiote_output_configure+0x2a>
    3348:	7873      	ldrb	r3, [r6, #1]
    334a:	2b01      	cmp	r3, #1
    334c:	d033      	beq.n	33b6 <nrfx_gpiote_output_configure+0x92>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    334e:	2301      	movs	r3, #1
    3350:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    3354:	2300      	movs	r3, #0
    3356:	9301      	str	r3, [sp, #4]
    3358:	9600      	str	r6, [sp, #0]
    335a:	1cb3      	adds	r3, r6, #2
    335c:	1c72      	adds	r2, r6, #1
    335e:	f10d 010f 	add.w	r1, sp, #15
    3362:	4620      	mov	r0, r4
    3364:	f7ff fcda 	bl	2d1c <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    3368:	4a20      	ldr	r2, [pc, #128]	; (33ec <nrfx_gpiote_output_configure+0xc8>)
    336a:	f104 0108 	add.w	r1, r4, #8
    336e:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    3372:	f043 0303 	orr.w	r3, r3, #3
    3376:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    337a:	b395      	cbz	r5, 33e2 <nrfx_gpiote_output_configure+0xbe>
        if (pin_is_input(pin))
    337c:	4620      	mov	r0, r4
    337e:	f002 fffd 	bl	637c <pin_is_input>
    3382:	bb80      	cbnz	r0, 33e6 <nrfx_gpiote_output_configure+0xc2>
        uint32_t ch = p_task_config->task_ch;
    3384:	782e      	ldrb	r6, [r5, #0]
    p_reg->CONFIG[idx] = 0;
    3386:	4b1a      	ldr	r3, [pc, #104]	; (33f0 <nrfx_gpiote_output_configure+0xcc>)
    3388:	f506 72a2 	add.w	r2, r6, #324	; 0x144
    338c:	2100      	movs	r1, #0
    338e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    p_reg->CONFIG[idx] = 0;
    3392:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    3396:	4a15      	ldr	r2, [pc, #84]	; (33ec <nrfx_gpiote_output_configure+0xc8>)
    3398:	f104 0108 	add.w	r1, r4, #8
    339c:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    33a0:	f023 0320 	bic.w	r3, r3, #32
    33a4:	04db      	lsls	r3, r3, #19
    33a6:	0cdb      	lsrs	r3, r3, #19
    33a8:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    33ac:	786b      	ldrb	r3, [r5, #1]
    33ae:	b923      	cbnz	r3, 33ba <nrfx_gpiote_output_configure+0x96>
    return NRFX_SUCCESS;
    33b0:	4810      	ldr	r0, [pc, #64]	; (33f4 <nrfx_gpiote_output_configure+0xd0>)
}
    33b2:	b004      	add	sp, #16
    33b4:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_INVALID_PARAM;
    33b6:	4810      	ldr	r0, [pc, #64]	; (33f8 <nrfx_gpiote_output_configure+0xd4>)
    33b8:	e7fb      	b.n	33b2 <nrfx_gpiote_output_configure+0x8e>
                                      p_task_config->init_val);
    33ba:	78aa      	ldrb	r2, [r5, #2]
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    33bc:	9200      	str	r2, [sp, #0]
    33be:	4622      	mov	r2, r4
    33c0:	4631      	mov	r1, r6
    33c2:	480b      	ldr	r0, [pc, #44]	; (33f0 <nrfx_gpiote_output_configure+0xcc>)
    33c4:	f002 ff9c 	bl	6300 <nrf_gpiote_task_configure>
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    33c8:	4a08      	ldr	r2, [pc, #32]	; (33ec <nrfx_gpiote_output_configure+0xc8>)
    33ca:	3408      	adds	r4, #8
    33cc:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
    33d0:	0376      	lsls	r6, r6, #13
    33d2:	b2b6      	uxth	r6, r6
    33d4:	4333      	orrs	r3, r6
    33d6:	f043 0320 	orr.w	r3, r3, #32
    33da:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    return NRFX_SUCCESS;
    33de:	4805      	ldr	r0, [pc, #20]	; (33f4 <nrfx_gpiote_output_configure+0xd0>)
    33e0:	e7e7      	b.n	33b2 <nrfx_gpiote_output_configure+0x8e>
    33e2:	4804      	ldr	r0, [pc, #16]	; (33f4 <nrfx_gpiote_output_configure+0xd0>)
    33e4:	e7e5      	b.n	33b2 <nrfx_gpiote_output_configure+0x8e>
            return NRFX_ERROR_INVALID_PARAM;
    33e6:	4804      	ldr	r0, [pc, #16]	; (33f8 <nrfx_gpiote_output_configure+0xd4>)
    33e8:	e7e3      	b.n	33b2 <nrfx_gpiote_output_configure+0x8e>
    33ea:	bf00      	nop
    33ec:	20000050 	.word	0x20000050
    33f0:	5000d000 	.word	0x5000d000
    33f4:	0bad0000 	.word	0x0bad0000
    33f8:	0bad0004 	.word	0x0bad0004

000033fc <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    33fc:	4b01      	ldr	r3, [pc, #4]	; (3404 <nrfx_gpiote_global_callback_set+0x8>)
    33fe:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
    3400:	60d9      	str	r1, [r3, #12]
}
    3402:	4770      	bx	lr
    3404:	20000050 	.word	0x20000050

00003408 <nrfx_gpiote_channel_get>:
{
    3408:	b538      	push	{r3, r4, r5, lr}
    340a:	4604      	mov	r4, r0
    340c:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin))
    340e:	f7ff fd21 	bl	2e54 <pin_in_use_by_te>
    3412:	b140      	cbz	r0, 3426 <nrfx_gpiote_channel_get+0x1e>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3414:	f104 0008 	add.w	r0, r4, #8
    3418:	4b04      	ldr	r3, [pc, #16]	; (342c <nrfx_gpiote_channel_get+0x24>)
    341a:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
    341e:	0b5b      	lsrs	r3, r3, #13
    3420:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
    3422:	4803      	ldr	r0, [pc, #12]	; (3430 <nrfx_gpiote_channel_get+0x28>)
}
    3424:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
    3426:	4803      	ldr	r0, [pc, #12]	; (3434 <nrfx_gpiote_channel_get+0x2c>)
    3428:	e7fc      	b.n	3424 <nrfx_gpiote_channel_get+0x1c>
    342a:	bf00      	nop
    342c:	20000050 	.word	0x20000050
    3430:	0bad0000 	.word	0x0bad0000
    3434:	0bad0004 	.word	0x0bad0004

00003438 <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    3438:	4b0f      	ldr	r3, [pc, #60]	; (3478 <nrfx_gpiote_init+0x40>)
    343a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    343e:	b10b      	cbz	r3, 3444 <nrfx_gpiote_init+0xc>
        return err_code;
    3440:	480e      	ldr	r0, [pc, #56]	; (347c <nrfx_gpiote_init+0x44>)
}
    3442:	4770      	bx	lr
{
    3444:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    3446:	4c0e      	ldr	r4, [pc, #56]	; (3480 <nrfx_gpiote_init+0x48>)
    3448:	2260      	movs	r2, #96	; 0x60
    344a:	2100      	movs	r1, #0
    344c:	4620      	mov	r0, r4
    344e:	f002 f8b8 	bl	55c2 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    3452:	200d      	movs	r0, #13
    3454:	f001 ff9f 	bl	5396 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3458:	4b0a      	ldr	r3, [pc, #40]	; (3484 <nrfx_gpiote_init+0x4c>)
    345a:	2200      	movs	r2, #0
    345c:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    3460:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    3464:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    3468:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    346c:	2301      	movs	r3, #1
    346e:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    3472:	6663      	str	r3, [r4, #100]	; 0x64
    return err_code;
    3474:	4804      	ldr	r0, [pc, #16]	; (3488 <nrfx_gpiote_init+0x50>)
}
    3476:	bd10      	pop	{r4, pc}
    3478:	20000050 	.word	0x20000050
    347c:	0bad0005 	.word	0x0bad0005
    3480:	20000060 	.word	0x20000060
    3484:	5000d000 	.word	0x5000d000
    3488:	0bad0000 	.word	0x0bad0000

0000348c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    348c:	4b03      	ldr	r3, [pc, #12]	; (349c <nrfx_gpiote_is_init+0x10>)
    348e:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    3492:	3800      	subs	r0, #0
    3494:	bf18      	it	ne
    3496:	2001      	movne	r0, #1
    3498:	4770      	bx	lr
    349a:	bf00      	nop
    349c:	20000050 	.word	0x20000050

000034a0 <nrfx_gpiote_channel_free>:
{
    34a0:	b508      	push	{r3, lr}
    34a2:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    34a4:	4801      	ldr	r0, [pc, #4]	; (34ac <nrfx_gpiote_channel_free+0xc>)
    34a6:	f7ff fb9d 	bl	2be4 <nrfx_flag32_free>
}
    34aa:	bd08      	pop	{r3, pc}
    34ac:	200000c0 	.word	0x200000c0

000034b0 <nrfx_gpiote_channel_alloc>:
{
    34b0:	b508      	push	{r3, lr}
    34b2:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    34b4:	4801      	ldr	r0, [pc, #4]	; (34bc <nrfx_gpiote_channel_alloc+0xc>)
    34b6:	f7ff fb71 	bl	2b9c <nrfx_flag32_alloc>
}
    34ba:	bd08      	pop	{r3, pc}
    34bc:	200000c0 	.word	0x200000c0

000034c0 <nrfx_gpiote_trigger_enable>:
{
    34c0:	b538      	push	{r3, r4, r5, lr}
    34c2:	4604      	mov	r4, r0
    34c4:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    34c6:	f7ff fcc5 	bl	2e54 <pin_in_use_by_te>
    34ca:	b300      	cbz	r0, 350e <nrfx_gpiote_trigger_enable+0x4e>
    34cc:	4620      	mov	r0, r4
    34ce:	f002 ff55 	bl	637c <pin_is_input>
    34d2:	b1e0      	cbz	r0, 350e <nrfx_gpiote_trigger_enable+0x4e>
        uint8_t ch = pin_te_get(pin);
    34d4:	4620      	mov	r0, r4
    34d6:	f7ff fcdd 	bl	2e94 <pin_te_get>
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    34da:	0083      	lsls	r3, r0, #2
    34dc:	f503 7380 	add.w	r3, r3, #256	; 0x100
    return ((uint32_t)p_reg + event);
    34e0:	b29b      	uxth	r3, r3
    34e2:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    34e6:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    34ea:	2200      	movs	r2, #0
    34ec:	601a      	str	r2, [r3, #0]
    34ee:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    34f0:	4a0b      	ldr	r2, [pc, #44]	; (3520 <nrfx_gpiote_trigger_enable+0x60>)
    34f2:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    34f6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    34fa:	f043 0301 	orr.w	r3, r3, #1
    34fe:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
    3502:	b15d      	cbz	r5, 351c <nrfx_gpiote_trigger_enable+0x5c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    3504:	2301      	movs	r3, #1
    3506:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    3508:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    350c:	e006      	b.n	351c <nrfx_gpiote_trigger_enable+0x5c>
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    350e:	4620      	mov	r0, r4
    3510:	f7ff fcf8 	bl	2f04 <get_initial_sense>
    3514:	4601      	mov	r1, r0
    3516:	4620      	mov	r0, r4
    3518:	f002 ff11 	bl	633e <nrf_gpio_cfg_sense_set>
}
    351c:	bd38      	pop	{r3, r4, r5, pc}
    351e:	bf00      	nop
    3520:	5000d000 	.word	0x5000d000

00003524 <nrfx_gpiote_trigger_disable>:
{
    3524:	b510      	push	{r4, lr}
    3526:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3528:	f7ff fc94 	bl	2e54 <pin_in_use_by_te>
    352c:	b1a0      	cbz	r0, 3558 <nrfx_gpiote_trigger_disable+0x34>
    352e:	4620      	mov	r0, r4
    3530:	f002 ff24 	bl	637c <pin_is_input>
    3534:	b180      	cbz	r0, 3558 <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
    3536:	4620      	mov	r0, r4
    3538:	f7ff fcac 	bl	2e94 <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    353c:	2201      	movs	r2, #1
    353e:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    3540:	4b08      	ldr	r3, [pc, #32]	; (3564 <nrfx_gpiote_trigger_disable+0x40>)
    3542:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    3546:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    354a:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    354e:	f022 0203 	bic.w	r2, r2, #3
    3552:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
    3556:	e003      	b.n	3560 <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    3558:	2100      	movs	r1, #0
    355a:	4620      	mov	r0, r4
    355c:	f002 feef 	bl	633e <nrf_gpio_cfg_sense_set>
}
    3560:	bd10      	pop	{r4, pc}
    3562:	bf00      	nop
    3564:	5000d000 	.word	0x5000d000

00003568 <nrfx_gpiote_pin_uninit>:
{
    3568:	b510      	push	{r4, lr}
    356a:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    356c:	f7ff fc68 	bl	2e40 <pin_in_use>
    3570:	b908      	cbnz	r0, 3576 <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
    3572:	4806      	ldr	r0, [pc, #24]	; (358c <nrfx_gpiote_pin_uninit+0x24>)
}
    3574:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_disable(pin);
    3576:	4620      	mov	r0, r4
    3578:	f7ff ffd4 	bl	3524 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    357c:	4620      	mov	r0, r4
    357e:	f7ff fd71 	bl	3064 <pin_handler_trigger_uninit>
    nrf_gpio_cfg_default(pin);
    3582:	4620      	mov	r0, r4
    3584:	f7ff fc26 	bl	2dd4 <nrf_gpio_cfg_default>
    return NRFX_SUCCESS;
    3588:	4801      	ldr	r0, [pc, #4]	; (3590 <nrfx_gpiote_pin_uninit+0x28>)
    358a:	e7f3      	b.n	3574 <nrfx_gpiote_pin_uninit+0xc>
    358c:	0bad0004 	.word	0x0bad0004
    3590:	0bad0000 	.word	0x0bad0000

00003594 <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
    3594:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    3596:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    3598:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    359c:	2100      	movs	r1, #0
    uint32_t status = 0;
    359e:	460c      	mov	r4, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    35a0:	e003      	b.n	35aa <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
    35a2:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    35a4:	3304      	adds	r3, #4
    35a6:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    35a8:	3101      	adds	r1, #1
    35aa:	2907      	cmp	r1, #7
    35ac:	d814      	bhi.n	35d8 <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    35ae:	f103 42a0 	add.w	r2, r3, #1342177280	; 0x50000000
    35b2:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    35b6:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    35b8:	2a00      	cmp	r2, #0
    35ba:	d0f2      	beq.n	35a2 <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
    35bc:	4a0c      	ldr	r2, [pc, #48]	; (35f0 <nrfx_gpiote_irq_handler+0x5c>)
    35be:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    35c2:	4210      	tst	r0, r2
    35c4:	d0ed      	beq.n	35a2 <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
    35c6:	f103 42a0 	add.w	r2, r3, #1342177280	; 0x50000000
    35ca:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    35ce:	2500      	movs	r5, #0
    35d0:	6015      	str	r5, [r2, #0]
    35d2:	6812      	ldr	r2, [r2, #0]
            status |= mask;
    35d4:	4304      	orrs	r4, r0
    35d6:	e7e4      	b.n	35a2 <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    35d8:	4b05      	ldr	r3, [pc, #20]	; (35f0 <nrfx_gpiote_irq_handler+0x5c>)
    35da:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    35de:	b91b      	cbnz	r3, 35e8 <nrfx_gpiote_irq_handler+0x54>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
    35e0:	4620      	mov	r0, r4
    35e2:	f7ff fde7 	bl	31b4 <gpiote_evt_handle>
}
    35e6:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
    35e8:	f7ff fd90 	bl	310c <port_event_handle>
    35ec:	e7f8      	b.n	35e0 <nrfx_gpiote_irq_handler+0x4c>
    35ee:	bf00      	nop
    35f0:	5000d000 	.word	0x5000d000

000035f4 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
    35f4:	4b03      	ldr	r3, [pc, #12]	; (3604 <z_device_state_init+0x10>)

	while (dev < __device_end) {
    35f6:	e000      	b.n	35fa <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
    35f8:	3318      	adds	r3, #24
	while (dev < __device_end) {
    35fa:	4a03      	ldr	r2, [pc, #12]	; (3608 <z_device_state_init+0x14>)
    35fc:	4293      	cmp	r3, r2
    35fe:	d3fb      	bcc.n	35f8 <z_device_state_init+0x4>
	}
}
    3600:	4770      	bx	lr
    3602:	bf00      	nop
    3604:	000068b4 	.word	0x000068b4
    3608:	00006914 	.word	0x00006914

0000360c <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
static void z_sys_init_run_level(enum init_level level)
{
    360c:	b570      	push	{r4, r5, r6, lr}
    360e:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3610:	4b11      	ldr	r3, [pc, #68]	; (3658 <z_sys_init_run_level+0x4c>)
    3612:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    3616:	e009      	b.n	362c <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
    3618:	4240      	negs	r0, r0
    361a:	e017      	b.n	364c <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    361c:	68eb      	ldr	r3, [r5, #12]
    361e:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
    3620:	68ea      	ldr	r2, [r5, #12]
    3622:	7853      	ldrb	r3, [r2, #1]
    3624:	f043 0301 	orr.w	r3, r3, #1
    3628:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    362a:	3408      	adds	r4, #8
    362c:	1c73      	adds	r3, r6, #1
    362e:	4a0a      	ldr	r2, [pc, #40]	; (3658 <z_sys_init_run_level+0x4c>)
    3630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3634:	42a3      	cmp	r3, r4
    3636:	d90d      	bls.n	3654 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
    3638:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
    363a:	6823      	ldr	r3, [r4, #0]
    363c:	4628      	mov	r0, r5
    363e:	4798      	blx	r3
		if (dev != NULL) {
    3640:	2d00      	cmp	r5, #0
    3642:	d0f2      	beq.n	362a <z_sys_init_run_level+0x1e>
			if (rc != 0) {
    3644:	2800      	cmp	r0, #0
    3646:	d0eb      	beq.n	3620 <z_sys_init_run_level+0x14>
				if (rc < 0) {
    3648:	2800      	cmp	r0, #0
    364a:	dbe5      	blt.n	3618 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
    364c:	28ff      	cmp	r0, #255	; 0xff
    364e:	dde5      	ble.n	361c <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
    3650:	20ff      	movs	r0, #255	; 0xff
    3652:	e7e3      	b.n	361c <z_sys_init_run_level+0x10>
		}
	}
}
    3654:	bd70      	pop	{r4, r5, r6, pc}
    3656:	bf00      	nop
    3658:	00006dd4 	.word	0x00006dd4

0000365c <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    365c:	b510      	push	{r4, lr}
    365e:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
    3660:	23b0      	movs	r3, #176	; 0xb0
    3662:	4c11      	ldr	r4, [pc, #68]	; (36a8 <init_idle_thread+0x4c>)
    3664:	fb03 4400 	mla	r4, r3, r0, r4
	k_thread_stack_t *stack = z_idle_stacks[i];
    3668:	eb00 0c80 	add.w	ip, r0, r0, lsl #2
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    366c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    3670:	4b0e      	ldr	r3, [pc, #56]	; (36ac <init_idle_thread+0x50>)
    3672:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
	z_setup_new_thread(thread, stack,
    3676:	4a0e      	ldr	r2, [pc, #56]	; (36b0 <init_idle_thread+0x54>)
    3678:	9205      	str	r2, [sp, #20]
    367a:	2201      	movs	r2, #1
    367c:	9204      	str	r2, [sp, #16]
    367e:	220f      	movs	r2, #15
    3680:	9203      	str	r2, [sp, #12]
    3682:	2200      	movs	r2, #0
    3684:	9202      	str	r2, [sp, #8]
    3686:	9201      	str	r2, [sp, #4]
    3688:	9300      	str	r3, [sp, #0]
    368a:	4b0a      	ldr	r3, [pc, #40]	; (36b4 <init_idle_thread+0x58>)
    368c:	f44f 72a0 	mov.w	r2, #320	; 0x140
    3690:	4909      	ldr	r1, [pc, #36]	; (36b8 <init_idle_thread+0x5c>)
    3692:	eb01 118c 	add.w	r1, r1, ip, lsl #6
    3696:	4620      	mov	r0, r4
    3698:	f000 f94a 	bl	3930 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    369c:	7b63      	ldrb	r3, [r4, #13]
    369e:	f023 0304 	bic.w	r3, r3, #4
    36a2:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    36a4:	b006      	add	sp, #24
    36a6:	bd10      	pop	{r4, pc}
    36a8:	200001b0 	.word	0x200001b0
    36ac:	20000950 	.word	0x20000950
    36b0:	00006dc4 	.word	0x00006dc4
    36b4:	00003a8d 	.word	0x00003a8d
    36b8:	20001368 	.word	0x20001368

000036bc <bg_thread_main>:
{
    36bc:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    36be:	4b0a      	ldr	r3, [pc, #40]	; (36e8 <bg_thread_main+0x2c>)
    36c0:	2201      	movs	r2, #1
    36c2:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    36c4:	2003      	movs	r0, #3
    36c6:	f7ff ffa1 	bl	360c <z_sys_init_run_level>
	boot_banner();
    36ca:	f001 f865 	bl	4798 <boot_banner>
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    36ce:	2004      	movs	r0, #4
    36d0:	f7ff ff9c 	bl	360c <z_sys_init_run_level>
	z_init_static_threads();
    36d4:	f000 f990 	bl	39f8 <z_init_static_threads>
	main();
    36d8:	f7fc fea4 	bl	424 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    36dc:	4a03      	ldr	r2, [pc, #12]	; (36ec <bg_thread_main+0x30>)
    36de:	7b13      	ldrb	r3, [r2, #12]
    36e0:	f023 0301 	bic.w	r3, r3, #1
    36e4:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    36e6:	bd08      	pop	{r3, pc}
    36e8:	20000b67 	.word	0x20000b67
    36ec:	20000260 	.word	0x20000260

000036f0 <switch_to_main_thread>:
	return stack_ptr;
}

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
    36f0:	b508      	push	{r3, lr}
    36f2:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    36f4:	4a01      	ldr	r2, [pc, #4]	; (36fc <switch_to_main_thread+0xc>)
    36f6:	4802      	ldr	r0, [pc, #8]	; (3700 <switch_to_main_thread+0x10>)
    36f8:	f7fd fe64 	bl	13c4 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    36fc:	000036bd 	.word	0x000036bd
    3700:	20000260 	.word	0x20000260

00003704 <z_bss_zero>:
{
    3704:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    3706:	4803      	ldr	r0, [pc, #12]	; (3714 <z_bss_zero+0x10>)
    3708:	4a03      	ldr	r2, [pc, #12]	; (3718 <z_bss_zero+0x14>)
    370a:	1a12      	subs	r2, r2, r0
    370c:	2100      	movs	r1, #0
    370e:	f002 fe80 	bl	6412 <z_early_memset>
}
    3712:	bd08      	pop	{r3, pc}
    3714:	20000190 	.word	0x20000190
    3718:	20000b68 	.word	0x20000b68

0000371c <z_init_cpu>:
{
    371c:	b510      	push	{r4, lr}
    371e:	4604      	mov	r4, r0
	init_idle_thread(id);
    3720:	f7ff ff9c 	bl	365c <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    3724:	23b0      	movs	r3, #176	; 0xb0
    3726:	490a      	ldr	r1, [pc, #40]	; (3750 <z_init_cpu+0x34>)
    3728:	fb03 1104 	mla	r1, r3, r4, r1
    372c:	4a09      	ldr	r2, [pc, #36]	; (3754 <z_init_cpu+0x38>)
    372e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    3732:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    3736:	60d9      	str	r1, [r3, #12]
	_kernel.cpus[id].id = id;
    3738:	751c      	strb	r4, [r3, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    373a:	4b07      	ldr	r3, [pc, #28]	; (3758 <z_init_cpu+0x3c>)
    373c:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
    3740:	f503 6300 	add.w	r3, r3, #2048	; 0x800
	_kernel.cpus[id].irq_stack =
    3744:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    3748:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
    374c:	6053      	str	r3, [r2, #4]
}
    374e:	bd10      	pop	{r4, pc}
    3750:	200001b0 	.word	0x200001b0
    3754:	20000950 	.word	0x20000950
    3758:	20000b68 	.word	0x20000b68

0000375c <prepare_multithreading>:
{
    375c:	b570      	push	{r4, r5, r6, lr}
    375e:	b086      	sub	sp, #24
	z_sched_init();
    3760:	f000 fda6 	bl	42b0 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
    3764:	4d10      	ldr	r5, [pc, #64]	; (37a8 <prepare_multithreading+0x4c>)
    3766:	4b11      	ldr	r3, [pc, #68]	; (37ac <prepare_multithreading+0x50>)
    3768:	61dd      	str	r5, [r3, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    376a:	4b11      	ldr	r3, [pc, #68]	; (37b0 <prepare_multithreading+0x54>)
    376c:	9305      	str	r3, [sp, #20]
    376e:	2301      	movs	r3, #1
    3770:	9304      	str	r3, [sp, #16]
    3772:	2400      	movs	r4, #0
    3774:	9403      	str	r4, [sp, #12]
    3776:	9402      	str	r4, [sp, #8]
    3778:	9401      	str	r4, [sp, #4]
    377a:	9400      	str	r4, [sp, #0]
    377c:	4b0d      	ldr	r3, [pc, #52]	; (37b4 <prepare_multithreading+0x58>)
    377e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3782:	490d      	ldr	r1, [pc, #52]	; (37b8 <prepare_multithreading+0x5c>)
    3784:	4628      	mov	r0, r5
    3786:	f000 f8d3 	bl	3930 <z_setup_new_thread>
    378a:	4606      	mov	r6, r0
    378c:	7b6b      	ldrb	r3, [r5, #13]
    378e:	f023 0304 	bic.w	r3, r3, #4
    3792:	736b      	strb	r3, [r5, #13]
	z_ready_thread(&z_main_thread);
    3794:	4628      	mov	r0, r5
    3796:	f002 ff21 	bl	65dc <z_ready_thread>
	z_init_cpu(0);
    379a:	4620      	mov	r0, r4
    379c:	f7ff ffbe 	bl	371c <z_init_cpu>
}
    37a0:	4630      	mov	r0, r6
    37a2:	b006      	add	sp, #24
    37a4:	bd70      	pop	{r4, r5, r6, pc}
    37a6:	bf00      	nop
    37a8:	20000260 	.word	0x20000260
    37ac:	20000950 	.word	0x20000950
    37b0:	00006dcc 	.word	0x00006dcc
    37b4:	000036bd 	.word	0x000036bd
    37b8:	200014a8 	.word	0x200014a8

000037bc <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    37bc:	b500      	push	{lr}
    37be:	b0ad      	sub	sp, #180	; 0xb4
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    37c0:	2000      	movs	r0, #0
    37c2:	f7ff ff23 	bl	360c <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    37c6:	4b1d      	ldr	r3, [pc, #116]	; (383c <z_cstart+0x80>)
	uint32_t msp =
    37c8:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    37cc:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    37d0:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    37d4:	4c1a      	ldr	r4, [pc, #104]	; (3840 <z_cstart+0x84>)
    37d6:	23e0      	movs	r3, #224	; 0xe0
    37d8:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    37dc:	2500      	movs	r5, #0
    37de:	77e5      	strb	r5, [r4, #31]
    37e0:	7625      	strb	r5, [r4, #24]
    37e2:	7665      	strb	r5, [r4, #25]
    37e4:	76a5      	strb	r5, [r4, #26]
    37e6:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    37ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
    37ec:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    37f0:	6263      	str	r3, [r4, #36]	; 0x24
    37f2:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    37f6:	f7fd ff45 	bl	1684 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    37fa:	f7fd fcf9 	bl	11f0 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    37fe:	f04f 33ff 	mov.w	r3, #4294967295
    3802:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    3804:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    3806:	f7fe f973 	bl	1af0 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    380a:	f7fe f809 	bl	1820 <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    380e:	2401      	movs	r4, #1
    3810:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    3814:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    3818:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
    381a:	9527      	str	r5, [sp, #156]	; 0x9c
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
    381c:	9529      	str	r5, [sp, #164]	; 0xa4

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    381e:	4b09      	ldr	r3, [pc, #36]	; (3844 <z_cstart+0x88>)
    3820:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    3824:	f7ff fee6 	bl	35f4 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    3828:	4620      	mov	r0, r4
    382a:	f7ff feef 	bl	360c <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    382e:	2002      	movs	r0, #2
    3830:	f7ff feec 	bl	360c <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
    3834:	f7ff ff92 	bl	375c <prepare_multithreading>
    3838:	f7ff ff5a 	bl	36f0 <switch_to_main_thread>
    383c:	20000b68 	.word	0x20000b68
    3840:	e000ed00 	.word	0xe000ed00
    3844:	20000950 	.word	0x20000950

00003848 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    3848:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    384a:	4c06      	ldr	r4, [pc, #24]	; (3864 <init_mem_slab_module+0x1c>)
	int rc = 0;
    384c:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    384e:	e000      	b.n	3852 <init_mem_slab_module+0xa>
    3850:	341c      	adds	r4, #28
    3852:	4b05      	ldr	r3, [pc, #20]	; (3868 <init_mem_slab_module+0x20>)
    3854:	429c      	cmp	r4, r3
    3856:	d204      	bcs.n	3862 <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
    3858:	4620      	mov	r0, r4
    385a:	f002 fde2 	bl	6422 <create_free_list>
		if (rc < 0) {
    385e:	2800      	cmp	r0, #0
    3860:	daf6      	bge.n	3850 <init_mem_slab_module+0x8>
		z_object_init(slab);
	}

out:
	return rc;
}
    3862:	bd10      	pop	{r4, pc}
    3864:	2000013c 	.word	0x2000013c
    3868:	2000013c 	.word	0x2000013c

0000386c <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    386c:	b530      	push	{r4, r5, lr}
    386e:	b083      	sub	sp, #12
    3870:	460d      	mov	r5, r1
	__asm__ volatile(
    3872:	f04f 0120 	mov.w	r1, #32
    3876:	f3ef 8c11 	mrs	ip, BASEPRI
    387a:	f381 8812 	msr	BASEPRI_MAX, r1
    387e:	f3bf 8f6f 	isb	sy
    3882:	4661      	mov	r1, ip
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    3884:	6944      	ldr	r4, [r0, #20]
    3886:	b164      	cbz	r4, 38a2 <k_mem_slab_alloc+0x36>
		/* take a free block */
		*mem = slab->free_list;
    3888:	602c      	str	r4, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
    388a:	6823      	ldr	r3, [r4, #0]
    388c:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    388e:	6983      	ldr	r3, [r0, #24]
    3890:	3301      	adds	r3, #1
    3892:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    3894:	2000      	movs	r0, #0
	__asm__ volatile(
    3896:	f381 8811 	msr	BASEPRI, r1
    389a:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
    389e:	b003      	add	sp, #12
    38a0:	bd30      	pop	{r4, r5, pc}
    38a2:	f100 0e08 	add.w	lr, r0, #8
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    38a6:	ea53 0402 	orrs.w	r4, r3, r2
    38aa:	d104      	bne.n	38b6 <k_mem_slab_alloc+0x4a>
		*mem = NULL;
    38ac:	2300      	movs	r3, #0
    38ae:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
    38b0:	f06f 000b 	mvn.w	r0, #11
    38b4:	e7ef      	b.n	3896 <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    38b6:	9200      	str	r2, [sp, #0]
    38b8:	9301      	str	r3, [sp, #4]
    38ba:	4602      	mov	r2, r0
    38bc:	4670      	mov	r0, lr
    38be:	f000 fbf1 	bl	40a4 <z_pend_curr>
		if (result == 0) {
    38c2:	2800      	cmp	r0, #0
    38c4:	d1eb      	bne.n	389e <k_mem_slab_alloc+0x32>
			*mem = _current->base.swap_data;
    38c6:	4b02      	ldr	r3, [pc, #8]	; (38d0 <k_mem_slab_alloc+0x64>)
    38c8:	689b      	ldr	r3, [r3, #8]
    38ca:	695b      	ldr	r3, [r3, #20]
    38cc:	602b      	str	r3, [r5, #0]
		return result;
    38ce:	e7e6      	b.n	389e <k_mem_slab_alloc+0x32>
    38d0:	20000950 	.word	0x20000950

000038d4 <z_thread_monitor_exit>:
	__asm__ volatile(
    38d4:	f04f 0320 	mov.w	r3, #32
    38d8:	f3ef 8111 	mrs	r1, BASEPRI
    38dc:	f383 8812 	msr	BASEPRI_MAX, r3
    38e0:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
    38e4:	4b0a      	ldr	r3, [pc, #40]	; (3910 <z_thread_monitor_exit+0x3c>)
    38e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    38e8:	4283      	cmp	r3, r0
    38ea:	d104      	bne.n	38f6 <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
    38ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    38ee:	4b08      	ldr	r3, [pc, #32]	; (3910 <z_thread_monitor_exit+0x3c>)
    38f0:	629a      	str	r2, [r3, #40]	; 0x28
    38f2:	e007      	b.n	3904 <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
    38f4:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    38f6:	b113      	cbz	r3, 38fe <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
    38f8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
    38fa:	4282      	cmp	r2, r0
    38fc:	d1fa      	bne.n	38f4 <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
    38fe:	b10b      	cbz	r3, 3904 <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
    3900:	6f02      	ldr	r2, [r0, #112]	; 0x70
    3902:	671a      	str	r2, [r3, #112]	; 0x70
	__asm__ volatile(
    3904:	f381 8811 	msr	BASEPRI, r1
    3908:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
    390c:	4770      	bx	lr
    390e:	bf00      	nop
    3910:	20000950 	.word	0x20000950

00003914 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
    3914:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    3916:	ea53 0102 	orrs.w	r1, r3, r2
    391a:	d102      	bne.n	3922 <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
    391c:	f002 fde7 	bl	64ee <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    3920:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    3922:	4902      	ldr	r1, [pc, #8]	; (392c <schedule_new_thread+0x18>)
    3924:	3018      	adds	r0, #24
    3926:	f000 fe2b 	bl	4580 <z_add_timeout>
    392a:	e7f9      	b.n	3920 <schedule_new_thread+0xc>
    392c:	00006615 	.word	0x00006615

00003930 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    3930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3934:	b085      	sub	sp, #20
    3936:	4604      	mov	r4, r0
    3938:	460f      	mov	r7, r1
    393a:	4615      	mov	r5, r2
    393c:	461e      	mov	r6, r3
    393e:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
    3942:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    3946:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    394a:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    394e:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    3952:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
    3954:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    3956:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3958:	2204      	movs	r2, #4
    395a:	9911      	ldr	r1, [sp, #68]	; 0x44
    395c:	f002 fdcb 	bl	64f6 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
    3960:	462a      	mov	r2, r5
    3962:	4639      	mov	r1, r7
    3964:	4620      	mov	r0, r4
    3966:	f002 fdb0 	bl	64ca <setup_thread_stack>
    396a:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    396c:	f8cd 8008 	str.w	r8, [sp, #8]
    3970:	f8cd 9004 	str.w	r9, [sp, #4]
    3974:	f8cd a000 	str.w	sl, [sp]
    3978:	4633      	mov	r3, r6
    397a:	4602      	mov	r2, r0
    397c:	4639      	mov	r1, r7
    397e:	4620      	mov	r0, r4
    3980:	f7fd fcfe 	bl	1380 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
    3984:	2300      	movs	r3, #0
    3986:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_THREAD_CUSTOM_DATA
	/* Initialize custom data field (value is opaque to kernel) */
	new_thread->custom_data = NULL;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
    3988:	6626      	str	r6, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
    398a:	f8c4 a064 	str.w	sl, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
    398e:	f8c4 9068 	str.w	r9, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
    3992:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
	__asm__ volatile(
    3996:	f04f 0320 	mov.w	r3, #32
    399a:	f3ef 8211 	mrs	r2, BASEPRI
    399e:	f383 8812 	msr	BASEPRI_MAX, r3
    39a2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
    39a6:	4b13      	ldr	r3, [pc, #76]	; (39f4 <z_setup_new_thread+0xc4>)
    39a8:	6a99      	ldr	r1, [r3, #40]	; 0x28
    39aa:	6721      	str	r1, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
    39ac:	629c      	str	r4, [r3, #40]	; 0x28
	__asm__ volatile(
    39ae:	f382 8811 	msr	BASEPRI, r2
    39b2:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
    39b6:	f1bb 0f00 	cmp.w	fp, #0
    39ba:	d013      	beq.n	39e4 <z_setup_new_thread+0xb4>
		strncpy(new_thread->name, name,
    39bc:	221f      	movs	r2, #31
    39be:	4659      	mov	r1, fp
    39c0:	f104 0074 	add.w	r0, r4, #116	; 0x74
    39c4:	f001 fda1 	bl	550a <strncpy>
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    39c8:	2300      	movs	r3, #0
    39ca:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    39ce:	4b09      	ldr	r3, [pc, #36]	; (39f4 <z_setup_new_thread+0xc4>)
    39d0:	689b      	ldr	r3, [r3, #8]
    39d2:	b15b      	cbz	r3, 39ec <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    39d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    39d8:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
#endif

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
    39dc:	4628      	mov	r0, r5
    39de:	b005      	add	sp, #20
    39e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
    39e4:	2300      	movs	r3, #0
    39e6:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    39ea:	e7f0      	b.n	39ce <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
    39ec:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
    39f0:	e7f4      	b.n	39dc <z_setup_new_thread+0xac>
    39f2:	bf00      	nop
    39f4:	20000950 	.word	0x20000950

000039f8 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    39f8:	b530      	push	{r4, r5, lr}
    39fa:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    39fc:	4c21      	ldr	r4, [pc, #132]	; (3a84 <z_init_static_threads+0x8c>)
    39fe:	e014      	b.n	3a2a <z_init_static_threads+0x32>
		z_setup_new_thread(
    3a00:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3a02:	9305      	str	r3, [sp, #20]
    3a04:	6a23      	ldr	r3, [r4, #32]
    3a06:	9304      	str	r3, [sp, #16]
    3a08:	69e3      	ldr	r3, [r4, #28]
    3a0a:	9303      	str	r3, [sp, #12]
    3a0c:	69a3      	ldr	r3, [r4, #24]
    3a0e:	9302      	str	r3, [sp, #8]
    3a10:	6963      	ldr	r3, [r4, #20]
    3a12:	9301      	str	r3, [sp, #4]
    3a14:	6923      	ldr	r3, [r4, #16]
    3a16:	9300      	str	r3, [sp, #0]
    3a18:	68e3      	ldr	r3, [r4, #12]
    3a1a:	68a2      	ldr	r2, [r4, #8]
    3a1c:	6861      	ldr	r1, [r4, #4]
    3a1e:	6820      	ldr	r0, [r4, #0]
    3a20:	f7ff ff86 	bl	3930 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
    3a24:	6823      	ldr	r3, [r4, #0]
    3a26:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    3a28:	3430      	adds	r4, #48	; 0x30
    3a2a:	4b17      	ldr	r3, [pc, #92]	; (3a88 <z_init_static_threads+0x90>)
    3a2c:	429c      	cmp	r4, r3
    3a2e:	d3e7      	bcc.n	3a00 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    3a30:	f000 f9ea 	bl	3e08 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    3a34:	4c13      	ldr	r4, [pc, #76]	; (3a84 <z_init_static_threads+0x8c>)
    3a36:	e000      	b.n	3a3a <z_init_static_threads+0x42>
    3a38:	3430      	adds	r4, #48	; 0x30
    3a3a:	4b13      	ldr	r3, [pc, #76]	; (3a88 <z_init_static_threads+0x90>)
    3a3c:	429c      	cmp	r4, r3
    3a3e:	d21c      	bcs.n	3a7a <z_init_static_threads+0x82>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    3a40:	6a60      	ldr	r0, [r4, #36]	; 0x24
    3a42:	f1b0 3fff 	cmp.w	r0, #4294967295
    3a46:	d0f7      	beq.n	3a38 <z_init_static_threads+0x40>
			schedule_new_thread(thread_data->init_thread,
    3a48:	6825      	ldr	r5, [r4, #0]
					    K_MSEC(thread_data->init_delay));
    3a4a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    3a4e:	17c1      	asrs	r1, r0, #31
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    3a50:	03c9      	lsls	r1, r1, #15
    3a52:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    3a56:	03c0      	lsls	r0, r0, #15
    3a58:	f240 33e7 	movw	r3, #999	; 0x3e7
    3a5c:	18c0      	adds	r0, r0, r3
    3a5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3a62:	f04f 0300 	mov.w	r3, #0
    3a66:	f141 0100 	adc.w	r1, r1, #0
    3a6a:	f7fc fb73 	bl	154 <__aeabi_uldivmod>
    3a6e:	4602      	mov	r2, r0
    3a70:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
    3a72:	4628      	mov	r0, r5
    3a74:	f7ff ff4e 	bl	3914 <schedule_new_thread>
    3a78:	e7de      	b.n	3a38 <z_init_static_threads+0x40>
		}
	}
	k_sched_unlock();
    3a7a:	f000 fbc7 	bl	420c <k_sched_unlock>
}
    3a7e:	b007      	add	sp, #28
    3a80:	bd30      	pop	{r4, r5, pc}
    3a82:	bf00      	nop
    3a84:	00006b3c 	.word	0x00006b3c
    3a88:	00006b3c 	.word	0x00006b3c

00003a8c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    3a8c:	b508      	push	{r3, lr}
    3a8e:	e001      	b.n	3a94 <idle+0x8>
	arch_cpu_idle();
    3a90:	f7fd fbb4 	bl	11fc <arch_cpu_idle>
	__asm__ volatile(
    3a94:	f04f 0220 	mov.w	r2, #32
    3a98:	f3ef 8311 	mrs	r3, BASEPRI
    3a9c:	f382 8812 	msr	BASEPRI_MAX, r2
    3aa0:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    3aa4:	f002 fe8c 	bl	67c0 <z_get_next_timeout_expiry>
    3aa8:	4b05      	ldr	r3, [pc, #20]	; (3ac0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x28>)
    3aaa:	6198      	str	r0, [r3, #24]
	return !z_sys_post_kernel;
    3aac:	4b05      	ldr	r3, [pc, #20]	; (3ac4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2c>)
    3aae:	781b      	ldrb	r3, [r3, #0]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    3ab0:	2b00      	cmp	r3, #0
    3ab2:	d0ed      	beq.n	3a90 <idle+0x4>
    3ab4:	f7fd f99e 	bl	df4 <pm_system_suspend>
    3ab8:	2800      	cmp	r0, #0
    3aba:	d1eb      	bne.n	3a94 <idle+0x8>
    3abc:	e7e8      	b.n	3a90 <idle+0x4>
    3abe:	bf00      	nop
    3ac0:	20000950 	.word	0x20000950
    3ac4:	20000b67 	.word	0x20000b67

00003ac8 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    3ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3acc:	b082      	sub	sp, #8
    3ace:	4604      	mov	r4, r0
    3ad0:	461e      	mov	r6, r3
    3ad2:	f04f 0320 	mov.w	r3, #32
    3ad6:	f3ef 8511 	mrs	r5, BASEPRI
    3ada:	f383 8812 	msr	BASEPRI_MAX, r3
    3ade:	f3bf 8f6f 	isb	sy
    3ae2:	462b      	mov	r3, r5

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    3ae4:	68c1      	ldr	r1, [r0, #12]
    3ae6:	b999      	cbnz	r1, 3b10 <z_impl_k_mutex_lock+0x48>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
    3ae8:	2900      	cmp	r1, #0
    3aea:	d151      	bne.n	3b90 <z_impl_k_mutex_lock+0xc8>
    3aec:	4a36      	ldr	r2, [pc, #216]	; (3bc8 <z_impl_k_mutex_lock+0x100>)
    3aee:	6892      	ldr	r2, [r2, #8]
    3af0:	f992 200e 	ldrsb.w	r2, [r2, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    3af4:	6122      	str	r2, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
    3af6:	3101      	adds	r1, #1
    3af8:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
    3afa:	4a33      	ldr	r2, [pc, #204]	; (3bc8 <z_impl_k_mutex_lock+0x100>)
    3afc:	6892      	ldr	r2, [r2, #8]
    3afe:	60a2      	str	r2, [r4, #8]
	__asm__ volatile(
    3b00:	f383 8811 	msr	BASEPRI, r3
    3b04:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
    3b08:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    3b0a:	b002      	add	sp, #8
    3b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3b10:	4617      	mov	r7, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    3b12:	6880      	ldr	r0, [r0, #8]
    3b14:	4a2c      	ldr	r2, [pc, #176]	; (3bc8 <z_impl_k_mutex_lock+0x100>)
    3b16:	6892      	ldr	r2, [r2, #8]
    3b18:	4290      	cmp	r0, r2
    3b1a:	d0e5      	beq.n	3ae8 <z_impl_k_mutex_lock+0x20>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    3b1c:	ea56 0107 	orrs.w	r1, r6, r7
    3b20:	d038      	beq.n	3b94 <z_impl_k_mutex_lock+0xcc>
					    mutex->owner->base.prio);
    3b22:	f990 800e 	ldrsb.w	r8, [r0, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
    3b26:	4641      	mov	r1, r8
    3b28:	f992 000e 	ldrsb.w	r0, [r2, #14]
    3b2c:	f002 fcf4 	bl	6518 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    3b30:	4580      	cmp	r8, r0
    3b32:	dc36      	bgt.n	3ba2 <z_impl_k_mutex_lock+0xda>
	bool resched = false;
    3b34:	f04f 0800 	mov.w	r8, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    3b38:	9700      	str	r7, [sp, #0]
    3b3a:	9601      	str	r6, [sp, #4]
    3b3c:	4622      	mov	r2, r4
    3b3e:	4629      	mov	r1, r5
    3b40:	4822      	ldr	r0, [pc, #136]	; (3bcc <z_impl_k_mutex_lock+0x104>)
    3b42:	f000 faaf 	bl	40a4 <z_pend_curr>
	if (got_mutex == 0) {
    3b46:	2800      	cmp	r0, #0
    3b48:	d0df      	beq.n	3b0a <z_impl_k_mutex_lock+0x42>
	__asm__ volatile(
    3b4a:	f04f 0320 	mov.w	r3, #32
    3b4e:	f3ef 8511 	mrs	r5, BASEPRI
    3b52:	f383 8812 	msr	BASEPRI_MAX, r3
    3b56:	f3bf 8f6f 	isb	sy
    3b5a:	462e      	mov	r6, r5
	if (likely(mutex->owner != NULL)) {
    3b5c:	68a3      	ldr	r3, [r4, #8]
    3b5e:	b343      	cbz	r3, 3bb2 <z_impl_k_mutex_lock+0xea>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    3b60:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3b62:	429c      	cmp	r4, r3
    3b64:	d023      	beq.n	3bae <z_impl_k_mutex_lock+0xe6>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    3b66:	b313      	cbz	r3, 3bae <z_impl_k_mutex_lock+0xe6>
    3b68:	6921      	ldr	r1, [r4, #16]
    3b6a:	f993 000e 	ldrsb.w	r0, [r3, #14]
    3b6e:	f002 fcd3 	bl	6518 <new_prio_for_inheritance>
    3b72:	4601      	mov	r1, r0
		resched = adjust_owner_prio(mutex, new_prio) || resched;
    3b74:	4620      	mov	r0, r4
    3b76:	f002 fcda 	bl	652e <adjust_owner_prio>
    3b7a:	b9e8      	cbnz	r0, 3bb8 <z_impl_k_mutex_lock+0xf0>
    3b7c:	f1b8 0f00 	cmp.w	r8, #0
    3b80:	d11a      	bne.n	3bb8 <z_impl_k_mutex_lock+0xf0>
	__asm__ volatile(
    3b82:	f386 8811 	msr	BASEPRI, r6
    3b86:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
    3b8a:	f06f 000a 	mvn.w	r0, #10
    3b8e:	e7bc      	b.n	3b0a <z_impl_k_mutex_lock+0x42>
					_current->base.prio :
    3b90:	6922      	ldr	r2, [r4, #16]
    3b92:	e7af      	b.n	3af4 <z_impl_k_mutex_lock+0x2c>
    3b94:	f385 8811 	msr	BASEPRI, r5
    3b98:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    3b9c:	f06f 000f 	mvn.w	r0, #15
    3ba0:	e7b3      	b.n	3b0a <z_impl_k_mutex_lock+0x42>
		resched = adjust_owner_prio(mutex, new_prio);
    3ba2:	4601      	mov	r1, r0
    3ba4:	4620      	mov	r0, r4
    3ba6:	f002 fcc2 	bl	652e <adjust_owner_prio>
    3baa:	4680      	mov	r8, r0
    3bac:	e7c4      	b.n	3b38 <z_impl_k_mutex_lock+0x70>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    3bae:	6921      	ldr	r1, [r4, #16]
    3bb0:	e7e0      	b.n	3b74 <z_impl_k_mutex_lock+0xac>
	if (resched) {
    3bb2:	f1b8 0f00 	cmp.w	r8, #0
    3bb6:	d0e4      	beq.n	3b82 <z_impl_k_mutex_lock+0xba>
		z_reschedule(&lock, key);
    3bb8:	4629      	mov	r1, r5
    3bba:	4804      	ldr	r0, [pc, #16]	; (3bcc <z_impl_k_mutex_lock+0x104>)
    3bbc:	f000 f90e 	bl	3ddc <z_reschedule>
	return -EAGAIN;
    3bc0:	f06f 000a 	mvn.w	r0, #10
    3bc4:	e7a1      	b.n	3b0a <z_impl_k_mutex_lock+0x42>
    3bc6:	bf00      	nop
    3bc8:	20000950 	.word	0x20000950
    3bcc:	2000097c 	.word	0x2000097c

00003bd0 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    3bd0:	6883      	ldr	r3, [r0, #8]
    3bd2:	b38b      	cbz	r3, 3c38 <z_impl_k_mutex_unlock+0x68>
{
    3bd4:	b570      	push	{r4, r5, r6, lr}
    3bd6:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    3bd8:	4a1a      	ldr	r2, [pc, #104]	; (3c44 <z_impl_k_mutex_unlock+0x74>)
    3bda:	6892      	ldr	r2, [r2, #8]
    3bdc:	4293      	cmp	r3, r2
    3bde:	d12e      	bne.n	3c3e <z_impl_k_mutex_unlock+0x6e>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    3be0:	68c3      	ldr	r3, [r0, #12]
    3be2:	2b01      	cmp	r3, #1
    3be4:	d903      	bls.n	3bee <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
    3be6:	3b01      	subs	r3, #1
    3be8:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    3bea:	2000      	movs	r0, #0
}
    3bec:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
    3bee:	f04f 0320 	mov.w	r3, #32
    3bf2:	f3ef 8511 	mrs	r5, BASEPRI
    3bf6:	f383 8812 	msr	BASEPRI_MAX, r3
    3bfa:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    3bfe:	6901      	ldr	r1, [r0, #16]
    3c00:	f002 fc95 	bl	652e <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    3c04:	4620      	mov	r0, r4
    3c06:	f002 fd80 	bl	670a <z_unpend_first_thread>
	mutex->owner = new_owner;
    3c0a:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    3c0c:	b168      	cbz	r0, 3c2a <z_impl_k_mutex_unlock+0x5a>
		mutex->owner_orig_prio = new_owner->base.prio;
    3c0e:	f990 300e 	ldrsb.w	r3, [r0, #14]
    3c12:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    3c14:	2400      	movs	r4, #0
    3c16:	f8c0 40ac 	str.w	r4, [r0, #172]	; 0xac
		z_ready_thread(new_owner);
    3c1a:	f002 fcdf 	bl	65dc <z_ready_thread>
		z_reschedule(&lock, key);
    3c1e:	4629      	mov	r1, r5
    3c20:	4809      	ldr	r0, [pc, #36]	; (3c48 <z_impl_k_mutex_unlock+0x78>)
    3c22:	f000 f8db 	bl	3ddc <z_reschedule>
	return 0;
    3c26:	4620      	mov	r0, r4
    3c28:	e7e0      	b.n	3bec <z_impl_k_mutex_unlock+0x1c>
		mutex->lock_count = 0U;
    3c2a:	2000      	movs	r0, #0
    3c2c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    3c2e:	f385 8811 	msr	BASEPRI, r5
    3c32:	f3bf 8f6f 	isb	sy
    3c36:	e7d9      	b.n	3bec <z_impl_k_mutex_unlock+0x1c>
		return -EINVAL;
    3c38:	f06f 0015 	mvn.w	r0, #21
}
    3c3c:	4770      	bx	lr
		return -EPERM;
    3c3e:	f04f 30ff 	mov.w	r0, #4294967295
    3c42:	e7d3      	b.n	3bec <z_impl_k_mutex_unlock+0x1c>
    3c44:	20000950 	.word	0x20000950
    3c48:	2000097c 	.word	0x2000097c

00003c4c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    3c4c:	b538      	push	{r3, r4, r5, lr}
    3c4e:	4604      	mov	r4, r0
	__asm__ volatile(
    3c50:	f04f 0320 	mov.w	r3, #32
    3c54:	f3ef 8511 	mrs	r5, BASEPRI
    3c58:	f383 8812 	msr	BASEPRI_MAX, r3
    3c5c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    3c60:	f002 fd53 	bl	670a <z_unpend_first_thread>

	if (thread != NULL) {
    3c64:	b148      	cbz	r0, 3c7a <z_impl_k_sem_give+0x2e>
    3c66:	2200      	movs	r2, #0
    3c68:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    3c6c:	f002 fcb6 	bl	65dc <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    3c70:	4629      	mov	r1, r5
    3c72:	4807      	ldr	r0, [pc, #28]	; (3c90 <z_impl_k_sem_give+0x44>)
    3c74:	f000 f8b2 	bl	3ddc <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    3c78:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    3c7a:	68a3      	ldr	r3, [r4, #8]
    3c7c:	68e2      	ldr	r2, [r4, #12]
    3c7e:	4293      	cmp	r3, r2
    3c80:	d003      	beq.n	3c8a <z_impl_k_sem_give+0x3e>
    3c82:	2201      	movs	r2, #1
    3c84:	4413      	add	r3, r2
    3c86:	60a3      	str	r3, [r4, #8]
}
    3c88:	e7f2      	b.n	3c70 <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    3c8a:	2200      	movs	r2, #0
    3c8c:	e7fa      	b.n	3c84 <z_impl_k_sem_give+0x38>
    3c8e:	bf00      	nop
    3c90:	2000097c 	.word	0x2000097c

00003c94 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    3c94:	b510      	push	{r4, lr}
    3c96:	b082      	sub	sp, #8
    3c98:	f04f 0420 	mov.w	r4, #32
    3c9c:	f3ef 8111 	mrs	r1, BASEPRI
    3ca0:	f384 8812 	msr	BASEPRI_MAX, r4
    3ca4:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    3ca8:	6884      	ldr	r4, [r0, #8]
    3caa:	b144      	cbz	r4, 3cbe <z_impl_k_sem_take+0x2a>
		sem->count--;
    3cac:	3c01      	subs	r4, #1
    3cae:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    3cb0:	f381 8811 	msr	BASEPRI, r1
    3cb4:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    3cb8:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    3cba:	b002      	add	sp, #8
    3cbc:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    3cbe:	ea53 0402 	orrs.w	r4, r3, r2
    3cc2:	d006      	beq.n	3cd2 <z_impl_k_sem_take+0x3e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    3cc4:	9200      	str	r2, [sp, #0]
    3cc6:	9301      	str	r3, [sp, #4]
    3cc8:	4602      	mov	r2, r0
    3cca:	4805      	ldr	r0, [pc, #20]	; (3ce0 <z_impl_k_sem_take+0x4c>)
    3ccc:	f000 f9ea 	bl	40a4 <z_pend_curr>
	return ret;
    3cd0:	e7f3      	b.n	3cba <z_impl_k_sem_take+0x26>
    3cd2:	f381 8811 	msr	BASEPRI, r1
    3cd6:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    3cda:	f06f 000f 	mvn.w	r0, #15
    3cde:	e7ec      	b.n	3cba <z_impl_k_sem_take+0x26>
    3ce0:	2000097c 	.word	0x2000097c

00003ce4 <sliceable>:


static inline int is_preempt(struct k_thread *thread)
{
	/* explanation in kernel_struct.h */
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    3ce4:	89c3      	ldrh	r3, [r0, #14]
static inline bool sliceable(struct k_thread *thread)
{
	bool ret = is_preempt(thread)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_idle_thread_object(thread);
    3ce6:	2b7f      	cmp	r3, #127	; 0x7f
    3ce8:	d80e      	bhi.n	3d08 <sliceable+0x24>
	uint8_t state = thread->base.thread_state;
    3cea:	7b43      	ldrb	r3, [r0, #13]
		&& !z_is_thread_prevented_from_running(thread)
    3cec:	f013 0f1f 	tst.w	r3, #31
    3cf0:	d10c      	bne.n	3d0c <sliceable+0x28>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    3cf2:	f990 200e 	ldrsb.w	r2, [r0, #14]
    3cf6:	4b08      	ldr	r3, [pc, #32]	; (3d18 <sliceable+0x34>)
    3cf8:	681b      	ldr	r3, [r3, #0]
    3cfa:	429a      	cmp	r2, r3
    3cfc:	db08      	blt.n	3d10 <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
    3cfe:	4b07      	ldr	r3, [pc, #28]	; (3d1c <sliceable+0x38>)
    3d00:	4298      	cmp	r0, r3
    3d02:	d007      	beq.n	3d14 <sliceable+0x30>
    3d04:	2001      	movs	r0, #1
    3d06:	4770      	bx	lr
    3d08:	2000      	movs	r0, #0
    3d0a:	4770      	bx	lr
    3d0c:	2000      	movs	r0, #0
    3d0e:	4770      	bx	lr
    3d10:	2000      	movs	r0, #0
    3d12:	4770      	bx	lr
    3d14:	2000      	movs	r0, #0
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
    3d16:	4770      	bx	lr
    3d18:	20000980 	.word	0x20000980
    3d1c:	200001b0 	.word	0x200001b0

00003d20 <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3d20:	f1b3 3fff 	cmp.w	r3, #4294967295
    3d24:	bf08      	it	eq
    3d26:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    3d2a:	d100      	bne.n	3d2e <add_thread_timeout+0xe>
    3d2c:	4770      	bx	lr
{
    3d2e:	b508      	push	{r3, lr}
    3d30:	4902      	ldr	r1, [pc, #8]	; (3d3c <add_thread_timeout+0x1c>)
    3d32:	3018      	adds	r0, #24
    3d34:	f000 fc24 	bl	4580 <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
    3d38:	bd08      	pop	{r3, pc}
    3d3a:	bf00      	nop
    3d3c:	00006615 	.word	0x00006615

00003d40 <z_reset_time_slice>:
{
    3d40:	b510      	push	{r4, lr}
	int ret = slice_ticks;
    3d42:	4b07      	ldr	r3, [pc, #28]	; (3d60 <z_reset_time_slice+0x20>)
    3d44:	681c      	ldr	r4, [r3, #0]
	if (slice_time(curr) != 0) {
    3d46:	b904      	cbnz	r4, 3d4a <z_reset_time_slice+0xa>
}
    3d48:	bd10      	pop	{r4, pc}
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    3d4a:	f7fe fce9 	bl	2720 <sys_clock_elapsed>
    3d4e:	4404      	add	r4, r0
    3d50:	4b04      	ldr	r3, [pc, #16]	; (3d64 <z_reset_time_slice+0x24>)
    3d52:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    3d54:	2100      	movs	r1, #0
    3d56:	4b02      	ldr	r3, [pc, #8]	; (3d60 <z_reset_time_slice+0x20>)
    3d58:	6818      	ldr	r0, [r3, #0]
    3d5a:	f002 fd48 	bl	67ee <z_set_timeout_expiry>
}
    3d5e:	e7f3      	b.n	3d48 <z_reset_time_slice+0x8>
    3d60:	20000984 	.word	0x20000984
    3d64:	20000950 	.word	0x20000950

00003d68 <k_sched_time_slice_set>:
{
    3d68:	b570      	push	{r4, r5, r6, lr}
    3d6a:	4604      	mov	r4, r0
    3d6c:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
    3d6e:	2300      	movs	r3, #0
	__asm__ volatile(
    3d70:	f04f 0220 	mov.w	r2, #32
    3d74:	f3ef 8511 	mrs	r5, BASEPRI
    3d78:	f382 8812 	msr	BASEPRI_MAX, r2
    3d7c:	f3bf 8f6f 	isb	sy
	z_spin_lock_set_owner(l);
#if defined(CONFIG_SPIN_LOCK_TIME_LIMIT) && (CONFIG_SPIN_LOCK_TIME_LIMIT != 0)
	l->lock_time = sys_clock_cycle_get_32();
#endif /* CONFIG_SPIN_LOCK_TIME_LIMIT */
#endif/* CONFIG_SPIN_VALIDATE */
	return k;
    3d80:	e00e      	b.n	3da0 <k_sched_time_slice_set+0x38>
			slice_ticks = MAX(2, slice_ticks);
    3d82:	2802      	cmp	r0, #2
    3d84:	bfb8      	it	lt
    3d86:	2002      	movlt	r0, #2
    3d88:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    3d8a:	4b11      	ldr	r3, [pc, #68]	; (3dd0 <k_sched_time_slice_set+0x68>)
    3d8c:	601e      	str	r6, [r3, #0]
		z_reset_time_slice(_current);
    3d8e:	4b11      	ldr	r3, [pc, #68]	; (3dd4 <k_sched_time_slice_set+0x6c>)
    3d90:	6898      	ldr	r0, [r3, #8]
    3d92:	f7ff ffd5 	bl	3d40 <z_reset_time_slice>
	__asm__ volatile(
    3d96:	f385 8811 	msr	BASEPRI, r5
    3d9a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    3d9e:	2301      	movs	r3, #1
    3da0:	b9a3      	cbnz	r3, 3dcc <k_sched_time_slice_set+0x64>
		_current_cpu->slice_ticks = 0;
    3da2:	4b0c      	ldr	r3, [pc, #48]	; (3dd4 <k_sched_time_slice_set+0x6c>)
    3da4:	2200      	movs	r2, #0
    3da6:	611a      	str	r2, [r3, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
    3da8:	0c61      	lsrs	r1, r4, #17
    3daa:	03e0      	lsls	r0, r4, #15
    3dac:	f240 33e7 	movw	r3, #999	; 0x3e7
    3db0:	18c0      	adds	r0, r0, r3
    3db2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3db6:	f04f 0300 	mov.w	r3, #0
    3dba:	f141 0100 	adc.w	r1, r1, #0
    3dbe:	f7fc f9c9 	bl	154 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    3dc2:	4b05      	ldr	r3, [pc, #20]	; (3dd8 <k_sched_time_slice_set+0x70>)
    3dc4:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    3dc6:	2c00      	cmp	r4, #0
    3dc8:	dcdb      	bgt.n	3d82 <k_sched_time_slice_set+0x1a>
    3dca:	e7de      	b.n	3d8a <k_sched_time_slice_set+0x22>
}
    3dcc:	bd70      	pop	{r4, r5, r6, pc}
    3dce:	bf00      	nop
    3dd0:	20000980 	.word	0x20000980
    3dd4:	20000950 	.word	0x20000950
    3dd8:	20000984 	.word	0x20000984

00003ddc <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    3ddc:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
    3dde:	460b      	mov	r3, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    3de0:	b959      	cbnz	r1, 3dfa <z_reschedule+0x1e>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3de2:	f3ef 8205 	mrs	r2, IPSR
    3de6:	b942      	cbnz	r2, 3dfa <z_reschedule+0x1e>
	new_thread = _kernel.ready_q.cache;
    3de8:	4a06      	ldr	r2, [pc, #24]	; (3e04 <z_reschedule+0x28>)
    3dea:	69d0      	ldr	r0, [r2, #28]
	return new_thread != _current;
    3dec:	6892      	ldr	r2, [r2, #8]
	if (resched(key.key) && need_swap()) {
    3dee:	4290      	cmp	r0, r2
    3df0:	d003      	beq.n	3dfa <z_reschedule+0x1e>
	ret = arch_swap(key);
    3df2:	4608      	mov	r0, r1
    3df4:	f7fd fa6a 	bl	12cc <arch_swap>
		z_swap(lock, key);
    3df8:	e003      	b.n	3e02 <z_reschedule+0x26>
    3dfa:	f383 8811 	msr	BASEPRI, r3
    3dfe:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
    3e02:	bd08      	pop	{r3, pc}
    3e04:	20000950 	.word	0x20000950

00003e08 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
    3e08:	2300      	movs	r3, #0
	__asm__ volatile(
    3e0a:	f04f 0220 	mov.w	r2, #32
    3e0e:	f3ef 8111 	mrs	r1, BASEPRI
    3e12:	f382 8812 	msr	BASEPRI_MAX, r2
    3e16:	f3bf 8f6f 	isb	sy
    3e1a:	e009      	b.n	3e30 <k_sched_lock+0x28>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    3e1c:	4b06      	ldr	r3, [pc, #24]	; (3e38 <k_sched_lock+0x30>)
    3e1e:	689a      	ldr	r2, [r3, #8]
    3e20:	7bd3      	ldrb	r3, [r2, #15]
    3e22:	3b01      	subs	r3, #1
    3e24:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    3e26:	f381 8811 	msr	BASEPRI, r1
    3e2a:	f3bf 8f6f 	isb	sy
    3e2e:	2301      	movs	r3, #1
    3e30:	2b00      	cmp	r3, #0
    3e32:	d0f3      	beq.n	3e1c <k_sched_lock+0x14>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    3e34:	4770      	bx	lr
    3e36:	bf00      	nop
    3e38:	20000950 	.word	0x20000950

00003e3c <update_cache>:
{
    3e3c:	b538      	push	{r3, r4, r5, lr}
    3e3e:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
    3e40:	4810      	ldr	r0, [pc, #64]	; (3e84 <update_cache+0x48>)
    3e42:	f002 fbc4 	bl	65ce <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    3e46:	4605      	mov	r5, r0
    3e48:	b170      	cbz	r0, 3e68 <update_cache+0x2c>
	if (preempt_ok != 0) {
    3e4a:	b984      	cbnz	r4, 3e6e <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
    3e4c:	4b0e      	ldr	r3, [pc, #56]	; (3e88 <update_cache+0x4c>)
    3e4e:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
    3e50:	7b5a      	ldrb	r2, [r3, #13]
    3e52:	f012 0f1f 	tst.w	r2, #31
    3e56:	d10a      	bne.n	3e6e <update_cache+0x32>
	return node->next != NULL;
    3e58:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    3e5a:	b942      	cbnz	r2, 3e6e <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    3e5c:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
    3e5e:	2a7f      	cmp	r2, #127	; 0x7f
    3e60:	d905      	bls.n	3e6e <update_cache+0x32>
		_kernel.ready_q.cache = _current;
    3e62:	4a09      	ldr	r2, [pc, #36]	; (3e88 <update_cache+0x4c>)
    3e64:	61d3      	str	r3, [r2, #28]
    3e66:	e00b      	b.n	3e80 <update_cache+0x44>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    3e68:	4b07      	ldr	r3, [pc, #28]	; (3e88 <update_cache+0x4c>)
    3e6a:	68dd      	ldr	r5, [r3, #12]
    3e6c:	e7ed      	b.n	3e4a <update_cache+0xe>
		if (thread != _current) {
    3e6e:	4b06      	ldr	r3, [pc, #24]	; (3e88 <update_cache+0x4c>)
    3e70:	689b      	ldr	r3, [r3, #8]
    3e72:	42ab      	cmp	r3, r5
    3e74:	d002      	beq.n	3e7c <update_cache+0x40>
			z_reset_time_slice(thread);
    3e76:	4628      	mov	r0, r5
    3e78:	f7ff ff62 	bl	3d40 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    3e7c:	4b02      	ldr	r3, [pc, #8]	; (3e88 <update_cache+0x4c>)
    3e7e:	61dd      	str	r5, [r3, #28]
}
    3e80:	bd38      	pop	{r3, r4, r5, pc}
    3e82:	bf00      	nop
    3e84:	20000970 	.word	0x20000970
    3e88:	20000950 	.word	0x20000950

00003e8c <move_thread_to_end_of_prio_q>:
{
    3e8c:	b538      	push	{r3, r4, r5, lr}
    3e8e:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
    3e90:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    3e92:	f990 300d 	ldrsb.w	r3, [r0, #13]
    3e96:	2b00      	cmp	r3, #0
    3e98:	db0a      	blt.n	3eb0 <move_thread_to_end_of_prio_q+0x24>
	thread->base.thread_state |= _THREAD_QUEUED;
    3e9a:	7b6b      	ldrb	r3, [r5, #13]
    3e9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3ea0:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    3ea2:	4b1b      	ldr	r3, [pc, #108]	; (3f10 <move_thread_to_end_of_prio_q+0x84>)
    3ea4:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3ea8:	429c      	cmp	r4, r3
    3eaa:	d110      	bne.n	3ece <move_thread_to_end_of_prio_q+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3eac:	2400      	movs	r4, #0
    3eae:	e00e      	b.n	3ece <move_thread_to_end_of_prio_q+0x42>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3eb0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    3eb4:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    3eb6:	4601      	mov	r1, r0
    3eb8:	4816      	ldr	r0, [pc, #88]	; (3f14 <move_thread_to_end_of_prio_q+0x88>)
    3eba:	f002 fb72 	bl	65a2 <z_priq_dumb_remove>
}
    3ebe:	e7ec      	b.n	3e9a <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    3ec0:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
    3ec2:	606b      	str	r3, [r5, #4]
	node->next = successor;
    3ec4:	602c      	str	r4, [r5, #0]
	prev->next = node;
    3ec6:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    3ec8:	6065      	str	r5, [r4, #4]
}
    3eca:	e017      	b.n	3efc <move_thread_to_end_of_prio_q+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3ecc:	2400      	movs	r4, #0
    3ece:	b16c      	cbz	r4, 3eec <move_thread_to_end_of_prio_q+0x60>
		if (z_sched_prio_cmp(thread, t) > 0) {
    3ed0:	4621      	mov	r1, r4
    3ed2:	4628      	mov	r0, r5
    3ed4:	f002 fb41 	bl	655a <z_sched_prio_cmp>
    3ed8:	2800      	cmp	r0, #0
    3eda:	dcf1      	bgt.n	3ec0 <move_thread_to_end_of_prio_q+0x34>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    3edc:	2c00      	cmp	r4, #0
    3ede:	d0f6      	beq.n	3ece <move_thread_to_end_of_prio_q+0x42>
	return (node == list->tail) ? NULL : node->next;
    3ee0:	4b0b      	ldr	r3, [pc, #44]	; (3f10 <move_thread_to_end_of_prio_q+0x84>)
    3ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3ee4:	429c      	cmp	r4, r3
    3ee6:	d0f1      	beq.n	3ecc <move_thread_to_end_of_prio_q+0x40>
    3ee8:	6824      	ldr	r4, [r4, #0]
    3eea:	e7f0      	b.n	3ece <move_thread_to_end_of_prio_q+0x42>
	sys_dnode_t *const tail = list->tail;
    3eec:	4b08      	ldr	r3, [pc, #32]	; (3f10 <move_thread_to_end_of_prio_q+0x84>)
    3eee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    3ef0:	f103 0120 	add.w	r1, r3, #32
    3ef4:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    3ef6:	606a      	str	r2, [r5, #4]
	tail->next = node;
    3ef8:	6015      	str	r5, [r2, #0]
	list->tail = node;
    3efa:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
    3efc:	4b04      	ldr	r3, [pc, #16]	; (3f10 <move_thread_to_end_of_prio_q+0x84>)
    3efe:	6898      	ldr	r0, [r3, #8]
    3f00:	42a8      	cmp	r0, r5
    3f02:	bf14      	ite	ne
    3f04:	2000      	movne	r0, #0
    3f06:	2001      	moveq	r0, #1
    3f08:	f7ff ff98 	bl	3e3c <update_cache>
}
    3f0c:	bd38      	pop	{r3, r4, r5, pc}
    3f0e:	bf00      	nop
    3f10:	20000950 	.word	0x20000950
    3f14:	20000970 	.word	0x20000970

00003f18 <slice_expired_locked>:
{
    3f18:	b538      	push	{r3, r4, r5, lr}
    3f1a:	4604      	mov	r4, r0
	struct k_thread *curr = _current;
    3f1c:	4b07      	ldr	r3, [pc, #28]	; (3f3c <slice_expired_locked+0x24>)
    3f1e:	689d      	ldr	r5, [r3, #8]
	uint8_t state = thread->base.thread_state;
    3f20:	7b6b      	ldrb	r3, [r5, #13]
	if (!z_is_thread_prevented_from_running(curr)) {
    3f22:	f013 0f1f 	tst.w	r3, #31
    3f26:	d004      	beq.n	3f32 <slice_expired_locked+0x1a>
	z_reset_time_slice(curr);
    3f28:	4628      	mov	r0, r5
    3f2a:	f7ff ff09 	bl	3d40 <z_reset_time_slice>
}
    3f2e:	4620      	mov	r0, r4
    3f30:	bd38      	pop	{r3, r4, r5, pc}
		move_thread_to_end_of_prio_q(curr);
    3f32:	4628      	mov	r0, r5
    3f34:	f7ff ffaa 	bl	3e8c <move_thread_to_end_of_prio_q>
    3f38:	e7f6      	b.n	3f28 <slice_expired_locked+0x10>
    3f3a:	bf00      	nop
    3f3c:	20000950 	.word	0x20000950

00003f40 <z_time_slice>:
{
    3f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3f42:	4605      	mov	r5, r0
	__asm__ volatile(
    3f44:	f04f 0320 	mov.w	r3, #32
    3f48:	f3ef 8611 	mrs	r6, BASEPRI
    3f4c:	f383 8812 	msr	BASEPRI_MAX, r3
    3f50:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    3f54:	4b15      	ldr	r3, [pc, #84]	; (3fac <z_time_slice+0x6c>)
    3f56:	6898      	ldr	r0, [r3, #8]
    3f58:	4b15      	ldr	r3, [pc, #84]	; (3fb0 <z_time_slice+0x70>)
    3f5a:	681b      	ldr	r3, [r3, #0]
    3f5c:	4298      	cmp	r0, r3
    3f5e:	d011      	beq.n	3f84 <z_time_slice+0x44>
    3f60:	4634      	mov	r4, r6
	pending_current = NULL;
    3f62:	4b13      	ldr	r3, [pc, #76]	; (3fb0 <z_time_slice+0x70>)
    3f64:	2200      	movs	r2, #0
    3f66:	601a      	str	r2, [r3, #0]
	int ret = slice_ticks;
    3f68:	4b12      	ldr	r3, [pc, #72]	; (3fb4 <z_time_slice+0x74>)
    3f6a:	681b      	ldr	r3, [r3, #0]
	if (slice_time(_current) && sliceable(_current)) {
    3f6c:	b1b3      	cbz	r3, 3f9c <z_time_slice+0x5c>
    3f6e:	f7ff feb9 	bl	3ce4 <sliceable>
    3f72:	b198      	cbz	r0, 3f9c <z_time_slice+0x5c>
		if (ticks >= _current_cpu->slice_ticks) {
    3f74:	4b0d      	ldr	r3, [pc, #52]	; (3fac <z_time_slice+0x6c>)
    3f76:	691b      	ldr	r3, [r3, #16]
    3f78:	42ab      	cmp	r3, r5
    3f7a:	dd0a      	ble.n	3f92 <z_time_slice+0x52>
			_current_cpu->slice_ticks -= ticks;
    3f7c:	1b5b      	subs	r3, r3, r5
    3f7e:	4a0b      	ldr	r2, [pc, #44]	; (3fac <z_time_slice+0x6c>)
    3f80:	6113      	str	r3, [r2, #16]
    3f82:	e00e      	b.n	3fa2 <z_time_slice+0x62>
		z_reset_time_slice(_current);
    3f84:	f7ff fedc 	bl	3d40 <z_reset_time_slice>
	__asm__ volatile(
    3f88:	f386 8811 	msr	BASEPRI, r6
    3f8c:	f3bf 8f6f 	isb	sy
		return;
    3f90:	e00b      	b.n	3faa <z_time_slice+0x6a>
			key = slice_expired_locked(key);
    3f92:	4630      	mov	r0, r6
    3f94:	f7ff ffc0 	bl	3f18 <slice_expired_locked>
    3f98:	4604      	mov	r4, r0
    3f9a:	e002      	b.n	3fa2 <z_time_slice+0x62>
		_current_cpu->slice_ticks = 0;
    3f9c:	4b03      	ldr	r3, [pc, #12]	; (3fac <z_time_slice+0x6c>)
    3f9e:	2200      	movs	r2, #0
    3fa0:	611a      	str	r2, [r3, #16]
    3fa2:	f384 8811 	msr	BASEPRI, r4
    3fa6:	f3bf 8f6f 	isb	sy
}
    3faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3fac:	20000950 	.word	0x20000950
    3fb0:	2000097c 	.word	0x2000097c
    3fb4:	20000984 	.word	0x20000984

00003fb8 <ready_thread>:
	return (thread->base.thread_state & state) != 0U;
    3fb8:	7b42      	ldrb	r2, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    3fba:	f990 300d 	ldrsb.w	r3, [r0, #13]
    3fbe:	2b00      	cmp	r3, #0
    3fc0:	db33      	blt.n	402a <CONFIG_FPROTECT_BLOCK_SIZE+0x2a>
{
    3fc2:	b570      	push	{r4, r5, r6, lr}
    3fc4:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    3fc6:	f012 0f1f 	tst.w	r2, #31
    3fca:	d101      	bne.n	3fd0 <ready_thread+0x18>
	return node->next != NULL;
    3fcc:	6986      	ldr	r6, [r0, #24]
    3fce:	b106      	cbz	r6, 3fd2 <ready_thread+0x1a>
}
    3fd0:	bd70      	pop	{r4, r5, r6, pc}
	thread->base.thread_state |= _THREAD_QUEUED;
    3fd2:	f062 027f 	orn	r2, r2, #127	; 0x7f
    3fd6:	7342      	strb	r2, [r0, #13]
	return list->head == list;
    3fd8:	4b14      	ldr	r3, [pc, #80]	; (402c <CONFIG_FPROTECT_BLOCK_SIZE+0x2c>)
    3fda:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3fde:	429d      	cmp	r5, r3
    3fe0:	d108      	bne.n	3ff4 <ready_thread+0x3c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3fe2:	4635      	mov	r5, r6
    3fe4:	e006      	b.n	3ff4 <ready_thread+0x3c>
	sys_dnode_t *const prev = successor->prev;
    3fe6:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    3fe8:	6063      	str	r3, [r4, #4]
	node->next = successor;
    3fea:	6025      	str	r5, [r4, #0]
	prev->next = node;
    3fec:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    3fee:	606c      	str	r4, [r5, #4]
}
    3ff0:	e017      	b.n	4022 <CONFIG_FPROTECT_BLOCK_SIZE+0x22>
    3ff2:	4635      	mov	r5, r6
    3ff4:	b16d      	cbz	r5, 4012 <CONFIG_FPROTECT_BLOCK_SIZE+0x12>
		if (z_sched_prio_cmp(thread, t) > 0) {
    3ff6:	4629      	mov	r1, r5
    3ff8:	4620      	mov	r0, r4
    3ffa:	f002 faae 	bl	655a <z_sched_prio_cmp>
    3ffe:	2800      	cmp	r0, #0
    4000:	dcf1      	bgt.n	3fe6 <ready_thread+0x2e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4002:	2d00      	cmp	r5, #0
    4004:	d0f6      	beq.n	3ff4 <ready_thread+0x3c>
	return (node == list->tail) ? NULL : node->next;
    4006:	4b09      	ldr	r3, [pc, #36]	; (402c <CONFIG_FPROTECT_BLOCK_SIZE+0x2c>)
    4008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    400a:	429d      	cmp	r5, r3
    400c:	d0f1      	beq.n	3ff2 <ready_thread+0x3a>
    400e:	682d      	ldr	r5, [r5, #0]
    4010:	e7f0      	b.n	3ff4 <ready_thread+0x3c>
	sys_dnode_t *const tail = list->tail;
    4012:	4b06      	ldr	r3, [pc, #24]	; (402c <CONFIG_FPROTECT_BLOCK_SIZE+0x2c>)
    4014:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    4016:	f103 0120 	add.w	r1, r3, #32
    401a:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    401c:	6062      	str	r2, [r4, #4]
	tail->next = node;
    401e:	6014      	str	r4, [r2, #0]
	list->tail = node;
    4020:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
    4022:	2000      	movs	r0, #0
    4024:	f7ff ff0a 	bl	3e3c <update_cache>
}
    4028:	e7d2      	b.n	3fd0 <ready_thread+0x18>
    402a:	4770      	bx	lr
    402c:	20000950 	.word	0x20000950

00004030 <z_sched_start>:
{
    4030:	b510      	push	{r4, lr}
	__asm__ volatile(
    4032:	f04f 0320 	mov.w	r3, #32
    4036:	f3ef 8411 	mrs	r4, BASEPRI
    403a:	f383 8812 	msr	BASEPRI_MAX, r3
    403e:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    4042:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
    4044:	f013 0f04 	tst.w	r3, #4
    4048:	d104      	bne.n	4054 <z_sched_start+0x24>
	__asm__ volatile(
    404a:	f384 8811 	msr	BASEPRI, r4
    404e:	f3bf 8f6f 	isb	sy
}
    4052:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    4054:	f023 0304 	bic.w	r3, r3, #4
    4058:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
    405a:	f7ff ffad 	bl	3fb8 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    405e:	4621      	mov	r1, r4
    4060:	4801      	ldr	r0, [pc, #4]	; (4068 <z_sched_start+0x38>)
    4062:	f7ff febb 	bl	3ddc <z_reschedule>
    4066:	e7f4      	b.n	4052 <z_sched_start+0x22>
    4068:	20000988 	.word	0x20000988

0000406c <unready_thread>:
{
    406c:	b510      	push	{r4, lr}
    406e:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
    4070:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    4072:	f990 300d 	ldrsb.w	r3, [r0, #13]
    4076:	2b00      	cmp	r3, #0
    4078:	db08      	blt.n	408c <unready_thread+0x20>
	update_cache(thread == _current);
    407a:	4b08      	ldr	r3, [pc, #32]	; (409c <unready_thread+0x30>)
    407c:	6898      	ldr	r0, [r3, #8]
    407e:	42a0      	cmp	r0, r4
    4080:	bf14      	ite	ne
    4082:	2000      	movne	r0, #0
    4084:	2001      	moveq	r0, #1
    4086:	f7ff fed9 	bl	3e3c <update_cache>
}
    408a:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    408c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    4090:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    4092:	4601      	mov	r1, r0
    4094:	4802      	ldr	r0, [pc, #8]	; (40a0 <unready_thread+0x34>)
    4096:	f002 fa84 	bl	65a2 <z_priq_dumb_remove>
}
    409a:	e7ee      	b.n	407a <unready_thread+0xe>
    409c:	20000950 	.word	0x20000950
    40a0:	20000970 	.word	0x20000970

000040a4 <z_pend_curr>:
{
    40a4:	b510      	push	{r4, lr}
    40a6:	460c      	mov	r4, r1
    40a8:	4611      	mov	r1, r2
	pending_current = _current;
    40aa:	480a      	ldr	r0, [pc, #40]	; (40d4 <z_pend_curr+0x30>)
    40ac:	6882      	ldr	r2, [r0, #8]
    40ae:	4b0a      	ldr	r3, [pc, #40]	; (40d8 <z_pend_curr+0x34>)
    40b0:	601a      	str	r2, [r3, #0]
	__asm__ volatile(
    40b2:	f04f 0220 	mov.w	r2, #32
    40b6:	f3ef 8311 	mrs	r3, BASEPRI
    40ba:	f382 8812 	msr	BASEPRI_MAX, r2
    40be:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
    40c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    40c6:	6880      	ldr	r0, [r0, #8]
    40c8:	f002 fb13 	bl	66f2 <pend_locked>
    40cc:	4620      	mov	r0, r4
    40ce:	f7fd f8fd 	bl	12cc <arch_swap>
}
    40d2:	bd10      	pop	{r4, pc}
    40d4:	20000950 	.word	0x20000950
    40d8:	2000097c 	.word	0x2000097c

000040dc <z_set_prio>:
{
    40dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    40e0:	4605      	mov	r5, r0
    40e2:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
    40e4:	2300      	movs	r3, #0
    40e6:	f04f 0220 	mov.w	r2, #32
    40ea:	f3ef 8611 	mrs	r6, BASEPRI
    40ee:	f382 8812 	msr	BASEPRI_MAX, r2
    40f2:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
    40f6:	4618      	mov	r0, r3
    40f8:	e029      	b.n	414e <z_set_prio+0x72>
	sys_dnode_t *const prev = successor->prev;
    40fa:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    40fc:	606b      	str	r3, [r5, #4]
	node->next = successor;
    40fe:	602c      	str	r4, [r5, #0]
	prev->next = node;
    4100:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    4102:	6065      	str	r5, [r4, #4]
}
    4104:	e017      	b.n	4136 <z_set_prio+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4106:	4644      	mov	r4, r8
    4108:	b16c      	cbz	r4, 4126 <z_set_prio+0x4a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    410a:	4621      	mov	r1, r4
    410c:	4628      	mov	r0, r5
    410e:	f002 fa24 	bl	655a <z_sched_prio_cmp>
    4112:	2800      	cmp	r0, #0
    4114:	dcf1      	bgt.n	40fa <z_set_prio+0x1e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4116:	2c00      	cmp	r4, #0
    4118:	d0f6      	beq.n	4108 <z_set_prio+0x2c>
	return (node == list->tail) ? NULL : node->next;
    411a:	4b1d      	ldr	r3, [pc, #116]	; (4190 <z_set_prio+0xb4>)
    411c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    411e:	429c      	cmp	r4, r3
    4120:	d0f1      	beq.n	4106 <z_set_prio+0x2a>
    4122:	6824      	ldr	r4, [r4, #0]
    4124:	e7f0      	b.n	4108 <z_set_prio+0x2c>
	sys_dnode_t *const tail = list->tail;
    4126:	4b1a      	ldr	r3, [pc, #104]	; (4190 <z_set_prio+0xb4>)
    4128:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    412a:	f103 0120 	add.w	r1, r3, #32
    412e:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    4130:	606a      	str	r2, [r5, #4]
	tail->next = node;
    4132:	6015      	str	r5, [r2, #0]
	list->tail = node;
    4134:	625d      	str	r5, [r3, #36]	; 0x24
			update_cache(1);
    4136:	2001      	movs	r0, #1
    4138:	f7ff fe80 	bl	3e3c <update_cache>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    413c:	2001      	movs	r0, #1
    413e:	e001      	b.n	4144 <z_set_prio+0x68>
			thread->base.prio = prio;
    4140:	73af      	strb	r7, [r5, #14]
    4142:	2000      	movs	r0, #0
	__asm__ volatile(
    4144:	f386 8811 	msr	BASEPRI, r6
    4148:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    414c:	2301      	movs	r3, #1
    414e:	b9e3      	cbnz	r3, 418a <z_set_prio+0xae>
	uint8_t state = thread->base.thread_state;
    4150:	7b6b      	ldrb	r3, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    4152:	f013 0f1f 	tst.w	r3, #31
    4156:	d1f3      	bne.n	4140 <z_set_prio+0x64>
	return node->next != NULL;
    4158:	f8d5 8018 	ldr.w	r8, [r5, #24]
    415c:	f1b8 0f00 	cmp.w	r8, #0
    4160:	d1ee      	bne.n	4140 <z_set_prio+0x64>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4162:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4166:	736b      	strb	r3, [r5, #13]
	_priq_run_remove(thread_runq(thread), thread);
    4168:	f8df 9028 	ldr.w	r9, [pc, #40]	; 4194 <z_set_prio+0xb8>
    416c:	4629      	mov	r1, r5
    416e:	4648      	mov	r0, r9
    4170:	f002 fa17 	bl	65a2 <z_priq_dumb_remove>
				thread->base.prio = prio;
    4174:	73af      	strb	r7, [r5, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    4176:	7b6b      	ldrb	r3, [r5, #13]
    4178:	f063 037f 	orn	r3, r3, #127	; 0x7f
    417c:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    417e:	f8d9 4000 	ldr.w	r4, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4182:	454c      	cmp	r4, r9
    4184:	d1c0      	bne.n	4108 <z_set_prio+0x2c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4186:	4644      	mov	r4, r8
    4188:	e7be      	b.n	4108 <z_set_prio+0x2c>
}
    418a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    418e:	bf00      	nop
    4190:	20000950 	.word	0x20000950
    4194:	20000970 	.word	0x20000970

00004198 <z_impl_k_thread_suspend>:
{
    4198:	b538      	push	{r3, r4, r5, lr}
    419a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    419c:	3018      	adds	r0, #24
    419e:	f002 faf1 	bl	6784 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    41a2:	2300      	movs	r3, #0
	__asm__ volatile(
    41a4:	f04f 0220 	mov.w	r2, #32
    41a8:	f3ef 8511 	mrs	r5, BASEPRI
    41ac:	f382 8812 	msr	BASEPRI_MAX, r2
    41b0:	f3bf 8f6f 	isb	sy
    41b4:	e010      	b.n	41d8 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    41b6:	7b63      	ldrb	r3, [r4, #13]
    41b8:	f043 0310 	orr.w	r3, r3, #16
    41bc:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    41be:	4b11      	ldr	r3, [pc, #68]	; (4204 <z_impl_k_thread_suspend+0x6c>)
    41c0:	6898      	ldr	r0, [r3, #8]
    41c2:	42a0      	cmp	r0, r4
    41c4:	bf14      	ite	ne
    41c6:	2000      	movne	r0, #0
    41c8:	2001      	moveq	r0, #1
    41ca:	f7ff fe37 	bl	3e3c <update_cache>
	__asm__ volatile(
    41ce:	f385 8811 	msr	BASEPRI, r5
    41d2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    41d6:	2301      	movs	r3, #1
    41d8:	b963      	cbnz	r3, 41f4 <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
    41da:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
    41dc:	f994 300d 	ldrsb.w	r3, [r4, #13]
    41e0:	2b00      	cmp	r3, #0
    41e2:	dae8      	bge.n	41b6 <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    41e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    41e8:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    41ea:	4621      	mov	r1, r4
    41ec:	4806      	ldr	r0, [pc, #24]	; (4208 <z_impl_k_thread_suspend+0x70>)
    41ee:	f002 f9d8 	bl	65a2 <z_priq_dumb_remove>
}
    41f2:	e7e0      	b.n	41b6 <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
    41f4:	4b03      	ldr	r3, [pc, #12]	; (4204 <z_impl_k_thread_suspend+0x6c>)
    41f6:	689b      	ldr	r3, [r3, #8]
    41f8:	42a3      	cmp	r3, r4
    41fa:	d000      	beq.n	41fe <z_impl_k_thread_suspend+0x66>
}
    41fc:	bd38      	pop	{r3, r4, r5, pc}
		z_reschedule_unlocked();
    41fe:	f002 f9c4 	bl	658a <z_reschedule_unlocked>
}
    4202:	e7fb      	b.n	41fc <z_impl_k_thread_suspend+0x64>
    4204:	20000950 	.word	0x20000950
    4208:	20000970 	.word	0x20000970

0000420c <k_sched_unlock>:

void k_sched_unlock(void)
{
    420c:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
    420e:	2300      	movs	r3, #0
	__asm__ volatile(
    4210:	f04f 0220 	mov.w	r2, #32
    4214:	f3ef 8411 	mrs	r4, BASEPRI
    4218:	f382 8812 	msr	BASEPRI_MAX, r2
    421c:	f3bf 8f6f 	isb	sy
    4220:	e00c      	b.n	423c <k_sched_unlock+0x30>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
    4222:	4b09      	ldr	r3, [pc, #36]	; (4248 <k_sched_unlock+0x3c>)
    4224:	689a      	ldr	r2, [r3, #8]
    4226:	7bd3      	ldrb	r3, [r2, #15]
    4228:	3301      	adds	r3, #1
    422a:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    422c:	2000      	movs	r0, #0
    422e:	f7ff fe05 	bl	3e3c <update_cache>
	__asm__ volatile(
    4232:	f384 8811 	msr	BASEPRI, r4
    4236:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    423a:	2301      	movs	r3, #1
    423c:	2b00      	cmp	r3, #0
    423e:	d0f0      	beq.n	4222 <k_sched_unlock+0x16>
	LOG_DBG("scheduler unlocked (%p:%d)",
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
    4240:	f002 f9a3 	bl	658a <z_reschedule_unlocked>
}
    4244:	bd10      	pop	{r4, pc}
    4246:	bf00      	nop
    4248:	20000950 	.word	0x20000950

0000424c <end_thread>:
static void end_thread(struct k_thread *thread)
{
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
    424c:	7b43      	ldrb	r3, [r0, #13]
    424e:	f013 0f08 	tst.w	r3, #8
    4252:	d12a      	bne.n	42aa <end_thread+0x5e>
{
    4254:	b510      	push	{r4, lr}
    4256:	4604      	mov	r4, r0
		thread->base.thread_state |= _THREAD_DEAD;
    4258:	f043 0208 	orr.w	r2, r3, #8
    425c:	7342      	strb	r2, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
    425e:	f023 0220 	bic.w	r2, r3, #32
    4262:	f042 0208 	orr.w	r2, r2, #8
    4266:	7342      	strb	r2, [r0, #13]
		if (z_is_thread_queued(thread)) {
    4268:	f012 0f80 	tst.w	r2, #128	; 0x80
    426c:	d113      	bne.n	4296 <end_thread+0x4a>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
    426e:	68a3      	ldr	r3, [r4, #8]
    4270:	b113      	cbz	r3, 4278 <end_thread+0x2c>
			unpend_thread_no_timeout(thread);
    4272:	4620      	mov	r0, r4
    4274:	f002 f99d 	bl	65b2 <unpend_thread_no_timeout>
    4278:	f104 0018 	add.w	r0, r4, #24
    427c:	f002 fa82 	bl	6784 <z_abort_timeout>
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
    4280:	f104 0058 	add.w	r0, r4, #88	; 0x58
    4284:	f002 f9f5 	bl	6672 <unpend_all>
		update_cache(1);
    4288:	2001      	movs	r0, #1
    428a:	f7ff fdd7 	bl	3e3c <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
    428e:	4620      	mov	r0, r4
    4290:	f7ff fb20 	bl	38d4 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
    4294:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4296:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    429a:	f043 0308 	orr.w	r3, r3, #8
    429e:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    42a0:	4601      	mov	r1, r0
    42a2:	4802      	ldr	r0, [pc, #8]	; (42ac <end_thread+0x60>)
    42a4:	f002 f97d 	bl	65a2 <z_priq_dumb_remove>
}
    42a8:	e7e1      	b.n	426e <end_thread+0x22>
    42aa:	4770      	bx	lr
    42ac:	20000970 	.word	0x20000970

000042b0 <z_sched_init>:
{
    42b0:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
    42b2:	4804      	ldr	r0, [pc, #16]	; (42c4 <z_sched_init+0x14>)
    42b4:	f002 fa4b 	bl	674e <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    42b8:	2100      	movs	r1, #0
    42ba:	4608      	mov	r0, r1
    42bc:	f7ff fd54 	bl	3d68 <k_sched_time_slice_set>
}
    42c0:	bd08      	pop	{r3, pc}
    42c2:	bf00      	nop
    42c4:	2000096c 	.word	0x2000096c

000042c8 <z_impl_k_yield>:
{
    42c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    42ca:	f04f 0320 	mov.w	r3, #32
    42ce:	f3ef 8611 	mrs	r6, BASEPRI
    42d2:	f383 8812 	msr	BASEPRI_MAX, r3
    42d6:	f3bf 8f6f 	isb	sy
		dequeue_thread(_current);
    42da:	4c1d      	ldr	r4, [pc, #116]	; (4350 <z_impl_k_yield+0x88>)
    42dc:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    42de:	7b4b      	ldrb	r3, [r1, #13]
    42e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    42e4:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    42e6:	f104 0720 	add.w	r7, r4, #32
    42ea:	4638      	mov	r0, r7
    42ec:	f002 f959 	bl	65a2 <z_priq_dumb_remove>
	queue_thread(_current);
    42f0:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    42f2:	7b6b      	ldrb	r3, [r5, #13]
    42f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    42f8:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    42fa:	6a24      	ldr	r4, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    42fc:	42bc      	cmp	r4, r7
    42fe:	d108      	bne.n	4312 <z_impl_k_yield+0x4a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4300:	2400      	movs	r4, #0
    4302:	e006      	b.n	4312 <z_impl_k_yield+0x4a>
	sys_dnode_t *const prev = successor->prev;
    4304:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    4306:	606b      	str	r3, [r5, #4]
	node->next = successor;
    4308:	602c      	str	r4, [r5, #0]
	prev->next = node;
    430a:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    430c:	6065      	str	r5, [r4, #4]
}
    430e:	e017      	b.n	4340 <z_impl_k_yield+0x78>
    4310:	2400      	movs	r4, #0
    4312:	b16c      	cbz	r4, 4330 <z_impl_k_yield+0x68>
		if (z_sched_prio_cmp(thread, t) > 0) {
    4314:	4621      	mov	r1, r4
    4316:	4628      	mov	r0, r5
    4318:	f002 f91f 	bl	655a <z_sched_prio_cmp>
    431c:	2800      	cmp	r0, #0
    431e:	dcf1      	bgt.n	4304 <z_impl_k_yield+0x3c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4320:	2c00      	cmp	r4, #0
    4322:	d0f6      	beq.n	4312 <z_impl_k_yield+0x4a>
	return (node == list->tail) ? NULL : node->next;
    4324:	4b0a      	ldr	r3, [pc, #40]	; (4350 <z_impl_k_yield+0x88>)
    4326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4328:	429c      	cmp	r4, r3
    432a:	d0f1      	beq.n	4310 <z_impl_k_yield+0x48>
    432c:	6824      	ldr	r4, [r4, #0]
    432e:	e7f0      	b.n	4312 <z_impl_k_yield+0x4a>
	sys_dnode_t *const tail = list->tail;
    4330:	4b07      	ldr	r3, [pc, #28]	; (4350 <z_impl_k_yield+0x88>)
    4332:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    4334:	f103 0120 	add.w	r1, r3, #32
    4338:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    433a:	606a      	str	r2, [r5, #4]
	tail->next = node;
    433c:	6015      	str	r5, [r2, #0]
	list->tail = node;
    433e:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
    4340:	2001      	movs	r0, #1
    4342:	f7ff fd7b 	bl	3e3c <update_cache>
    4346:	4630      	mov	r0, r6
    4348:	f7fc ffc0 	bl	12cc <arch_swap>
}
    434c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    434e:	bf00      	nop
    4350:	20000950 	.word	0x20000950

00004354 <z_tick_sleep>:
{
    4354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (ticks == 0) {
    4358:	ea50 0301 	orrs.w	r3, r0, r1
    435c:	d038      	beq.n	43d0 <z_tick_sleep+0x7c>
    435e:	4604      	mov	r4, r0
    4360:	460e      	mov	r6, r1
	if (Z_TICK_ABS(ticks) <= 0) {
    4362:	f06f 0301 	mvn.w	r3, #1
    4366:	1a1b      	subs	r3, r3, r0
    4368:	f04f 32ff 	mov.w	r2, #4294967295
    436c:	eb62 0201 	sbc.w	r2, r2, r1
    4370:	2b01      	cmp	r3, #1
    4372:	f172 0200 	sbcs.w	r2, r2, #0
    4376:	db2f      	blt.n	43d8 <z_tick_sleep+0x84>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    4378:	f06f 0501 	mvn.w	r5, #1
    437c:	1a2d      	subs	r5, r5, r0
    437e:	f04f 0320 	mov.w	r3, #32
    4382:	f3ef 8811 	mrs	r8, BASEPRI
    4386:	f383 8812 	msr	BASEPRI_MAX, r3
    438a:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    438e:	4f14      	ldr	r7, [pc, #80]	; (43e0 <z_tick_sleep+0x8c>)
    4390:	68b8      	ldr	r0, [r7, #8]
    4392:	4b14      	ldr	r3, [pc, #80]	; (43e4 <z_tick_sleep+0x90>)
    4394:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    4396:	f7ff fe69 	bl	406c <unready_thread>
	z_add_thread_timeout(_current, timeout);
    439a:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    439c:	4622      	mov	r2, r4
    439e:	4633      	mov	r3, r6
    43a0:	4911      	ldr	r1, [pc, #68]	; (43e8 <z_tick_sleep+0x94>)
    43a2:	3018      	adds	r0, #24
    43a4:	f000 f8ec 	bl	4580 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    43a8:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    43aa:	7b53      	ldrb	r3, [r2, #13]
    43ac:	f043 0310 	orr.w	r3, r3, #16
    43b0:	7353      	strb	r3, [r2, #13]
    43b2:	4640      	mov	r0, r8
    43b4:	f7fc ff8a 	bl	12cc <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    43b8:	f002 fa44 	bl	6844 <sys_clock_tick_get_32>
    43bc:	1a28      	subs	r0, r5, r0
    43be:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    43c2:	2801      	cmp	r0, #1
    43c4:	f173 0300 	sbcs.w	r3, r3, #0
    43c8:	da00      	bge.n	43cc <z_tick_sleep+0x78>
	return 0;
    43ca:	2000      	movs	r0, #0
}
    43cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
    43d0:	f7ff ff7a 	bl	42c8 <z_impl_k_yield>
		return 0;
    43d4:	2000      	movs	r0, #0
    43d6:	e7f9      	b.n	43cc <z_tick_sleep+0x78>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    43d8:	f002 fa34 	bl	6844 <sys_clock_tick_get_32>
    43dc:	1905      	adds	r5, r0, r4
    43de:	e7ce      	b.n	437e <z_tick_sleep+0x2a>
    43e0:	20000950 	.word	0x20000950
    43e4:	2000097c 	.word	0x2000097c
    43e8:	00006615 	.word	0x00006615

000043ec <z_impl_k_sleep>:
{
    43ec:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    43ee:	f1b1 3fff 	cmp.w	r1, #4294967295
    43f2:	bf08      	it	eq
    43f4:	f1b0 3fff 	cmpeq.w	r0, #4294967295
    43f8:	d018      	beq.n	442c <z_impl_k_sleep+0x40>
	ticks = z_tick_sleep(ticks);
    43fa:	f7ff ffab 	bl	4354 <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
    43fe:	17c2      	asrs	r2, r0, #31
			return ((t * to_hz + off) / from_hz);
    4400:	0151      	lsls	r1, r2, #5
    4402:	ea41 61d0 	orr.w	r1, r1, r0, lsr #27
    4406:	0143      	lsls	r3, r0, #5
    4408:	1a1b      	subs	r3, r3, r0
    440a:	eb61 0102 	sbc.w	r1, r1, r2
    440e:	0089      	lsls	r1, r1, #2
    4410:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
    4414:	009b      	lsls	r3, r3, #2
    4416:	181b      	adds	r3, r3, r0
    4418:	eb42 0201 	adc.w	r2, r2, r1
    441c:	00d2      	lsls	r2, r2, #3
    441e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
    4422:	f3c3 3310 	ubfx	r3, r3, #12, #17
    4426:	ea43 4042 	orr.w	r0, r3, r2, lsl #17
}
    442a:	bd08      	pop	{r3, pc}
		k_thread_suspend(_current);
    442c:	4b03      	ldr	r3, [pc, #12]	; (443c <z_impl_k_sleep+0x50>)
    442e:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    4430:	f7ff feb2 	bl	4198 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    4434:	f04f 30ff 	mov.w	r0, #4294967295
    4438:	e7f7      	b.n	442a <z_impl_k_sleep+0x3e>
    443a:	bf00      	nop
    443c:	20000950 	.word	0x20000950

00004440 <z_impl_z_current_get>:
}
    4440:	4b01      	ldr	r3, [pc, #4]	; (4448 <z_impl_z_current_get+0x8>)
    4442:	6898      	ldr	r0, [r3, #8]
    4444:	4770      	bx	lr
    4446:	bf00      	nop
    4448:	20000950 	.word	0x20000950

0000444c <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
    444c:	b570      	push	{r4, r5, r6, lr}
    444e:	f04f 0320 	mov.w	r3, #32
    4452:	f3ef 8511 	mrs	r5, BASEPRI
    4456:	f383 8812 	msr	BASEPRI_MAX, r3
    445a:	f3bf 8f6f 	isb	sy
    445e:	462e      	mov	r6, r5
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    4460:	7b03      	ldrb	r3, [r0, #12]
    4462:	f013 0f01 	tst.w	r3, #1
    4466:	d109      	bne.n	447c <z_thread_abort+0x30>
    4468:	4604      	mov	r4, r0
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
		return;
	}

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    446a:	7b43      	ldrb	r3, [r0, #13]
    446c:	f013 0f08 	tst.w	r3, #8
    4470:	d00f      	beq.n	4492 <z_thread_abort+0x46>
	__asm__ volatile(
    4472:	f385 8811 	msr	BASEPRI, r5
    4476:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		return;
    447a:	e009      	b.n	4490 <z_thread_abort+0x44>
    447c:	f385 8811 	msr	BASEPRI, r5
    4480:	f3bf 8f6f 	isb	sy
		k_panic();
    4484:	4040      	eors	r0, r0
    4486:	f380 8811 	msr	BASEPRI, r0
    448a:	f04f 0004 	mov.w	r0, #4
    448e:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    4490:	bd70      	pop	{r4, r5, r6, pc}
	end_thread(thread);
    4492:	f7ff fedb 	bl	424c <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
    4496:	4b08      	ldr	r3, [pc, #32]	; (44b8 <z_thread_abort+0x6c>)
    4498:	689b      	ldr	r3, [r3, #8]
    449a:	42a3      	cmp	r3, r4
    449c:	d004      	beq.n	44a8 <z_thread_abort+0x5c>
    449e:	f386 8811 	msr	BASEPRI, r6
    44a2:	f3bf 8f6f 	isb	sy
    44a6:	e7f3      	b.n	4490 <z_thread_abort+0x44>
    44a8:	f3ef 8305 	mrs	r3, IPSR
    44ac:	2b00      	cmp	r3, #0
    44ae:	d1f6      	bne.n	449e <z_thread_abort+0x52>
    44b0:	4628      	mov	r0, r5
    44b2:	f7fc ff0b 	bl	12cc <arch_swap>
	return ret;
    44b6:	e7f2      	b.n	449e <z_thread_abort+0x52>
    44b8:	20000950 	.word	0x20000950

000044bc <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    44bc:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    44be:	4806      	ldr	r0, [pc, #24]	; (44d8 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    44c0:	4a06      	ldr	r2, [pc, #24]	; (44dc <z_data_copy+0x20>)
    44c2:	1a12      	subs	r2, r2, r0
    44c4:	4906      	ldr	r1, [pc, #24]	; (44e0 <z_data_copy+0x24>)
    44c6:	f001 ffa8 	bl	641a <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    44ca:	4a06      	ldr	r2, [pc, #24]	; (44e4 <z_data_copy+0x28>)
    44cc:	4906      	ldr	r1, [pc, #24]	; (44e8 <z_data_copy+0x2c>)
    44ce:	4807      	ldr	r0, [pc, #28]	; (44ec <z_data_copy+0x30>)
    44d0:	f001 ffa3 	bl	641a <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    44d4:	bd08      	pop	{r3, pc}
    44d6:	bf00      	nop
    44d8:	20000000 	.word	0x20000000
    44dc:	2000018c 	.word	0x2000018c
    44e0:	00006ea8 	.word	0x00006ea8
    44e4:	00000000 	.word	0x00000000
    44e8:	00006ea8 	.word	0x00006ea8
    44ec:	20000000 	.word	0x20000000

000044f0 <first>:
	return list->head == list;
    44f0:	4b03      	ldr	r3, [pc, #12]	; (4500 <first+0x10>)
    44f2:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    44f4:	4298      	cmp	r0, r3
    44f6:	d000      	beq.n	44fa <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    44f8:	4770      	bx	lr
    44fa:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    44fc:	e7fc      	b.n	44f8 <first+0x8>
    44fe:	bf00      	nop
    4500:	200000cc 	.word	0x200000cc

00004504 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4504:	b130      	cbz	r0, 4514 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    4506:	4a04      	ldr	r2, [pc, #16]	; (4518 <next+0x14>)
    4508:	6852      	ldr	r2, [r2, #4]
    450a:	4290      	cmp	r0, r2
    450c:	d001      	beq.n	4512 <next+0xe>
    450e:	6800      	ldr	r0, [r0, #0]
    4510:	4770      	bx	lr
    4512:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    4514:	4770      	bx	lr
    4516:	bf00      	nop
    4518:	200000cc 	.word	0x200000cc

0000451c <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    451c:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    451e:	4b04      	ldr	r3, [pc, #16]	; (4530 <elapsed+0x14>)
    4520:	681b      	ldr	r3, [r3, #0]
    4522:	b10b      	cbz	r3, 4528 <elapsed+0xc>
    4524:	2000      	movs	r0, #0
}
    4526:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    4528:	f7fe f8fa 	bl	2720 <sys_clock_elapsed>
    452c:	e7fb      	b.n	4526 <elapsed+0xa>
    452e:	bf00      	nop
    4530:	20000988 	.word	0x20000988

00004534 <next_timeout>:

static int32_t next_timeout(void)
{
    4534:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    4536:	f7ff ffdb 	bl	44f0 <first>
    453a:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
    453c:	f7ff ffee 	bl	451c <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    4540:	b17c      	cbz	r4, 4562 <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    4542:	6923      	ldr	r3, [r4, #16]
    4544:	6962      	ldr	r2, [r4, #20]
    4546:	1a1b      	subs	r3, r3, r0
    4548:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    454c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    4550:	f172 0100 	sbcs.w	r1, r2, #0
    4554:	da08      	bge.n	4568 <next_timeout+0x34>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    4556:	2a00      	cmp	r2, #0
    4558:	db01      	blt.n	455e <next_timeout+0x2a>
    455a:	4618      	mov	r0, r3
    455c:	e006      	b.n	456c <next_timeout+0x38>
    455e:	2300      	movs	r3, #0
    4560:	e7fb      	b.n	455a <next_timeout+0x26>
		ret = MAX_WAIT;
    4562:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    4566:	e001      	b.n	456c <next_timeout+0x38>
    4568:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    456c:	4b03      	ldr	r3, [pc, #12]	; (457c <next_timeout+0x48>)
    456e:	691b      	ldr	r3, [r3, #16]
    4570:	b113      	cbz	r3, 4578 <next_timeout+0x44>
    4572:	4283      	cmp	r3, r0
    4574:	da00      	bge.n	4578 <next_timeout+0x44>
		ret = _current_cpu->slice_ticks;
    4576:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
    4578:	bd10      	pop	{r4, pc}
    457a:	bf00      	nop
    457c:	20000950 	.word	0x20000950

00004580 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4580:	f1b3 3fff 	cmp.w	r3, #4294967295
    4584:	bf08      	it	eq
    4586:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    458a:	d07b      	beq.n	4684 <z_add_timeout+0x104>
{
    458c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4590:	4604      	mov	r4, r0
    4592:	4692      	mov	sl, r2
    4594:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    4596:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
    4598:	2300      	movs	r3, #0
	__asm__ volatile(
    459a:	f04f 0220 	mov.w	r2, #32
    459e:	f3ef 8711 	mrs	r7, BASEPRI
    45a2:	f382 8812 	msr	BASEPRI_MAX, r2
    45a6:	f3bf 8f6f 	isb	sy
    45aa:	e026      	b.n	45fa <z_add_timeout+0x7a>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    45ac:	f11a 0801 	adds.w	r8, sl, #1
    45b0:	f145 0900 	adc.w	r9, r5, #0
    45b4:	f7ff ffb2 	bl	451c <elapsed>
    45b8:	eb18 0300 	adds.w	r3, r8, r0
    45bc:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
    45c0:	6123      	str	r3, [r4, #16]
    45c2:	6160      	str	r0, [r4, #20]
    45c4:	e03b      	b.n	463e <z_add_timeout+0xbe>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
    45c6:	1a52      	subs	r2, r2, r1
    45c8:	eb66 0303 	sbc.w	r3, r6, r3
    45cc:	6102      	str	r2, [r0, #16]
    45ce:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
    45d0:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
    45d2:	6063      	str	r3, [r4, #4]
	node->next = successor;
    45d4:	6020      	str	r0, [r4, #0]
	prev->next = node;
    45d6:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    45d8:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    45da:	e005      	b.n	45e8 <z_add_timeout+0x68>
	sys_dnode_t *const tail = list->tail;
    45dc:	4b2a      	ldr	r3, [pc, #168]	; (4688 <z_add_timeout+0x108>)
    45de:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    45e0:	6023      	str	r3, [r4, #0]
	node->prev = tail;
    45e2:	6062      	str	r2, [r4, #4]
	tail->next = node;
    45e4:	6014      	str	r4, [r2, #0]
	list->tail = node;
    45e6:	605c      	str	r4, [r3, #4]
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    45e8:	f7ff ff82 	bl	44f0 <first>
    45ec:	4284      	cmp	r4, r0
    45ee:	d03a      	beq.n	4666 <z_add_timeout+0xe6>
	__asm__ volatile(
    45f0:	f387 8811 	msr	BASEPRI, r7
    45f4:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    45f8:	2301      	movs	r3, #1
    45fa:	2b00      	cmp	r3, #0
    45fc:	d140      	bne.n	4680 <z_add_timeout+0x100>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    45fe:	4653      	mov	r3, sl
    4600:	f06f 0101 	mvn.w	r1, #1
    4604:	ebb1 010a 	subs.w	r1, r1, sl
    4608:	f04f 30ff 	mov.w	r0, #4294967295
    460c:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    4610:	2a00      	cmp	r2, #0
    4612:	dbcb      	blt.n	45ac <z_add_timeout+0x2c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    4614:	4a1d      	ldr	r2, [pc, #116]	; (468c <z_add_timeout+0x10c>)
    4616:	6811      	ldr	r1, [r2, #0]
    4618:	6852      	ldr	r2, [r2, #4]
    461a:	185b      	adds	r3, r3, r1
    461c:	eb42 0205 	adc.w	r2, r2, r5
    4620:	f06f 0101 	mvn.w	r1, #1
    4624:	1ac9      	subs	r1, r1, r3
    4626:	eb60 0302 	sbc.w	r3, r0, r2
			to->dticks = MAX(1, ticks);
    462a:	4608      	mov	r0, r1
    462c:	461a      	mov	r2, r3
    462e:	2901      	cmp	r1, #1
    4630:	f173 0300 	sbcs.w	r3, r3, #0
    4634:	da01      	bge.n	463a <z_add_timeout+0xba>
    4636:	2001      	movs	r0, #1
    4638:	2200      	movs	r2, #0
    463a:	6120      	str	r0, [r4, #16]
    463c:	6162      	str	r2, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    463e:	f7ff ff57 	bl	44f0 <first>
    4642:	2800      	cmp	r0, #0
    4644:	d0ca      	beq.n	45dc <z_add_timeout+0x5c>
			if (t->dticks > to->dticks) {
    4646:	6902      	ldr	r2, [r0, #16]
    4648:	6946      	ldr	r6, [r0, #20]
    464a:	6921      	ldr	r1, [r4, #16]
    464c:	6963      	ldr	r3, [r4, #20]
    464e:	4291      	cmp	r1, r2
    4650:	eb73 0e06 	sbcs.w	lr, r3, r6
    4654:	dbb7      	blt.n	45c6 <z_add_timeout+0x46>
			to->dticks -= t->dticks;
    4656:	1a89      	subs	r1, r1, r2
    4658:	eb63 0306 	sbc.w	r3, r3, r6
    465c:	6121      	str	r1, [r4, #16]
    465e:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    4660:	f7ff ff50 	bl	4504 <next>
    4664:	e7ed      	b.n	4642 <z_add_timeout+0xc2>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    4666:	f7ff ff65 	bl	4534 <next_timeout>

			if (next_time == 0 ||
    466a:	4603      	mov	r3, r0
    466c:	b118      	cbz	r0, 4676 <z_add_timeout+0xf6>
			    _current_cpu->slice_ticks != next_time) {
    466e:	4a08      	ldr	r2, [pc, #32]	; (4690 <z_add_timeout+0x110>)
    4670:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
    4672:	4282      	cmp	r2, r0
    4674:	d0bc      	beq.n	45f0 <z_add_timeout+0x70>
				sys_clock_set_timeout(next_time, false);
    4676:	2100      	movs	r1, #0
    4678:	4618      	mov	r0, r3
    467a:	f7fe f81f 	bl	26bc <sys_clock_set_timeout>
    467e:	e7b7      	b.n	45f0 <z_add_timeout+0x70>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    4680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4684:	4770      	bx	lr
    4686:	bf00      	nop
    4688:	200000cc 	.word	0x200000cc
    468c:	20000310 	.word	0x20000310
    4690:	20000950 	.word	0x20000950

00004694 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    4694:	b570      	push	{r4, r5, r6, lr}
    4696:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    4698:	f7ff fc52 	bl	3f40 <z_time_slice>
	__asm__ volatile(
    469c:	f04f 0320 	mov.w	r3, #32
    46a0:	f3ef 8611 	mrs	r6, BASEPRI
    46a4:	f383 8812 	msr	BASEPRI_MAX, r3
    46a8:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    46ac:	4b28      	ldr	r3, [pc, #160]	; (4750 <sys_clock_announce+0xbc>)
    46ae:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    46b0:	e021      	b.n	46f6 <sys_clock_announce+0x62>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    46b2:	4a28      	ldr	r2, [pc, #160]	; (4754 <sys_clock_announce+0xc0>)
    46b4:	6813      	ldr	r3, [r2, #0]
    46b6:	6851      	ldr	r1, [r2, #4]
    46b8:	195b      	adds	r3, r3, r5
    46ba:	eb41 71e5 	adc.w	r1, r1, r5, asr #31
    46be:	6013      	str	r3, [r2, #0]
    46c0:	6051      	str	r1, [r2, #4]
		t->dticks = 0;
    46c2:	2200      	movs	r2, #0
    46c4:	2300      	movs	r3, #0
    46c6:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    46ca:	4620      	mov	r0, r4
    46cc:	f002 f843 	bl	6756 <remove_timeout>
	__asm__ volatile(
    46d0:	f386 8811 	msr	BASEPRI, r6
    46d4:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    46d8:	68a3      	ldr	r3, [r4, #8]
    46da:	4620      	mov	r0, r4
    46dc:	4798      	blx	r3
	__asm__ volatile(
    46de:	f04f 0320 	mov.w	r3, #32
    46e2:	f3ef 8611 	mrs	r6, BASEPRI
    46e6:	f383 8812 	msr	BASEPRI_MAX, r3
    46ea:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
    46ee:	4a18      	ldr	r2, [pc, #96]	; (4750 <sys_clock_announce+0xbc>)
    46f0:	6813      	ldr	r3, [r2, #0]
    46f2:	1b5b      	subs	r3, r3, r5
    46f4:	6013      	str	r3, [r2, #0]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    46f6:	f7ff fefb 	bl	44f0 <first>
    46fa:	4604      	mov	r4, r0
    46fc:	b138      	cbz	r0, 470e <sys_clock_announce+0x7a>
    46fe:	6905      	ldr	r5, [r0, #16]
    4700:	6941      	ldr	r1, [r0, #20]
    4702:	4b13      	ldr	r3, [pc, #76]	; (4750 <sys_clock_announce+0xbc>)
    4704:	681a      	ldr	r2, [r3, #0]
    4706:	17d3      	asrs	r3, r2, #31
    4708:	42aa      	cmp	r2, r5
    470a:	418b      	sbcs	r3, r1
    470c:	dad1      	bge.n	46b2 <sys_clock_announce+0x1e>
	}

	if (first() != NULL) {
    470e:	b144      	cbz	r4, 4722 <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
    4710:	6923      	ldr	r3, [r4, #16]
    4712:	6962      	ldr	r2, [r4, #20]
    4714:	490e      	ldr	r1, [pc, #56]	; (4750 <sys_clock_announce+0xbc>)
    4716:	6809      	ldr	r1, [r1, #0]
    4718:	1a5b      	subs	r3, r3, r1
    471a:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
    471e:	6123      	str	r3, [r4, #16]
    4720:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
    4722:	4a0c      	ldr	r2, [pc, #48]	; (4754 <sys_clock_announce+0xc0>)
    4724:	4d0a      	ldr	r5, [pc, #40]	; (4750 <sys_clock_announce+0xbc>)
    4726:	6828      	ldr	r0, [r5, #0]
    4728:	6813      	ldr	r3, [r2, #0]
    472a:	6851      	ldr	r1, [r2, #4]
    472c:	181b      	adds	r3, r3, r0
    472e:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
    4732:	6013      	str	r3, [r2, #0]
    4734:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
    4736:	2400      	movs	r4, #0
    4738:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
    473a:	f7ff fefb 	bl	4534 <next_timeout>
    473e:	4621      	mov	r1, r4
    4740:	f7fd ffbc 	bl	26bc <sys_clock_set_timeout>
	__asm__ volatile(
    4744:	f386 8811 	msr	BASEPRI, r6
    4748:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    474c:	bd70      	pop	{r4, r5, r6, pc}
    474e:	bf00      	nop
    4750:	20000988 	.word	0x20000988
    4754:	20000310 	.word	0x20000310

00004758 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    4758:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
    475a:	2200      	movs	r2, #0
	__asm__ volatile(
    475c:	f04f 0320 	mov.w	r3, #32
    4760:	f3ef 8411 	mrs	r4, BASEPRI
    4764:	f383 8812 	msr	BASEPRI_MAX, r3
    4768:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
    476c:	4613      	mov	r3, r2
    476e:	4611      	mov	r1, r2
    4770:	e00c      	b.n	478c <sys_clock_tick_get+0x34>
		t = curr_tick + elapsed();
    4772:	f7ff fed3 	bl	451c <elapsed>
    4776:	4a07      	ldr	r2, [pc, #28]	; (4794 <sys_clock_tick_get+0x3c>)
    4778:	6813      	ldr	r3, [r2, #0]
    477a:	6851      	ldr	r1, [r2, #4]
    477c:	18c3      	adds	r3, r0, r3
    477e:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
	__asm__ volatile(
    4782:	f384 8811 	msr	BASEPRI, r4
    4786:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    478a:	2201      	movs	r2, #1
    478c:	2a00      	cmp	r2, #0
    478e:	d0f0      	beq.n	4772 <sys_clock_tick_get+0x1a>
	}
	return t;
}
    4790:	4618      	mov	r0, r3
    4792:	bd10      	pop	{r4, pc}
    4794:	20000310 	.word	0x20000310

00004798 <boot_banner>:
#else
#define BANNER_VERSION KERNEL_VERSION_STRING
#endif

void boot_banner(void)
{
    4798:	b508      	push	{r3, lr}
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    479a:	4802      	ldr	r0, [pc, #8]	; (47a4 <boot_banner+0xc>)
    479c:	f000 f9eb 	bl	4b76 <printk>
#endif /* CONFIG_BOOT_BANNER */
}
    47a0:	bd08      	pop	{r3, pc}
    47a2:	bf00      	nop
    47a4:	00006dec 	.word	0x00006dec

000047a8 <nrf_cc3xx_platform_init_no_rng>:
    47a8:	b510      	push	{r4, lr}
    47aa:	4c0a      	ldr	r4, [pc, #40]	; (47d4 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    47ac:	6823      	ldr	r3, [r4, #0]
    47ae:	b11b      	cbz	r3, 47b8 <nrf_cc3xx_platform_init_no_rng+0x10>
    47b0:	2301      	movs	r3, #1
    47b2:	2000      	movs	r0, #0
    47b4:	6023      	str	r3, [r4, #0]
    47b6:	bd10      	pop	{r4, pc}
    47b8:	f000 f8f4 	bl	49a4 <CC_LibInitNoRng>
    47bc:	2800      	cmp	r0, #0
    47be:	d0f7      	beq.n	47b0 <nrf_cc3xx_platform_init_no_rng+0x8>
    47c0:	3801      	subs	r0, #1
    47c2:	2807      	cmp	r0, #7
    47c4:	d803      	bhi.n	47ce <nrf_cc3xx_platform_init_no_rng+0x26>
    47c6:	4b04      	ldr	r3, [pc, #16]	; (47d8 <nrf_cc3xx_platform_init_no_rng+0x30>)
    47c8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    47cc:	bd10      	pop	{r4, pc}
    47ce:	4803      	ldr	r0, [pc, #12]	; (47dc <nrf_cc3xx_platform_init_no_rng+0x34>)
    47d0:	bd10      	pop	{r4, pc}
    47d2:	bf00      	nop
    47d4:	2000098c 	.word	0x2000098c
    47d8:	00006e1c 	.word	0x00006e1c
    47dc:	ffff8ffe 	.word	0xffff8ffe

000047e0 <nrf_cc3xx_platform_abort>:
    47e0:	f3bf 8f4f 	dsb	sy
    47e4:	4905      	ldr	r1, [pc, #20]	; (47fc <nrf_cc3xx_platform_abort+0x1c>)
    47e6:	4b06      	ldr	r3, [pc, #24]	; (4800 <nrf_cc3xx_platform_abort+0x20>)
    47e8:	68ca      	ldr	r2, [r1, #12]
    47ea:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    47ee:	4313      	orrs	r3, r2
    47f0:	60cb      	str	r3, [r1, #12]
    47f2:	f3bf 8f4f 	dsb	sy
    47f6:	bf00      	nop
    47f8:	e7fd      	b.n	47f6 <nrf_cc3xx_platform_abort+0x16>
    47fa:	bf00      	nop
    47fc:	e000ed00 	.word	0xe000ed00
    4800:	05fa0004 	.word	0x05fa0004

00004804 <CC_PalAbort>:
    4804:	b430      	push	{r4, r5}
    4806:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    480a:	2500      	movs	r5, #0
    480c:	4b0b      	ldr	r3, [pc, #44]	; (483c <CC_PalAbort+0x38>)
    480e:	4c0c      	ldr	r4, [pc, #48]	; (4840 <CC_PalAbort+0x3c>)
    4810:	490c      	ldr	r1, [pc, #48]	; (4844 <CC_PalAbort+0x40>)
    4812:	6849      	ldr	r1, [r1, #4]
    4814:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    4818:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    481c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    4820:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    4824:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    4828:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
    482c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    4830:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
    4834:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
    4838:	bc30      	pop	{r4, r5}
    483a:	4708      	bx	r1
    483c:	50845000 	.word	0x50845000
    4840:	50844000 	.word	0x50844000
    4844:	200000d4 	.word	0x200000d4

00004848 <nrf_cc3xx_platform_set_abort>:
    4848:	4b02      	ldr	r3, [pc, #8]	; (4854 <nrf_cc3xx_platform_set_abort+0xc>)
    484a:	e9d0 1200 	ldrd	r1, r2, [r0]
    484e:	e9c3 1200 	strd	r1, r2, [r3]
    4852:	4770      	bx	lr
    4854:	200000d4 	.word	0x200000d4

00004858 <mutex_free>:
    4858:	b510      	push	{r4, lr}
    485a:	4604      	mov	r4, r0
    485c:	b150      	cbz	r0, 4874 <mutex_free+0x1c>
    485e:	6863      	ldr	r3, [r4, #4]
    4860:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    4864:	d005      	beq.n	4872 <mutex_free+0x1a>
    4866:	4a06      	ldr	r2, [pc, #24]	; (4880 <mutex_free+0x28>)
    4868:	4293      	cmp	r3, r2
    486a:	d002      	beq.n	4872 <mutex_free+0x1a>
    486c:	2300      	movs	r3, #0
    486e:	6062      	str	r2, [r4, #4]
    4870:	6023      	str	r3, [r4, #0]
    4872:	bd10      	pop	{r4, pc}
    4874:	4b03      	ldr	r3, [pc, #12]	; (4884 <mutex_free+0x2c>)
    4876:	4804      	ldr	r0, [pc, #16]	; (4888 <mutex_free+0x30>)
    4878:	685b      	ldr	r3, [r3, #4]
    487a:	4798      	blx	r3
    487c:	e7ef      	b.n	485e <mutex_free+0x6>
    487e:	bf00      	nop
    4880:	a95c5f2c 	.word	0xa95c5f2c
    4884:	200000d4 	.word	0x200000d4
    4888:	00006e3c 	.word	0x00006e3c

0000488c <mutex_lock>:
    488c:	b1c8      	cbz	r0, 48c2 <mutex_lock+0x36>
    488e:	6843      	ldr	r3, [r0, #4]
    4890:	4a0d      	ldr	r2, [pc, #52]	; (48c8 <mutex_lock+0x3c>)
    4892:	4293      	cmp	r3, r2
    4894:	d013      	beq.n	48be <mutex_lock+0x32>
    4896:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    489a:	d00e      	beq.n	48ba <mutex_lock+0x2e>
    489c:	2301      	movs	r3, #1
    489e:	e850 2f00 	ldrex	r2, [r0]
    48a2:	4619      	mov	r1, r3
    48a4:	e840 1c00 	strex	ip, r1, [r0]
    48a8:	f09c 0f00 	teq	ip, #0
    48ac:	d1f7      	bne.n	489e <mutex_lock+0x12>
    48ae:	2a01      	cmp	r2, #1
    48b0:	d0f5      	beq.n	489e <mutex_lock+0x12>
    48b2:	f3bf 8f5f 	dmb	sy
    48b6:	2000      	movs	r0, #0
    48b8:	4770      	bx	lr
    48ba:	4804      	ldr	r0, [pc, #16]	; (48cc <mutex_lock+0x40>)
    48bc:	4770      	bx	lr
    48be:	4804      	ldr	r0, [pc, #16]	; (48d0 <mutex_lock+0x44>)
    48c0:	4770      	bx	lr
    48c2:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    48c6:	4770      	bx	lr
    48c8:	a95c5f2c 	.word	0xa95c5f2c
    48cc:	ffff8fe9 	.word	0xffff8fe9
    48d0:	ffff8fea 	.word	0xffff8fea

000048d4 <mutex_unlock>:
    48d4:	4603      	mov	r3, r0
    48d6:	b180      	cbz	r0, 48fa <mutex_unlock+0x26>
    48d8:	6842      	ldr	r2, [r0, #4]
    48da:	4909      	ldr	r1, [pc, #36]	; (4900 <mutex_unlock+0x2c>)
    48dc:	428a      	cmp	r2, r1
    48de:	d00a      	beq.n	48f6 <mutex_unlock+0x22>
    48e0:	f012 5f68 	tst.w	r2, #973078528	; 0x3a000000
    48e4:	d005      	beq.n	48f2 <mutex_unlock+0x1e>
    48e6:	f3bf 8f5f 	dmb	sy
    48ea:	2200      	movs	r2, #0
    48ec:	4610      	mov	r0, r2
    48ee:	601a      	str	r2, [r3, #0]
    48f0:	4770      	bx	lr
    48f2:	4804      	ldr	r0, [pc, #16]	; (4904 <mutex_unlock+0x30>)
    48f4:	4770      	bx	lr
    48f6:	4804      	ldr	r0, [pc, #16]	; (4908 <mutex_unlock+0x34>)
    48f8:	4770      	bx	lr
    48fa:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    48fe:	4770      	bx	lr
    4900:	a95c5f2c 	.word	0xa95c5f2c
    4904:	ffff8fe9 	.word	0xffff8fe9
    4908:	ffff8fea 	.word	0xffff8fea

0000490c <mutex_init>:
    490c:	b510      	push	{r4, lr}
    490e:	4604      	mov	r4, r0
    4910:	b120      	cbz	r0, 491c <mutex_init+0x10>
    4912:	2300      	movs	r3, #0
    4914:	4a03      	ldr	r2, [pc, #12]	; (4924 <mutex_init+0x18>)
    4916:	6023      	str	r3, [r4, #0]
    4918:	6062      	str	r2, [r4, #4]
    491a:	bd10      	pop	{r4, pc}
    491c:	4802      	ldr	r0, [pc, #8]	; (4928 <mutex_init+0x1c>)
    491e:	f7ff ff71 	bl	4804 <CC_PalAbort>
    4922:	e7f6      	b.n	4912 <mutex_init+0x6>
    4924:	3a00003a 	.word	0x3a00003a
    4928:	00006e64 	.word	0x00006e64

0000492c <nrf_cc3xx_platform_set_mutexes>:
    492c:	b570      	push	{r4, r5, r6, lr}
    492e:	4c19      	ldr	r4, [pc, #100]	; (4994 <nrf_cc3xx_platform_set_mutexes+0x68>)
    4930:	f8d0 c004 	ldr.w	ip, [r0, #4]
    4934:	6806      	ldr	r6, [r0, #0]
    4936:	f8c4 c004 	str.w	ip, [r4, #4]
    493a:	f8d0 c008 	ldr.w	ip, [r0, #8]
    493e:	68c0      	ldr	r0, [r0, #12]
    4940:	f8c4 c008 	str.w	ip, [r4, #8]
    4944:	60e0      	str	r0, [r4, #12]
    4946:	6026      	str	r6, [r4, #0]
    4948:	6808      	ldr	r0, [r1, #0]
    494a:	4b13      	ldr	r3, [pc, #76]	; (4998 <nrf_cc3xx_platform_set_mutexes+0x6c>)
    494c:	4d13      	ldr	r5, [pc, #76]	; (499c <nrf_cc3xx_platform_set_mutexes+0x70>)
    494e:	6018      	str	r0, [r3, #0]
    4950:	6848      	ldr	r0, [r1, #4]
    4952:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
    4956:	6058      	str	r0, [r3, #4]
    4958:	6888      	ldr	r0, [r1, #8]
    495a:	f012 5f68 	tst.w	r2, #973078528	; 0x3a000000
    495e:	6098      	str	r0, [r3, #8]
    4960:	68c8      	ldr	r0, [r1, #12]
    4962:	6909      	ldr	r1, [r1, #16]
    4964:	60d8      	str	r0, [r3, #12]
    4966:	6119      	str	r1, [r3, #16]
    4968:	d012      	beq.n	4990 <nrf_cc3xx_platform_set_mutexes+0x64>
    496a:	2300      	movs	r3, #0
    496c:	4a0c      	ldr	r2, [pc, #48]	; (49a0 <nrf_cc3xx_platform_set_mutexes+0x74>)
    496e:	f505 708a 	add.w	r0, r5, #276	; 0x114
    4972:	f8c5 3114 	str.w	r3, [r5, #276]	; 0x114
    4976:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
    497a:	f8c5 2118 	str.w	r2, [r5, #280]	; 0x118
    497e:	f8c5 21bc 	str.w	r2, [r5, #444]	; 0x1bc
    4982:	47b0      	blx	r6
    4984:	6823      	ldr	r3, [r4, #0]
    4986:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    498a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    498e:	4718      	bx	r3
    4990:	bd70      	pop	{r4, r5, r6, pc}
    4992:	bf00      	nop
    4994:	200000e4 	.word	0x200000e4
    4998:	200000f4 	.word	0x200000f4
    499c:	200009a4 	.word	0x200009a4
    49a0:	a95c5f2c 	.word	0xa95c5f2c

000049a4 <CC_LibInitNoRng>:
    49a4:	b508      	push	{r3, lr}
    49a6:	f000 f811 	bl	49cc <CC_HalInit>
    49aa:	b930      	cbnz	r0, 49ba <CC_LibInitNoRng+0x16>
    49ac:	f000 f810 	bl	49d0 <CC_PalInit>
    49b0:	b938      	cbnz	r0, 49c2 <CC_LibInitNoRng+0x1e>
    49b2:	4a05      	ldr	r2, [pc, #20]	; (49c8 <CC_LibInitNoRng+0x24>)
    49b4:	f8c2 0a0c 	str.w	r0, [r2, #2572]	; 0xa0c
    49b8:	bd08      	pop	{r3, pc}
    49ba:	f000 f837 	bl	4a2c <CC_PalTerminate>
    49be:	2003      	movs	r0, #3
    49c0:	bd08      	pop	{r3, pc}
    49c2:	2004      	movs	r0, #4
    49c4:	bd08      	pop	{r3, pc}
    49c6:	bf00      	nop
    49c8:	50845000 	.word	0x50845000

000049cc <CC_HalInit>:
    49cc:	2000      	movs	r0, #0
    49ce:	4770      	bx	lr

000049d0 <CC_PalInit>:
    49d0:	b510      	push	{r4, lr}
    49d2:	4811      	ldr	r0, [pc, #68]	; (4a18 <CC_PalInit+0x48>)
    49d4:	f000 f848 	bl	4a68 <CC_PalMutexCreate>
    49d8:	b100      	cbz	r0, 49dc <CC_PalInit+0xc>
    49da:	bd10      	pop	{r4, pc}
    49dc:	480f      	ldr	r0, [pc, #60]	; (4a1c <CC_PalInit+0x4c>)
    49de:	f000 f843 	bl	4a68 <CC_PalMutexCreate>
    49e2:	2800      	cmp	r0, #0
    49e4:	d1f9      	bne.n	49da <CC_PalInit+0xa>
    49e6:	4c0e      	ldr	r4, [pc, #56]	; (4a20 <CC_PalInit+0x50>)
    49e8:	4620      	mov	r0, r4
    49ea:	f000 f83d 	bl	4a68 <CC_PalMutexCreate>
    49ee:	2800      	cmp	r0, #0
    49f0:	d1f3      	bne.n	49da <CC_PalInit+0xa>
    49f2:	4b0c      	ldr	r3, [pc, #48]	; (4a24 <CC_PalInit+0x54>)
    49f4:	480c      	ldr	r0, [pc, #48]	; (4a28 <CC_PalInit+0x58>)
    49f6:	601c      	str	r4, [r3, #0]
    49f8:	f000 f836 	bl	4a68 <CC_PalMutexCreate>
    49fc:	4601      	mov	r1, r0
    49fe:	2800      	cmp	r0, #0
    4a00:	d1eb      	bne.n	49da <CC_PalInit+0xa>
    4a02:	f000 f82d 	bl	4a60 <CC_PalDmaInit>
    4a06:	4604      	mov	r4, r0
    4a08:	b108      	cbz	r0, 4a0e <CC_PalInit+0x3e>
    4a0a:	4620      	mov	r0, r4
    4a0c:	bd10      	pop	{r4, pc}
    4a0e:	f000 f83f 	bl	4a90 <CC_PalPowerSaveModeInit>
    4a12:	4620      	mov	r0, r4
    4a14:	e7fa      	b.n	4a0c <CC_PalInit+0x3c>
    4a16:	bf00      	nop
    4a18:	2000012c 	.word	0x2000012c
    4a1c:	20000120 	.word	0x20000120
    4a20:	20000128 	.word	0x20000128
    4a24:	20000130 	.word	0x20000130
    4a28:	20000124 	.word	0x20000124

00004a2c <CC_PalTerminate>:
    4a2c:	b508      	push	{r3, lr}
    4a2e:	4808      	ldr	r0, [pc, #32]	; (4a50 <CC_PalTerminate+0x24>)
    4a30:	f000 f824 	bl	4a7c <CC_PalMutexDestroy>
    4a34:	4807      	ldr	r0, [pc, #28]	; (4a54 <CC_PalTerminate+0x28>)
    4a36:	f000 f821 	bl	4a7c <CC_PalMutexDestroy>
    4a3a:	4807      	ldr	r0, [pc, #28]	; (4a58 <CC_PalTerminate+0x2c>)
    4a3c:	f000 f81e 	bl	4a7c <CC_PalMutexDestroy>
    4a40:	4806      	ldr	r0, [pc, #24]	; (4a5c <CC_PalTerminate+0x30>)
    4a42:	f000 f81b 	bl	4a7c <CC_PalMutexDestroy>
    4a46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    4a4a:	f000 b80b 	b.w	4a64 <CC_PalDmaTerminate>
    4a4e:	bf00      	nop
    4a50:	2000012c 	.word	0x2000012c
    4a54:	20000120 	.word	0x20000120
    4a58:	20000128 	.word	0x20000128
    4a5c:	20000124 	.word	0x20000124

00004a60 <CC_PalDmaInit>:
    4a60:	2000      	movs	r0, #0
    4a62:	4770      	bx	lr

00004a64 <CC_PalDmaTerminate>:
    4a64:	4770      	bx	lr
    4a66:	bf00      	nop

00004a68 <CC_PalMutexCreate>:
    4a68:	b508      	push	{r3, lr}
    4a6a:	4b03      	ldr	r3, [pc, #12]	; (4a78 <CC_PalMutexCreate+0x10>)
    4a6c:	6802      	ldr	r2, [r0, #0]
    4a6e:	681b      	ldr	r3, [r3, #0]
    4a70:	6810      	ldr	r0, [r2, #0]
    4a72:	4798      	blx	r3
    4a74:	2000      	movs	r0, #0
    4a76:	bd08      	pop	{r3, pc}
    4a78:	200000e4 	.word	0x200000e4

00004a7c <CC_PalMutexDestroy>:
    4a7c:	b508      	push	{r3, lr}
    4a7e:	4b03      	ldr	r3, [pc, #12]	; (4a8c <CC_PalMutexDestroy+0x10>)
    4a80:	6802      	ldr	r2, [r0, #0]
    4a82:	685b      	ldr	r3, [r3, #4]
    4a84:	6810      	ldr	r0, [r2, #0]
    4a86:	4798      	blx	r3
    4a88:	2000      	movs	r0, #0
    4a8a:	bd08      	pop	{r3, pc}
    4a8c:	200000e4 	.word	0x200000e4

00004a90 <CC_PalPowerSaveModeInit>:
    4a90:	b570      	push	{r4, r5, r6, lr}
    4a92:	4c09      	ldr	r4, [pc, #36]	; (4ab8 <CC_PalPowerSaveModeInit+0x28>)
    4a94:	4d09      	ldr	r5, [pc, #36]	; (4abc <CC_PalPowerSaveModeInit+0x2c>)
    4a96:	6920      	ldr	r0, [r4, #16]
    4a98:	68ab      	ldr	r3, [r5, #8]
    4a9a:	4798      	blx	r3
    4a9c:	b118      	cbz	r0, 4aa6 <CC_PalPowerSaveModeInit+0x16>
    4a9e:	4b08      	ldr	r3, [pc, #32]	; (4ac0 <CC_PalPowerSaveModeInit+0x30>)
    4aa0:	4808      	ldr	r0, [pc, #32]	; (4ac4 <CC_PalPowerSaveModeInit+0x34>)
    4aa2:	685b      	ldr	r3, [r3, #4]
    4aa4:	4798      	blx	r3
    4aa6:	2100      	movs	r1, #0
    4aa8:	4a07      	ldr	r2, [pc, #28]	; (4ac8 <CC_PalPowerSaveModeInit+0x38>)
    4aaa:	68eb      	ldr	r3, [r5, #12]
    4aac:	6011      	str	r1, [r2, #0]
    4aae:	6920      	ldr	r0, [r4, #16]
    4ab0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4ab4:	4718      	bx	r3
    4ab6:	bf00      	nop
    4ab8:	200000f4 	.word	0x200000f4
    4abc:	200000e4 	.word	0x200000e4
    4ac0:	200000d4 	.word	0x200000d4
    4ac4:	00006e88 	.word	0x00006e88
    4ac8:	200009a0 	.word	0x200009a0

00004acc <z_impl_gpio_pin_configure>:
				 gpio_flags_t flags);

static inline int z_impl_gpio_pin_configure(const struct device *port,
					    gpio_pin_t pin,
					    gpio_flags_t flags)
{
    4acc:	b538      	push	{r3, r4, r5, lr}
    4ace:	4613      	mov	r3, r2
	const struct gpio_driver_api *api =
    4ad0:	6885      	ldr	r5, [r0, #8]
		(const struct gpio_driver_api *)port->api;
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
    4ad2:	6904      	ldr	r4, [r0, #16]

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
		 != (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH),
		 "Output cannot be initialized low and high");

	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    4ad4:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
    4ad8:	d007      	beq.n	4aea <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
    4ada:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
    4ade:	d004      	beq.n	4aea <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    4ae0:	f012 0f01 	tst.w	r2, #1
    4ae4:	d001      	beq.n	4aea <z_impl_gpio_pin_configure+0x1e>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    4ae6:	f482 2340 	eor.w	r3, r2, #786432	; 0xc0000
	}

	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    4aea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    4aee:	f013 0f01 	tst.w	r3, #1
    4af2:	d00a      	beq.n	4b0a <z_impl_gpio_pin_configure+0x3e>
		data->invert |= (gpio_port_pins_t)BIT(pin);
    4af4:	6823      	ldr	r3, [r4, #0]
    4af6:	f04f 0c01 	mov.w	ip, #1
    4afa:	fa0c fc01 	lsl.w	ip, ip, r1
    4afe:	ea43 030c 	orr.w	r3, r3, ip
    4b02:	6023      	str	r3, [r4, #0]
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
	}

	return api->pin_configure(port, pin, flags);
    4b04:	682b      	ldr	r3, [r5, #0]
    4b06:	4798      	blx	r3
}
    4b08:	bd38      	pop	{r3, r4, r5, pc}
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    4b0a:	6823      	ldr	r3, [r4, #0]
    4b0c:	f04f 0c01 	mov.w	ip, #1
    4b10:	fa0c fc01 	lsl.w	ip, ip, r1
    4b14:	ea23 030c 	bic.w	r3, r3, ip
    4b18:	6023      	str	r3, [r4, #0]
    4b1a:	e7f3      	b.n	4b04 <z_impl_gpio_pin_configure+0x38>

00004b1c <gpio_pin_configure_dt>:
 * @param extra_flags additional flags
 * @return a value from gpio_pin_configure()
 */
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
    4b1c:	b508      	push	{r3, lr}
    4b1e:	4603      	mov	r3, r0
    4b20:	468c      	mov	ip, r1
	return gpio_pin_configure(spec->port,
    4b22:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
    4b24:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
    4b26:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
    4b28:	ea42 020c 	orr.w	r2, r2, ip
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
    4b2c:	f7ff ffce 	bl	4acc <z_impl_gpio_pin_configure>
}
    4b30:	bd08      	pop	{r3, pc}

00004b32 <gpio_pin_toggle_dt>:
 *
 * @param spec GPIO specification from devicetree
 * @return a value from gpio_pin_toggle()
 */
static inline int gpio_pin_toggle_dt(const struct gpio_dt_spec *spec)
{
    4b32:	b508      	push	{r3, lr}
    4b34:	4603      	mov	r3, r0
	return gpio_pin_toggle(spec->port, spec->pin);
    4b36:	6800      	ldr	r0, [r0, #0]
    4b38:	791b      	ldrb	r3, [r3, #4]
	return gpio_port_toggle_bits(port, (gpio_port_pins_t)BIT(pin));
    4b3a:	2101      	movs	r1, #1
    4b3c:	4099      	lsls	r1, r3
	const struct gpio_driver_api *api =
    4b3e:	6883      	ldr	r3, [r0, #8]
	return api->port_toggle_bits(port, pins);
    4b40:	695b      	ldr	r3, [r3, #20]
    4b42:	4798      	blx	r3
}
    4b44:	bd08      	pop	{r3, pc}

00004b46 <k_msleep>:
{
    4b46:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
    4b48:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    4b4c:	17c1      	asrs	r1, r0, #31
    4b4e:	03c9      	lsls	r1, r1, #15
    4b50:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    4b54:	03c0      	lsls	r0, r0, #15
    4b56:	f240 33e7 	movw	r3, #999	; 0x3e7
    4b5a:	18c0      	adds	r0, r0, r3
    4b5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4b60:	f04f 0300 	mov.w	r3, #0
    4b64:	f141 0100 	adc.w	r1, r1, #0
    4b68:	f7fb faf4 	bl	154 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    4b6c:	f7ff fc3e 	bl	43ec <z_impl_k_sleep>
}
    4b70:	bd08      	pop	{r3, pc}

00004b72 <arch_printk_char_out>:
}
    4b72:	2000      	movs	r0, #0
    4b74:	4770      	bx	lr

00004b76 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    4b76:	b40f      	push	{r0, r1, r2, r3}
    4b78:	b500      	push	{lr}
    4b7a:	b083      	sub	sp, #12
    4b7c:	a904      	add	r1, sp, #16
    4b7e:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    4b82:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    4b84:	f7fb fc78 	bl	478 <vprintk>

	va_end(ap);
}
    4b88:	b003      	add	sp, #12
    4b8a:	f85d eb04 	ldr.w	lr, [sp], #4
    4b8e:	b004      	add	sp, #16
    4b90:	4770      	bx	lr

00004b92 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    4b92:	b508      	push	{r3, lr}
    4b94:	4604      	mov	r4, r0
    4b96:	4608      	mov	r0, r1
    4b98:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    4b9a:	461a      	mov	r2, r3
    4b9c:	47a0      	blx	r4
	return z_impl_z_current_get();
    4b9e:	f7ff fc4f 	bl	4440 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    4ba2:	f7fc fe23 	bl	17ec <z_impl_k_thread_abort>

00004ba6 <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
    4ba6:	f001 0107 	and.w	r1, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4baa:	8b03      	ldrh	r3, [r0, #24]
    4bac:	f023 0307 	bic.w	r3, r3, #7
    4bb0:	430b      	orrs	r3, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    4bb2:	8303      	strh	r3, [r0, #24]
}
    4bb4:	4770      	bx	lr

00004bb6 <notify_monitors>:
{
    4bb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4bba:	4606      	mov	r6, r0
    4bbc:	460f      	mov	r7, r1
    4bbe:	4690      	mov	r8, r2
	return list->head;
    4bc0:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    4bc2:	b121      	cbz	r1, 4bce <notify_monitors+0x18>
	return node->next;
    4bc4:	680c      	ldr	r4, [r1, #0]
    4bc6:	b13c      	cbz	r4, 4bd8 <notify_monitors+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
    4bc8:	b931      	cbnz	r1, 4bd8 <notify_monitors+0x22>
    4bca:	460c      	mov	r4, r1
    4bcc:	e004      	b.n	4bd8 <notify_monitors+0x22>
    4bce:	460c      	mov	r4, r1
    4bd0:	e002      	b.n	4bd8 <notify_monitors+0x22>
    4bd2:	4623      	mov	r3, r4
    4bd4:	4621      	mov	r1, r4
    4bd6:	461c      	mov	r4, r3
    4bd8:	b169      	cbz	r1, 4bf6 <notify_monitors+0x40>
		mon->callback(mgr, mon, state, res);
    4bda:	684d      	ldr	r5, [r1, #4]
    4bdc:	4643      	mov	r3, r8
    4bde:	463a      	mov	r2, r7
    4be0:	4630      	mov	r0, r6
    4be2:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    4be4:	2c00      	cmp	r4, #0
    4be6:	d0f4      	beq.n	4bd2 <notify_monitors+0x1c>
	return node->next;
    4be8:	6823      	ldr	r3, [r4, #0]
    4bea:	2b00      	cmp	r3, #0
    4bec:	d0f2      	beq.n	4bd4 <notify_monitors+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
    4bee:	2c00      	cmp	r4, #0
    4bf0:	d1f0      	bne.n	4bd4 <notify_monitors+0x1e>
    4bf2:	4623      	mov	r3, r4
    4bf4:	e7ee      	b.n	4bd4 <notify_monitors+0x1e>
}
    4bf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004bfa <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4bfa:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    4bfc:	f013 0307 	ands.w	r3, r3, #7
    4c00:	d103      	bne.n	4c0a <process_recheck+0x10>
	return list->head;
    4c02:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
    4c04:	b10a      	cbz	r2, 4c0a <process_recheck+0x10>
		evt = EVT_START;
    4c06:	2003      	movs	r0, #3
    4c08:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    4c0a:	2b02      	cmp	r3, #2
    4c0c:	d003      	beq.n	4c16 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
    4c0e:	2b01      	cmp	r3, #1
    4c10:	d006      	beq.n	4c20 <process_recheck+0x26>
	int evt = EVT_NOP;
    4c12:	2000      	movs	r0, #0
    4c14:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
    4c16:	8b42      	ldrh	r2, [r0, #26]
    4c18:	2a00      	cmp	r2, #0
    4c1a:	d1f8      	bne.n	4c0e <process_recheck+0x14>
		evt = EVT_STOP;
    4c1c:	2004      	movs	r0, #4
    4c1e:	4770      	bx	lr
    4c20:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
    4c22:	b10b      	cbz	r3, 4c28 <process_recheck+0x2e>
		evt = EVT_RESET;
    4c24:	2005      	movs	r0, #5
}
    4c26:	4770      	bx	lr
	int evt = EVT_NOP;
    4c28:	2000      	movs	r0, #0
    4c2a:	4770      	bx	lr

00004c2c <process_complete>:
{
    4c2c:	b510      	push	{r4, lr}
    4c2e:	4604      	mov	r4, r0
    4c30:	468c      	mov	ip, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4c32:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
    4c34:	2a00      	cmp	r2, #0
    4c36:	db07      	blt.n	4c48 <process_complete+0x1c>
    4c38:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    4c3c:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    4c3e:	2a01      	cmp	r2, #1
    4c40:	d90e      	bls.n	4c60 <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
    4c42:	2b04      	cmp	r3, #4
    4c44:	d036      	beq.n	4cb4 <process_complete+0x88>
}
    4c46:	bd10      	pop	{r4, pc}
		*clients = mgr->clients;
    4c48:	e9d0 0100 	ldrd	r0, r1, [r0]
    4c4c:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
    4c50:	2300      	movs	r3, #0
    4c52:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
    4c54:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
    4c56:	2101      	movs	r1, #1
    4c58:	4620      	mov	r0, r4
    4c5a:	f7ff ffa4 	bl	4ba6 <set_state>
    4c5e:	e7f2      	b.n	4c46 <process_complete+0x1a>
		*clients = mgr->clients;
    4c60:	e9d0 0100 	ldrd	r0, r1, [r0]
    4c64:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
    4c68:	2200      	movs	r2, #0
    4c6a:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
    4c6c:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
    4c6e:	2b06      	cmp	r3, #6
    4c70:	d11b      	bne.n	4caa <process_complete+0x7e>
	return list->head;
    4c72:	f8dc 3000 	ldr.w	r3, [ip]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    4c76:	b153      	cbz	r3, 4c8e <process_complete+0x62>
				mgr->refs += 1U;
    4c78:	8b62      	ldrh	r2, [r4, #26]
    4c7a:	3201      	adds	r2, #1
    4c7c:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    4c7e:	461a      	mov	r2, r3
	return node->next;
    4c80:	681b      	ldr	r3, [r3, #0]
    4c82:	2b00      	cmp	r3, #0
    4c84:	d0f7      	beq.n	4c76 <process_complete+0x4a>
Z_GENLIST_PEEK_NEXT(slist, snode)
    4c86:	2a00      	cmp	r2, #0
    4c88:	d1f5      	bne.n	4c76 <process_complete+0x4a>
    4c8a:	4613      	mov	r3, r2
    4c8c:	e7f3      	b.n	4c76 <process_complete+0x4a>
			set_state(mgr, ONOFF_STATE_ON);
    4c8e:	2102      	movs	r1, #2
    4c90:	4620      	mov	r0, r4
    4c92:	f7ff ff88 	bl	4ba6 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    4c96:	4620      	mov	r0, r4
    4c98:	f7ff ffaf 	bl	4bfa <process_recheck>
    4c9c:	2800      	cmp	r0, #0
    4c9e:	d0d2      	beq.n	4c46 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    4ca0:	8b23      	ldrh	r3, [r4, #24]
    4ca2:	f043 0320 	orr.w	r3, r3, #32
    4ca6:	8323      	strh	r3, [r4, #24]
    4ca8:	e7cd      	b.n	4c46 <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
    4caa:	2100      	movs	r1, #0
    4cac:	4620      	mov	r0, r4
    4cae:	f7ff ff7a 	bl	4ba6 <set_state>
    4cb2:	e7f0      	b.n	4c96 <process_complete+0x6a>
		set_state(mgr, ONOFF_STATE_OFF);
    4cb4:	2100      	movs	r1, #0
    4cb6:	f7ff ff76 	bl	4ba6 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    4cba:	4620      	mov	r0, r4
    4cbc:	f7ff ff9d 	bl	4bfa <process_recheck>
    4cc0:	2800      	cmp	r0, #0
    4cc2:	d0c0      	beq.n	4c46 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    4cc4:	8b23      	ldrh	r3, [r4, #24]
    4cc6:	f043 0320 	orr.w	r3, r3, #32
    4cca:	8323      	strh	r3, [r4, #24]
}
    4ccc:	e7bb      	b.n	4c46 <process_complete+0x1a>

00004cce <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
    4cce:	b150      	cbz	r0, 4ce6 <validate_args+0x18>
{
    4cd0:	b510      	push	{r4, lr}
    4cd2:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    4cd4:	b151      	cbz	r1, 4cec <validate_args+0x1e>
	int rv = sys_notify_validate(&cli->notify);
    4cd6:	1d08      	adds	r0, r1, #4
    4cd8:	f000 f8c4 	bl	4e64 <sys_notify_validate>
	if ((rv == 0)
    4cdc:	b910      	cbnz	r0, 4ce4 <validate_args+0x16>
	    && ((cli->notify.flags
    4cde:	68a3      	ldr	r3, [r4, #8]
    4ce0:	2b03      	cmp	r3, #3
    4ce2:	d806      	bhi.n	4cf2 <validate_args+0x24>
}
    4ce4:	bd10      	pop	{r4, pc}
		return -EINVAL;
    4ce6:	f06f 0015 	mvn.w	r0, #21
}
    4cea:	4770      	bx	lr
		return -EINVAL;
    4cec:	f06f 0015 	mvn.w	r0, #21
    4cf0:	e7f8      	b.n	4ce4 <validate_args+0x16>
		rv = -EINVAL;
    4cf2:	f06f 0015 	mvn.w	r0, #21
    4cf6:	e7f5      	b.n	4ce4 <validate_args+0x16>

00004cf8 <notify_one>:
{
    4cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4cfc:	4607      	mov	r7, r0
    4cfe:	460c      	mov	r4, r1
    4d00:	4616      	mov	r6, r2
    4d02:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    4d04:	4619      	mov	r1, r3
    4d06:	1d20      	adds	r0, r4, #4
    4d08:	f000 f8c3 	bl	4e92 <sys_notify_finalize>
	if (cb) {
    4d0c:	b128      	cbz	r0, 4d1a <notify_one+0x22>
    4d0e:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
    4d10:	462b      	mov	r3, r5
    4d12:	4632      	mov	r2, r6
    4d14:	4621      	mov	r1, r4
    4d16:	4638      	mov	r0, r7
    4d18:	47c0      	blx	r8
}
    4d1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004d1e <notify_all>:
{
    4d1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4d22:	4680      	mov	r8, r0
    4d24:	460c      	mov	r4, r1
    4d26:	4617      	mov	r7, r2
    4d28:	461e      	mov	r6, r3
	while (!sys_slist_is_empty(list)) {
    4d2a:	e004      	b.n	4d36 <notify_all+0x18>
		notify_one(mgr, cli, state, res);
    4d2c:	4633      	mov	r3, r6
    4d2e:	463a      	mov	r2, r7
    4d30:	4640      	mov	r0, r8
    4d32:	f7ff ffe1 	bl	4cf8 <notify_one>
	return list->head;
    4d36:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
    4d38:	b131      	cbz	r1, 4d48 <notify_all+0x2a>
	return node->next;
    4d3a:	680d      	ldr	r5, [r1, #0]
	list->head = node;
    4d3c:	6025      	str	r5, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    4d3e:	6863      	ldr	r3, [r4, #4]
    4d40:	428b      	cmp	r3, r1
    4d42:	d1f3      	bne.n	4d2c <notify_all+0xe>
	list->tail = node;
    4d44:	6065      	str	r5, [r4, #4]
}
    4d46:	e7f1      	b.n	4d2c <notify_all+0xe>
}
    4d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004d4c <transition_complete>:
{
    4d4c:	b508      	push	{r3, lr}
	__asm__ volatile(
    4d4e:	f04f 0c20 	mov.w	ip, #32
    4d52:	f3ef 8211 	mrs	r2, BASEPRI
    4d56:	f38c 8812 	msr	BASEPRI_MAX, ip
    4d5a:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    4d5e:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
    4d60:	2101      	movs	r1, #1
    4d62:	f7fb fb97 	bl	494 <process_event>
}
    4d66:	bd08      	pop	{r3, pc}

00004d68 <onoff_manager_init>:
	if ((mgr == NULL)
    4d68:	4603      	mov	r3, r0
    4d6a:	b170      	cbz	r0, 4d8a <onoff_manager_init+0x22>
	    || (transitions == NULL)
    4d6c:	b181      	cbz	r1, 4d90 <onoff_manager_init+0x28>
	    || (transitions->start == NULL)
    4d6e:	680a      	ldr	r2, [r1, #0]
    4d70:	b18a      	cbz	r2, 4d96 <onoff_manager_init+0x2e>
	    || (transitions->stop == NULL)) {
    4d72:	684a      	ldr	r2, [r1, #4]
    4d74:	b192      	cbz	r2, 4d9c <onoff_manager_init+0x34>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    4d76:	2000      	movs	r0, #0
    4d78:	6018      	str	r0, [r3, #0]
    4d7a:	6058      	str	r0, [r3, #4]
    4d7c:	6098      	str	r0, [r3, #8]
    4d7e:	60d8      	str	r0, [r3, #12]
    4d80:	6118      	str	r0, [r3, #16]
    4d82:	6158      	str	r0, [r3, #20]
    4d84:	6198      	str	r0, [r3, #24]
    4d86:	6119      	str	r1, [r3, #16]
	return 0;
    4d88:	4770      	bx	lr
		return -EINVAL;
    4d8a:	f06f 0015 	mvn.w	r0, #21
    4d8e:	4770      	bx	lr
    4d90:	f06f 0015 	mvn.w	r0, #21
    4d94:	4770      	bx	lr
    4d96:	f06f 0015 	mvn.w	r0, #21
    4d9a:	4770      	bx	lr
    4d9c:	f06f 0015 	mvn.w	r0, #21
}
    4da0:	4770      	bx	lr

00004da2 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    4da2:	b570      	push	{r4, r5, r6, lr}
    4da4:	4605      	mov	r5, r0
    4da6:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    4da8:	f7ff ff91 	bl	4cce <validate_args>

	if (rv < 0) {
    4dac:	1e04      	subs	r4, r0, #0
    4dae:	db30      	blt.n	4e12 <onoff_request+0x70>
    4db0:	f04f 0320 	mov.w	r3, #32
    4db4:	f3ef 8211 	mrs	r2, BASEPRI
    4db8:	f383 8812 	msr	BASEPRI_MAX, r3
    4dbc:	f3bf 8f6f 	isb	sy
    4dc0:	4696      	mov	lr, r2
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4dc2:	f8b5 c018 	ldrh.w	ip, [r5, #24]
    4dc6:	f00c 0c07 	and.w	ip, ip, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    4dca:	8b6b      	ldrh	r3, [r5, #26]
    4dcc:	f64f 71ff 	movw	r1, #65535	; 0xffff
    4dd0:	428b      	cmp	r3, r1
    4dd2:	d02c      	beq.n	4e2e <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
    4dd4:	4664      	mov	r4, ip
	if (state == ONOFF_STATE_ON) {
    4dd6:	f1bc 0f02 	cmp.w	ip, #2
    4dda:	d008      	beq.n	4dee <onoff_request+0x4c>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
    4ddc:	f1bc 0f06 	cmp.w	ip, #6
    4de0:	d819      	bhi.n	4e16 <onoff_request+0x74>
    4de2:	e8df f00c 	tbb	[pc, ip]
    4de6:	181e      	.short	0x181e
    4de8:	2a1e1818 	.word	0x2a1e1818
    4dec:	1e          	.byte	0x1e
    4ded:	00          	.byte	0x00
		mgr->refs += 1U;
    4dee:	3301      	adds	r3, #1
    4df0:	836b      	strh	r3, [r5, #26]
		notify = true;
    4df2:	2301      	movs	r3, #1
	bool start = false;             /* trigger a start transition */
    4df4:	2100      	movs	r1, #0
	bool add_client = false;        /* add client to pending list */
    4df6:	4608      	mov	r0, r1
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
	}

out:
	if (add_client) {
    4df8:	b128      	cbz	r0, 4e06 <onoff_request+0x64>
	parent->next = child;
    4dfa:	2000      	movs	r0, #0
    4dfc:	6030      	str	r0, [r6, #0]
	return list->tail;
    4dfe:	6868      	ldr	r0, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
    4e00:	b308      	cbz	r0, 4e46 <onoff_request+0xa4>
	parent->next = child;
    4e02:	6006      	str	r6, [r0, #0]
	list->tail = node;
    4e04:	606e      	str	r6, [r5, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    4e06:	bb09      	cbnz	r1, 4e4c <onoff_request+0xaa>
	__asm__ volatile(
    4e08:	f38e 8811 	msr	BASEPRI, lr
    4e0c:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    4e10:	bb0b      	cbnz	r3, 4e56 <onoff_request+0xb4>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    4e12:	4620      	mov	r0, r4
    4e14:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    4e16:	f06f 0404 	mvn.w	r4, #4
    4e1a:	2300      	movs	r3, #0
    4e1c:	4619      	mov	r1, r3
    4e1e:	4618      	mov	r0, r3
    4e20:	e7ea      	b.n	4df8 <onoff_request+0x56>
		start = (state == ONOFF_STATE_OFF);
    4e22:	fabc f18c 	clz	r1, ip
    4e26:	0949      	lsrs	r1, r1, #5
	bool notify = false;            /* do client notification */
    4e28:	2300      	movs	r3, #0
		add_client = true;
    4e2a:	2001      	movs	r0, #1
    4e2c:	e7e4      	b.n	4df8 <onoff_request+0x56>
		rv = -EAGAIN;
    4e2e:	f06f 040a 	mvn.w	r4, #10
	bool notify = false;            /* do client notification */
    4e32:	2300      	movs	r3, #0
	bool start = false;             /* trigger a start transition */
    4e34:	4619      	mov	r1, r3
	bool add_client = false;        /* add client to pending list */
    4e36:	4618      	mov	r0, r3
    4e38:	e7de      	b.n	4df8 <onoff_request+0x56>
	if (state == ONOFF_STATE_ON) {
    4e3a:	f06f 0485 	mvn.w	r4, #133	; 0x85
    4e3e:	2300      	movs	r3, #0
    4e40:	4619      	mov	r1, r3
    4e42:	4618      	mov	r0, r3
    4e44:	e7d8      	b.n	4df8 <onoff_request+0x56>
    4e46:	606e      	str	r6, [r5, #4]
	list->head = node;
    4e48:	602e      	str	r6, [r5, #0]
}
    4e4a:	e7dc      	b.n	4e06 <onoff_request+0x64>
		process_event(mgr, EVT_RECHECK, key);
    4e4c:	2102      	movs	r1, #2
    4e4e:	4628      	mov	r0, r5
    4e50:	f7fb fb20 	bl	494 <process_event>
    4e54:	e7dd      	b.n	4e12 <onoff_request+0x70>
			notify_one(mgr, cli, state, 0);
    4e56:	2300      	movs	r3, #0
    4e58:	4662      	mov	r2, ip
    4e5a:	4631      	mov	r1, r6
    4e5c:	4628      	mov	r0, r5
    4e5e:	f7ff ff4b 	bl	4cf8 <notify_one>
    4e62:	e7d6      	b.n	4e12 <onoff_request+0x70>

00004e64 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    4e64:	4602      	mov	r2, r0
    4e66:	b158      	cbz	r0, 4e80 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    4e68:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    4e6a:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    4e6e:	2b01      	cmp	r3, #1
    4e70:	d003      	beq.n	4e7a <sys_notify_validate+0x16>
    4e72:	2b03      	cmp	r3, #3
    4e74:	d107      	bne.n	4e86 <sys_notify_validate+0x22>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    4e76:	6803      	ldr	r3, [r0, #0]
    4e78:	b143      	cbz	r3, 4e8c <sys_notify_validate+0x28>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    4e7a:	2000      	movs	r0, #0
    4e7c:	6090      	str	r0, [r2, #8]
    4e7e:	4770      	bx	lr
		return -EINVAL;
    4e80:	f06f 0015 	mvn.w	r0, #21
    4e84:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
    4e86:	f06f 0015 	mvn.w	r0, #21
    4e8a:	4770      	bx	lr
			rv = -EINVAL;
    4e8c:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    4e90:	4770      	bx	lr

00004e92 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    4e92:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    4e94:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    4e96:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    4e9a:	6081      	str	r1, [r0, #8]
	switch (method) {
    4e9c:	2a03      	cmp	r2, #3
    4e9e:	d103      	bne.n	4ea8 <sys_notify_finalize+0x16>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    4ea0:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    4ea2:	2200      	movs	r2, #0
    4ea4:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    4ea6:	4770      	bx	lr
	sys_notify_generic_callback rv = NULL;
    4ea8:	2000      	movs	r0, #0
    4eaa:	e7fa      	b.n	4ea2 <sys_notify_finalize+0x10>

00004eac <extract_decimal>:
{
    4eac:	4684      	mov	ip, r0
	const char *sp = *str;
    4eae:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
    4eb0:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
    4eb2:	e006      	b.n	4ec2 <extract_decimal+0x16>
		val = 10U * val + *sp++ - '0';
    4eb4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    4eb8:	3201      	adds	r2, #1
    4eba:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    4ebe:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    4ec2:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    4ec4:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    4ec8:	2909      	cmp	r1, #9
    4eca:	d9f3      	bls.n	4eb4 <extract_decimal+0x8>
	*str = sp;
    4ecc:	f8cc 2000 	str.w	r2, [ip]
}
    4ed0:	4770      	bx	lr

00004ed2 <extract_width>:
{
    4ed2:	b530      	push	{r4, r5, lr}
    4ed4:	b083      	sub	sp, #12
    4ed6:	4604      	mov	r4, r0
    4ed8:	9101      	str	r1, [sp, #4]
	conv->width_present = true;
    4eda:	7803      	ldrb	r3, [r0, #0]
    4edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    4ee0:	7003      	strb	r3, [r0, #0]
	if (*sp == '*') {
    4ee2:	460d      	mov	r5, r1
    4ee4:	780b      	ldrb	r3, [r1, #0]
    4ee6:	2b2a      	cmp	r3, #42	; 0x2a
    4ee8:	d018      	beq.n	4f1c <extract_width+0x4a>
	size_t width = extract_decimal(&sp);
    4eea:	a801      	add	r0, sp, #4
    4eec:	f7ff ffde 	bl	4eac <extract_decimal>
	if (sp != wp) {
    4ef0:	9b01      	ldr	r3, [sp, #4]
    4ef2:	429d      	cmp	r5, r3
    4ef4:	d00f      	beq.n	4f16 <extract_width+0x44>
		conv->width_present = true;
    4ef6:	7823      	ldrb	r3, [r4, #0]
    4ef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    4efc:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
    4efe:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
    4f00:	b2db      	uxtb	r3, r3
    4f02:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
    4f06:	2800      	cmp	r0, #0
    4f08:	db10      	blt.n	4f2c <extract_width+0x5a>
    4f0a:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
    4f0c:	4313      	orrs	r3, r2
    4f0e:	7822      	ldrb	r2, [r4, #0]
    4f10:	f363 0241 	bfi	r2, r3, #1, #1
    4f14:	7022      	strb	r2, [r4, #0]
	return sp;
    4f16:	9801      	ldr	r0, [sp, #4]
}
    4f18:	b003      	add	sp, #12
    4f1a:	bd30      	pop	{r4, r5, pc}
		conv->width_star = true;
    4f1c:	7843      	ldrb	r3, [r0, #1]
    4f1e:	f043 0301 	orr.w	r3, r3, #1
    4f22:	7043      	strb	r3, [r0, #1]
		return ++sp;
    4f24:	4608      	mov	r0, r1
    4f26:	3001      	adds	r0, #1
    4f28:	9001      	str	r0, [sp, #4]
    4f2a:	e7f5      	b.n	4f18 <extract_width+0x46>
				      || (width != (size_t)conv->width_value));
    4f2c:	2201      	movs	r2, #1
    4f2e:	e7ed      	b.n	4f0c <extract_width+0x3a>

00004f30 <extract_prec>:
{
    4f30:	b510      	push	{r4, lr}
    4f32:	b082      	sub	sp, #8
    4f34:	9101      	str	r1, [sp, #4]
	conv->prec_present = (*sp == '.');
    4f36:	780b      	ldrb	r3, [r1, #0]
    4f38:	2b2e      	cmp	r3, #46	; 0x2e
    4f3a:	bf14      	ite	ne
    4f3c:	2300      	movne	r3, #0
    4f3e:	2301      	moveq	r3, #1
    4f40:	7842      	ldrb	r2, [r0, #1]
    4f42:	f363 0241 	bfi	r2, r3, #1, #1
    4f46:	7042      	strb	r2, [r0, #1]
	if (!conv->prec_present) {
    4f48:	b1c3      	cbz	r3, 4f7c <extract_prec+0x4c>
    4f4a:	4604      	mov	r4, r0
	++sp;
    4f4c:	9b01      	ldr	r3, [sp, #4]
    4f4e:	1c5a      	adds	r2, r3, #1
    4f50:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
    4f52:	785b      	ldrb	r3, [r3, #1]
    4f54:	2b2a      	cmp	r3, #42	; 0x2a
    4f56:	d013      	beq.n	4f80 <extract_prec+0x50>
	size_t prec = extract_decimal(&sp);
    4f58:	a801      	add	r0, sp, #4
    4f5a:	f7ff ffa7 	bl	4eac <extract_decimal>
	conv->prec_value = prec;
    4f5e:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
    4f60:	7823      	ldrb	r3, [r4, #0]
    4f62:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
    4f66:	2800      	cmp	r0, #0
    4f68:	db12      	blt.n	4f90 <extract_prec+0x60>
    4f6a:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
    4f6c:	4313      	orrs	r3, r2
    4f6e:	7822      	ldrb	r2, [r4, #0]
    4f70:	f363 0241 	bfi	r2, r3, #1, #1
    4f74:	7022      	strb	r2, [r4, #0]
	return sp;
    4f76:	9801      	ldr	r0, [sp, #4]
}
    4f78:	b002      	add	sp, #8
    4f7a:	bd10      	pop	{r4, pc}
		return sp;
    4f7c:	4608      	mov	r0, r1
    4f7e:	e7fb      	b.n	4f78 <extract_prec+0x48>
		conv->prec_star = true;
    4f80:	7843      	ldrb	r3, [r0, #1]
    4f82:	f043 0304 	orr.w	r3, r3, #4
    4f86:	7043      	strb	r3, [r0, #1]
		return ++sp;
    4f88:	4610      	mov	r0, r2
    4f8a:	3001      	adds	r0, #1
    4f8c:	9001      	str	r0, [sp, #4]
    4f8e:	e7f3      	b.n	4f78 <extract_prec+0x48>
			      || (prec != (size_t)conv->prec_value));
    4f90:	2201      	movs	r2, #1
    4f92:	e7eb      	b.n	4f6c <extract_prec+0x3c>

00004f94 <extract_length>:
{
    4f94:	4602      	mov	r2, r0
	switch (*sp) {
    4f96:	780b      	ldrb	r3, [r1, #0]
    4f98:	3b4c      	subs	r3, #76	; 0x4c
    4f9a:	2b2e      	cmp	r3, #46	; 0x2e
    4f9c:	d85b      	bhi.n	5056 <extract_length+0xc2>
    4f9e:	e8df f003 	tbb	[pc, r3]
    4fa2:	5a4f      	.short	0x5a4f
    4fa4:	5a5a5a5a 	.word	0x5a5a5a5a
    4fa8:	5a5a5a5a 	.word	0x5a5a5a5a
    4fac:	5a5a5a5a 	.word	0x5a5a5a5a
    4fb0:	5a5a5a5a 	.word	0x5a5a5a5a
    4fb4:	5a5a5a5a 	.word	0x5a5a5a5a
    4fb8:	5a5a5a5a 	.word	0x5a5a5a5a
    4fbc:	5a185a5a 	.word	0x5a185a5a
    4fc0:	5a295a3a 	.word	0x5a295a3a
    4fc4:	5a5a5a5a 	.word	0x5a5a5a5a
    4fc8:	5a485a5a 	.word	0x5a485a5a
    4fcc:	5a5a5a5a 	.word	0x5a5a5a5a
    4fd0:	41          	.byte	0x41
    4fd1:	00          	.byte	0x00
		if (*++sp == 'h') {
    4fd2:	1c48      	adds	r0, r1, #1
    4fd4:	784b      	ldrb	r3, [r1, #1]
    4fd6:	2b68      	cmp	r3, #104	; 0x68
    4fd8:	d005      	beq.n	4fe6 <extract_length+0x52>
			conv->length_mod = LENGTH_H;
    4fda:	7853      	ldrb	r3, [r2, #1]
    4fdc:	2102      	movs	r1, #2
    4fde:	f361 03c6 	bfi	r3, r1, #3, #4
    4fe2:	7053      	strb	r3, [r2, #1]
    4fe4:	4770      	bx	lr
			conv->length_mod = LENGTH_HH;
    4fe6:	7853      	ldrb	r3, [r2, #1]
    4fe8:	2001      	movs	r0, #1
    4fea:	f360 03c6 	bfi	r3, r0, #3, #4
    4fee:	7053      	strb	r3, [r2, #1]
			++sp;
    4ff0:	1c88      	adds	r0, r1, #2
    4ff2:	4770      	bx	lr
		if (*++sp == 'l') {
    4ff4:	1c48      	adds	r0, r1, #1
    4ff6:	784b      	ldrb	r3, [r1, #1]
    4ff8:	2b6c      	cmp	r3, #108	; 0x6c
    4ffa:	d005      	beq.n	5008 <extract_length+0x74>
			conv->length_mod = LENGTH_L;
    4ffc:	7853      	ldrb	r3, [r2, #1]
    4ffe:	2103      	movs	r1, #3
    5000:	f361 03c6 	bfi	r3, r1, #3, #4
    5004:	7053      	strb	r3, [r2, #1]
    5006:	4770      	bx	lr
			conv->length_mod = LENGTH_LL;
    5008:	7853      	ldrb	r3, [r2, #1]
    500a:	2004      	movs	r0, #4
    500c:	f360 03c6 	bfi	r3, r0, #3, #4
    5010:	7053      	strb	r3, [r2, #1]
			++sp;
    5012:	1c88      	adds	r0, r1, #2
    5014:	4770      	bx	lr
		conv->length_mod = LENGTH_J;
    5016:	7853      	ldrb	r3, [r2, #1]
    5018:	2005      	movs	r0, #5
    501a:	f360 03c6 	bfi	r3, r0, #3, #4
    501e:	7053      	strb	r3, [r2, #1]
		++sp;
    5020:	1c48      	adds	r0, r1, #1
		break;
    5022:	4770      	bx	lr
		conv->length_mod = LENGTH_Z;
    5024:	7853      	ldrb	r3, [r2, #1]
    5026:	2006      	movs	r0, #6
    5028:	f360 03c6 	bfi	r3, r0, #3, #4
    502c:	7053      	strb	r3, [r2, #1]
		++sp;
    502e:	1c48      	adds	r0, r1, #1
		break;
    5030:	4770      	bx	lr
		conv->length_mod = LENGTH_T;
    5032:	7853      	ldrb	r3, [r2, #1]
    5034:	2007      	movs	r0, #7
    5036:	f360 03c6 	bfi	r3, r0, #3, #4
    503a:	7053      	strb	r3, [r2, #1]
		++sp;
    503c:	1c48      	adds	r0, r1, #1
		break;
    503e:	4770      	bx	lr
		conv->length_mod = LENGTH_UPPER_L;
    5040:	7853      	ldrb	r3, [r2, #1]
    5042:	2008      	movs	r0, #8
    5044:	f360 03c6 	bfi	r3, r0, #3, #4
    5048:	7053      	strb	r3, [r2, #1]
		++sp;
    504a:	1c48      	adds	r0, r1, #1
		conv->unsupported = true;
    504c:	7813      	ldrb	r3, [r2, #0]
    504e:	f043 0302 	orr.w	r3, r3, #2
    5052:	7013      	strb	r3, [r2, #0]
		break;
    5054:	4770      	bx	lr
		conv->length_mod = LENGTH_NONE;
    5056:	7853      	ldrb	r3, [r2, #1]
    5058:	f36f 03c6 	bfc	r3, #3, #4
    505c:	7053      	strb	r3, [r2, #1]
		break;
    505e:	4608      	mov	r0, r1
}
    5060:	4770      	bx	lr

00005062 <extract_specifier>:
{
    5062:	b500      	push	{lr}
    5064:	4602      	mov	r2, r0
	conv->specifier = *sp++;
    5066:	4608      	mov	r0, r1
    5068:	f810 3b01 	ldrb.w	r3, [r0], #1
    506c:	70d3      	strb	r3, [r2, #3]
	switch (conv->specifier) {
    506e:	2b78      	cmp	r3, #120	; 0x78
    5070:	d817      	bhi.n	50a2 <extract_specifier+0x40>
    5072:	2b6e      	cmp	r3, #110	; 0x6e
    5074:	d229      	bcs.n	50ca <extract_specifier+0x68>
    5076:	2b69      	cmp	r3, #105	; 0x69
    5078:	d813      	bhi.n	50a2 <extract_specifier+0x40>
    507a:	2b58      	cmp	r3, #88	; 0x58
    507c:	d317      	bcc.n	50ae <extract_specifier+0x4c>
    507e:	f1a3 0c58 	sub.w	ip, r3, #88	; 0x58
    5082:	fa5f fc8c 	uxtb.w	ip, ip
    5086:	2101      	movs	r1, #1
    5088:	fa01 f10c 	lsl.w	r1, r1, ip
    508c:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    5090:	d114      	bne.n	50bc <extract_specifier+0x5a>
    5092:	f640 0c01 	movw	ip, #2049	; 0x801
    5096:	ea11 0f0c 	tst.w	r1, ip
    509a:	d155      	bne.n	5148 <extract_specifier+0xe6>
    509c:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    50a0:	d13a      	bne.n	5118 <extract_specifier+0xb6>
		conv->invalid = true;
    50a2:	7813      	ldrb	r3, [r2, #0]
    50a4:	f043 0301 	orr.w	r3, r3, #1
    50a8:	7013      	strb	r3, [r2, #0]
	bool unsupported = false;
    50aa:	2100      	movs	r1, #0
		break;
    50ac:	e042      	b.n	5134 <extract_specifier+0xd2>
	switch (conv->specifier) {
    50ae:	2b41      	cmp	r3, #65	; 0x41
    50b0:	d004      	beq.n	50bc <extract_specifier+0x5a>
    50b2:	d3f6      	bcc.n	50a2 <extract_specifier+0x40>
    50b4:	3b45      	subs	r3, #69	; 0x45
    50b6:	b2db      	uxtb	r3, r3
    50b8:	2b02      	cmp	r3, #2
    50ba:	d8f2      	bhi.n	50a2 <extract_specifier+0x40>
		conv->specifier_cat = SPECIFIER_FP;
    50bc:	7893      	ldrb	r3, [r2, #2]
    50be:	2104      	movs	r1, #4
    50c0:	f361 0302 	bfi	r3, r1, #0, #3
    50c4:	7093      	strb	r3, [r2, #2]
			unsupported = true;
    50c6:	2101      	movs	r1, #1
			break;
    50c8:	e034      	b.n	5134 <extract_specifier+0xd2>
	switch (conv->specifier) {
    50ca:	f1a3 016e 	sub.w	r1, r3, #110	; 0x6e
    50ce:	b2c9      	uxtb	r1, r1
    50d0:	f04f 0c01 	mov.w	ip, #1
    50d4:	fa0c fc01 	lsl.w	ip, ip, r1
    50d8:	f240 4182 	movw	r1, #1154	; 0x482
    50dc:	ea1c 0f01 	tst.w	ip, r1
    50e0:	bf14      	ite	ne
    50e2:	f04f 0e01 	movne.w	lr, #1
    50e6:	f04f 0e00 	moveq.w	lr, #0
    50ea:	d12d      	bne.n	5148 <extract_specifier+0xe6>
    50ec:	f01c 0f24 	tst.w	ip, #36	; 0x24
    50f0:	bf14      	ite	ne
    50f2:	2101      	movne	r1, #1
    50f4:	2100      	moveq	r1, #0
    50f6:	d139      	bne.n	516c <extract_specifier+0x10a>
    50f8:	f01c 0c01 	ands.w	ip, ip, #1
    50fc:	d0d1      	beq.n	50a2 <extract_specifier+0x40>
		conv->specifier_cat = SPECIFIER_PTR;
    50fe:	7893      	ldrb	r3, [r2, #2]
    5100:	f04f 0e03 	mov.w	lr, #3
    5104:	f36e 0302 	bfi	r3, lr, #0, #3
    5108:	7093      	strb	r3, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    510a:	7853      	ldrb	r3, [r2, #1]
    510c:	f003 0378 	and.w	r3, r3, #120	; 0x78
    5110:	2b40      	cmp	r3, #64	; 0x40
    5112:	d10f      	bne.n	5134 <extract_specifier+0xd2>
			unsupported = true;
    5114:	4661      	mov	r1, ip
    5116:	e00d      	b.n	5134 <extract_specifier+0xd2>
		conv->specifier_cat = SPECIFIER_SINT;
    5118:	7891      	ldrb	r1, [r2, #2]
    511a:	f04f 0c01 	mov.w	ip, #1
    511e:	f36c 0102 	bfi	r1, ip, #0, #3
    5122:	7091      	strb	r1, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    5124:	7851      	ldrb	r1, [r2, #1]
    5126:	f001 0178 	and.w	r1, r1, #120	; 0x78
    512a:	2940      	cmp	r1, #64	; 0x40
    512c:	d013      	beq.n	5156 <extract_specifier+0xf4>
		if (conv->specifier == 'c') {
    512e:	2b63      	cmp	r3, #99	; 0x63
    5130:	d018      	beq.n	5164 <extract_specifier+0x102>
	bool unsupported = false;
    5132:	2100      	movs	r1, #0
	conv->unsupported |= unsupported;
    5134:	7813      	ldrb	r3, [r2, #0]
    5136:	f3c3 0c40 	ubfx	ip, r3, #1, #1
    513a:	ea41 010c 	orr.w	r1, r1, ip
    513e:	f361 0341 	bfi	r3, r1, #1, #1
    5142:	7013      	strb	r3, [r2, #0]
}
    5144:	f85d fb04 	ldr.w	pc, [sp], #4
		conv->specifier_cat = SPECIFIER_UINT;
    5148:	7891      	ldrb	r1, [r2, #2]
    514a:	f04f 0c02 	mov.w	ip, #2
    514e:	f36c 0102 	bfi	r1, ip, #0, #3
    5152:	7091      	strb	r1, [r2, #2]
    5154:	e7e6      	b.n	5124 <extract_specifier+0xc2>
			conv->invalid = true;
    5156:	f892 c000 	ldrb.w	ip, [r2]
    515a:	f04c 0c01 	orr.w	ip, ip, #1
    515e:	f882 c000 	strb.w	ip, [r2]
    5162:	e7e4      	b.n	512e <extract_specifier+0xcc>
			unsupported = (conv->length_mod != LENGTH_NONE);
    5164:	3900      	subs	r1, #0
    5166:	bf18      	it	ne
    5168:	2101      	movne	r1, #1
    516a:	e7e3      	b.n	5134 <extract_specifier+0xd2>
		conv->specifier_cat = SPECIFIER_PTR;
    516c:	7893      	ldrb	r3, [r2, #2]
    516e:	f04f 0c03 	mov.w	ip, #3
    5172:	f36c 0302 	bfi	r3, ip, #0, #3
    5176:	7093      	strb	r3, [r2, #2]
		if (conv->length_mod != LENGTH_NONE) {
    5178:	7853      	ldrb	r3, [r2, #1]
    517a:	f013 0f78 	tst.w	r3, #120	; 0x78
    517e:	d1d9      	bne.n	5134 <extract_specifier+0xd2>
	bool unsupported = false;
    5180:	4671      	mov	r1, lr
    5182:	e7d7      	b.n	5134 <extract_specifier+0xd2>

00005184 <extract_conversion>:
{
    5184:	b510      	push	{r4, lr}
    5186:	4604      	mov	r4, r0
    5188:	4608      	mov	r0, r1
	*conv = (struct conversion) {
    518a:	2300      	movs	r3, #0
    518c:	6023      	str	r3, [r4, #0]
    518e:	6063      	str	r3, [r4, #4]
    5190:	60a3      	str	r3, [r4, #8]
	if (*sp == '%') {
    5192:	784b      	ldrb	r3, [r1, #1]
    5194:	2b25      	cmp	r3, #37	; 0x25
    5196:	d014      	beq.n	51c2 <extract_conversion+0x3e>
    5198:	3101      	adds	r1, #1
	sp = extract_flags(conv, sp);
    519a:	4620      	mov	r0, r4
    519c:	f7fb fa30 	bl	600 <extract_flags>
    51a0:	4601      	mov	r1, r0
	sp = extract_width(conv, sp);
    51a2:	4620      	mov	r0, r4
    51a4:	f7ff fe95 	bl	4ed2 <extract_width>
    51a8:	4601      	mov	r1, r0
	sp = extract_prec(conv, sp);
    51aa:	4620      	mov	r0, r4
    51ac:	f7ff fec0 	bl	4f30 <extract_prec>
    51b0:	4601      	mov	r1, r0
	sp = extract_length(conv, sp);
    51b2:	4620      	mov	r0, r4
    51b4:	f7ff feee 	bl	4f94 <extract_length>
    51b8:	4601      	mov	r1, r0
	sp = extract_specifier(conv, sp);
    51ba:	4620      	mov	r0, r4
    51bc:	f7ff ff51 	bl	5062 <extract_specifier>
}
    51c0:	bd10      	pop	{r4, pc}
		conv->specifier = *sp++;
    51c2:	3002      	adds	r0, #2
    51c4:	70e3      	strb	r3, [r4, #3]
		return sp;
    51c6:	e7fb      	b.n	51c0 <extract_conversion+0x3c>

000051c8 <conversion_radix>:
	switch (specifier) {
    51c8:	286f      	cmp	r0, #111	; 0x6f
    51ca:	d00c      	beq.n	51e6 <conversion_radix+0x1e>
    51cc:	d905      	bls.n	51da <conversion_radix+0x12>
    51ce:	2870      	cmp	r0, #112	; 0x70
    51d0:	d00b      	beq.n	51ea <conversion_radix+0x22>
    51d2:	2878      	cmp	r0, #120	; 0x78
    51d4:	d10b      	bne.n	51ee <conversion_radix+0x26>
		return 16;
    51d6:	2010      	movs	r0, #16
    51d8:	4770      	bx	lr
	switch (specifier) {
    51da:	2858      	cmp	r0, #88	; 0x58
    51dc:	d001      	beq.n	51e2 <conversion_radix+0x1a>
    51de:	200a      	movs	r0, #10
    51e0:	4770      	bx	lr
		return 16;
    51e2:	2010      	movs	r0, #16
    51e4:	4770      	bx	lr
		return 8;
    51e6:	2008      	movs	r0, #8
    51e8:	4770      	bx	lr
		return 16;
    51ea:	2010      	movs	r0, #16
    51ec:	4770      	bx	lr
	switch (specifier) {
    51ee:	200a      	movs	r0, #10
}
    51f0:	4770      	bx	lr

000051f2 <encode_uint>:
{
    51f2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    51f6:	4605      	mov	r5, r0
    51f8:	460c      	mov	r4, r1
    51fa:	4693      	mov	fp, r2
    51fc:	4699      	mov	r9, r3
    51fe:	9f0a      	ldr	r7, [sp, #40]	; 0x28
	bool upcase = isupper((int)conv->specifier);
    5200:	78d0      	ldrb	r0, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    5202:	f1a0 0a41 	sub.w	sl, r0, #65	; 0x41
	const unsigned int radix = conversion_radix(conv->specifier);
    5206:	f7ff ffdf 	bl	51c8 <conversion_radix>
    520a:	4606      	mov	r6, r0
	char *bp = bps + (bpe - bps);
    520c:	e015      	b.n	523a <encode_uint+0x48>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    520e:	f1ba 0f19 	cmp.w	sl, #25
    5212:	d820      	bhi.n	5256 <encode_uint+0x64>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    5214:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5216:	3237      	adds	r2, #55	; 0x37
    5218:	b2d2      	uxtb	r2, r2
    521a:	f807 2d01 	strb.w	r2, [r7, #-1]!
		value /= radix;
    521e:	4632      	mov	r2, r6
    5220:	4643      	mov	r3, r8
    5222:	4628      	mov	r0, r5
    5224:	4621      	mov	r1, r4
    5226:	f7fa ff95 	bl	154 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
    522a:	42b5      	cmp	r5, r6
    522c:	f174 0400 	sbcs.w	r4, r4, #0
    5230:	d315      	bcc.n	525e <encode_uint+0x6c>
    5232:	454f      	cmp	r7, r9
    5234:	d913      	bls.n	525e <encode_uint+0x6c>
		value /= radix;
    5236:	4605      	mov	r5, r0
    5238:	460c      	mov	r4, r1
		unsigned int lsv = (unsigned int)(value % radix);
    523a:	f04f 0800 	mov.w	r8, #0
    523e:	4632      	mov	r2, r6
    5240:	4643      	mov	r3, r8
    5242:	4628      	mov	r0, r5
    5244:	4621      	mov	r1, r4
    5246:	f7fa ff85 	bl	154 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    524a:	2a09      	cmp	r2, #9
    524c:	d8df      	bhi.n	520e <encode_uint+0x1c>
    524e:	b2d2      	uxtb	r2, r2
    5250:	3230      	adds	r2, #48	; 0x30
    5252:	b2d2      	uxtb	r2, r2
    5254:	e7e1      	b.n	521a <encode_uint+0x28>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    5256:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5258:	3257      	adds	r2, #87	; 0x57
    525a:	b2d2      	uxtb	r2, r2
    525c:	e7dd      	b.n	521a <encode_uint+0x28>
	if (conv->flag_hash) {
    525e:	f89b 3000 	ldrb.w	r3, [fp]
    5262:	f013 0f20 	tst.w	r3, #32
    5266:	d003      	beq.n	5270 <encode_uint+0x7e>
		if (radix == 8) {
    5268:	2e08      	cmp	r6, #8
    526a:	d004      	beq.n	5276 <encode_uint+0x84>
		} else if (radix == 16) {
    526c:	2e10      	cmp	r6, #16
    526e:	d009      	beq.n	5284 <encode_uint+0x92>
}
    5270:	4638      	mov	r0, r7
    5272:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
    5276:	f89b 3002 	ldrb.w	r3, [fp, #2]
    527a:	f043 0308 	orr.w	r3, r3, #8
    527e:	f88b 3002 	strb.w	r3, [fp, #2]
    5282:	e7f5      	b.n	5270 <encode_uint+0x7e>
			conv->altform_0c = true;
    5284:	f89b 3002 	ldrb.w	r3, [fp, #2]
    5288:	f043 0310 	orr.w	r3, r3, #16
    528c:	f88b 3002 	strb.w	r3, [fp, #2]
    5290:	e7ee      	b.n	5270 <encode_uint+0x7e>

00005292 <store_count>:
	switch ((enum length_mod_enum)conv->length_mod) {
    5292:	7843      	ldrb	r3, [r0, #1]
    5294:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    5298:	2b07      	cmp	r3, #7
    529a:	d818      	bhi.n	52ce <store_count+0x3c>
    529c:	e8df f003 	tbb	[pc, r3]
    52a0:	0a080604 	.word	0x0a080604
    52a4:	1614100c 	.word	0x1614100c
		*(int *)dp = count;
    52a8:	600a      	str	r2, [r1, #0]
		break;
    52aa:	4770      	bx	lr
		*(signed char *)dp = (signed char)count;
    52ac:	700a      	strb	r2, [r1, #0]
		break;
    52ae:	4770      	bx	lr
		*(short *)dp = (short)count;
    52b0:	800a      	strh	r2, [r1, #0]
		break;
    52b2:	4770      	bx	lr
		*(long *)dp = (long)count;
    52b4:	600a      	str	r2, [r1, #0]
		break;
    52b6:	4770      	bx	lr
		*(long long *)dp = (long long)count;
    52b8:	17d3      	asrs	r3, r2, #31
    52ba:	600a      	str	r2, [r1, #0]
    52bc:	604b      	str	r3, [r1, #4]
		break;
    52be:	4770      	bx	lr
		*(intmax_t *)dp = (intmax_t)count;
    52c0:	17d3      	asrs	r3, r2, #31
    52c2:	600a      	str	r2, [r1, #0]
    52c4:	604b      	str	r3, [r1, #4]
		break;
    52c6:	4770      	bx	lr
		*(size_t *)dp = (size_t)count;
    52c8:	600a      	str	r2, [r1, #0]
		break;
    52ca:	4770      	bx	lr
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    52cc:	600a      	str	r2, [r1, #0]
}
    52ce:	4770      	bx	lr

000052d0 <outs>:
{
    52d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    52d4:	4607      	mov	r7, r0
    52d6:	460e      	mov	r6, r1
    52d8:	4614      	mov	r4, r2
    52da:	4698      	mov	r8, r3
	size_t count = 0;
    52dc:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    52de:	e006      	b.n	52ee <outs+0x1e>
		int rc = out((int)*sp++, ctx);
    52e0:	4631      	mov	r1, r6
    52e2:	f814 0b01 	ldrb.w	r0, [r4], #1
    52e6:	47b8      	blx	r7
		if (rc < 0) {
    52e8:	2800      	cmp	r0, #0
    52ea:	db09      	blt.n	5300 <outs+0x30>
		++count;
    52ec:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    52ee:	4544      	cmp	r4, r8
    52f0:	d3f6      	bcc.n	52e0 <outs+0x10>
    52f2:	f1b8 0f00 	cmp.w	r8, #0
    52f6:	d102      	bne.n	52fe <outs+0x2e>
    52f8:	7823      	ldrb	r3, [r4, #0]
    52fa:	2b00      	cmp	r3, #0
    52fc:	d1f0      	bne.n	52e0 <outs+0x10>
	return (int)count;
    52fe:	4628      	mov	r0, r5
}
    5300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005304 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    5304:	4770      	bx	lr

00005306 <arch_busy_wait>:

void arch_busy_wait(uint32_t time_us)
{
    5306:	b508      	push	{r3, lr}
	nrfx_coredep_delay_us(time_us);
    5308:	f7fb fcbc 	bl	c84 <nrfx_coredep_delay_us>
}
    530c:	bd08      	pop	{r3, pc}

0000530e <nrf_regulators_system_off>:
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
    530e:	2301      	movs	r3, #1
    5310:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    5314:	f3bf 8f4f 	dsb	sy
        __WFE();
    5318:	bf20      	wfe
    while (true)
    531a:	e7fd      	b.n	5318 <nrf_regulators_system_off+0xa>

0000531c <pm_state_exit_post_ops>:
    531c:	2300      	movs	r3, #0
    531e:	f383 8811 	msr	BASEPRI, r3
    5322:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    5326:	4770      	bx	lr

00005328 <atomic_test_and_clear_bit>:
 * @param bit Bit number (starting from 0).
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
    5328:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
    532a:	f001 021f 	and.w	r2, r1, #31
    532e:	2301      	movs	r3, #1
    5330:	4093      	lsls	r3, r2
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    5332:	0949      	lsrs	r1, r1, #5
    5334:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    5338:	43d9      	mvns	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    533a:	e8d0 2fef 	ldaex	r2, [r0]
    533e:	ea02 0c01 	and.w	ip, r2, r1
    5342:	e8c0 cfee 	stlex	lr, ip, [r0]
    5346:	f1be 0f00 	cmp.w	lr, #0
    534a:	d1f6      	bne.n	533a <atomic_test_and_clear_bit+0x12>

	return (old & mask) != 0;
    534c:	4213      	tst	r3, r2
}
    534e:	bf14      	ite	ne
    5350:	2001      	movne	r0, #1
    5352:	2000      	moveq	r0, #0
    5354:	f85d fb04 	ldr.w	pc, [sp], #4

00005358 <atomic_set_bit>:
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    5358:	f001 021f 	and.w	r2, r1, #31
    535c:	2301      	movs	r3, #1
    535e:	4093      	lsls	r3, r2

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    5360:	0949      	lsrs	r1, r1, #5
    5362:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5366:	e8d0 2fef 	ldaex	r2, [r0]
    536a:	431a      	orrs	r2, r3
    536c:	e8c0 2fe1 	stlex	r1, r2, [r0]
    5370:	2900      	cmp	r1, #0
    5372:	d1f8      	bne.n	5366 <atomic_set_bit+0xe>
}
    5374:	4770      	bx	lr

00005376 <pm_policy_state_lock_is_active>:
			return (atomic_get(&substate_lock_t[i].lock) != 0);
		}
	}

	return false;
}
    5376:	2000      	movs	r0, #0
    5378:	4770      	bx	lr

0000537a <abort_function>:
{
    537a:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    537c:	2000      	movs	r0, #0
    537e:	f7fb fc6d 	bl	c5c <sys_reboot>

00005382 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    5382:	b508      	push	{r3, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    5384:	f001 f82b 	bl	63de <z_fatal_error>
}
    5388:	bd08      	pop	{r3, pc}

0000538a <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    538a:	b508      	push	{r3, lr}
    538c:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    538e:	6800      	ldr	r0, [r0, #0]
    5390:	f7ff fff7 	bl	5382 <z_arm_fatal_error>
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
    5394:	bd08      	pop	{r3, pc}

00005396 <arch_irq_enable>:
{
    5396:	b508      	push	{r3, lr}
	NVIC_EnableIRQ((IRQn_Type)irq);
    5398:	b240      	sxtb	r0, r0
    539a:	f7fb ff47 	bl	122c <__NVIC_EnableIRQ>
}
    539e:	bd08      	pop	{r3, pc}

000053a0 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    53a0:	b508      	push	{r3, lr}
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    53a2:	3101      	adds	r1, #1
    53a4:	b240      	sxtb	r0, r0
    53a6:	f7fb ff4f 	bl	1248 <__NVIC_SetPriority>
}
    53aa:	bd08      	pop	{r3, pc}

000053ac <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
    53ac:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    53ae:	2100      	movs	r1, #0
    53b0:	2001      	movs	r0, #1
    53b2:	f7ff ffe6 	bl	5382 <z_arm_fatal_error>
}
    53b6:	bd08      	pop	{r3, pc}

000053b8 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    53b8:	b508      	push	{r3, lr}
	handler();
    53ba:	f7fb ff67 	bl	128c <z_SysNmiOnReset>
	z_arm_int_exit();
    53be:	f7fc f837 	bl	1430 <z_arm_exc_exit>
}
    53c2:	bd08      	pop	{r3, pc}

000053c4 <configure_builtin_stack_guard>:
	uint32_t guard_start = thread->stack_info.start;
    53c4:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    53c8:	f383 880b 	msr	PSPLIM, r3
}
    53cc:	4770      	bx	lr

000053ce <memory_fault_recoverable>:
}
    53ce:	2000      	movs	r0, #0
    53d0:	4770      	bx	lr

000053d2 <debug_monitor>:
	*recoverable = false;
    53d2:	2300      	movs	r3, #0
    53d4:	700b      	strb	r3, [r1, #0]
}
    53d6:	4770      	bx	lr

000053d8 <fault_handle>:
{
    53d8:	b508      	push	{r3, lr}
	*recoverable = false;
    53da:	2300      	movs	r3, #0
    53dc:	7013      	strb	r3, [r2, #0]
	switch (fault) {
    53de:	1ecb      	subs	r3, r1, #3
    53e0:	2b09      	cmp	r3, #9
    53e2:	d81a      	bhi.n	541a <fault_handle+0x42>
    53e4:	e8df f003 	tbb	[pc, r3]
    53e8:	110d0905 	.word	0x110d0905
    53ec:	19191919 	.word	0x19191919
    53f0:	1419      	.short	0x1419
		reason = hard_fault(esf, recoverable);
    53f2:	4611      	mov	r1, r2
    53f4:	f7fc f8c0 	bl	1578 <hard_fault>
		break;
    53f8:	e010      	b.n	541c <fault_handle+0x44>
		reason = mem_manage_fault(esf, 0, recoverable);
    53fa:	2100      	movs	r1, #0
    53fc:	f7fc f826 	bl	144c <mem_manage_fault>
		break;
    5400:	e00c      	b.n	541c <fault_handle+0x44>
		reason = bus_fault(esf, 0, recoverable);
    5402:	2100      	movs	r1, #0
    5404:	f7fc f858 	bl	14b8 <bus_fault>
		break;
    5408:	e008      	b.n	541c <fault_handle+0x44>
		reason = usage_fault(esf);
    540a:	f7fc f87f 	bl	150c <usage_fault>
		break;
    540e:	e005      	b.n	541c <fault_handle+0x44>
		debug_monitor(esf, recoverable);
    5410:	4611      	mov	r1, r2
    5412:	f7ff ffde 	bl	53d2 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    5416:	2000      	movs	r0, #0
		break;
    5418:	e000      	b.n	541c <fault_handle+0x44>
	switch (fault) {
    541a:	2000      	movs	r0, #0
}
    541c:	bd08      	pop	{r3, pc}

0000541e <sys_arch_reboot>:
{
    541e:	b508      	push	{r3, lr}
	NVIC_SystemReset();
    5420:	f7fc f994 	bl	174c <__NVIC_SystemReset>

00005424 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    5424:	e840 f000 	tt	r0, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
    5428:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    542c:	d001      	beq.n	5432 <arm_cmse_mpu_region_get+0xe>
		return addr_info.flags.mpu_region;
    542e:	b2c0      	uxtb	r0, r0
    5430:	4770      	bx	lr
	}

	return -EINVAL;
    5432:	f06f 0015 	mvn.w	r0, #21
}
    5436:	4770      	bx	lr

00005438 <region_init>:
{
    5438:	b508      	push	{r3, lr}
		(region_conf->base & MPU_RBAR_BASE_Msk)
    543a:	680b      	ldr	r3, [r1, #0]
    543c:	f023 0c1f 	bic.w	ip, r3, #31
		| (region_conf->attr.rbar &
    5440:	7a0b      	ldrb	r3, [r1, #8]
    5442:	f003 0e1f 	and.w	lr, r3, #31
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    5446:	68ca      	ldr	r2, [r1, #12]
    5448:	f022 021f 	bic.w	r2, r2, #31
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    544c:	095b      	lsrs	r3, r3, #5
    544e:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
	mpu_set_region(
    5452:	f042 0201 	orr.w	r2, r2, #1
    5456:	ea4c 010e 	orr.w	r1, ip, lr
    545a:	f7fc fa0b 	bl	1874 <mpu_set_region>
}
    545e:	bd08      	pop	{r3, pc}

00005460 <mpu_partition_is_valid>:
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
    5460:	6843      	ldr	r3, [r0, #4]
		&&
    5462:	2b1f      	cmp	r3, #31
    5464:	d908      	bls.n	5478 <mpu_partition_is_valid+0x18>
		&&
    5466:	f013 0f1f 	tst.w	r3, #31
    546a:	d107      	bne.n	547c <mpu_partition_is_valid+0x1c>
		((part->start &
    546c:	6803      	ldr	r3, [r0, #0]
		&&
    546e:	f013 0f1f 	tst.w	r3, #31
    5472:	d005      	beq.n	5480 <mpu_partition_is_valid+0x20>
    5474:	2000      	movs	r0, #0
    5476:	4770      	bx	lr
    5478:	2000      	movs	r0, #0
    547a:	4770      	bx	lr
    547c:	2000      	movs	r0, #0
    547e:	4770      	bx	lr
    5480:	2001      	movs	r0, #1
}
    5482:	4770      	bx	lr

00005484 <region_allocate_and_init>:
	if (index > (get_num_regions() - 1U)) {
    5484:	2807      	cmp	r0, #7
    5486:	d805      	bhi.n	5494 <region_allocate_and_init+0x10>
{
    5488:	b510      	push	{r4, lr}
    548a:	4604      	mov	r4, r0
	region_init(index, region_conf);
    548c:	f7ff ffd4 	bl	5438 <region_init>
	return index;
    5490:	4620      	mov	r0, r4
}
    5492:	bd10      	pop	{r4, pc}
		return -EINVAL;
    5494:	f06f 0015 	mvn.w	r0, #21
}
    5498:	4770      	bx	lr

0000549a <mpu_configure_region>:
{
    549a:	b510      	push	{r4, lr}
    549c:	b084      	sub	sp, #16
	region_conf.base = new_region->start;
    549e:	680b      	ldr	r3, [r1, #0]
    54a0:	9300      	str	r3, [sp, #0]
		&new_region->attr, new_region->start, new_region->size);
    54a2:	684c      	ldr	r4, [r1, #4]
	p_attr->rbar = attr->rbar &
    54a4:	f8b1 c008 	ldrh.w	ip, [r1, #8]
    54a8:	f89d 2008 	ldrb.w	r2, [sp, #8]
    54ac:	f36c 0204 	bfi	r2, ip, #0, #5
    54b0:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->mair_idx = attr->mair_idx;
    54b4:	8949      	ldrh	r1, [r1, #10]
    54b6:	b2d2      	uxtb	r2, r2
    54b8:	f361 1247 	bfi	r2, r1, #5, #3
    54bc:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    54c0:	f023 031f 	bic.w	r3, r3, #31
    54c4:	4423      	add	r3, r4
    54c6:	3b01      	subs	r3, #1
    54c8:	f023 031f 	bic.w	r3, r3, #31
    54cc:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
    54ce:	4669      	mov	r1, sp
    54d0:	f7ff ffd8 	bl	5484 <region_allocate_and_init>
}
    54d4:	b004      	add	sp, #16
    54d6:	bd10      	pop	{r4, pc}

000054d8 <get_region_index>:
{
    54d8:	b570      	push	{r4, r5, r6, lr}
    54da:	4604      	mov	r4, r0
    54dc:	460e      	mov	r6, r1
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    54de:	f7ff ffa1 	bl	5424 <arm_cmse_mpu_region_get>
    54e2:	4605      	mov	r5, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    54e4:	4434      	add	r4, r6
    54e6:	1e60      	subs	r0, r4, #1
    54e8:	f7ff ff9c 	bl	5424 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    54ec:	4285      	cmp	r5, r0
    54ee:	d101      	bne.n	54f4 <get_region_index+0x1c>
}
    54f0:	4628      	mov	r0, r5
    54f2:	bd70      	pop	{r4, r5, r6, pc}
	return -EINVAL;
    54f4:	f06f 0515 	mvn.w	r5, #21
    54f8:	e7fa      	b.n	54f0 <get_region_index+0x18>

000054fa <arm_core_mpu_configure_static_mpu_regions>:
{
    54fa:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    54fc:	f7fc faa8 	bl	1a50 <mpu_configure_static_mpu_regions>
}
    5500:	bd08      	pop	{r3, pc}

00005502 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    5502:	b508      	push	{r3, lr}
	if (mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    5504:	f7fc faae 	bl	1a64 <mpu_mark_areas_for_dynamic_regions>
}
    5508:	bd08      	pop	{r3, pc}

0000550a <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    550a:	4603      	mov	r3, r0
    550c:	b1a2      	cbz	r2, 5538 <strncpy+0x2e>
{
    550e:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
    5510:	780c      	ldrb	r4, [r1, #0]
    5512:	b12c      	cbz	r4, 5520 <strncpy+0x16>
		*d = *s;
    5514:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
    5518:	3101      	adds	r1, #1
		d++;
		n--;
    551a:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
    551c:	2a00      	cmp	r2, #0
    551e:	d1f7      	bne.n	5510 <strncpy+0x6>
	}

	while (n > 0) {
    5520:	b122      	cbz	r2, 552c <strncpy+0x22>
		*d = '\0';
    5522:	2100      	movs	r1, #0
    5524:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
    5528:	3a01      	subs	r2, #1
    552a:	e7f9      	b.n	5520 <strncpy+0x16>
	}

	return dest;
}
    552c:	bc10      	pop	{r4}
    552e:	4770      	bx	lr
		*d = '\0';
    5530:	2100      	movs	r1, #0
    5532:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    5536:	3a01      	subs	r2, #1
	while (n > 0) {
    5538:	2a00      	cmp	r2, #0
    553a:	d1f9      	bne.n	5530 <strncpy+0x26>
    553c:	4770      	bx	lr

0000553e <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    553e:	4603      	mov	r3, r0
	size_t n = 0;
    5540:	2000      	movs	r0, #0

	while (*s != '\0') {
    5542:	e001      	b.n	5548 <strlen+0xa>
		s++;
    5544:	3301      	adds	r3, #1
		n++;
    5546:	3001      	adds	r0, #1
	while (*s != '\0') {
    5548:	781a      	ldrb	r2, [r3, #0]
    554a:	2a00      	cmp	r2, #0
    554c:	d1fa      	bne.n	5544 <strlen+0x6>
	}

	return n;
}
    554e:	4770      	bx	lr

00005550 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    5550:	4603      	mov	r3, r0
	size_t n = 0;
    5552:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    5554:	e001      	b.n	555a <strnlen+0xa>
		s++;
    5556:	3301      	adds	r3, #1
		n++;
    5558:	3001      	adds	r0, #1
	while (*s != '\0' && n < maxlen) {
    555a:	781a      	ldrb	r2, [r3, #0]
    555c:	b10a      	cbz	r2, 5562 <strnlen+0x12>
    555e:	4288      	cmp	r0, r1
    5560:	d3f9      	bcc.n	5556 <strnlen+0x6>
	}

	return n;
}
    5562:	4770      	bx	lr

00005564 <memcpy>:
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    5564:	ea80 0301 	eor.w	r3, r0, r1
    5568:	f013 0f03 	tst.w	r3, #3
    556c:	d001      	beq.n	5572 <memcpy+0xe>
	unsigned char *d_byte = (unsigned char *)d;
    556e:	4603      	mov	r3, r0
    5570:	e023      	b.n	55ba <memcpy+0x56>
    5572:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
    5574:	f013 0f03 	tst.w	r3, #3
    5578:	d00f      	beq.n	559a <memcpy+0x36>
			if (n == 0) {
    557a:	b30a      	cbz	r2, 55c0 <memcpy+0x5c>
				return d;
			}
			*(d_byte++) = *(s_byte++);
    557c:	f811 cb01 	ldrb.w	ip, [r1], #1
    5580:	f803 cb01 	strb.w	ip, [r3], #1
			n--;
    5584:	3a01      	subs	r2, #1
    5586:	e7f5      	b.n	5574 <memcpy+0x10>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
    5588:	f811 cb01 	ldrb.w	ip, [r1], #1
    558c:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    5590:	3a01      	subs	r2, #1
	while (n > 0) {
    5592:	2a00      	cmp	r2, #0
    5594:	d1f8      	bne.n	5588 <memcpy+0x24>
	}

	return d;
}
    5596:	bc10      	pop	{r4}
    5598:	4770      	bx	lr
		while (n >= sizeof(mem_word_t)) {
    559a:	2a03      	cmp	r2, #3
    559c:	d90d      	bls.n	55ba <memcpy+0x56>
{
    559e:	b410      	push	{r4}
			*(d_word++) = *(s_word++);
    55a0:	f851 4b04 	ldr.w	r4, [r1], #4
    55a4:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
    55a8:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
    55aa:	2a03      	cmp	r2, #3
    55ac:	d8f8      	bhi.n	55a0 <memcpy+0x3c>
    55ae:	e7f0      	b.n	5592 <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
    55b0:	f811 cb01 	ldrb.w	ip, [r1], #1
    55b4:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    55b8:	3a01      	subs	r2, #1
	while (n > 0) {
    55ba:	2a00      	cmp	r2, #0
    55bc:	d1f8      	bne.n	55b0 <memcpy+0x4c>
    55be:	4770      	bx	lr
}
    55c0:	4770      	bx	lr

000055c2 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    55c2:	fa5f fc81 	uxtb.w	ip, r1
	unsigned char *d_byte = (unsigned char *)buf;
    55c6:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    55c8:	e002      	b.n	55d0 <memset+0xe>
		if (n == 0) {
			return buf;
		}
		*(d_byte++) = c_byte;
    55ca:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    55ce:	3a01      	subs	r2, #1
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    55d0:	f013 0f03 	tst.w	r3, #3
    55d4:	d002      	beq.n	55dc <memset+0x1a>
		if (n == 0) {
    55d6:	2a00      	cmp	r2, #0
    55d8:	d1f7      	bne.n	55ca <memset+0x8>
    55da:	e00f      	b.n	55fc <memset+0x3a>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
    55dc:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
    55de:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
    55e2:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    55e6:	2a03      	cmp	r2, #3
    55e8:	d906      	bls.n	55f8 <memset+0x36>
		*(d_word++) = c_word;
    55ea:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
    55ee:	3a04      	subs	r2, #4
    55f0:	e7f9      	b.n	55e6 <memset+0x24>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
    55f2:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    55f6:	3a01      	subs	r2, #1
	while (n > 0) {
    55f8:	2a00      	cmp	r2, #0
    55fa:	d1fa      	bne.n	55f2 <memset+0x30>
	}

	return buf;
}
    55fc:	4770      	bx	lr

000055fe <_stdout_hook_default>:
}
    55fe:	f04f 30ff 	mov.w	r0, #4294967295
    5602:	4770      	bx	lr

00005604 <nrf_clock_is_running>:
    switch (domain)
    5604:	2903      	cmp	r1, #3
    5606:	d82f      	bhi.n	5668 <nrf_clock_is_running+0x64>
    5608:	e8df f001 	tbb	[pc, r1]
    560c:	291c0f02 	.word	0x291c0f02
            if (p_clk_src != NULL)
    5610:	b122      	cbz	r2, 561c <nrf_clock_is_running+0x18>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5612:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
    5616:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    561a:	7013      	strb	r3, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    561c:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
    5620:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    5624:	d122      	bne.n	566c <nrf_clock_is_running+0x68>
    return false;
    5626:	2000      	movs	r0, #0
    5628:	4770      	bx	lr
            if (p_clk_src != NULL)
    562a:	b122      	cbz	r2, 5636 <nrf_clock_is_running+0x32>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    562c:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
    5630:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    5634:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    5636:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
    563a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    563e:	d117      	bne.n	5670 <nrf_clock_is_running+0x6c>
    return false;
    5640:	2000      	movs	r0, #0
    5642:	4770      	bx	lr
            if (p_clk_src != NULL)
    5644:	b122      	cbz	r2, 5650 <nrf_clock_is_running+0x4c>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
    5646:	f8d0 345c 	ldr.w	r3, [r0, #1116]	; 0x45c
    564a:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    564e:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    5650:	f8d0 345c 	ldr.w	r3, [r0, #1116]	; 0x45c
    5654:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    5658:	d10c      	bne.n	5674 <nrf_clock_is_running+0x70>
    return false;
    565a:	2000      	movs	r0, #0
    565c:	4770      	bx	lr
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
    565e:	f8d0 0454 	ldr.w	r0, [r0, #1108]	; 0x454
    5662:	f3c0 4000 	ubfx	r0, r0, #16, #1
    5666:	4770      	bx	lr
    switch (domain)
    5668:	2000      	movs	r0, #0
    566a:	4770      	bx	lr
                return true;
    566c:	2001      	movs	r0, #1
    566e:	4770      	bx	lr
                return true;
    5670:	2001      	movs	r0, #1
    5672:	4770      	bx	lr
                return true;
    5674:	2001      	movs	r0, #1
}
    5676:	4770      	bx	lr

00005678 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
    5678:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    567a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    567e:	0089      	lsls	r1, r1, #2
    5680:	3170      	adds	r1, #112	; 0x70
}
    5682:	4408      	add	r0, r1
    5684:	4770      	bx	lr

00005686 <get_sub_config>:
	const struct nrf_clock_control_config *config =
    5686:	6840      	ldr	r0, [r0, #4]
}
    5688:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    568c:	4770      	bx	lr

0000568e <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
    568e:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
    5690:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
    5694:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    5698:	4770      	bx	lr

0000569a <get_status>:
{
    569a:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
    569c:	b2c9      	uxtb	r1, r1
    569e:	f7ff ffeb 	bl	5678 <get_sub_data>
    56a2:	6880      	ldr	r0, [r0, #8]
}
    56a4:	f000 0007 	and.w	r0, r0, #7
    56a8:	bd08      	pop	{r3, pc}

000056aa <set_off_state>:
	__asm__ volatile(
    56aa:	f04f 0320 	mov.w	r3, #32
    56ae:	f3ef 8211 	mrs	r2, BASEPRI
    56b2:	f383 8812 	msr	BASEPRI_MAX, r3
    56b6:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    56ba:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    56bc:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    56c0:	d001      	beq.n	56c6 <set_off_state+0x1c>
    56c2:	428b      	cmp	r3, r1
    56c4:	d107      	bne.n	56d6 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    56c6:	2301      	movs	r3, #1
    56c8:	6003      	str	r3, [r0, #0]
	int err = 0;
    56ca:	2000      	movs	r0, #0
	__asm__ volatile(
    56cc:	f382 8811 	msr	BASEPRI, r2
    56d0:	f3bf 8f6f 	isb	sy
}
    56d4:	4770      	bx	lr
		err = -EPERM;
    56d6:	f04f 30ff 	mov.w	r0, #4294967295
    56da:	e7f7      	b.n	56cc <set_off_state+0x22>

000056dc <set_starting_state>:
	__asm__ volatile(
    56dc:	f04f 0320 	mov.w	r3, #32
    56e0:	f3ef 8211 	mrs	r2, BASEPRI
    56e4:	f383 8812 	msr	BASEPRI_MAX, r3
    56e8:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    56ec:	6803      	ldr	r3, [r0, #0]
    56ee:	f003 0cc0 	and.w	ip, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    56f2:	f003 0307 	and.w	r3, r3, #7
    56f6:	2b01      	cmp	r3, #1
    56f8:	d008      	beq.n	570c <set_starting_state+0x30>
	} else if (current_ctx != ctx) {
    56fa:	458c      	cmp	ip, r1
    56fc:	d009      	beq.n	5712 <set_starting_state+0x36>
		err = -EPERM;
    56fe:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
    5702:	f382 8811 	msr	BASEPRI, r2
    5706:	f3bf 8f6f 	isb	sy
}
    570a:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    570c:	6001      	str	r1, [r0, #0]
	int err = 0;
    570e:	2000      	movs	r0, #0
    5710:	e7f7      	b.n	5702 <set_starting_state+0x26>
		err = -EALREADY;
    5712:	f06f 0077 	mvn.w	r0, #119	; 0x77
    5716:	e7f4      	b.n	5702 <set_starting_state+0x26>

00005718 <set_on_state>:
	__asm__ volatile(
    5718:	f04f 0320 	mov.w	r3, #32
    571c:	f3ef 8211 	mrs	r2, BASEPRI
    5720:	f383 8812 	msr	BASEPRI_MAX, r3
    5724:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    5728:	6803      	ldr	r3, [r0, #0]
    572a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    572e:	f043 0302 	orr.w	r3, r3, #2
    5732:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    5734:	f382 8811 	msr	BASEPRI, r2
    5738:	f3bf 8f6f 	isb	sy
}
    573c:	4770      	bx	lr

0000573e <clkstarted_handle>:
{
    573e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5740:	4606      	mov	r6, r0
    5742:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    5744:	f7ff ff98 	bl	5678 <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
    5748:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
    574a:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
    574c:	2300      	movs	r3, #0
    574e:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
    5752:	f7ff ffe1 	bl	5718 <set_on_state>
	if (callback) {
    5756:	b11d      	cbz	r5, 5760 <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
    5758:	463a      	mov	r2, r7
    575a:	4621      	mov	r1, r4
    575c:	4630      	mov	r0, r6
    575e:	47a8      	blx	r5
}
    5760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00005762 <stop>:
{
    5762:	b570      	push	{r4, r5, r6, lr}
    5764:	4606      	mov	r6, r0
    5766:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    5768:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    576a:	4621      	mov	r1, r4
    576c:	f7ff ff84 	bl	5678 <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
    5770:	4629      	mov	r1, r5
    5772:	3008      	adds	r0, #8
    5774:	f7ff ff99 	bl	56aa <set_off_state>
	if (err < 0) {
    5778:	2800      	cmp	r0, #0
    577a:	db06      	blt.n	578a <stop+0x28>
	get_sub_config(dev, type)->stop();
    577c:	4621      	mov	r1, r4
    577e:	4630      	mov	r0, r6
    5780:	f7ff ff81 	bl	5686 <get_sub_config>
    5784:	6843      	ldr	r3, [r0, #4]
    5786:	4798      	blx	r3
	return 0;
    5788:	2000      	movs	r0, #0
}
    578a:	bd70      	pop	{r4, r5, r6, pc}

0000578c <api_stop>:
{
    578c:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
    578e:	2280      	movs	r2, #128	; 0x80
    5790:	f7ff ffe7 	bl	5762 <stop>
}
    5794:	bd08      	pop	{r3, pc}

00005796 <async_start>:
{
    5796:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    579a:	4606      	mov	r6, r0
    579c:	4690      	mov	r8, r2
    579e:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    57a0:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    57a2:	4629      	mov	r1, r5
    57a4:	f7ff ff68 	bl	5678 <get_sub_data>
    57a8:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
    57aa:	9906      	ldr	r1, [sp, #24]
    57ac:	3008      	adds	r0, #8
    57ae:	f7ff ff95 	bl	56dc <set_starting_state>
	if (err < 0) {
    57b2:	2800      	cmp	r0, #0
    57b4:	db09      	blt.n	57ca <async_start+0x34>
	subdata->cb = cb;
    57b6:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
    57ba:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
    57bc:	4629      	mov	r1, r5
    57be:	4630      	mov	r0, r6
    57c0:	f7ff ff61 	bl	5686 <get_sub_config>
    57c4:	6803      	ldr	r3, [r0, #0]
    57c6:	4798      	blx	r3
	return 0;
    57c8:	2000      	movs	r0, #0
}
    57ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000057ce <api_start>:
{
    57ce:	b510      	push	{r4, lr}
    57d0:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
    57d2:	2480      	movs	r4, #128	; 0x80
    57d4:	9400      	str	r4, [sp, #0]
    57d6:	f7ff ffde 	bl	5796 <async_start>
}
    57da:	b002      	add	sp, #8
    57dc:	bd10      	pop	{r4, pc}

000057de <onoff_started_callback>:
{
    57de:	b510      	push	{r4, lr}
    57e0:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
    57e2:	b2c9      	uxtb	r1, r1
    57e4:	f7ff ff53 	bl	568e <get_onoff_manager>
	notify(mgr, 0);
    57e8:	2100      	movs	r1, #0
    57ea:	47a0      	blx	r4
}
    57ec:	bd10      	pop	{r4, pc}

000057ee <hfclk_start>:
{
    57ee:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    57f0:	2001      	movs	r0, #1
    57f2:	f000 fcf3 	bl	61dc <nrfx_clock_start>
}
    57f6:	bd08      	pop	{r3, pc}

000057f8 <hfclkaudio_start>:
{
    57f8:	b508      	push	{r3, lr}
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    57fa:	2003      	movs	r0, #3
    57fc:	f000 fcee 	bl	61dc <nrfx_clock_start>
}
    5800:	bd08      	pop	{r3, pc}

00005802 <hfclk192m_start>:
{
    5802:	b508      	push	{r3, lr}
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
    5804:	2002      	movs	r0, #2
    5806:	f000 fce9 	bl	61dc <nrfx_clock_start>
}
    580a:	bd08      	pop	{r3, pc}

0000580c <lfclk_start>:
{
    580c:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    580e:	2000      	movs	r0, #0
    5810:	f000 fce4 	bl	61dc <nrfx_clock_start>
}
    5814:	bd08      	pop	{r3, pc}

00005816 <hfclk_stop>:
{
    5816:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    5818:	2001      	movs	r0, #1
    581a:	f000 fd54 	bl	62c6 <nrfx_clock_stop>
}
    581e:	bd08      	pop	{r3, pc}

00005820 <hfclkaudio_stop>:
{
    5820:	b508      	push	{r3, lr}
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    5822:	2003      	movs	r0, #3
    5824:	f000 fd4f 	bl	62c6 <nrfx_clock_stop>
}
    5828:	bd08      	pop	{r3, pc}

0000582a <hfclk192m_stop>:
{
    582a:	b508      	push	{r3, lr}
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
    582c:	2002      	movs	r0, #2
    582e:	f000 fd4a 	bl	62c6 <nrfx_clock_stop>
}
    5832:	bd08      	pop	{r3, pc}

00005834 <lfclk_stop>:
{
    5834:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    5836:	2000      	movs	r0, #0
    5838:	f000 fd45 	bl	62c6 <nrfx_clock_stop>
}
    583c:	bd08      	pop	{r3, pc}

0000583e <k_msleep>:
{
    583e:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
    5840:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    5844:	17c1      	asrs	r1, r0, #31
    5846:	03c9      	lsls	r1, r1, #15
    5848:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    584c:	03c0      	lsls	r0, r0, #15
    584e:	f240 33e7 	movw	r3, #999	; 0x3e7
    5852:	18c0      	adds	r0, r0, r3
    5854:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5858:	f04f 0300 	mov.w	r3, #0
    585c:	f141 0100 	adc.w	r1, r1, #0
    5860:	f7fa fc78 	bl	154 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    5864:	f7fe fdc2 	bl	43ec <z_impl_k_sleep>
}
    5868:	bd08      	pop	{r3, pc}

0000586a <blocking_start_callback>:
{
    586a:	b508      	push	{r3, lr}
    586c:	4610      	mov	r0, r2
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    586e:	f7fe f9ed 	bl	3c4c <z_impl_k_sem_give>
}
    5872:	bd08      	pop	{r3, pc}

00005874 <sys_slist_remove>:
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    5874:	460b      	mov	r3, r1
    5876:	b139      	cbz	r1, 5888 <sys_slist_remove+0x14>
	return node->next;
    5878:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
    587a:	6019      	str	r1, [r3, #0]
	return list->tail;
    587c:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
    587e:	428a      	cmp	r2, r1
    5880:	d009      	beq.n	5896 <sys_slist_remove+0x22>
	parent->next = child;
    5882:	2300      	movs	r3, #0
    5884:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    5886:	4770      	bx	lr
	return node->next;
    5888:	6813      	ldr	r3, [r2, #0]
	list->head = node;
    588a:	6003      	str	r3, [r0, #0]
	return list->tail;
    588c:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
    588e:	428a      	cmp	r2, r1
    5890:	d1f7      	bne.n	5882 <sys_slist_remove+0xe>
	list->tail = node;
    5892:	6043      	str	r3, [r0, #4]
}
    5894:	e7f5      	b.n	5882 <sys_slist_remove+0xe>
	list->tail = node;
    5896:	6043      	str	r3, [r0, #4]
}
    5898:	e7f3      	b.n	5882 <sys_slist_remove+0xe>

0000589a <sys_slist_find_and_remove>:
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    589a:	b508      	push	{r3, lr}
    589c:	460a      	mov	r2, r1
	return list->head;
    589e:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    58a0:	2100      	movs	r1, #0
    58a2:	e001      	b.n	58a8 <sys_slist_find_and_remove+0xe>
    58a4:	4619      	mov	r1, r3
    58a6:	681b      	ldr	r3, [r3, #0]
    58a8:	b12b      	cbz	r3, 58b6 <sys_slist_find_and_remove+0x1c>
    58aa:	4293      	cmp	r3, r2
    58ac:	d1fa      	bne.n	58a4 <sys_slist_find_and_remove+0xa>
    58ae:	f7ff ffe1 	bl	5874 <sys_slist_remove>
    58b2:	2001      	movs	r0, #1
    58b4:	e000      	b.n	58b8 <sys_slist_find_and_remove+0x1e>
    58b6:	2000      	movs	r0, #0
    58b8:	bd08      	pop	{r3, pc}

000058ba <gpio_manage_callback>:
 * @return 0 on success, negative errno otherwise.
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
    58ba:	b570      	push	{r4, r5, r6, lr}
    58bc:	4604      	mov	r4, r0
    58be:	460d      	mov	r5, r1
    58c0:	4616      	mov	r6, r2
	return list->head;
    58c2:	6803      	ldr	r3, [r0, #0]
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
    58c4:	b133      	cbz	r3, 58d4 <gpio_manage_callback+0x1a>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
    58c6:	f7ff ffe8 	bl	589a <sys_slist_find_and_remove>
    58ca:	b970      	cbnz	r0, 58ea <gpio_manage_callback+0x30>
			if (!set) {
    58cc:	b91e      	cbnz	r6, 58d6 <gpio_manage_callback+0x1c>
				return -EINVAL;
    58ce:	f06f 0015 	mvn.w	r0, #21
    58d2:	e006      	b.n	58e2 <gpio_manage_callback+0x28>
			}
		}
	} else if (!set) {
    58d4:	b132      	cbz	r2, 58e4 <gpio_manage_callback+0x2a>
    58d6:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
    58d8:	602b      	str	r3, [r5, #0]
	list->head = node;
    58da:	6025      	str	r5, [r4, #0]
	return list->tail;
    58dc:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
    58de:	b143      	cbz	r3, 58f2 <gpio_manage_callback+0x38>

	if (set) {
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    58e0:	2000      	movs	r0, #0
}
    58e2:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    58e4:	f06f 0015 	mvn.w	r0, #21
    58e8:	e7fb      	b.n	58e2 <gpio_manage_callback+0x28>
	if (set) {
    58ea:	2e00      	cmp	r6, #0
    58ec:	d1f3      	bne.n	58d6 <gpio_manage_callback+0x1c>
	return 0;
    58ee:	2000      	movs	r0, #0
    58f0:	e7f7      	b.n	58e2 <gpio_manage_callback+0x28>
	list->tail = node;
    58f2:	6065      	str	r5, [r4, #4]
    58f4:	2000      	movs	r0, #0
}
    58f6:	e7f4      	b.n	58e2 <gpio_manage_callback+0x28>

000058f8 <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
    58f8:	b570      	push	{r4, r5, r6, lr}
    58fa:	460e      	mov	r6, r1
    58fc:	4615      	mov	r5, r2
	return list->head;
    58fe:	6801      	ldr	r1, [r0, #0]
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    5900:	b121      	cbz	r1, 590c <gpio_fire_callbacks+0x14>
	return node->next;
    5902:	680c      	ldr	r4, [r1, #0]
    5904:	b13c      	cbz	r4, 5916 <gpio_fire_callbacks+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
    5906:	b931      	cbnz	r1, 5916 <gpio_fire_callbacks+0x1e>
    5908:	460c      	mov	r4, r1
    590a:	e004      	b.n	5916 <gpio_fire_callbacks+0x1e>
    590c:	460c      	mov	r4, r1
    590e:	e002      	b.n	5916 <gpio_fire_callbacks+0x1e>
    5910:	4623      	mov	r3, r4
    5912:	4621      	mov	r1, r4
    5914:	461c      	mov	r4, r3
    5916:	b171      	cbz	r1, 5936 <gpio_fire_callbacks+0x3e>
		if (cb->pin_mask & pins) {
    5918:	688a      	ldr	r2, [r1, #8]
    591a:	402a      	ands	r2, r5
    591c:	d002      	beq.n	5924 <gpio_fire_callbacks+0x2c>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    591e:	684b      	ldr	r3, [r1, #4]
    5920:	4630      	mov	r0, r6
    5922:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    5924:	2c00      	cmp	r4, #0
    5926:	d0f3      	beq.n	5910 <gpio_fire_callbacks+0x18>
	return node->next;
    5928:	6823      	ldr	r3, [r4, #0]
    592a:	2b00      	cmp	r3, #0
    592c:	d0f1      	beq.n	5912 <gpio_fire_callbacks+0x1a>
Z_GENLIST_PEEK_NEXT(slist, snode)
    592e:	2c00      	cmp	r4, #0
    5930:	d1ef      	bne.n	5912 <gpio_fire_callbacks+0x1a>
    5932:	4623      	mov	r3, r4
    5934:	e7ed      	b.n	5912 <gpio_fire_callbacks+0x1a>
		}
	}
}
    5936:	bd70      	pop	{r4, r5, r6, pc}

00005938 <get_drive>:
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    5938:	f020 00f9 	bic.w	r0, r0, #249	; 0xf9
    593c:	0580      	lsls	r0, r0, #22
    593e:	0d80      	lsrs	r0, r0, #22
    5940:	f5b0 7f83 	cmp.w	r0, #262	; 0x106
    5944:	d033      	beq.n	59ae <get_drive+0x76>
    5946:	d816      	bhi.n	5976 <get_drive+0x3e>
    5948:	2806      	cmp	r0, #6
    594a:	d02c      	beq.n	59a6 <get_drive+0x6e>
    594c:	d906      	bls.n	595c <get_drive+0x24>
    594e:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    5952:	d10d      	bne.n	5970 <get_drive+0x38>
		*drive = NRF_GPIO_PIN_H0S1;
    5954:	2301      	movs	r3, #1
    5956:	700b      	strb	r3, [r1, #0]
	return 0;
    5958:	2000      	movs	r0, #0
		break;
    595a:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    595c:	b300      	cbz	r0, 59a0 <get_drive+0x68>
    595e:	2802      	cmp	r0, #2
    5960:	d103      	bne.n	596a <get_drive+0x32>
		*drive = NRF_GPIO_PIN_D0S1;
    5962:	2304      	movs	r3, #4
    5964:	700b      	strb	r3, [r1, #0]
	return 0;
    5966:	2000      	movs	r0, #0
		break;
    5968:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    596a:	f06f 0015 	mvn.w	r0, #21
    596e:	4770      	bx	lr
    5970:	f06f 0015 	mvn.w	r0, #21
    5974:	4770      	bx	lr
    5976:	f240 2302 	movw	r3, #514	; 0x202
    597a:	4298      	cmp	r0, r3
    597c:	d01b      	beq.n	59b6 <get_drive+0x7e>
    597e:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
    5982:	d103      	bne.n	598c <get_drive+0x54>
		*drive = NRF_GPIO_PIN_H0H1;
    5984:	2303      	movs	r3, #3
    5986:	700b      	strb	r3, [r1, #0]
	return 0;
    5988:	2000      	movs	r0, #0
		break;
    598a:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    598c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    5990:	d103      	bne.n	599a <get_drive+0x62>
		*drive = NRF_GPIO_PIN_S0H1;
    5992:	2302      	movs	r3, #2
    5994:	700b      	strb	r3, [r1, #0]
	return 0;
    5996:	2000      	movs	r0, #0
		break;
    5998:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    599a:	f06f 0015 	mvn.w	r0, #21
    599e:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
    59a0:	2000      	movs	r0, #0
    59a2:	7008      	strb	r0, [r1, #0]
		break;
    59a4:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
    59a6:	2306      	movs	r3, #6
    59a8:	700b      	strb	r3, [r1, #0]
	return 0;
    59aa:	2000      	movs	r0, #0
		break;
    59ac:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
    59ae:	2307      	movs	r3, #7
    59b0:	700b      	strb	r3, [r1, #0]
	return 0;
    59b2:	2000      	movs	r0, #0
		break;
    59b4:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_D0H1;
    59b6:	2305      	movs	r3, #5
    59b8:	700b      	strb	r3, [r1, #0]
	return 0;
    59ba:	2000      	movs	r0, #0
}
    59bc:	4770      	bx	lr

000059be <get_pull>:
	if (flags & GPIO_PULL_UP) {
    59be:	f010 0f10 	tst.w	r0, #16
    59c2:	d104      	bne.n	59ce <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
    59c4:	f010 0f20 	tst.w	r0, #32
    59c8:	d103      	bne.n	59d2 <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
    59ca:	2000      	movs	r0, #0
    59cc:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
    59ce:	2003      	movs	r0, #3
    59d0:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
    59d2:	2001      	movs	r0, #1
}
    59d4:	4770      	bx	lr

000059d6 <gpio_nrfx_port_get_raw>:
	return port->config;
    59d6:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    59d8:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    59da:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
    59dc:	600b      	str	r3, [r1, #0]
}
    59de:	2000      	movs	r0, #0
    59e0:	4770      	bx	lr

000059e2 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
    59e2:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    59e4:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
    59e6:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
    59ea:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    59ee:	6098      	str	r0, [r3, #8]
    p_reg->OUTCLR = clr_mask;
    59f0:	60d9      	str	r1, [r3, #12]
}
    59f2:	2000      	movs	r0, #0
    59f4:	4770      	bx	lr

000059f6 <gpio_nrfx_port_set_bits_raw>:
	return port->config;
    59f6:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    59f8:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    59fa:	6099      	str	r1, [r3, #8]
}
    59fc:	2000      	movs	r0, #0
    59fe:	4770      	bx	lr

00005a00 <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
    5a00:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5a02:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    5a04:	60d9      	str	r1, [r3, #12]
}
    5a06:	2000      	movs	r0, #0
    5a08:	4770      	bx	lr

00005a0a <gpio_nrfx_port_toggle_bits>:
	return port->config;
    5a0a:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5a0c:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    5a0e:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
    5a10:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    5a14:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    5a16:	6090      	str	r0, [r2, #8]
    p_reg->OUTCLR = clr_mask;
    5a18:	60d3      	str	r3, [r2, #12]
}
    5a1a:	2000      	movs	r0, #0
    5a1c:	4770      	bx	lr

00005a1e <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
    5a1e:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    5a22:	d007      	beq.n	5a34 <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    5a24:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
    5a28:	d00d      	beq.n	5a46 <get_trigger+0x28>
    5a2a:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    5a2e:	d008      	beq.n	5a42 <get_trigger+0x24>
    5a30:	2001      	movs	r0, #1
}
    5a32:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    5a34:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    5a38:	d001      	beq.n	5a3e <get_trigger+0x20>
    5a3a:	2005      	movs	r0, #5
    5a3c:	4770      	bx	lr
    5a3e:	2004      	movs	r0, #4
    5a40:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    5a42:	2002      	movs	r0, #2
    5a44:	4770      	bx	lr
    5a46:	2003      	movs	r0, #3
    5a48:	4770      	bx	lr

00005a4a <gpio_nrfx_manage_callback>:
{
    5a4a:	b508      	push	{r3, lr}
	return port->data;
    5a4c:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    5a4e:	3004      	adds	r0, #4
    5a50:	f7ff ff33 	bl	58ba <gpio_manage_callback>
}
    5a54:	bd08      	pop	{r3, pc}

00005a56 <nrfx_gpio_handler>:
{
    5a56:	b510      	push	{r4, lr}
    *p_pin = pin_number & 0x1F;
    5a58:	f000 041f 	and.w	r4, r0, #31
	const struct device *port = get_dev(port_id);
    5a5c:	0940      	lsrs	r0, r0, #5
    5a5e:	f7fc fa27 	bl	1eb0 <get_dev>
	if (port == NULL) {
    5a62:	b130      	cbz	r0, 5a72 <nrfx_gpio_handler+0x1c>
    5a64:	4601      	mov	r1, r0
	return port->data;
    5a66:	6900      	ldr	r0, [r0, #16]
	gpio_fire_callbacks(list, port, BIT(pin));
    5a68:	2201      	movs	r2, #1
    5a6a:	40a2      	lsls	r2, r4
    5a6c:	3004      	adds	r0, #4
    5a6e:	f7ff ff43 	bl	58f8 <gpio_fire_callbacks>
}
    5a72:	bd10      	pop	{r4, pc}

00005a74 <endtx_isr>:
	const struct uarte_nrfx_config *config = dev->config;
    5a74:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    5a76:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
    5a78:	f04f 0120 	mov.w	r1, #32
    5a7c:	f3ef 8311 	mrs	r3, BASEPRI
    5a80:	f381 8812 	msr	BASEPRI_MAX, r1
    5a84:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5a88:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    5a8c:	b131      	cbz	r1, 5a9c <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5a8e:	2100      	movs	r1, #0
    5a90:	f8c2 1120 	str.w	r1, [r2, #288]	; 0x120
    5a94:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5a98:	2101      	movs	r1, #1
    5a9a:	60d1      	str	r1, [r2, #12]
	__asm__ volatile(
    5a9c:	f383 8811 	msr	BASEPRI, r3
    5aa0:	f3bf 8f6f 	isb	sy
}
    5aa4:	4770      	bx	lr

00005aa6 <uarte_nrfx_isr_int>:
{
    5aa6:	b538      	push	{r3, r4, r5, lr}
	const struct uarte_nrfx_config *config = dev->config;
    5aa8:	6845      	ldr	r5, [r0, #4]
	return config->uarte_regs;
    5aaa:	682c      	ldr	r4, [r5, #0]
    return p_reg->INTENSET & mask;
    5aac:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    5ab0:	f413 7f80 	tst.w	r3, #256	; 0x100
    5ab4:	d002      	beq.n	5abc <uarte_nrfx_isr_int+0x16>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5ab6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    5aba:	b9d3      	cbnz	r3, 5af2 <uarte_nrfx_isr_int+0x4c>
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    5abc:	686b      	ldr	r3, [r5, #4]
    5abe:	f013 0f10 	tst.w	r3, #16
    5ac2:	d015      	beq.n	5af0 <uarte_nrfx_isr_int+0x4a>
	__asm__ volatile(
    5ac4:	f04f 0220 	mov.w	r2, #32
    5ac8:	f3ef 8311 	mrs	r3, BASEPRI
    5acc:	f382 8812 	msr	BASEPRI_MAX, r2
    5ad0:	f3bf 8f6f 	isb	sy
    5ad4:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    5ad8:	b112      	cbz	r2, 5ae0 <uarte_nrfx_isr_int+0x3a>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    5ada:	2200      	movs	r2, #0
    5adc:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    5ae0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    5ae4:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
	__asm__ volatile(
    5ae8:	f383 8811 	msr	BASEPRI, r3
    5aec:	f3bf 8f6f 	isb	sy
}
    5af0:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
    5af2:	f7ff ffbf 	bl	5a74 <endtx_isr>
    5af6:	e7e1      	b.n	5abc <uarte_nrfx_isr_int+0x16>

00005af8 <uarte_nrfx_configure>:
{
    5af8:	b570      	push	{r4, r5, r6, lr}
    5afa:	b082      	sub	sp, #8
    5afc:	4605      	mov	r5, r0
    5afe:	460c      	mov	r4, r1
	struct uarte_nrfx_data *data = dev->data;
    5b00:	6906      	ldr	r6, [r0, #16]
	switch (cfg->stop_bits) {
    5b02:	794b      	ldrb	r3, [r1, #5]
    5b04:	2b01      	cmp	r3, #1
    5b06:	d006      	beq.n	5b16 <uarte_nrfx_configure+0x1e>
    5b08:	2b03      	cmp	r3, #3
    5b0a:	d011      	beq.n	5b30 <uarte_nrfx_configure+0x38>
    5b0c:	f06f 0285 	mvn.w	r2, #133	; 0x85
}
    5b10:	4610      	mov	r0, r2
    5b12:	b002      	add	sp, #8
    5b14:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
    5b16:	2300      	movs	r3, #0
    5b18:	f88d 3002 	strb.w	r3, [sp, #2]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    5b1c:	79a3      	ldrb	r3, [r4, #6]
    5b1e:	2b03      	cmp	r3, #3
    5b20:	d146      	bne.n	5bb0 <uarte_nrfx_configure+0xb8>
	switch (cfg->flow_ctrl) {
    5b22:	79e3      	ldrb	r3, [r4, #7]
    5b24:	b143      	cbz	r3, 5b38 <uarte_nrfx_configure+0x40>
    5b26:	2b01      	cmp	r3, #1
    5b28:	d015      	beq.n	5b56 <uarte_nrfx_configure+0x5e>
    5b2a:	f06f 0285 	mvn.w	r2, #133	; 0x85
    5b2e:	e7ef      	b.n	5b10 <uarte_nrfx_configure+0x18>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    5b30:	2310      	movs	r3, #16
    5b32:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
    5b36:	e7f1      	b.n	5b1c <uarte_nrfx_configure+0x24>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
    5b38:	2300      	movs	r3, #0
    5b3a:	f88d 3000 	strb.w	r3, [sp]
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
    5b3e:	2300      	movs	r3, #0
    5b40:	f8ad 3004 	strh.w	r3, [sp, #4]
	switch (cfg->parity) {
    5b44:	7923      	ldrb	r3, [r4, #4]
    5b46:	2b01      	cmp	r3, #1
    5b48:	d02a      	beq.n	5ba0 <uarte_nrfx_configure+0xa8>
    5b4a:	2b02      	cmp	r3, #2
    5b4c:	d024      	beq.n	5b98 <uarte_nrfx_configure+0xa0>
    5b4e:	b133      	cbz	r3, 5b5e <uarte_nrfx_configure+0x66>
    5b50:	f06f 0285 	mvn.w	r2, #133	; 0x85
    5b54:	e7dc      	b.n	5b10 <uarte_nrfx_configure+0x18>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
    5b56:	2301      	movs	r3, #1
    5b58:	f88d 3000 	strb.w	r3, [sp]
		break;
    5b5c:	e7ef      	b.n	5b3e <uarte_nrfx_configure+0x46>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
    5b5e:	f88d 3001 	strb.w	r3, [sp, #1]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    5b62:	6821      	ldr	r1, [r4, #0]
    5b64:	4628      	mov	r0, r5
    5b66:	f7fc fab9 	bl	20dc <baudrate_set>
    5b6a:	4602      	mov	r2, r0
    5b6c:	bb18      	cbnz	r0, 5bb6 <uarte_nrfx_configure+0xbe>
	const struct uarte_nrfx_config *config = dev->config;
    5b6e:	686b      	ldr	r3, [r5, #4]
	return config->uarte_regs;
    5b70:	6819      	ldr	r1, [r3, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    5b72:	f89d 3001 	ldrb.w	r3, [sp, #1]
                    | (uint32_t)p_cfg->stop
    5b76:	f89d 0002 	ldrb.w	r0, [sp, #2]
    5b7a:	4303      	orrs	r3, r0
                    | (uint32_t)p_cfg->paritytype
    5b7c:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    5b80:	4303      	orrs	r3, r0
                    | (uint32_t)p_cfg->hwfc;
    5b82:	f89d 0000 	ldrb.w	r0, [sp]
    5b86:	4303      	orrs	r3, r0
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    5b88:	f8c1 356c 	str.w	r3, [r1, #1388]	; 0x56c
	data->uart_config = *cfg;
    5b8c:	3604      	adds	r6, #4
    5b8e:	e894 0003 	ldmia.w	r4, {r0, r1}
    5b92:	e886 0003 	stmia.w	r6, {r0, r1}
	return 0;
    5b96:	e7bb      	b.n	5b10 <uarte_nrfx_configure+0x18>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    5b98:	230e      	movs	r3, #14
    5b9a:	f88d 3001 	strb.w	r3, [sp, #1]
		break;
    5b9e:	e7e0      	b.n	5b62 <uarte_nrfx_configure+0x6a>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    5ba0:	230e      	movs	r3, #14
    5ba2:	f88d 3001 	strb.w	r3, [sp, #1]
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
    5ba6:	f44f 7380 	mov.w	r3, #256	; 0x100
    5baa:	f8ad 3004 	strh.w	r3, [sp, #4]
		break;
    5bae:	e7d8      	b.n	5b62 <uarte_nrfx_configure+0x6a>
		return -ENOTSUP;
    5bb0:	f06f 0285 	mvn.w	r2, #133	; 0x85
    5bb4:	e7ac      	b.n	5b10 <uarte_nrfx_configure+0x18>
		return -ENOTSUP;
    5bb6:	f06f 0285 	mvn.w	r2, #133	; 0x85
    5bba:	e7a9      	b.n	5b10 <uarte_nrfx_configure+0x18>

00005bbc <uarte_nrfx_config_get>:
{
    5bbc:	460a      	mov	r2, r1
	struct uarte_nrfx_data *data = dev->data;
    5bbe:	6903      	ldr	r3, [r0, #16]
	*cfg = data->uart_config;
    5bc0:	3304      	adds	r3, #4
    5bc2:	e893 0003 	ldmia.w	r3, {r0, r1}
    5bc6:	e882 0003 	stmia.w	r2, {r0, r1}
}
    5bca:	2000      	movs	r0, #0
    5bcc:	4770      	bx	lr

00005bce <uarte_nrfx_err_check>:
	const struct uarte_nrfx_config *config = dev->config;
    5bce:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    5bd0:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    5bd2:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    5bd6:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    5bda:	4770      	bx	lr

00005bdc <is_tx_ready>:
	const struct uarte_nrfx_config *config = dev->config;
    5bdc:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    5bde:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    5be0:	685b      	ldr	r3, [r3, #4]
    5be2:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5be6:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    5bea:	b929      	cbnz	r1, 5bf8 <is_tx_ready+0x1c>
    5bec:	b933      	cbnz	r3, 5bfc <is_tx_ready+0x20>
    5bee:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
    5bf2:	b92b      	cbnz	r3, 5c00 <is_tx_ready+0x24>
    5bf4:	2000      	movs	r0, #0
    5bf6:	4770      	bx	lr
    5bf8:	2001      	movs	r0, #1
    5bfa:	4770      	bx	lr
    5bfc:	2000      	movs	r0, #0
    5bfe:	4770      	bx	lr
    5c00:	2001      	movs	r0, #1
}
    5c02:	4770      	bx	lr

00005c04 <uarte_enable>:
	const struct uarte_nrfx_config *config = dev->config;
    5c04:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    5c06:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    5c08:	2208      	movs	r2, #8
    5c0a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    5c0e:	4770      	bx	lr

00005c10 <tx_start>:
{
    5c10:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
    5c12:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    5c14:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    5c16:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    5c1a:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5c1e:	2200      	movs	r2, #0
    5c20:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    5c24:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
    5c28:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
    5c2c:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    5c30:	685b      	ldr	r3, [r3, #4]
    5c32:	f013 0f10 	tst.w	r3, #16
    5c36:	d102      	bne.n	5c3e <tx_start+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5c38:	2301      	movs	r3, #1
    5c3a:	60a3      	str	r3, [r4, #8]
}
    5c3c:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
    5c3e:	2101      	movs	r1, #1
    5c40:	f7ff ffe0 	bl	5c04 <uarte_enable>
    p_reg->INTENSET = mask;
    5c44:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    5c48:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    5c4c:	e7f4      	b.n	5c38 <tx_start+0x28>

00005c4e <uarte_nrfx_poll_in>:
{
    5c4e:	b410      	push	{r4}
	const struct uarte_nrfx_data *data = dev->data;
    5c50:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    5c52:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    5c54:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5c56:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    5c5a:	b15a      	cbz	r2, 5c74 <uarte_nrfx_poll_in+0x26>
	*c = *data->rx_data;
    5c5c:	6962      	ldr	r2, [r4, #20]
    5c5e:	7812      	ldrb	r2, [r2, #0]
    5c60:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5c62:	2000      	movs	r0, #0
    5c64:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    5c68:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5c6c:	2201      	movs	r2, #1
    5c6e:	601a      	str	r2, [r3, #0]
}
    5c70:	bc10      	pop	{r4}
    5c72:	4770      	bx	lr
		return -1;
    5c74:	f04f 30ff 	mov.w	r0, #4294967295
    5c78:	e7fa      	b.n	5c70 <uarte_nrfx_poll_in+0x22>

00005c7a <k_msleep>:
{
    5c7a:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
    5c7c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    5c80:	17c1      	asrs	r1, r0, #31
    5c82:	03c9      	lsls	r1, r1, #15
    5c84:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    5c88:	03c0      	lsls	r0, r0, #15
    5c8a:	f240 33e7 	movw	r3, #999	; 0x3e7
    5c8e:	18c0      	adds	r0, r0, r3
    5c90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5c94:	f04f 0300 	mov.w	r3, #0
    5c98:	f141 0100 	adc.w	r1, r1, #0
    5c9c:	f7fa fa5a 	bl	154 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    5ca0:	f7fe fba4 	bl	43ec <z_impl_k_sleep>
}
    5ca4:	bd08      	pop	{r3, pc}

00005ca6 <wait_tx_ready>:
{
    5ca6:	b570      	push	{r4, r5, r6, lr}
    5ca8:	4606      	mov	r6, r0
    5caa:	e013      	b.n	5cd4 <wait_tx_ready+0x2e>
		if (res) {
    5cac:	b17d      	cbz	r5, 5cce <wait_tx_ready+0x28>
	__asm__ volatile(
    5cae:	f04f 0320 	mov.w	r3, #32
    5cb2:	f3ef 8411 	mrs	r4, BASEPRI
    5cb6:	f383 8812 	msr	BASEPRI_MAX, r3
    5cba:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    5cbe:	4630      	mov	r0, r6
    5cc0:	f7ff ff8c 	bl	5bdc <is_tx_ready>
    5cc4:	b998      	cbnz	r0, 5cee <wait_tx_ready+0x48>
	__asm__ volatile(
    5cc6:	f384 8811 	msr	BASEPRI, r4
    5cca:	f3bf 8f6f 	isb	sy
			k_msleep(1);
    5cce:	2001      	movs	r0, #1
    5cd0:	f7ff ffd3 	bl	5c7a <k_msleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    5cd4:	2464      	movs	r4, #100	; 0x64
    5cd6:	4630      	mov	r0, r6
    5cd8:	f7ff ff80 	bl	5bdc <is_tx_ready>
    5cdc:	4605      	mov	r5, r0
    5cde:	2800      	cmp	r0, #0
    5ce0:	d1e4      	bne.n	5cac <wait_tx_ready+0x6>
    5ce2:	2001      	movs	r0, #1
    5ce4:	f000 f9af 	bl	6046 <nrfx_busy_wait>
    5ce8:	3c01      	subs	r4, #1
    5cea:	d1f4      	bne.n	5cd6 <wait_tx_ready+0x30>
    5cec:	e7de      	b.n	5cac <wait_tx_ready+0x6>
}
    5cee:	4620      	mov	r0, r4
    5cf0:	bd70      	pop	{r4, r5, r6, pc}

00005cf2 <pinctrl_apply_state>:
 * @retval -ENOENT If given state id does not exist.
 * @retval -errno Negative errno for other failures.
 */
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
				      uint8_t id)
{
    5cf2:	b510      	push	{r4, lr}
    5cf4:	b082      	sub	sp, #8
    5cf6:	4604      	mov	r4, r0
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    5cf8:	aa01      	add	r2, sp, #4
    5cfa:	f000 f8e1 	bl	5ec0 <pinctrl_lookup_state>
	if (ret < 0) {
    5cfe:	2800      	cmp	r0, #0
    5d00:	db05      	blt.n	5d0e <pinctrl_apply_state+0x1c>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    5d02:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    5d04:	6822      	ldr	r2, [r4, #0]
    5d06:	7919      	ldrb	r1, [r3, #4]
    5d08:	6818      	ldr	r0, [r3, #0]
    5d0a:	f7fc fd57 	bl	27bc <pinctrl_configure_pins>
}
    5d0e:	b002      	add	sp, #8
    5d10:	bd10      	pop	{r4, pc}

00005d12 <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
    5d12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5d16:	4604      	mov	r4, r0
	const struct uarte_nrfx_config *config = dev->config;
    5d18:	6847      	ldr	r7, [r0, #4]
	return config->uarte_regs;
    5d1a:	683e      	ldr	r6, [r7, #0]
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    5d1c:	f8d0 8010 	ldr.w	r8, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    5d20:	2100      	movs	r1, #0
    5d22:	f8c6 1500 	str.w	r1, [r6, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
    5d26:	f8c8 0000 	str.w	r0, [r8]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    5d2a:	68f8      	ldr	r0, [r7, #12]
    5d2c:	f7ff ffe1 	bl	5cf2 <pinctrl_apply_state>
	if (err < 0) {
    5d30:	1e05      	subs	r5, r0, #0
    5d32:	db35      	blt.n	5da0 <uarte_instance_init+0x8e>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    5d34:	f108 0104 	add.w	r1, r8, #4
    5d38:	4620      	mov	r0, r4
    5d3a:	f7ff fedd 	bl	5af8 <uarte_nrfx_configure>
	if (err) {
    5d3e:	4605      	mov	r5, r0
    5d40:	bb70      	cbnz	r0, 5da0 <uarte_instance_init+0x8e>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    5d42:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    5d44:	f013 0f02 	tst.w	r3, #2
    5d48:	d12d      	bne.n	5da6 <uarte_instance_init+0x94>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    5d4a:	2308      	movs	r3, #8
    5d4c:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    5d50:	7a3b      	ldrb	r3, [r7, #8]
    5d52:	b95b      	cbnz	r3, 5d6c <uarte_instance_init+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5d54:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
    5d58:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, data->rx_data, 1);
    5d5c:	f8d8 3014 	ldr.w	r3, [r8, #20]

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    5d60:	f8c6 3534 	str.w	r3, [r6, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    5d64:	2301      	movs	r3, #1
    5d66:	f8c6 3538 	str.w	r3, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5d6a:	6033      	str	r3, [r6, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    5d6c:	687b      	ldr	r3, [r7, #4]
    5d6e:	f013 0f02 	tst.w	r3, #2
    5d72:	d103      	bne.n	5d7c <uarte_instance_init+0x6a>
    p_reg->INTENSET = mask;
    5d74:	f44f 7380 	mov.w	r3, #256	; 0x100
    5d78:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    5d7c:	687b      	ldr	r3, [r7, #4]
    5d7e:	f013 0f10 	tst.w	r3, #16
    5d82:	d003      	beq.n	5d8c <uarte_instance_init+0x7a>
    5d84:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    5d88:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, data->char_out, 0);
    5d8c:	f8d8 3010 	ldr.w	r3, [r8, #16]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    5d90:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    5d94:	2300      	movs	r3, #0
    5d96:	f8c6 3548 	str.w	r3, [r6, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5d9a:	2301      	movs	r3, #1
    5d9c:	60b3      	str	r3, [r6, #8]
    5d9e:	60f3      	str	r3, [r6, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    5da0:	4628      	mov	r0, r5
    5da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
    5da6:	4641      	mov	r1, r8
    5da8:	4630      	mov	r0, r6
    5daa:	f7fc fa6d 	bl	2288 <endtx_stoptx_ppi_init>
		if (err < 0) {
    5dae:	2800      	cmp	r0, #0
    5db0:	dacb      	bge.n	5d4a <uarte_instance_init+0x38>
			return err;
    5db2:	4605      	mov	r5, r0
    5db4:	e7f4      	b.n	5da0 <uarte_instance_init+0x8e>

00005db6 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    5db6:	b510      	push	{r4, lr}
    5db8:	4604      	mov	r4, r0
    5dba:	2200      	movs	r2, #0
    5dbc:	2101      	movs	r1, #1
    5dbe:	2008      	movs	r0, #8
    5dc0:	f7ff faee 	bl	53a0 <z_arm_irq_priority_set>
    5dc4:	2008      	movs	r0, #8
    5dc6:	f7ff fae6 	bl	5396 <arch_irq_enable>
    5dca:	2100      	movs	r1, #0
    5dcc:	4620      	mov	r0, r4
    5dce:	f7ff ffa0 	bl	5d12 <uarte_instance_init>
    5dd2:	bd10      	pop	{r4, pc}

00005dd4 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    5dd4:	4770      	bx	lr

00005dd6 <counter_sub>:
	return (a - b) & COUNTER_MAX;
    5dd6:	1a40      	subs	r0, r0, r1
}
    5dd8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    5ddc:	4770      	bx	lr

00005dde <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    5dde:	f100 0350 	add.w	r3, r0, #80	; 0x50
    5de2:	009b      	lsls	r3, r3, #2
    5de4:	b29b      	uxth	r3, r3
    5de6:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    5dea:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    5dee:	2200      	movs	r2, #0
    5df0:	601a      	str	r2, [r3, #0]
    5df2:	681b      	ldr	r3, [r3, #0]
}
    5df4:	4770      	bx	lr

00005df6 <absolute_time_to_cc>:
}
    5df6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    5dfa:	4770      	bx	lr

00005dfc <full_int_lock>:
	__asm__ volatile(
    5dfc:	f04f 0320 	mov.w	r3, #32
    5e00:	f3ef 8011 	mrs	r0, BASEPRI
    5e04:	f383 8812 	msr	BASEPRI_MAX, r3
    5e08:	f3bf 8f6f 	isb	sy
}
    5e0c:	4770      	bx	lr

00005e0e <full_int_unlock>:
	__asm__ volatile(
    5e0e:	f380 8811 	msr	BASEPRI, r0
    5e12:	f3bf 8f6f 	isb	sy
}
    5e16:	4770      	bx	lr

00005e18 <set_absolute_alarm>:
{
    5e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5e1a:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
    5e1c:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
    5e20:	f7fc fa5c 	bl	22dc <get_comparator>
    5e24:	4607      	mov	r7, r0
    5e26:	e019      	b.n	5e5c <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
    5e28:	2013      	movs	r0, #19
    5e2a:	f000 fd0f 	bl	684c <z_impl_k_busy_wait>
}
    5e2e:	e022      	b.n	5e76 <set_absolute_alarm+0x5e>
		event_clear(chan);
    5e30:	4630      	mov	r0, r6
    5e32:	f7ff ffd4 	bl	5dde <event_clear>
		event_enable(chan);
    5e36:	4630      	mov	r0, r6
    5e38:	f7fc fa58 	bl	22ec <event_enable>
		set_comparator(chan, cc_val);
    5e3c:	4629      	mov	r1, r5
    5e3e:	4630      	mov	r0, r6
    5e40:	f7fc fa42 	bl	22c8 <set_comparator>
		now2 = counter();
    5e44:	f7fc fa66 	bl	2314 <counter>
	} while ((now2 != now) &&
    5e48:	4284      	cmp	r4, r0
    5e4a:	d01e      	beq.n	5e8a <set_absolute_alarm+0x72>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    5e4c:	1c81      	adds	r1, r0, #2
    5e4e:	4628      	mov	r0, r5
    5e50:	f7ff ffc1 	bl	5dd6 <counter_sub>
	} while ((now2 != now) &&
    5e54:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    5e58:	d917      	bls.n	5e8a <set_absolute_alarm+0x72>
		prev_cc = cc_val;
    5e5a:	462f      	mov	r7, r5
		now = counter();
    5e5c:	f7fc fa5a 	bl	2314 <counter>
    5e60:	4604      	mov	r4, r0
		set_comparator(chan, now);
    5e62:	4601      	mov	r1, r0
    5e64:	4630      	mov	r0, r6
    5e66:	f7fc fa2f 	bl	22c8 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
    5e6a:	4621      	mov	r1, r4
    5e6c:	4638      	mov	r0, r7
    5e6e:	f7ff ffb2 	bl	5dd6 <counter_sub>
    5e72:	2801      	cmp	r0, #1
    5e74:	d0d8      	beq.n	5e28 <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    5e76:	1ca7      	adds	r7, r4, #2
    5e78:	4639      	mov	r1, r7
    5e7a:	4628      	mov	r0, r5
    5e7c:	f7ff ffab 	bl	5dd6 <counter_sub>
    5e80:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    5e84:	d9d4      	bls.n	5e30 <set_absolute_alarm+0x18>
			cc_val = now + 2;
    5e86:	463d      	mov	r5, r7
    5e88:	e7d2      	b.n	5e30 <set_absolute_alarm+0x18>
}
    5e8a:	4628      	mov	r0, r5
    5e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00005e8e <compare_set>:
{
    5e8e:	b5f0      	push	{r4, r5, r6, r7, lr}
    5e90:	b083      	sub	sp, #12
    5e92:	4604      	mov	r4, r0
    5e94:	4617      	mov	r7, r2
    5e96:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
    5e98:	f7fc fa42 	bl	2320 <compare_int_lock>
    5e9c:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
    5e9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5ea0:	9301      	str	r3, [sp, #4]
    5ea2:	9b08      	ldr	r3, [sp, #32]
    5ea4:	9300      	str	r3, [sp, #0]
    5ea6:	463a      	mov	r2, r7
    5ea8:	462b      	mov	r3, r5
    5eaa:	4620      	mov	r0, r4
    5eac:	f7fc fb14 	bl	24d8 <compare_set_nolocks>
    5eb0:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
    5eb2:	4631      	mov	r1, r6
    5eb4:	4620      	mov	r0, r4
    5eb6:	f7fc fa8b 	bl	23d0 <compare_int_unlock>
}
    5eba:	4628      	mov	r0, r5
    5ebc:	b003      	add	sp, #12
    5ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005ec0 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    5ec0:	b410      	push	{r4}
	*state = &config->states[0];
    5ec2:	6843      	ldr	r3, [r0, #4]
    5ec4:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    5ec6:	e001      	b.n	5ecc <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
    5ec8:	3408      	adds	r4, #8
    5eca:	6014      	str	r4, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    5ecc:	6814      	ldr	r4, [r2, #0]
    5ece:	7a03      	ldrb	r3, [r0, #8]
    5ed0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    5ed4:	3b01      	subs	r3, #1
    5ed6:	f8d0 c004 	ldr.w	ip, [r0, #4]
    5eda:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
    5ede:	429c      	cmp	r4, r3
    5ee0:	d804      	bhi.n	5eec <pinctrl_lookup_state+0x2c>
		if (id == (*state)->id) {
    5ee2:	7963      	ldrb	r3, [r4, #5]
    5ee4:	428b      	cmp	r3, r1
    5ee6:	d1ef      	bne.n	5ec8 <pinctrl_lookup_state+0x8>
			return 0;
    5ee8:	2000      	movs	r0, #0
    5eea:	e001      	b.n	5ef0 <pinctrl_lookup_state+0x30>
	}

	return -ENOENT;
    5eec:	f06f 0001 	mvn.w	r0, #1
}
    5ef0:	bc10      	pop	{r4}
    5ef2:	4770      	bx	lr

00005ef4 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    5ef4:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    5ef6:	2000      	movs	r0, #0
    5ef8:	f7ff fa91 	bl	541e <sys_arch_reboot>

00005efc <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
    5efc:	b508      	push	{r3, lr}

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    5efe:	f7fe fc53 	bl	47a8 <nrf_cc3xx_platform_init_no_rng>
#endif

	return res;
}
    5f02:	bd08      	pop	{r3, pc}

00005f04 <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
    5f04:	b510      	push	{r4, lr}
    5f06:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    5f08:	f7fb f84a 	bl	fa0 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    5f0c:	f7fb f95c 	bl	11c8 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
    5f10:	4620      	mov	r0, r4
    5f12:	f7ff fff3 	bl	5efc <hw_cc3xx_init_internal>
	return res;
}
    5f16:	bd10      	pop	{r4, pc}

00005f18 <nrf53_errata_42>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    5f18:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    5f1c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    5f20:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    5f24:	2a07      	cmp	r2, #7
    5f26:	d001      	beq.n	5f2c <nrf53_errata_42+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    5f28:	2000      	movs	r0, #0
    5f2a:	4770      	bx	lr
                    switch(var2)
    5f2c:	3b02      	subs	r3, #2
    5f2e:	2b00      	cmp	r3, #0
    5f30:	d804      	bhi.n	5f3c <nrf53_errata_42+0x24>
    5f32:	e8df f003 	tbb	[pc, r3]
    5f36:	01          	.byte	0x01
    5f37:	00          	.byte	0x00
    5f38:	2001      	movs	r0, #1
    5f3a:	4770      	bx	lr
                            return false;
    5f3c:	2000      	movs	r0, #0
    #endif
}
    5f3e:	4770      	bx	lr

00005f40 <nrf53_errata_46>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    5f40:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    5f44:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    5f48:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    5f4c:	2a07      	cmp	r2, #7
    5f4e:	d001      	beq.n	5f54 <nrf53_errata_46+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    5f50:	2000      	movs	r0, #0
    5f52:	4770      	bx	lr
                    switch(var2)
    5f54:	2b04      	cmp	r3, #4
    5f56:	d007      	beq.n	5f68 <nrf53_errata_46+0x28>
    5f58:	d808      	bhi.n	5f6c <nrf53_errata_46+0x2c>
    5f5a:	3b02      	subs	r3, #2
    5f5c:	2b01      	cmp	r3, #1
    5f5e:	d801      	bhi.n	5f64 <nrf53_errata_46+0x24>
    5f60:	2001      	movs	r0, #1
    #endif
}
    5f62:	4770      	bx	lr
                            return false;
    5f64:	2000      	movs	r0, #0
    5f66:	4770      	bx	lr
                            return false;
    5f68:	2000      	movs	r0, #0
    5f6a:	4770      	bx	lr
                            return false;
    5f6c:	2000      	movs	r0, #0
    5f6e:	4770      	bx	lr

00005f70 <nrf53_errata_49>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    5f70:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    5f74:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    5f78:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    5f7c:	2a07      	cmp	r2, #7
    5f7e:	d001      	beq.n	5f84 <nrf53_errata_49+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    5f80:	2000      	movs	r0, #0
    5f82:	4770      	bx	lr
                    switch(var2)
    5f84:	3b02      	subs	r3, #2
    5f86:	2b00      	cmp	r3, #0
    5f88:	d804      	bhi.n	5f94 <nrf53_errata_49+0x24>
    5f8a:	e8df f003 	tbb	[pc, r3]
    5f8e:	01          	.byte	0x01
    5f8f:	00          	.byte	0x00
    5f90:	2001      	movs	r0, #1
    5f92:	4770      	bx	lr
                            return false;
    5f94:	2000      	movs	r0, #0
    #endif
}
    5f96:	4770      	bx	lr

00005f98 <nrf53_errata_55>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    5f98:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    5f9c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    5fa0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    5fa4:	2a07      	cmp	r2, #7
    5fa6:	d001      	beq.n	5fac <nrf53_errata_55+0x14>
                            return true;
                    }
                }
            #endif
        #endif
        return false;
    5fa8:	2000      	movs	r0, #0
    5faa:	4770      	bx	lr
                            return true;
    5fac:	2001      	movs	r0, #1
    #endif
}
    5fae:	4770      	bx	lr

00005fb0 <nrf53_errata_64>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    5fb0:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    5fb4:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    5fb8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    5fbc:	2a07      	cmp	r2, #7
    5fbe:	d001      	beq.n	5fc4 <nrf53_errata_64+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    5fc0:	2000      	movs	r0, #0
    5fc2:	4770      	bx	lr
                    switch(var2)
    5fc4:	3b02      	subs	r3, #2
    5fc6:	2b00      	cmp	r3, #0
    5fc8:	d804      	bhi.n	5fd4 <nrf53_errata_64+0x24>
    5fca:	e8df f003 	tbb	[pc, r3]
    5fce:	01          	.byte	0x01
    5fcf:	00          	.byte	0x00
    5fd0:	2001      	movs	r0, #1
    5fd2:	4770      	bx	lr
                            return false;
    5fd4:	2000      	movs	r0, #0
    #endif
}
    5fd6:	4770      	bx	lr

00005fd8 <nrf53_errata_69>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    5fd8:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    5fdc:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    5fe0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    5fe4:	2a07      	cmp	r2, #7
    5fe6:	d001      	beq.n	5fec <nrf53_errata_69+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    5fe8:	2000      	movs	r0, #0
    5fea:	4770      	bx	lr
                    switch(var2)
    5fec:	3b02      	subs	r3, #2
    5fee:	2b00      	cmp	r3, #0
    5ff0:	d804      	bhi.n	5ffc <nrf53_errata_69+0x24>
    5ff2:	e8df f003 	tbb	[pc, r3]
    5ff6:	01          	.byte	0x01
    5ff7:	00          	.byte	0x00
    5ff8:	2001      	movs	r0, #1
    5ffa:	4770      	bx	lr
                            return false;
    5ffc:	2000      	movs	r0, #0
    #endif
}
    5ffe:	4770      	bx	lr

00006000 <nrf53_errata_97>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    6000:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    6004:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    6008:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    600c:	2a07      	cmp	r2, #7
    600e:	d001      	beq.n	6014 <nrf53_errata_97+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    6010:	2000      	movs	r0, #0
    6012:	4770      	bx	lr
                    switch(var2)
    6014:	3b02      	subs	r3, #2
    6016:	2b00      	cmp	r3, #0
    6018:	d804      	bhi.n	6024 <nrf53_errata_97+0x24>
    601a:	e8df f003 	tbb	[pc, r3]
    601e:	01          	.byte	0x01
    601f:	00          	.byte	0x00
    6020:	2001      	movs	r0, #1
    6022:	4770      	bx	lr
                            return false;
    6024:	2000      	movs	r0, #0
    #endif
}
    6026:	4770      	bx	lr

00006028 <nrf53_errata_140>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    6028:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    602c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    6030:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    6034:	2a07      	cmp	r2, #7
    6036:	d001      	beq.n	603c <nrf53_errata_140+0x14>
                            return true;
                    }
                }
            #endif
        #endif
        return false;
    6038:	2000      	movs	r0, #0
    603a:	4770      	bx	lr
                            return true;
    603c:	2001      	movs	r0, #1
    #endif
}
    603e:	4770      	bx	lr

00006040 <nrfx_isr>:
#include <nrfx.h>
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
    6040:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
    6042:	4780      	blx	r0
}
    6044:	bd08      	pop	{r3, pc}

00006046 <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
    6046:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
    6048:	f000 fc00 	bl	684c <z_impl_k_busy_wait>
	if (IS_ENABLED(CONFIG_SYS_CLOCK_EXISTS)) {
		k_busy_wait(usec_to_wait);
	} else {
		nrfx_coredep_delay_us(usec_to_wait);
	}
}
    604c:	bd08      	pop	{r3, pc}

0000604e <nrf_clock_is_running>:
    switch (domain)
    604e:	2903      	cmp	r1, #3
    6050:	d82f      	bhi.n	60b2 <nrf_clock_is_running+0x64>
    6052:	e8df f001 	tbb	[pc, r1]
    6056:	0f02      	.short	0x0f02
    6058:	291c      	.short	0x291c
            if (p_clk_src != NULL)
    605a:	b122      	cbz	r2, 6066 <nrf_clock_is_running+0x18>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    605c:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
    6060:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    6064:	7013      	strb	r3, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6066:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
    606a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    606e:	d122      	bne.n	60b6 <nrf_clock_is_running+0x68>
    return false;
    6070:	2000      	movs	r0, #0
    6072:	4770      	bx	lr
            if (p_clk_src != NULL)
    6074:	b122      	cbz	r2, 6080 <nrf_clock_is_running+0x32>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    6076:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
    607a:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    607e:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    6080:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
    6084:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    6088:	d117      	bne.n	60ba <nrf_clock_is_running+0x6c>
    return false;
    608a:	2000      	movs	r0, #0
    608c:	4770      	bx	lr
            if (p_clk_src != NULL)
    608e:	b122      	cbz	r2, 609a <nrf_clock_is_running+0x4c>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
    6090:	f8d0 345c 	ldr.w	r3, [r0, #1116]	; 0x45c
    6094:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    6098:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    609a:	f8d0 345c 	ldr.w	r3, [r0, #1116]	; 0x45c
    609e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    60a2:	d10c      	bne.n	60be <nrf_clock_is_running+0x70>
    return false;
    60a4:	2000      	movs	r0, #0
    60a6:	4770      	bx	lr
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
    60a8:	f8d0 0454 	ldr.w	r0, [r0, #1108]	; 0x454
    60ac:	f3c0 4000 	ubfx	r0, r0, #16, #1
    60b0:	4770      	bx	lr
    switch (domain)
    60b2:	2000      	movs	r0, #0
    60b4:	4770      	bx	lr
                return true;
    60b6:	2001      	movs	r0, #1
    60b8:	4770      	bx	lr
                return true;
    60ba:	2001      	movs	r0, #1
    60bc:	4770      	bx	lr
                return true;
    60be:	2001      	movs	r0, #1
}
    60c0:	4770      	bx	lr

000060c2 <clock_initial_lfclksrc_get>:
}
    60c2:	2001      	movs	r0, #1
    60c4:	4770      	bx	lr

000060c6 <nrfx_power_clock_irq_init>:
extern "C" {
#endif


__STATIC_INLINE void nrfx_power_clock_irq_init(void)
{
    60c6:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    60c8:	2005      	movs	r0, #5
    60ca:	f7fb f8d1 	bl	1270 <arch_irq_is_enabled>
    60ce:	b100      	cbz	r0, 60d2 <nrfx_power_clock_irq_init+0xc>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    }
}
    60d0:	bd08      	pop	{r3, pc}
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    60d2:	2005      	movs	r0, #5
    60d4:	f7ff f95f 	bl	5396 <arch_irq_enable>
}
    60d8:	e7fa      	b.n	60d0 <nrfx_power_clock_irq_init+0xa>

000060da <clock_stop>:
{
    60da:	b570      	push	{r4, r5, r6, lr}
    60dc:	b082      	sub	sp, #8
    60de:	4606      	mov	r6, r0
    switch (domain)
    60e0:	2803      	cmp	r0, #3
    60e2:	d855      	bhi.n	6190 <clock_stop+0xb6>
    60e4:	e8df f000 	tbb	[pc, r0]
    60e8:	31231702 	.word	0x31231702
    p_reg->INTENCLR = mask;
    60ec:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    60f0:	2202      	movs	r2, #2
    60f2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    60f6:	2200      	movs	r2, #0
    60f8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    60fc:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6100:	2201      	movs	r2, #1
    6102:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    6104:	2301      	movs	r3, #1
    6106:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    610a:	429e      	cmp	r6, r3
    610c:	d02b      	beq.n	6166 <clock_stop+0x8c>
    610e:	2500      	movs	r5, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    6110:	f242 7410 	movw	r4, #10000	; 0x2710
    6114:	e02f      	b.n	6176 <clock_stop+0x9c>
    p_reg->INTENCLR = mask;
    6116:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    611a:	2201      	movs	r2, #1
    611c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6120:	2100      	movs	r1, #0
    6122:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    6126:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    612a:	605a      	str	r2, [r3, #4]
}
    612c:	e7ea      	b.n	6104 <clock_stop+0x2a>
    p_reg->INTENCLR = mask;
    612e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6132:	f44f 7200 	mov.w	r2, #512	; 0x200
    6136:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    613a:	2200      	movs	r2, #0
    613c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    6140:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6144:	2201      	movs	r2, #1
    6146:	625a      	str	r2, [r3, #36]	; 0x24
}
    6148:	e7dc      	b.n	6104 <clock_stop+0x2a>
    p_reg->INTENCLR = mask;
    614a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    614e:	f44f 7280 	mov.w	r2, #256	; 0x100
    6152:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6156:	2200      	movs	r2, #0
    6158:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    615c:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6160:	2201      	movs	r2, #1
    6162:	61da      	str	r2, [r3, #28]
}
    6164:	e7ce      	b.n	6104 <clock_stop+0x2a>
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    6166:	f10d 0507 	add.w	r5, sp, #7
    616a:	e7d1      	b.n	6110 <clock_stop+0x36>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    616c:	2001      	movs	r0, #1
    616e:	f7ff ff6a 	bl	6046 <nrfx_busy_wait>
    6172:	3c01      	subs	r4, #1
    6174:	d00c      	beq.n	6190 <clock_stop+0xb6>
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
    6176:	462a      	mov	r2, r5
    6178:	4631      	mov	r1, r6
    617a:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
    617e:	f7ff ff66 	bl	604e <nrf_clock_is_running>
    6182:	b128      	cbz	r0, 6190 <clock_stop+0xb6>
    6184:	2d00      	cmp	r5, #0
    6186:	d0f1      	beq.n	616c <clock_stop+0x92>
    6188:	f89d 3007 	ldrb.w	r3, [sp, #7]
    618c:	2b01      	cmp	r3, #1
    618e:	d0ed      	beq.n	616c <clock_stop+0x92>
}
    6190:	b002      	add	sp, #8
    6192:	bd70      	pop	{r4, r5, r6, pc}

00006194 <clock_lfclksrc_tweak>:
{
    6194:	b538      	push	{r3, r4, r5, lr}
    6196:	4604      	mov	r4, r0
    bool is_correct_clk = (*p_lfclksrc == NRFX_CLOCK_CONFIG_LF_SRC);
    6198:	7803      	ldrb	r3, [r0, #0]
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    619a:	2b02      	cmp	r3, #2
    619c:	d006      	beq.n	61ac <clock_lfclksrc_tweak+0x18>
    619e:	2b01      	cmp	r3, #1
    61a0:	d000      	beq.n	61a4 <clock_lfclksrc_tweak+0x10>
    61a2:	2300      	movs	r3, #0
    if (!is_correct_clk)
    61a4:	461d      	mov	r5, r3
    61a6:	b11b      	cbz	r3, 61b0 <clock_lfclksrc_tweak+0x1c>
}
    61a8:	4628      	mov	r0, r5
    61aa:	bd38      	pop	{r3, r4, r5, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    61ac:	2301      	movs	r3, #1
    61ae:	e7f9      	b.n	61a4 <clock_lfclksrc_tweak+0x10>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    61b0:	2000      	movs	r0, #0
    61b2:	f7ff ff92 	bl	60da <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    61b6:	f7ff ff84 	bl	60c2 <clock_initial_lfclksrc_get>
    61ba:	7020      	strb	r0, [r4, #0]
    61bc:	e7f4      	b.n	61a8 <clock_lfclksrc_tweak+0x14>

000061be <nrfx_clock_enable>:
{
    61be:	b508      	push	{r3, lr}
    nrfx_power_clock_irq_init();
    61c0:	f7ff ff81 	bl	60c6 <nrfx_power_clock_irq_init>
    nrf_clock_lf_src_set(NRF_CLOCK, clock_initial_lfclksrc_get());
    61c4:	f7ff ff7d 	bl	60c2 <clock_initial_lfclksrc_get>
    p_reg->LFCLKSRC = (uint32_t)(source);
    61c8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    61cc:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
}

#if NRF_CLOCK_HAS_HFCLKSRC
NRF_STATIC_INLINE void nrf_clock_hf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLKSRC = (uint32_t)(source);
    61d0:	2201      	movs	r2, #1
    61d2:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
    61d6:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
}
    61da:	bd08      	pop	{r3, pc}

000061dc <nrfx_clock_start>:
    switch (domain)
    61dc:	2803      	cmp	r0, #3
    61de:	d871      	bhi.n	62c4 <nrfx_clock_start+0xe8>
    61e0:	e8df f000 	tbb	[pc, r0]
    61e4:	62544802 	.word	0x62544802
{
    61e8:	b500      	push	{lr}
    61ea:	b083      	sub	sp, #12
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    61ec:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    61f0:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    61f4:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    61f8:	f88d 3007 	strb.w	r3, [sp, #7]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    61fc:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    6200:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    6204:	d11d      	bne.n	6242 <nrfx_clock_start+0x66>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    6206:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    620a:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    620e:	f013 0f01 	tst.w	r3, #1
    6212:	d11b      	bne.n	624c <nrfx_clock_start+0x70>
                    lfclksrc = clock_initial_lfclksrc_get();
    6214:	f7ff ff55 	bl	60c2 <clock_initial_lfclksrc_get>
    6218:	f88d 0007 	strb.w	r0, [sp, #7]
                nrf_clock_lf_src_set(NRF_CLOCK, lfclksrc);
    621c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    p_reg->LFCLKSRC = (uint32_t)(source);
    6220:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6224:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6228:	2200      	movs	r2, #0
    622a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    622e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    6232:	2202      	movs	r2, #2
    6234:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6238:	2201      	movs	r2, #1
    623a:	609a      	str	r2, [r3, #8]
}
    623c:	b003      	add	sp, #12
    623e:	f85d fb04 	ldr.w	pc, [sp], #4
                    (void)clock_lfclksrc_tweak(&lfclksrc);
    6242:	f10d 0007 	add.w	r0, sp, #7
    6246:	f7ff ffa5 	bl	6194 <clock_lfclksrc_tweak>
    624a:	e7e7      	b.n	621c <nrfx_clock_start+0x40>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    624c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6250:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    6254:	f003 0303 	and.w	r3, r3, #3
                    lfclksrc = nrf_clock_lf_srccopy_get(NRF_CLOCK);
    6258:	f88d 3007 	strb.w	r3, [sp, #7]
                    if (clock_lfclksrc_tweak(&lfclksrc))
    625c:	f10d 0007 	add.w	r0, sp, #7
    6260:	f7ff ff98 	bl	6194 <clock_lfclksrc_tweak>
    6264:	2800      	cmp	r0, #0
    6266:	d0d9      	beq.n	621c <nrfx_clock_start+0x40>
    p_reg->INTENSET = mask;
    6268:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    626c:	2202      	movs	r2, #2
    626e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                        break;
    6272:	e7e3      	b.n	623c <nrfx_clock_start+0x60>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6274:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6278:	2200      	movs	r2, #0
    627a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    627e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    6282:	2201      	movs	r2, #1
    6284:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6288:	601a      	str	r2, [r3, #0]
}
    628a:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    628c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6290:	2200      	movs	r2, #0
    6292:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    6296:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
    629a:	f44f 7200 	mov.w	r2, #512	; 0x200
    629e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    62a2:	2201      	movs	r2, #1
    62a4:	621a      	str	r2, [r3, #32]
}
    62a6:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    62a8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    62ac:	2200      	movs	r2, #0
    62ae:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    62b2:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
    62b6:	f44f 7280 	mov.w	r2, #256	; 0x100
    62ba:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    62be:	2201      	movs	r2, #1
    62c0:	619a      	str	r2, [r3, #24]
}
    62c2:	4770      	bx	lr
    62c4:	4770      	bx	lr

000062c6 <nrfx_clock_stop>:
{
    62c6:	b508      	push	{r3, lr}
    clock_stop(domain);
    62c8:	f7ff ff07 	bl	60da <clock_stop>
}
    62cc:	bd08      	pop	{r3, pc}

000062ce <nrf_gpiote_event_configure>:
{
    62ce:	b410      	push	{r4}
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    62d0:	f501 71a2 	add.w	r1, r1, #324	; 0x144
    62d4:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    62d8:	f424 344f 	bic.w	r4, r4, #211968	; 0x33c00
    62dc:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    62e0:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    62e4:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    62e8:	0212      	lsls	r2, r2, #8
    62ea:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    62ee:	041b      	lsls	r3, r3, #16
    62f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    62f4:	431a      	orrs	r2, r3
    62f6:	4314      	orrs	r4, r2
    62f8:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
    62fc:	bc10      	pop	{r4}
    62fe:	4770      	bx	lr

00006300 <nrf_gpiote_task_configure>:
{
    6300:	b410      	push	{r4}
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    6302:	f501 71a2 	add.w	r1, r1, #324	; 0x144
    6306:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    630a:	f424 1499 	bic.w	r4, r4, #1253376	; 0x132000
    630e:	f424 54f8 	bic.w	r4, r4, #7936	; 0x1f00
    6312:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6316:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    631a:	0212      	lsls	r2, r2, #8
    631c:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    6320:	041b      	lsls	r3, r3, #16
    6322:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6326:	431a      	orrs	r2, r3
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    6328:	f89d 3004 	ldrb.w	r3, [sp, #4]
    632c:	051b      	lsls	r3, r3, #20
    632e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    6332:	431a      	orrs	r2, r3
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6334:	4314      	orrs	r4, r2
    6336:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
    633a:	bc10      	pop	{r4}
    633c:	4770      	bx	lr

0000633e <nrf_gpio_cfg_sense_set>:
{
    633e:	b500      	push	{lr}
    6340:	b085      	sub	sp, #20
    6342:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    6346:	f10d 030f 	add.w	r3, sp, #15
    634a:	9301      	str	r3, [sp, #4]
    634c:	2100      	movs	r1, #0
    634e:	9100      	str	r1, [sp, #0]
    6350:	460b      	mov	r3, r1
    6352:	460a      	mov	r2, r1
    6354:	f7fc fce2 	bl	2d1c <nrf_gpio_reconfigure>
}
    6358:	b005      	add	sp, #20
    635a:	f85d fb04 	ldr.w	pc, [sp], #4

0000635e <pin_is_task_output>:
{
    635e:	b510      	push	{r4, lr}
    6360:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    6362:	f7fc fd8d 	bl	2e80 <pin_is_output>
    6366:	b128      	cbz	r0, 6374 <pin_is_task_output+0x16>
    6368:	4620      	mov	r0, r4
    636a:	f7fc fd73 	bl	2e54 <pin_in_use_by_te>
    636e:	b118      	cbz	r0, 6378 <pin_is_task_output+0x1a>
    6370:	2001      	movs	r0, #1
    6372:	e000      	b.n	6376 <pin_is_task_output+0x18>
    6374:	2000      	movs	r0, #0
}
    6376:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    6378:	2000      	movs	r0, #0
    637a:	e7fc      	b.n	6376 <pin_is_task_output+0x18>

0000637c <pin_is_input>:
{
    637c:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
    637e:	f7fc fd7f 	bl	2e80 <pin_is_output>
    6382:	f080 0001 	eor.w	r0, r0, #1
}
    6386:	b2c0      	uxtb	r0, r0
    6388:	bd08      	pop	{r3, pc}

0000638a <gpiote_polarity_to_trigger>:
}
    638a:	4770      	bx	lr

0000638c <gpiote_trigger_to_polarity>:
}
    638c:	4770      	bx	lr

0000638e <is_level>:
}
    638e:	2803      	cmp	r0, #3
    6390:	bf94      	ite	ls
    6392:	2000      	movls	r0, #0
    6394:	2001      	movhi	r0, #1
    6396:	4770      	bx	lr

00006398 <latch_pending_read_and_check>:
{
    6398:	b510      	push	{r4, lr}
    639a:	4604      	mov	r4, r0
    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);
    639c:	4602      	mov	r2, r0
    639e:	2102      	movs	r1, #2
    63a0:	2000      	movs	r0, #0
    63a2:	f7fc fd2d 	bl	2e00 <nrf_gpio_latches_read_and_clear>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    63a6:	2300      	movs	r3, #0
    63a8:	2b01      	cmp	r3, #1
    63aa:	d804      	bhi.n	63b6 <latch_pending_read_and_check+0x1e>
        if (latch[port_idx])
    63ac:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    63b0:	b91a      	cbnz	r2, 63ba <latch_pending_read_and_check+0x22>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    63b2:	3301      	adds	r3, #1
    63b4:	e7f8      	b.n	63a8 <latch_pending_read_and_check+0x10>
    return false;
    63b6:	2000      	movs	r0, #0
}
    63b8:	bd10      	pop	{r4, pc}
            return true;
    63ba:	2001      	movs	r0, #1
    63bc:	e7fc      	b.n	63b8 <latch_pending_read_and_check+0x20>

000063be <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    63be:	b160      	cbz	r0, 63da <z_device_is_ready+0x1c>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    63c0:	68c3      	ldr	r3, [r0, #12]
    63c2:	785a      	ldrb	r2, [r3, #1]
    63c4:	f012 0f01 	tst.w	r2, #1
    63c8:	d003      	beq.n	63d2 <z_device_is_ready+0x14>
    63ca:	781b      	ldrb	r3, [r3, #0]
    63cc:	b11b      	cbz	r3, 63d6 <z_device_is_ready+0x18>
    63ce:	2000      	movs	r0, #0
    63d0:	4770      	bx	lr
    63d2:	2000      	movs	r0, #0
    63d4:	4770      	bx	lr
    63d6:	2001      	movs	r0, #1
    63d8:	4770      	bx	lr
		return false;
    63da:	2000      	movs	r0, #0
}
    63dc:	4770      	bx	lr

000063de <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    63de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    63e0:	4605      	mov	r5, r0
    63e2:	460e      	mov	r6, r1
	__asm__ volatile(
    63e4:	f04f 0320 	mov.w	r3, #32
    63e8:	f3ef 8711 	mrs	r7, BASEPRI
    63ec:	f383 8812 	msr	BASEPRI_MAX, r3
    63f0:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    63f4:	f7fe f824 	bl	4440 <z_impl_z_current_get>
    63f8:	4604      	mov	r4, r0

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    63fa:	4631      	mov	r1, r6
    63fc:	4628      	mov	r0, r5
    63fe:	f7ff fd79 	bl	5ef4 <k_sys_fatal_error_handler>
	__asm__ volatile(
    6402:	f387 8811 	msr	BASEPRI, r7
    6406:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    640a:	4620      	mov	r0, r4
    640c:	f7fb f9ee 	bl	17ec <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    6410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00006412 <z_early_memset>:
{
    6412:	b508      	push	{r3, lr}
	(void) memset(dst, c, n);
    6414:	f7ff f8d5 	bl	55c2 <memset>
}
    6418:	bd08      	pop	{r3, pc}

0000641a <z_early_memcpy>:
{
    641a:	b508      	push	{r3, lr}
	(void) memcpy(dst, src, n);
    641c:	f7ff f8a2 	bl	5564 <memcpy>
}
    6420:	bd08      	pop	{r3, pc}

00006422 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    6422:	68c2      	ldr	r2, [r0, #12]
    6424:	6903      	ldr	r3, [r0, #16]
    6426:	431a      	orrs	r2, r3
    6428:	f012 0203 	ands.w	r2, r2, #3
    642c:	d10d      	bne.n	644a <create_free_list+0x28>
	slab->free_list = NULL;
    642e:	2100      	movs	r1, #0
    6430:	6141      	str	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    6432:	e005      	b.n	6440 <create_free_list+0x1e>
		*(char **)p = slab->free_list;
    6434:	6941      	ldr	r1, [r0, #20]
    6436:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
    6438:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
    643a:	68c1      	ldr	r1, [r0, #12]
    643c:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    643e:	3201      	adds	r2, #1
    6440:	6881      	ldr	r1, [r0, #8]
    6442:	4291      	cmp	r1, r2
    6444:	d8f6      	bhi.n	6434 <create_free_list+0x12>
	return 0;
    6446:	2000      	movs	r0, #0
    6448:	4770      	bx	lr
		return -EINVAL;
    644a:	f06f 0015 	mvn.w	r0, #21
}
    644e:	4770      	bx	lr

00006450 <k_mem_slab_init>:
{
    6450:	b510      	push	{r4, lr}
    6452:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
    6454:	6083      	str	r3, [r0, #8]
	slab->block_size = block_size;
    6456:	60c2      	str	r2, [r0, #12]
	slab->buffer = buffer;
    6458:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
    645a:	2300      	movs	r3, #0
    645c:	6183      	str	r3, [r0, #24]
	rc = create_free_list(slab);
    645e:	f7ff ffe0 	bl	6422 <create_free_list>
	if (rc < 0) {
    6462:	2800      	cmp	r0, #0
    6464:	db01      	blt.n	646a <k_mem_slab_init+0x1a>
	list->head = (sys_dnode_t *)list;
    6466:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
    6468:	6064      	str	r4, [r4, #4]
}
    646a:	bd10      	pop	{r4, pc}

0000646c <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    646c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6470:	4604      	mov	r4, r0
    6472:	460d      	mov	r5, r1
	__asm__ volatile(
    6474:	f04f 0320 	mov.w	r3, #32
    6478:	f3ef 8611 	mrs	r6, BASEPRI
    647c:	f383 8812 	msr	BASEPRI_MAX, r3
    6480:	f3bf 8f6f 	isb	sy
    6484:	4637      	mov	r7, r6
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    6486:	6943      	ldr	r3, [r0, #20]
    6488:	b16b      	cbz	r3, 64a6 <k_mem_slab_free+0x3a>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
    648a:	682b      	ldr	r3, [r5, #0]
    648c:	6962      	ldr	r2, [r4, #20]
    648e:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    6490:	682b      	ldr	r3, [r5, #0]
    6492:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    6494:	69a3      	ldr	r3, [r4, #24]
    6496:	3b01      	subs	r3, #1
    6498:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    649a:	f387 8811 	msr	BASEPRI, r7
    649e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    64a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    64a6:	f100 0808 	add.w	r8, r0, #8
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    64aa:	f000 f92e 	bl	670a <z_unpend_first_thread>
		if (pending_thread != NULL) {
    64ae:	2800      	cmp	r0, #0
    64b0:	d0eb      	beq.n	648a <k_mem_slab_free+0x1e>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    64b2:	682a      	ldr	r2, [r5, #0]
    64b4:	2100      	movs	r1, #0
    64b6:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    64ba:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    64bc:	f000 f88e 	bl	65dc <z_ready_thread>
			z_reschedule(&slab->lock, key);
    64c0:	4631      	mov	r1, r6
    64c2:	4640      	mov	r0, r8
    64c4:	f7fd fc8a 	bl	3ddc <z_reschedule>
			return;
    64c8:	e7eb      	b.n	64a2 <k_mem_slab_free+0x36>

000064ca <setup_thread_stack>:
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    64ca:	3207      	adds	r2, #7
    64cc:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
    64d0:	f8c0 1098 	str.w	r1, [r0, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
    64d4:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
    64d8:	2300      	movs	r3, #0
    64da:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
}
    64de:	1888      	adds	r0, r1, r2
    64e0:	4770      	bx	lr

000064e2 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    64e2:	f3ef 8005 	mrs	r0, IPSR
}
    64e6:	3800      	subs	r0, #0
    64e8:	bf18      	it	ne
    64ea:	2001      	movne	r0, #1
    64ec:	4770      	bx	lr

000064ee <z_impl_k_thread_start>:
{
    64ee:	b508      	push	{r3, lr}
	z_sched_start(thread);
    64f0:	f7fd fd9e 	bl	4030 <z_sched_start>
}
    64f4:	bd08      	pop	{r3, pc}

000064f6 <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
    64f6:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
    64f8:	2400      	movs	r4, #0
    64fa:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
    64fc:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    64fe:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
    6500:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
    6502:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
    6504:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
    6506:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
    6508:	bc10      	pop	{r4}
    650a:	4770      	bx	lr

0000650c <z_pm_save_idle_exit>:
{
    650c:	b508      	push	{r3, lr}
	pm_system_resume();
    650e:	f7fa fc4d 	bl	dac <pm_system_resume>
	sys_clock_idle_exit();
    6512:	f7ff fc5f 	bl	5dd4 <sys_clock_idle_exit>
}
    6516:	bd08      	pop	{r3, pc}

00006518 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
    6518:	4288      	cmp	r0, r1
    651a:	da00      	bge.n	651e <new_prio_for_inheritance+0x6>
    651c:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    651e:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
    6522:	db01      	blt.n	6528 <new_prio_for_inheritance+0x10>
    6524:	4608      	mov	r0, r1
    6526:	4770      	bx	lr
    6528:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
    652c:	4770      	bx	lr

0000652e <adjust_owner_prio>:
{
    652e:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
    6530:	6880      	ldr	r0, [r0, #8]
    6532:	f990 300e 	ldrsb.w	r3, [r0, #14]
    6536:	428b      	cmp	r3, r1
    6538:	d101      	bne.n	653e <adjust_owner_prio+0x10>
	return false;
    653a:	2000      	movs	r0, #0
}
    653c:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
    653e:	f7fd fdcd 	bl	40dc <z_set_prio>
    6542:	e7fb      	b.n	653c <adjust_owner_prio+0xe>

00006544 <z_impl_k_mutex_init>:
{
    6544:	4603      	mov	r3, r0
	mutex->owner = NULL;
    6546:	2000      	movs	r0, #0
    6548:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
    654a:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
    654c:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
    654e:	605b      	str	r3, [r3, #4]
}
    6550:	4770      	bx	lr

00006552 <thread_active_elsewhere>:
}
    6552:	2000      	movs	r0, #0
    6554:	4770      	bx	lr

00006556 <pended_on_thread>:
}
    6556:	6880      	ldr	r0, [r0, #8]
    6558:	4770      	bx	lr

0000655a <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
    655a:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    655e:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
    6562:	4283      	cmp	r3, r0
    6564:	d001      	beq.n	656a <z_sched_prio_cmp+0x10>
		return b2 - b1;
    6566:	1ac0      	subs	r0, r0, r3
    6568:	4770      	bx	lr
	return 0;
    656a:	2000      	movs	r0, #0
}
    656c:	4770      	bx	lr

0000656e <z_reschedule_irqlock>:
{
    656e:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    6570:	4603      	mov	r3, r0
    6572:	b928      	cbnz	r0, 6580 <z_reschedule_irqlock+0x12>
    6574:	f3ef 8205 	mrs	r2, IPSR
    6578:	b912      	cbnz	r2, 6580 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
    657a:	f7fa fea7 	bl	12cc <arch_swap>
	return ret;
    657e:	e003      	b.n	6588 <z_reschedule_irqlock+0x1a>
    6580:	f383 8811 	msr	BASEPRI, r3
    6584:	f3bf 8f6f 	isb	sy
}
    6588:	bd08      	pop	{r3, pc}

0000658a <z_reschedule_unlocked>:
{
    658a:	b508      	push	{r3, lr}
	__asm__ volatile(
    658c:	f04f 0320 	mov.w	r3, #32
    6590:	f3ef 8011 	mrs	r0, BASEPRI
    6594:	f383 8812 	msr	BASEPRI_MAX, r3
    6598:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    659c:	f7ff ffe7 	bl	656e <z_reschedule_irqlock>
}
    65a0:	bd08      	pop	{r3, pc}

000065a2 <z_priq_dumb_remove>:
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    65a2:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
    65a4:	680b      	ldr	r3, [r1, #0]

	prev->next = next;
    65a6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    65a8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    65aa:	2300      	movs	r3, #0
    65ac:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
    65ae:	604b      	str	r3, [r1, #4]
}
    65b0:	4770      	bx	lr

000065b2 <unpend_thread_no_timeout>:
{
    65b2:	b510      	push	{r4, lr}
    65b4:	4604      	mov	r4, r0
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    65b6:	f7ff ffce 	bl	6556 <pended_on_thread>
    65ba:	4621      	mov	r1, r4
    65bc:	f7ff fff1 	bl	65a2 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    65c0:	7b63      	ldrb	r3, [r4, #13]
    65c2:	f023 0302 	bic.w	r3, r3, #2
    65c6:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    65c8:	2300      	movs	r3, #0
    65ca:	60a3      	str	r3, [r4, #8]
}
    65cc:	bd10      	pop	{r4, pc}

000065ce <z_priq_dumb_best>:
{
    65ce:	4603      	mov	r3, r0
	return list->head == list;
    65d0:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    65d2:	4283      	cmp	r3, r0
    65d4:	d000      	beq.n	65d8 <z_priq_dumb_best+0xa>
}
    65d6:	4770      	bx	lr
	struct k_thread *thread = NULL;
    65d8:	2000      	movs	r0, #0
	return thread;
    65da:	e7fc      	b.n	65d6 <z_priq_dumb_best+0x8>

000065dc <z_ready_thread>:
{
    65dc:	b538      	push	{r3, r4, r5, lr}
    65de:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    65e0:	2300      	movs	r3, #0
    65e2:	f04f 0220 	mov.w	r2, #32
    65e6:	f3ef 8511 	mrs	r5, BASEPRI
    65ea:	f382 8812 	msr	BASEPRI_MAX, r2
    65ee:	f3bf 8f6f 	isb	sy
    65f2:	e004      	b.n	65fe <z_ready_thread+0x22>
	__asm__ volatile(
    65f4:	f385 8811 	msr	BASEPRI, r5
    65f8:	f3bf 8f6f 	isb	sy
    65fc:	2301      	movs	r3, #1
    65fe:	b943      	cbnz	r3, 6612 <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
    6600:	4620      	mov	r0, r4
    6602:	f7ff ffa6 	bl	6552 <thread_active_elsewhere>
    6606:	2800      	cmp	r0, #0
    6608:	d1f4      	bne.n	65f4 <z_ready_thread+0x18>
			ready_thread(thread);
    660a:	4620      	mov	r0, r4
    660c:	f7fd fcd4 	bl	3fb8 <ready_thread>
    6610:	e7f0      	b.n	65f4 <z_ready_thread+0x18>
}
    6612:	bd38      	pop	{r3, r4, r5, pc}

00006614 <z_thread_timeout>:
{
    6614:	b570      	push	{r4, r5, r6, lr}
    6616:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    6618:	f1a0 0618 	sub.w	r6, r0, #24
	LOCKED(&sched_spinlock) {
    661c:	2300      	movs	r3, #0
	__asm__ volatile(
    661e:	f04f 0220 	mov.w	r2, #32
    6622:	f3ef 8511 	mrs	r5, BASEPRI
    6626:	f382 8812 	msr	BASEPRI_MAX, r2
    662a:	f3bf 8f6f 	isb	sy
    662e:	e011      	b.n	6654 <z_thread_timeout+0x40>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    6630:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    6634:	f023 0204 	bic.w	r2, r3, #4
    6638:	f804 2c0b 	strb.w	r2, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    663c:	f023 0314 	bic.w	r3, r3, #20
    6640:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    6644:	4630      	mov	r0, r6
    6646:	f7fd fcb7 	bl	3fb8 <ready_thread>
	__asm__ volatile(
    664a:	f385 8811 	msr	BASEPRI, r5
    664e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    6652:	2301      	movs	r3, #1
    6654:	b963      	cbnz	r3, 6670 <z_thread_timeout+0x5c>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
    6656:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
    665a:	f013 0f28 	tst.w	r3, #40	; 0x28
    665e:	d1f4      	bne.n	664a <z_thread_timeout+0x36>
			if (thread->base.pended_on != NULL) {
    6660:	f854 3c10 	ldr.w	r3, [r4, #-16]
    6664:	2b00      	cmp	r3, #0
    6666:	d0e3      	beq.n	6630 <z_thread_timeout+0x1c>
				unpend_thread_no_timeout(thread);
    6668:	4630      	mov	r0, r6
    666a:	f7ff ffa2 	bl	65b2 <unpend_thread_no_timeout>
    666e:	e7df      	b.n	6630 <z_thread_timeout+0x1c>
}
    6670:	bd70      	pop	{r4, r5, r6, pc}

00006672 <unpend_all>:
{
    6672:	b538      	push	{r3, r4, r5, lr}
    6674:	4605      	mov	r5, r0
	return list->head == list;
    6676:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6678:	42a5      	cmp	r5, r4
    667a:	d00e      	beq.n	669a <unpend_all+0x28>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    667c:	b16c      	cbz	r4, 669a <unpend_all+0x28>
		unpend_thread_no_timeout(thread);
    667e:	4620      	mov	r0, r4
    6680:	f7ff ff97 	bl	65b2 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    6684:	f104 0018 	add.w	r0, r4, #24
    6688:	f000 f87c 	bl	6784 <z_abort_timeout>
    668c:	2300      	movs	r3, #0
    668e:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
		ready_thread(thread);
    6692:	4620      	mov	r0, r4
    6694:	f7fd fc90 	bl	3fb8 <ready_thread>
    6698:	e7ed      	b.n	6676 <unpend_all+0x4>
}
    669a:	bd38      	pop	{r3, r4, r5, pc}

0000669c <add_to_waitq_locked>:
{
    669c:	b570      	push	{r4, r5, r6, lr}
    669e:	4605      	mov	r5, r0
    66a0:	460e      	mov	r6, r1
	unready_thread(thread);
    66a2:	f7fd fce3 	bl	406c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    66a6:	7b6b      	ldrb	r3, [r5, #13]
    66a8:	f043 0302 	orr.w	r3, r3, #2
    66ac:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
    66ae:	b1fe      	cbz	r6, 66f0 <add_to_waitq_locked+0x54>
		thread->base.pended_on = wait_q;
    66b0:	60ae      	str	r6, [r5, #8]
	return list->head == list;
    66b2:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    66b4:	42a6      	cmp	r6, r4
    66b6:	d108      	bne.n	66ca <add_to_waitq_locked+0x2e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    66b8:	2400      	movs	r4, #0
    66ba:	e006      	b.n	66ca <add_to_waitq_locked+0x2e>
	sys_dnode_t *const prev = successor->prev;
    66bc:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    66be:	606b      	str	r3, [r5, #4]
	node->next = successor;
    66c0:	602c      	str	r4, [r5, #0]
	prev->next = node;
    66c2:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    66c4:	6065      	str	r5, [r4, #4]
}
    66c6:	e013      	b.n	66f0 <add_to_waitq_locked+0x54>
    66c8:	2400      	movs	r4, #0
    66ca:	b164      	cbz	r4, 66e6 <add_to_waitq_locked+0x4a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    66cc:	4621      	mov	r1, r4
    66ce:	4628      	mov	r0, r5
    66d0:	f7ff ff43 	bl	655a <z_sched_prio_cmp>
    66d4:	2800      	cmp	r0, #0
    66d6:	dcf1      	bgt.n	66bc <add_to_waitq_locked+0x20>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    66d8:	2c00      	cmp	r4, #0
    66da:	d0f6      	beq.n	66ca <add_to_waitq_locked+0x2e>
	return (node == list->tail) ? NULL : node->next;
    66dc:	6873      	ldr	r3, [r6, #4]
    66de:	429c      	cmp	r4, r3
    66e0:	d0f2      	beq.n	66c8 <add_to_waitq_locked+0x2c>
    66e2:	6824      	ldr	r4, [r4, #0]
    66e4:	e7f1      	b.n	66ca <add_to_waitq_locked+0x2e>
	sys_dnode_t *const tail = list->tail;
    66e6:	6873      	ldr	r3, [r6, #4]
	node->next = list;
    66e8:	602e      	str	r6, [r5, #0]
	node->prev = tail;
    66ea:	606b      	str	r3, [r5, #4]
	tail->next = node;
    66ec:	601d      	str	r5, [r3, #0]
	list->tail = node;
    66ee:	6075      	str	r5, [r6, #4]
}
    66f0:	bd70      	pop	{r4, r5, r6, pc}

000066f2 <pend_locked>:
{
    66f2:	b570      	push	{r4, r5, r6, lr}
    66f4:	4604      	mov	r4, r0
    66f6:	4616      	mov	r6, r2
    66f8:	461d      	mov	r5, r3
	add_to_waitq_locked(thread, wait_q);
    66fa:	f7ff ffcf 	bl	669c <add_to_waitq_locked>
	add_thread_timeout(thread, timeout);
    66fe:	4632      	mov	r2, r6
    6700:	462b      	mov	r3, r5
    6702:	4620      	mov	r0, r4
    6704:	f7fd fb0c 	bl	3d20 <add_thread_timeout>
}
    6708:	bd70      	pop	{r4, r5, r6, pc}

0000670a <z_unpend_first_thread>:
{
    670a:	b570      	push	{r4, r5, r6, lr}
    670c:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    670e:	2300      	movs	r3, #0
	__asm__ volatile(
    6710:	f04f 0220 	mov.w	r2, #32
    6714:	f3ef 8511 	mrs	r5, BASEPRI
    6718:	f382 8812 	msr	BASEPRI_MAX, r2
    671c:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
    6720:	461c      	mov	r4, r3
    6722:	e004      	b.n	672e <z_unpend_first_thread+0x24>
	__asm__ volatile(
    6724:	f385 8811 	msr	BASEPRI, r5
    6728:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    672c:	2301      	movs	r3, #1
    672e:	b963      	cbnz	r3, 674a <z_unpend_first_thread+0x40>
		thread = _priq_wait_best(&wait_q->waitq);
    6730:	4630      	mov	r0, r6
    6732:	f7ff ff4c 	bl	65ce <z_priq_dumb_best>
		if (thread != NULL) {
    6736:	4604      	mov	r4, r0
    6738:	2800      	cmp	r0, #0
    673a:	d0f3      	beq.n	6724 <z_unpend_first_thread+0x1a>
			unpend_thread_no_timeout(thread);
    673c:	f7ff ff39 	bl	65b2 <unpend_thread_no_timeout>
    6740:	f104 0018 	add.w	r0, r4, #24
    6744:	f000 f81e 	bl	6784 <z_abort_timeout>
    6748:	e7ec      	b.n	6724 <z_unpend_first_thread+0x1a>
}
    674a:	4620      	mov	r0, r4
    674c:	bd70      	pop	{r4, r5, r6, pc}

0000674e <init_ready_q>:
	sys_dlist_init(&rq->runq);
    674e:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
    6750:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
    6752:	6083      	str	r3, [r0, #8]
}
    6754:	4770      	bx	lr

00006756 <remove_timeout>:
{
    6756:	b510      	push	{r4, lr}
    6758:	4604      	mov	r4, r0
	if (next(t) != NULL) {
    675a:	f7fd fed3 	bl	4504 <next>
    675e:	b148      	cbz	r0, 6774 <remove_timeout+0x1e>
    6760:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
    6762:	6903      	ldr	r3, [r0, #16]
    6764:	6941      	ldr	r1, [r0, #20]
    6766:	6920      	ldr	r0, [r4, #16]
    6768:	181b      	adds	r3, r3, r0
    676a:	6960      	ldr	r0, [r4, #20]
    676c:	eb41 0100 	adc.w	r1, r1, r0
    6770:	6113      	str	r3, [r2, #16]
    6772:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
    6774:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    6776:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
    6778:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    677a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    677c:	2300      	movs	r3, #0
    677e:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    6780:	6063      	str	r3, [r4, #4]
}
    6782:	bd10      	pop	{r4, pc}

00006784 <z_abort_timeout>:
{
    6784:	b570      	push	{r4, r5, r6, lr}
    6786:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
    6788:	2300      	movs	r3, #0
	__asm__ volatile(
    678a:	f04f 0220 	mov.w	r2, #32
    678e:	f3ef 8611 	mrs	r6, BASEPRI
    6792:	f382 8812 	msr	BASEPRI_MAX, r2
    6796:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
    679a:	f06f 0015 	mvn.w	r0, #21
    679e:	e004      	b.n	67aa <z_abort_timeout+0x26>
	__asm__ volatile(
    67a0:	f386 8811 	msr	BASEPRI, r6
    67a4:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    67a8:	2301      	movs	r3, #1
    67aa:	461d      	mov	r5, r3
    67ac:	b93b      	cbnz	r3, 67be <z_abort_timeout+0x3a>
	return node->next != NULL;
    67ae:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
    67b0:	2b00      	cmp	r3, #0
    67b2:	d0f5      	beq.n	67a0 <z_abort_timeout+0x1c>
			remove_timeout(to);
    67b4:	4620      	mov	r0, r4
    67b6:	f7ff ffce 	bl	6756 <remove_timeout>
			ret = 0;
    67ba:	4628      	mov	r0, r5
    67bc:	e7f0      	b.n	67a0 <z_abort_timeout+0x1c>
}
    67be:	bd70      	pop	{r4, r5, r6, pc}

000067c0 <z_get_next_timeout_expiry>:
{
    67c0:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
    67c2:	2300      	movs	r3, #0
	__asm__ volatile(
    67c4:	f04f 0220 	mov.w	r2, #32
    67c8:	f3ef 8411 	mrs	r4, BASEPRI
    67cc:	f382 8812 	msr	BASEPRI_MAX, r2
    67d0:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
    67d4:	f04f 30ff 	mov.w	r0, #4294967295
    67d8:	e006      	b.n	67e8 <z_get_next_timeout_expiry+0x28>
		ret = next_timeout();
    67da:	f7fd feab 	bl	4534 <next_timeout>
	__asm__ volatile(
    67de:	f384 8811 	msr	BASEPRI, r4
    67e2:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    67e6:	2301      	movs	r3, #1
    67e8:	2b00      	cmp	r3, #0
    67ea:	d0f6      	beq.n	67da <z_get_next_timeout_expiry+0x1a>
}
    67ec:	bd10      	pop	{r4, pc}

000067ee <z_set_timeout_expiry>:
{
    67ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    67f0:	4606      	mov	r6, r0
    67f2:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
    67f4:	2300      	movs	r3, #0
	__asm__ volatile(
    67f6:	f04f 0220 	mov.w	r2, #32
    67fa:	f3ef 8511 	mrs	r5, BASEPRI
    67fe:	f382 8812 	msr	BASEPRI_MAX, r2
    6802:	f3bf 8f6f 	isb	sy
    6806:	e00a      	b.n	681e <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
    6808:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
    680a:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    680e:	2801      	cmp	r0, #1
    6810:	dd00      	ble.n	6814 <z_set_timeout_expiry+0x26>
    6812:	b97c      	cbnz	r4, 6834 <z_set_timeout_expiry+0x46>
	__asm__ volatile(
    6814:	f385 8811 	msr	BASEPRI, r5
    6818:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    681c:	2301      	movs	r3, #1
    681e:	461c      	mov	r4, r3
    6820:	b97b      	cbnz	r3, 6842 <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
    6822:	f7fd fe87 	bl	4534 <next_timeout>
			      || (ticks <= next_to);
    6826:	f1b0 3fff 	cmp.w	r0, #4294967295
    682a:	d0ed      	beq.n	6808 <z_set_timeout_expiry+0x1a>
    682c:	42b0      	cmp	r0, r6
    682e:	dbec      	blt.n	680a <z_set_timeout_expiry+0x1c>
    6830:	2401      	movs	r4, #1
    6832:	e7ea      	b.n	680a <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    6834:	4639      	mov	r1, r7
    6836:	42b0      	cmp	r0, r6
    6838:	bfa8      	it	ge
    683a:	4630      	movge	r0, r6
    683c:	f7fb ff3e 	bl	26bc <sys_clock_set_timeout>
    6840:	e7e8      	b.n	6814 <z_set_timeout_expiry+0x26>
}
    6842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00006844 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    6844:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    6846:	f7fd ff87 	bl	4758 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    684a:	bd08      	pop	{r3, pc}

0000684c <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    684c:	b900      	cbnz	r0, 6850 <z_impl_k_busy_wait+0x4>
    684e:	4770      	bx	lr
{
    6850:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    6852:	f7fe fd58 	bl	5306 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    6856:	bd08      	pop	{r3, pc}

00006858 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    6858:	4770      	bx	lr
	...
